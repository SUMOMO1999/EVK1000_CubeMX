
EVK1000_CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017480  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  08017668  08017668  00027668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018230  08018230  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  08018230  08018230  00028230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018238  08018238  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018238  08018238  00028238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801823c  0801823c  0002823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08018240  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a434  200002f8  08018538  000302f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a72c  08018538  0003a72c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 12 .debug_line   00019b29  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000260a6  00000000  00000000  00049e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f42  00000000  00000000  0006fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00074e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00068168  00000000  00000000  00076268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013e8  00000000  00000000  000de3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000167fc  00000000  00000000  000df7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5fb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f8  00000000  00000000  000f6008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000fc800  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000fc8cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200002f8 	.word	0x200002f8
 8000204:	00000000 	.word	0x00000000
 8000208:	08017650 	.word	0x08017650

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200002fc 	.word	0x200002fc
 8000224:	08017650 	.word	0x08017650

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_uldivmod>:
 8000e5c:	b953      	cbnz	r3, 8000e74 <__aeabi_uldivmod+0x18>
 8000e5e:	b94a      	cbnz	r2, 8000e74 <__aeabi_uldivmod+0x18>
 8000e60:	2900      	cmp	r1, #0
 8000e62:	bf08      	it	eq
 8000e64:	2800      	cmpeq	r0, #0
 8000e66:	bf1c      	itt	ne
 8000e68:	f04f 31ff 	movne.w	r1, #4294967295
 8000e6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e70:	f000 b9a6 	b.w	80011c0 <__aeabi_idiv0>
 8000e74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e7c:	f000 f83e 	bl	8000efc <__udivmoddi4>
 8000e80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e88:	b004      	add	sp, #16
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_d2lz>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4605      	mov	r5, r0
 8000e92:	4621      	mov	r1, r4
 8000e94:	4628      	mov	r0, r5
 8000e96:	2200      	movs	r2, #0
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f7ff fdfb 	bl	8000a94 <__aeabi_dcmplt>
 8000e9e:	b928      	cbnz	r0, 8000eac <__aeabi_d2lz+0x20>
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ea8:	f000 b80a 	b.w	8000ec0 <__aeabi_d2ulz>
 8000eac:	4628      	mov	r0, r5
 8000eae:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000eb2:	f000 f805 	bl	8000ec0 <__aeabi_d2ulz>
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ebc:	bd38      	pop	{r3, r4, r5, pc}
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_d2ulz>:
 8000ec0:	b5d0      	push	{r4, r6, r7, lr}
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <__aeabi_d2ulz+0x34>)
 8000ec6:	4606      	mov	r6, r0
 8000ec8:	460f      	mov	r7, r1
 8000eca:	f7ff fb71 	bl	80005b0 <__aeabi_dmul>
 8000ece:	f7ff fe47 	bl	8000b60 <__aeabi_d2uiz>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	f7ff faf2 	bl	80004bc <__aeabi_ui2d>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <__aeabi_d2ulz+0x38>)
 8000edc:	f7ff fb68 	bl	80005b0 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	4639      	mov	r1, r7
 8000ee8:	f7ff f9aa 	bl	8000240 <__aeabi_dsub>
 8000eec:	f7ff fe38 	bl	8000b60 <__aeabi_d2uiz>
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ef4:	3df00000 	.word	0x3df00000
 8000ef8:	41f00000 	.word	0x41f00000

08000efc <__udivmoddi4>:
 8000efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f00:	9e08      	ldr	r6, [sp, #32]
 8000f02:	460d      	mov	r5, r1
 8000f04:	4604      	mov	r4, r0
 8000f06:	468e      	mov	lr, r1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 8083 	bne.w	8001014 <__udivmoddi4+0x118>
 8000f0e:	428a      	cmp	r2, r1
 8000f10:	4617      	mov	r7, r2
 8000f12:	d947      	bls.n	8000fa4 <__udivmoddi4+0xa8>
 8000f14:	fab2 f382 	clz	r3, r2
 8000f18:	b14b      	cbz	r3, 8000f2e <__udivmoddi4+0x32>
 8000f1a:	f1c3 0120 	rsb	r1, r3, #32
 8000f1e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000f22:	fa20 f101 	lsr.w	r1, r0, r1
 8000f26:	409f      	lsls	r7, r3
 8000f28:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f2c:	409c      	lsls	r4, r3
 8000f2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f32:	fbbe fcf8 	udiv	ip, lr, r8
 8000f36:	fa1f f987 	uxth.w	r9, r7
 8000f3a:	fb08 e21c 	mls	r2, r8, ip, lr
 8000f3e:	fb0c f009 	mul.w	r0, ip, r9
 8000f42:	0c21      	lsrs	r1, r4, #16
 8000f44:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000f48:	4290      	cmp	r0, r2
 8000f4a:	d90a      	bls.n	8000f62 <__udivmoddi4+0x66>
 8000f4c:	18ba      	adds	r2, r7, r2
 8000f4e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000f52:	f080 8118 	bcs.w	8001186 <__udivmoddi4+0x28a>
 8000f56:	4290      	cmp	r0, r2
 8000f58:	f240 8115 	bls.w	8001186 <__udivmoddi4+0x28a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	443a      	add	r2, r7
 8000f62:	1a12      	subs	r2, r2, r0
 8000f64:	fbb2 f0f8 	udiv	r0, r2, r8
 8000f68:	fb08 2210 	mls	r2, r8, r0, r2
 8000f6c:	fb00 f109 	mul.w	r1, r0, r9
 8000f70:	b2a4      	uxth	r4, r4
 8000f72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	d909      	bls.n	8000f8e <__udivmoddi4+0x92>
 8000f7a:	193c      	adds	r4, r7, r4
 8000f7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f80:	f080 8103 	bcs.w	800118a <__udivmoddi4+0x28e>
 8000f84:	42a1      	cmp	r1, r4
 8000f86:	f240 8100 	bls.w	800118a <__udivmoddi4+0x28e>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	1a64      	subs	r4, r4, r1
 8000f90:	2100      	movs	r1, #0
 8000f92:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f96:	b11e      	cbz	r6, 8000fa0 <__udivmoddi4+0xa4>
 8000f98:	2200      	movs	r2, #0
 8000f9a:	40dc      	lsrs	r4, r3
 8000f9c:	e9c6 4200 	strd	r4, r2, [r6]
 8000fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa4:	b902      	cbnz	r2, 8000fa8 <__udivmoddi4+0xac>
 8000fa6:	deff      	udf	#255	; 0xff
 8000fa8:	fab2 f382 	clz	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d14f      	bne.n	8001050 <__udivmoddi4+0x154>
 8000fb0:	1a8d      	subs	r5, r1, r2
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000fb8:	fa1f f882 	uxth.w	r8, r2
 8000fbc:	fbb5 fcfe 	udiv	ip, r5, lr
 8000fc0:	fb0e 551c 	mls	r5, lr, ip, r5
 8000fc4:	fb08 f00c 	mul.w	r0, r8, ip
 8000fc8:	0c22      	lsrs	r2, r4, #16
 8000fca:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000fce:	42a8      	cmp	r0, r5
 8000fd0:	d907      	bls.n	8000fe2 <__udivmoddi4+0xe6>
 8000fd2:	197d      	adds	r5, r7, r5
 8000fd4:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000fd8:	d202      	bcs.n	8000fe0 <__udivmoddi4+0xe4>
 8000fda:	42a8      	cmp	r0, r5
 8000fdc:	f200 80e9 	bhi.w	80011b2 <__udivmoddi4+0x2b6>
 8000fe0:	4694      	mov	ip, r2
 8000fe2:	1a2d      	subs	r5, r5, r0
 8000fe4:	fbb5 f0fe 	udiv	r0, r5, lr
 8000fe8:	fb0e 5510 	mls	r5, lr, r0, r5
 8000fec:	fb08 f800 	mul.w	r8, r8, r0
 8000ff0:	b2a4      	uxth	r4, r4
 8000ff2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ff6:	45a0      	cmp	r8, r4
 8000ff8:	d907      	bls.n	800100a <__udivmoddi4+0x10e>
 8000ffa:	193c      	adds	r4, r7, r4
 8000ffc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001000:	d202      	bcs.n	8001008 <__udivmoddi4+0x10c>
 8001002:	45a0      	cmp	r8, r4
 8001004:	f200 80d9 	bhi.w	80011ba <__udivmoddi4+0x2be>
 8001008:	4610      	mov	r0, r2
 800100a:	eba4 0408 	sub.w	r4, r4, r8
 800100e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001012:	e7c0      	b.n	8000f96 <__udivmoddi4+0x9a>
 8001014:	428b      	cmp	r3, r1
 8001016:	d908      	bls.n	800102a <__udivmoddi4+0x12e>
 8001018:	2e00      	cmp	r6, #0
 800101a:	f000 80b1 	beq.w	8001180 <__udivmoddi4+0x284>
 800101e:	2100      	movs	r1, #0
 8001020:	e9c6 0500 	strd	r0, r5, [r6]
 8001024:	4608      	mov	r0, r1
 8001026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102a:	fab3 f183 	clz	r1, r3
 800102e:	2900      	cmp	r1, #0
 8001030:	d14b      	bne.n	80010ca <__udivmoddi4+0x1ce>
 8001032:	42ab      	cmp	r3, r5
 8001034:	d302      	bcc.n	800103c <__udivmoddi4+0x140>
 8001036:	4282      	cmp	r2, r0
 8001038:	f200 80b9 	bhi.w	80011ae <__udivmoddi4+0x2b2>
 800103c:	1a84      	subs	r4, r0, r2
 800103e:	eb65 0303 	sbc.w	r3, r5, r3
 8001042:	2001      	movs	r0, #1
 8001044:	469e      	mov	lr, r3
 8001046:	2e00      	cmp	r6, #0
 8001048:	d0aa      	beq.n	8000fa0 <__udivmoddi4+0xa4>
 800104a:	e9c6 4e00 	strd	r4, lr, [r6]
 800104e:	e7a7      	b.n	8000fa0 <__udivmoddi4+0xa4>
 8001050:	409f      	lsls	r7, r3
 8001052:	f1c3 0220 	rsb	r2, r3, #32
 8001056:	40d1      	lsrs	r1, r2
 8001058:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800105c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001060:	fa1f f887 	uxth.w	r8, r7
 8001064:	fb0e 1110 	mls	r1, lr, r0, r1
 8001068:	fa24 f202 	lsr.w	r2, r4, r2
 800106c:	409d      	lsls	r5, r3
 800106e:	fb00 fc08 	mul.w	ip, r0, r8
 8001072:	432a      	orrs	r2, r5
 8001074:	0c15      	lsrs	r5, r2, #16
 8001076:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800107a:	45ac      	cmp	ip, r5
 800107c:	fa04 f403 	lsl.w	r4, r4, r3
 8001080:	d909      	bls.n	8001096 <__udivmoddi4+0x19a>
 8001082:	197d      	adds	r5, r7, r5
 8001084:	f100 31ff 	add.w	r1, r0, #4294967295
 8001088:	f080 808f 	bcs.w	80011aa <__udivmoddi4+0x2ae>
 800108c:	45ac      	cmp	ip, r5
 800108e:	f240 808c 	bls.w	80011aa <__udivmoddi4+0x2ae>
 8001092:	3802      	subs	r0, #2
 8001094:	443d      	add	r5, r7
 8001096:	eba5 050c 	sub.w	r5, r5, ip
 800109a:	fbb5 f1fe 	udiv	r1, r5, lr
 800109e:	fb0e 5c11 	mls	ip, lr, r1, r5
 80010a2:	fb01 f908 	mul.w	r9, r1, r8
 80010a6:	b295      	uxth	r5, r2
 80010a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80010ac:	45a9      	cmp	r9, r5
 80010ae:	d907      	bls.n	80010c0 <__udivmoddi4+0x1c4>
 80010b0:	197d      	adds	r5, r7, r5
 80010b2:	f101 32ff 	add.w	r2, r1, #4294967295
 80010b6:	d274      	bcs.n	80011a2 <__udivmoddi4+0x2a6>
 80010b8:	45a9      	cmp	r9, r5
 80010ba:	d972      	bls.n	80011a2 <__udivmoddi4+0x2a6>
 80010bc:	3902      	subs	r1, #2
 80010be:	443d      	add	r5, r7
 80010c0:	eba5 0509 	sub.w	r5, r5, r9
 80010c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c8:	e778      	b.n	8000fbc <__udivmoddi4+0xc0>
 80010ca:	f1c1 0720 	rsb	r7, r1, #32
 80010ce:	408b      	lsls	r3, r1
 80010d0:	fa22 fc07 	lsr.w	ip, r2, r7
 80010d4:	ea4c 0c03 	orr.w	ip, ip, r3
 80010d8:	fa25 f407 	lsr.w	r4, r5, r7
 80010dc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010e0:	fbb4 f9fe 	udiv	r9, r4, lr
 80010e4:	fa1f f88c 	uxth.w	r8, ip
 80010e8:	fb0e 4419 	mls	r4, lr, r9, r4
 80010ec:	fa20 f307 	lsr.w	r3, r0, r7
 80010f0:	fb09 fa08 	mul.w	sl, r9, r8
 80010f4:	408d      	lsls	r5, r1
 80010f6:	431d      	orrs	r5, r3
 80010f8:	0c2b      	lsrs	r3, r5, #16
 80010fa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80010fe:	45a2      	cmp	sl, r4
 8001100:	fa02 f201 	lsl.w	r2, r2, r1
 8001104:	fa00 f301 	lsl.w	r3, r0, r1
 8001108:	d909      	bls.n	800111e <__udivmoddi4+0x222>
 800110a:	eb1c 0404 	adds.w	r4, ip, r4
 800110e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001112:	d248      	bcs.n	80011a6 <__udivmoddi4+0x2aa>
 8001114:	45a2      	cmp	sl, r4
 8001116:	d946      	bls.n	80011a6 <__udivmoddi4+0x2aa>
 8001118:	f1a9 0902 	sub.w	r9, r9, #2
 800111c:	4464      	add	r4, ip
 800111e:	eba4 040a 	sub.w	r4, r4, sl
 8001122:	fbb4 f0fe 	udiv	r0, r4, lr
 8001126:	fb0e 4410 	mls	r4, lr, r0, r4
 800112a:	fb00 fa08 	mul.w	sl, r0, r8
 800112e:	b2ad      	uxth	r5, r5
 8001130:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001134:	45a2      	cmp	sl, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x24e>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001140:	d22d      	bcs.n	800119e <__udivmoddi4+0x2a2>
 8001142:	45a2      	cmp	sl, r4
 8001144:	d92b      	bls.n	800119e <__udivmoddi4+0x2a2>
 8001146:	3802      	subs	r0, #2
 8001148:	4464      	add	r4, ip
 800114a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800114e:	fba0 8902 	umull	r8, r9, r0, r2
 8001152:	eba4 040a 	sub.w	r4, r4, sl
 8001156:	454c      	cmp	r4, r9
 8001158:	46c6      	mov	lr, r8
 800115a:	464d      	mov	r5, r9
 800115c:	d319      	bcc.n	8001192 <__udivmoddi4+0x296>
 800115e:	d016      	beq.n	800118e <__udivmoddi4+0x292>
 8001160:	b15e      	cbz	r6, 800117a <__udivmoddi4+0x27e>
 8001162:	ebb3 020e 	subs.w	r2, r3, lr
 8001166:	eb64 0405 	sbc.w	r4, r4, r5
 800116a:	fa04 f707 	lsl.w	r7, r4, r7
 800116e:	fa22 f301 	lsr.w	r3, r2, r1
 8001172:	431f      	orrs	r7, r3
 8001174:	40cc      	lsrs	r4, r1
 8001176:	e9c6 7400 	strd	r7, r4, [r6]
 800117a:	2100      	movs	r1, #0
 800117c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001180:	4631      	mov	r1, r6
 8001182:	4630      	mov	r0, r6
 8001184:	e70c      	b.n	8000fa0 <__udivmoddi4+0xa4>
 8001186:	468c      	mov	ip, r1
 8001188:	e6eb      	b.n	8000f62 <__udivmoddi4+0x66>
 800118a:	4610      	mov	r0, r2
 800118c:	e6ff      	b.n	8000f8e <__udivmoddi4+0x92>
 800118e:	4543      	cmp	r3, r8
 8001190:	d2e6      	bcs.n	8001160 <__udivmoddi4+0x264>
 8001192:	ebb8 0e02 	subs.w	lr, r8, r2
 8001196:	eb69 050c 	sbc.w	r5, r9, ip
 800119a:	3801      	subs	r0, #1
 800119c:	e7e0      	b.n	8001160 <__udivmoddi4+0x264>
 800119e:	4628      	mov	r0, r5
 80011a0:	e7d3      	b.n	800114a <__udivmoddi4+0x24e>
 80011a2:	4611      	mov	r1, r2
 80011a4:	e78c      	b.n	80010c0 <__udivmoddi4+0x1c4>
 80011a6:	4681      	mov	r9, r0
 80011a8:	e7b9      	b.n	800111e <__udivmoddi4+0x222>
 80011aa:	4608      	mov	r0, r1
 80011ac:	e773      	b.n	8001096 <__udivmoddi4+0x19a>
 80011ae:	4608      	mov	r0, r1
 80011b0:	e749      	b.n	8001046 <__udivmoddi4+0x14a>
 80011b2:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b6:	443d      	add	r5, r7
 80011b8:	e713      	b.n	8000fe2 <__udivmoddi4+0xe6>
 80011ba:	3802      	subs	r0, #2
 80011bc:	443c      	add	r4, r7
 80011be:	e724      	b.n	800100a <__udivmoddi4+0x10e>

080011c0 <__aeabi_idiv0>:
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011c6:	e003      	b.n	80011d0 <LoopCopyDataInit>

080011c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <LoopFillZerobss+0x14>)
	ldr	r3, [r3, r1]
 80011ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ce:	3104      	adds	r1, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <LoopFillZerobss+0x18>)
	ldr	r3, =_edata
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <LoopFillZerobss+0x1c>)
	adds	r2, r0, r1
 80011d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011d8:	d3f6      	bcc.n	80011c8 <CopyDataInit>
	ldr	r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <LoopFillZerobss+0x20>)
	b	LoopFillZerobss
 80011dc:	e002      	b.n	80011e4 <LoopFillZerobss>

080011de <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011e0:	f842 3b04 	str.w	r3, [r2], #4

080011e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <LoopFillZerobss+0x24>)
	cmp	r2, r3
 80011e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011e8:	d3f9      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
  	bl  SystemInit
 80011ea:	f000 f811 	bl	8001210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f011 fee1 	bl	8012fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f004 fae2 	bl	80057ba <main>
	bx	lr
 80011f6:	4770      	bx	lr
	ldr	r3, =_sidata
 80011f8:	08018240 	.word	0x08018240
	ldr	r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001200:	200002f8 	.word	0x200002f8
	ldr	r2, =_sbss
 8001204:	200002f8 	.word	0x200002f8
	ldr	r3, = _ebss
 8001208:	2000a72c 	.word	0x2000a72c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>
	...

08001210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <SystemInit+0x70>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <SystemInit+0x70>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <SystemInit+0x70>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <SystemInit+0x70>)
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <SystemInit+0x74>)
 8001228:	4013      	ands	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <SystemInit+0x70>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a13      	ldr	r2, [pc, #76]	; (8001280 <SystemInit+0x70>)
 8001232:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <SystemInit+0x70>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <SystemInit+0x70>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <SystemInit+0x70>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <SystemInit+0x70>)
 800124e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001252:	6053      	str	r3, [r2, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <SystemInit+0x70>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <SystemInit+0x70>)
 800125a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800125e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <SystemInit+0x70>)
 8001262:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001266:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SystemInit+0x70>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800126e:	f000 f80d 	bl	800128c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SystemInit+0x78>)
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	609a      	str	r2, [r3, #8]
#endif 
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	f0ff0000 	.word	0xf0ff0000
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001290:	f000 f802 	bl	8001298 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <SetSysClockTo72+0x12c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <SetSysClockTo72+0x12c>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <SetSysClockTo72+0x12c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <SetSysClockTo72+0x38>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012ce:	d1f0      	bne.n	80012b2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <SetSysClockTo72+0x12c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012dc:	2301      	movs	r3, #1
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	e001      	b.n	80012e6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d166      	bne.n	80013ba <SetSysClockTo72+0x122>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <SetSysClockTo72+0x130>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a35      	ldr	r2, [pc, #212]	; (80013c8 <SetSysClockTo72+0x130>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <SetSysClockTo72+0x130>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <SetSysClockTo72+0x130>)
 80012fe:	f023 0303 	bic.w	r3, r3, #3
 8001302:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <SetSysClockTo72+0x130>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <SetSysClockTo72+0x130>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <SetSysClockTo72+0x12c>)
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <SetSysClockTo72+0x12c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	6053      	str	r3, [r2, #4]
#ifdef STM32F10X_CL
    /* Configure PLLs ------------------------------------------------------*/
    /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
        
    RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <SetSysClockTo72+0x12c>)
 800132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001330:	4924      	ldr	r1, [pc, #144]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <SetSysClockTo72+0x134>)
 8001334:	4013      	ands	r3, r2
 8001336:	62cb      	str	r3, [r1, #44]	; 0x2c
                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
    RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <SetSysClockTo72+0x12c>)
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <SetSysClockTo72+0x12c>)
 800133e:	f443 3383 	orr.w	r3, r3, #67072	; 0x10600
 8001342:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8001346:	62d3      	str	r3, [r2, #44]	; 0x2c
                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
  
    /* Enable PLL2 */
    RCC->CR |= RCC_CR_PLL2ON;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <SetSysClockTo72+0x12c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <SetSysClockTo72+0x12c>)
 800134e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001352:	6013      	str	r3, [r2, #0]
    /* Wait till PLL2 is ready */
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 8001354:	bf00      	nop
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f9      	beq.n	8001356 <SetSysClockTo72+0xbe>
    {
    }
    
   
    /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001368:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800136c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001374:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001378:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <SetSysClockTo72+0x12c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001384:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001386:	bf00      	nop
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <SetSysClockTo72+0x12c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f9      	beq.n	8001388 <SetSysClockTo72+0xf0>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SetSysClockTo72+0x12c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SetSysClockTo72+0x12c>)
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SetSysClockTo72+0x12c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <SetSysClockTo72+0x12c>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80013ac:	bf00      	nop
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SetSysClockTo72+0x12c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d1f9      	bne.n	80013ae <SetSysClockTo72+0x116>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40022000 	.word	0x40022000
 80013cc:	fffef000 	.word	0xfffef000

080013d0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <NVIC_PriorityGroupConfig+0x20>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60d3      	str	r3, [r2, #12]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	230f      	movs	r3, #15
 8001406:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	78db      	ldrb	r3, [r3, #3]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d03a      	beq.n	8001486 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <NVIC_Init+0xbc>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f1c3 0304 	rsb	r3, r3, #4
 8001424:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	461a      	mov	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	789b      	ldrb	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	4313      	orrs	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <NVIC_Init+0xc0>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	6979      	ldr	r1, [r7, #20]
 800145c:	b2c9      	uxtb	r1, r1
 800145e:	4413      	add	r3, r2
 8001460:	460a      	mov	r2, r1
 8001462:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800146e:	4911      	ldr	r1, [pc, #68]	; (80014b4 <NVIC_Init+0xc0>)
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	0952      	lsrs	r2, r2, #5
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800147a:	2201      	movs	r2, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001480:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001484:	e00f      	b.n	80014a6 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800148e:	4909      	ldr	r1, [pc, #36]	; (80014b4 <NVIC_Init+0xc0>)
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	7812      	ldrb	r2, [r2, #0]
 8001494:	0952      	lsrs	r2, r2, #5
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800149a:	2201      	movs	r2, #1
 800149c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800149e:	f100 0320 	add.w	r3, r0, #32
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <EXTI_Init+0xe0>)
 80014c6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	799b      	ldrb	r3, [r3, #6]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d04f      	beq.n	8001570 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <EXTI_Init+0xe0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	43db      	mvns	r3, r3
 80014da:	492f      	ldr	r1, [pc, #188]	; (8001598 <EXTI_Init+0xe0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <EXTI_Init+0xe0>)
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	492b      	ldr	r1, [pc, #172]	; (8001598 <EXTI_Init+0xe0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	461a      	mov	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <EXTI_Init+0xe0>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	43db      	mvns	r3, r3
 8001514:	4920      	ldr	r1, [pc, #128]	; (8001598 <EXTI_Init+0xe0>)
 8001516:	4013      	ands	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <EXTI_Init+0xe0>)
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	43db      	mvns	r3, r3
 8001524:	491c      	ldr	r1, [pc, #112]	; (8001598 <EXTI_Init+0xe0>)
 8001526:	4013      	ands	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	795b      	ldrb	r3, [r3, #5]
 800152e:	2b10      	cmp	r3, #16
 8001530:	d10e      	bne.n	8001550 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <EXTI_Init+0xe0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4917      	ldr	r1, [pc, #92]	; (8001598 <EXTI_Init+0xe0>)
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <EXTI_Init+0xe0>)
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4913      	ldr	r1, [pc, #76]	; (8001598 <EXTI_Init+0xe0>)
 800154a:	4313      	orrs	r3, r2
 800154c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800154e:	e01d      	b.n	800158c <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <EXTI_Init+0xe0>)
 8001552:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	795b      	ldrb	r3, [r3, #5]
 8001558:	461a      	mov	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
}
 800156e:	e00d      	b.n	800158c <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	43da      	mvns	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	400a      	ands	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40010400 	.word	0x40010400

0800159c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <EXTI_ClearITPendingBit+0x18>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6153      	str	r3, [r2, #20]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40010400 	.word	0x40010400

080015b8 <FLASH_SetLatency>:
  *     @arg FLASH_Latency_1: FLASH One Latency cycle
  *     @arg FLASH_Latency_2: FLASH Two Latency cycles
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <FLASH_SetLatency+0x34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015d0:	60fb      	str	r3, [r7, #12]
  tmpreg |= FLASH_Latency;
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <FLASH_SetLatency+0x34>)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000

080015f0 <FLASH_PrefetchBufferCmd>:
  *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
  *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
  * @retval None
  */
void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <FLASH_PrefetchBufferCmd+0x2c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <FLASH_PrefetchBufferCmd+0x2c>)
 80015fe:	f023 0310 	bic.w	r3, r3, #16
 8001602:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <FLASH_PrefetchBufferCmd+0x2c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <FLASH_PrefetchBufferCmd+0x2c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000

08001620 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	78db      	ldrb	r3, [r3, #3]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	461a      	mov	r2, r3
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4313      	orrs	r3, r2
 8001662:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	e038      	b.n	80016ec <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800167a:	2201      	movs	r2, #1
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d126      	bne.n	80016e6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800169e:	220f      	movs	r2, #15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4013      	ands	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	78db      	ldrb	r3, [r3, #3]
 80016c4:	2b28      	cmp	r3, #40	; 0x28
 80016c6:	d105      	bne.n	80016d4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80016c8:	2201      	movs	r2, #1
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	409a      	lsls	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	e008      	b.n	80016e6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b48      	cmp	r3, #72	; 0x48
 80016da:	d104      	bne.n	80016e6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016dc:	2201      	movs	r2, #1
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d9c3      	bls.n	800167a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d946      	bls.n	800178e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	e03a      	b.n	8001782 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	3308      	adds	r3, #8
 8001710:	2201      	movs	r2, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d127      	bne.n	800177c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001732:	220f      	movs	r2, #15
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	43db      	mvns	r3, r3
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4013      	ands	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	78db      	ldrb	r3, [r3, #3]
 8001758:	2b28      	cmp	r3, #40	; 0x28
 800175a:	d105      	bne.n	8001768 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3308      	adds	r3, #8
 8001760:	2201      	movs	r2, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	78db      	ldrb	r3, [r3, #3]
 800176c:	2b48      	cmp	r3, #72	; 0x48
 800176e:	d105      	bne.n	800177c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	3308      	adds	r3, #8
 8001774:	2201      	movs	r2, #1
 8001776:	409a      	lsls	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	3301      	adds	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b07      	cmp	r3, #7
 8001786:	d9c1      	bls.n	800170c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	605a      	str	r2, [r3, #4]
  }
}
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e001      	b.n	80017be <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	615a      	str	r2, [r3, #20]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da03      	bge.n	800182e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <GPIO_PinRemapConfig+0xdc>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e002      	b.n	8001834 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <GPIO_PinRemapConfig+0xdc>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	b29b      	uxth	r3, r3
 8001842:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800184a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800184e:	d10a      	bne.n	8001866 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001856:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <GPIO_PinRemapConfig+0xdc>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <GPIO_PinRemapConfig+0xdc>)
 800185e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001862:	6053      	str	r3, [r2, #4]
 8001864:	e021      	b.n	80018aa <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00e      	beq.n	800188e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001870:	2203      	movs	r2, #3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e00d      	b.n	80018aa <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0d5b      	lsrs	r3, r3, #21
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4013      	ands	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80018a8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0d5b      	lsrs	r3, r3, #21
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da03      	bge.n	80018d0 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 80018c8:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <GPIO_PinRemapConfig+0xdc>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 80018ce:	e002      	b.n	80018d6 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <GPIO_PinRemapConfig+0xdc>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	6053      	str	r3, [r2, #4]
}
 80018d6:	bf00      	nop
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	40010000 	.word	0x40010000

080018e4 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	460a      	mov	r2, r1
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <GPIO_EXTILineConfig+0x7c>)
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3302      	adds	r3, #2
 8001912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	4811      	ldr	r0, [pc, #68]	; (8001960 <GPIO_EXTILineConfig+0x7c>)
 800191c:	79b9      	ldrb	r1, [r7, #6]
 800191e:	0889      	lsrs	r1, r1, #2
 8001920:	b2c9      	uxtb	r1, r1
 8001922:	401a      	ands	r2, r3
 8001924:	1c8b      	adds	r3, r1, #2
 8001926:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800192a:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <GPIO_EXTILineConfig+0x7c>)
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3302      	adds	r3, #2
 8001934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001938:	79f9      	ldrb	r1, [r7, #7]
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <GPIO_EXTILineConfig+0x7c>)
 8001948:	79b9      	ldrb	r1, [r7, #6]
 800194a:	0889      	lsrs	r1, r1, #2
 800194c:	b2c9      	uxtb	r1, r1
 800194e:	431a      	orrs	r2, r3
 8001950:	1c8b      	adds	r3, r1, #2
 8001952:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40010000 	.word	0x40010000

08001964 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <RCC_DeInit+0x68>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <RCC_DeInit+0x68>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <RCC_DeInit+0x68>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4914      	ldr	r1, [pc, #80]	; (80019cc <RCC_DeInit+0x68>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <RCC_DeInit+0x6c>)
 800197c:	4013      	ands	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <RCC_DeInit+0x68>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <RCC_DeInit+0x68>)
 8001986:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <RCC_DeInit+0x68>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <RCC_DeInit+0x68>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <RCC_DeInit+0x68>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <RCC_DeInit+0x68>)
 80019a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019a6:	6053      	str	r3, [r2, #4]

#ifdef STM32F10X_CL
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <RCC_DeInit+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <RCC_DeInit+0x68>)
 80019ae:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80019b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <RCC_DeInit+0x68>)
 80019b6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80019ba:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <RCC_DeInit+0x68>)
 80019be:	2200      	movs	r2, #0
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	f0ff0000 	.word	0xf0ff0000

080019d4 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <RCC_HSEConfig+0x58>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <RCC_HSEConfig+0x58>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <RCC_HSEConfig+0x58>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <RCC_HSEConfig+0x58>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fa:	d004      	beq.n	8001a06 <RCC_HSEConfig+0x32>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a02:	d007      	beq.n	8001a14 <RCC_HSEConfig+0x40>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8001a04:	e00d      	b.n	8001a22 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEON_Set;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <RCC_HSEConfig+0x58>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <RCC_HSEConfig+0x58>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
      break;
 8001a12:	e006      	b.n	8001a22 <RCC_HSEConfig+0x4e>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <RCC_HSEConfig+0x58>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <RCC_HSEConfig+0x58>)
 8001a1a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001a1e:	6013      	str	r3, [r2, #0]
      break;
 8001a20:	bf00      	nop
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000

08001a30 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001a42:	2031      	movs	r0, #49	; 0x31
 8001a44:	f000 facc 	bl	8001fe0 <RCC_GetFlagStatus>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a58:	d002      	beq.n	8001a60 <RCC_WaitForHSEStartUp+0x30>
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001a60:	2031      	movs	r0, #49	; 0x31
 8001a62:	f000 fabd 	bl	8001fe0 <RCC_GetFlagStatus>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	e001      	b.n	8001a76 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <RCC_PLLConfig+0x38>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001a9a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <RCC_PLLConfig+0x38>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6053      	str	r3, [r2, #4]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000

08001abc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <RCC_PLLCmd+0x1c>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	42420060 	.word	0x42420060

08001adc <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <RCC_PREDIV1Config+0x3c>)
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	f023 030f 	bic.w	r3, r3, #15
 8001afa:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <RCC_PREDIV1Config+0x3c>)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000

08001b1c <RCC_PREDIV2Config>:
  * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
  *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <RCC_PREDIV2Config+0x34>)
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b34:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <RCC_PREDIV2Config+0x34>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <RCC_PLL2Config>:
  * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
  *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <RCC_PLL2Config+0x34>)
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	60fb      	str	r3, [r7, #12]
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b6c:	60fb      	str	r3, [r7, #12]
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <RCC_PLL2Config+0x34>)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000

08001b8c <RCC_PLL2Cmd>:
  *   - This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL2Cmd(FunctionalState NewState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <RCC_PLL2Cmd+0x1c>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	42420068 	.word	0x42420068

08001bac <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <RCC_SYSCLKConfig+0x34>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f023 0303 	bic.w	r3, r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <RCC_SYSCLKConfig+0x34>)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6053      	str	r3, [r2, #4]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <RCC_GetSYSCLKSource+0x18>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	b2db      	uxtb	r3, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000

08001c00 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <RCC_HCLKConfig+0x34>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c18:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <RCC_HCLKConfig+0x34>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6053      	str	r3, [r2, #4]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <RCC_PCLK1Config+0x34>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c50:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <RCC_PCLK1Config+0x34>)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6053      	str	r3, [r2, #4]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <RCC_PCLK2Config+0x34>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c88:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <RCC_PCLK2Config+0x34>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6053      	str	r3, [r2, #4]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <RCC_ADCCLKConfig+0x34>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <RCC_ADCCLKConfig+0x34>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6053      	str	r3, [r2, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001d08:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d011      	beq.n	8001d3c <RCC_GetClocksFreq+0x5c>
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d864      	bhi.n	8001de8 <RCC_GetClocksFreq+0x108>
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <RCC_GetClocksFreq+0x4c>
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d004      	beq.n	8001d34 <RCC_GetClocksFreq+0x54>
 8001d2a:	e05d      	b.n	8001de8 <RCC_GetClocksFreq+0x108>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <RCC_GetClocksFreq+0x1c0>)
 8001d30:	601a      	str	r2, [r3, #0]
      break;
 8001d32:	e05d      	b.n	8001df0 <RCC_GetClocksFreq+0x110>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a5b      	ldr	r2, [pc, #364]	; (8001ea4 <RCC_GetClocksFreq+0x1c4>)
 8001d38:	601a      	str	r2, [r3, #0]
      break;
 8001d3a:	e059      	b.n	8001df0 <RCC_GetClocksFreq+0x110>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001d3c:	4b57      	ldr	r3, [pc, #348]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001d46:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	61fb      	str	r3, [r7, #28]
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
        }
 #endif
      }
#else
      pllmull = pllmull >> 18;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	0c9b      	lsrs	r3, r3, #18
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
      
      if (pllmull != 0x0D)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	2b0d      	cmp	r3, #13
 8001d5a:	d003      	beq.n	8001d64 <RCC_GetClocksFreq+0x84>
      {
         pllmull += 2;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3302      	adds	r3, #2
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e001      	b.n	8001d68 <RCC_GetClocksFreq+0x88>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
 8001d64:	2306      	movs	r3, #6
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
            
      if (pllsource == 0x00)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <RCC_GetClocksFreq+0x9c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <RCC_GetClocksFreq+0x1c8>)
 8001d72:	fb02 f203 	mul.w	r2, r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001d7a:	e039      	b.n	8001df0 <RCC_GetClocksFreq+0x110>
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	617b      	str	r3, [r7, #20]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3301      	adds	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
        if (prediv1source == 0)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <RCC_GetClocksFreq+0xcc>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 8001d98:	4a42      	ldr	r2, [pc, #264]	; (8001ea4 <RCC_GetClocksFreq+0x1c4>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da2:	fb02 f203 	mul.w	r2, r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
      break;
 8001daa:	e021      	b.n	8001df0 <RCC_GetClocksFreq+0x110>
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3301      	adds	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
 8001dc8:	4a36      	ldr	r2, [pc, #216]	; (8001ea4 <RCC_GetClocksFreq+0x1c4>)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	fb02 f203 	mul.w	r2, r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dde:	fb02 f203 	mul.w	r2, r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	601a      	str	r2, [r3, #0]
      break;
 8001de6:	e003      	b.n	8001df0 <RCC_GetClocksFreq+0x110>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <RCC_GetClocksFreq+0x1c0>)
 8001dec:	601a      	str	r2, [r3, #0]
      break;
 8001dee:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001e00:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <RCC_GetClocksFreq+0x1cc>)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	61bb      	str	r3, [r7, #24]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	40da      	lsrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e20:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <RCC_GetClocksFreq+0x1cc>)
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	61bb      	str	r3, [r7, #24]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	40da      	lsrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e48:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	0adb      	lsrs	r3, r3, #11
 8001e4e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <RCC_GetClocksFreq+0x1cc>)
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	40da      	lsrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <RCC_GetClocksFreq+0x1bc>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e70:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 14;
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	0b9b      	lsrs	r3, r3, #14
 8001e76:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <RCC_GetClocksFreq+0x1d0>)
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	61bb      	str	r3, [r7, #24]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]
}
 8001e92:	bf00      	nop
 8001e94:	372c      	adds	r7, #44	; 0x2c
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	017d7840 	.word	0x017d7840
 8001ea8:	003d0900 	.word	0x003d0900
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20000014 	.word	0x20000014

08001eb4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <RCC_AHBPeriphClockCmd+0x38>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <RCC_AHBPeriphClockCmd+0x38>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001ed2:	e006      	b.n	8001ee2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <RCC_AHBPeriphClockCmd+0x38>)
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <RCC_AHBPeriphClockCmd+0x38>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	614b      	str	r3, [r1, #20]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000

08001ef0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <RCC_APB2PeriphClockCmd+0x38>)
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <RCC_APB2PeriphClockCmd+0x38>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001f0e:	e006      	b.n	8001f1e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <RCC_APB2PeriphClockCmd+0x38>)
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4903      	ldr	r1, [pc, #12]	; (8001f28 <RCC_APB2PeriphClockCmd+0x38>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	618b      	str	r3, [r1, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40021000 	.word	0x40021000

08001f2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <RCC_APB1PeriphClockCmd+0x38>)
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <RCC_APB1PeriphClockCmd+0x38>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001f4a:	e006      	b.n	8001f5a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <RCC_APB1PeriphClockCmd+0x38>)
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4903      	ldr	r1, [pc, #12]	; (8001f64 <RCC_APB1PeriphClockCmd+0x38>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	61cb      	str	r3, [r1, #28]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000

08001f68 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <RCC_APB2PeriphResetCmd+0x38>)
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <RCC_APB2PeriphResetCmd+0x38>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f86:	e006      	b.n	8001f96 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <RCC_APB2PeriphResetCmd+0x38>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4903      	ldr	r1, [pc, #12]	; (8001fa0 <RCC_APB2PeriphResetCmd+0x38>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	60cb      	str	r3, [r1, #12]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <RCC_APB1PeriphResetCmd+0x38>)
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <RCC_APB1PeriphResetCmd+0x38>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001fc2:	e006      	b.n	8001fd2 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <RCC_APB1PeriphResetCmd+0x38>)
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4903      	ldr	r1, [pc, #12]	; (8001fdc <RCC_APB1PeriphResetCmd+0x38>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	610b      	str	r3, [r1, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d103      	bne.n	800200c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <RCC_GetFlagStatus+0x70>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e009      	b.n	8002020 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d103      	bne.n	800201a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <RCC_GetFlagStatus+0x70>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e002      	b.n	8002020 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <RCC_GetFlagStatus+0x70>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8002038:	2301      	movs	r3, #1
 800203a:	74fb      	strb	r3, [r7, #19]
 800203c:	e001      	b.n	8002042 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8002042:	7cfb      	ldrb	r3, [r7, #19]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000

08002054 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 8002058:	bf00      	nop
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <RTC_WaitForLastTask+0x20>)
 800205c:	889b      	ldrh	r3, [r3, #4]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f8      	beq.n	800205a <RTC_WaitForLastTask+0x6>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40002800 	.word	0x40002800

08002078 <RTC_GetITStatus>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval The new state of the RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint16_t RTC_IT)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT)); 
  
  bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <RTC_GetITStatus+0x4c>)
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	b29b      	uxth	r3, r3
 800208c:	b2da      	uxtb	r2, r3
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4013      	ands	r3, r2
 8002094:	73fb      	strb	r3, [r7, #15]
  if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <RTC_GetITStatus+0x4c>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	4013      	ands	r3, r2
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <RTC_GetITStatus+0x3a>
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <RTC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <RTC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40002800 	.word	0x40002800

080020c8 <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <RTC_ClearITPendingBit+0x28>)
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	43db      	mvns	r3, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <RTC_ClearITPendingBit+0x28>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	808b      	strh	r3, [r1, #4]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	40002800 	.word	0x40002800

080020f4 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <SPI_I2S_DeInit+0x68>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10a      	bne.n	800211a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002104:	2101      	movs	r1, #1
 8002106:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800210a:	f7ff ff2d 	bl	8001f68 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800210e:	2100      	movs	r1, #0
 8002110:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002114:	f7ff ff28 	bl	8001f68 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002118:	e01c      	b.n	8002154 <SPI_I2S_DeInit+0x60>
  else if (SPIx == SPI2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a10      	ldr	r2, [pc, #64]	; (8002160 <SPI_I2S_DeInit+0x6c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10a      	bne.n	8002138 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002122:	2101      	movs	r1, #1
 8002124:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002128:	f7ff ff3c 	bl	8001fa4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800212c:	2100      	movs	r1, #0
 800212e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002132:	f7ff ff37 	bl	8001fa4 <RCC_APB1PeriphResetCmd>
}
 8002136:	e00d      	b.n	8002154 <SPI_I2S_DeInit+0x60>
    if (SPIx == SPI3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SPI_I2S_DeInit+0x70>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d109      	bne.n	8002154 <SPI_I2S_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002140:	2101      	movs	r1, #1
 8002142:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002146:	f7ff ff2d 	bl	8001fa4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800214a:	2100      	movs	r1, #0
 800214c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002150:	f7ff ff28 	bl	8001fa4 <RCC_APB1PeriphResetCmd>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40013000 	.word	0x40013000
 8002160:	40003800 	.word	0x40003800
 8002164:	40003c00 	.word	0x40003c00

08002168 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8002182:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	885b      	ldrh	r3, [r3, #2]
 800218c:	4313      	orrs	r3, r2
 800218e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002194:	4313      	orrs	r3, r2
 8002196:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800219c:	4313      	orrs	r3, r2
 800219e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80021bc:	4313      	orrs	r3, r2
 80021be:	b29a      	uxth	r2, r3
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	89fa      	ldrh	r2, [r7, #14]
 80021ca:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8b9b      	ldrh	r3, [r3, #28]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	8a1a      	ldrh	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	821a      	strh	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8002210:	e007      	b.n	8002222 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800221c:	b29a      	uxth	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	801a      	strh	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	819a      	strh	r2, [r3, #12]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	899b      	ldrh	r3, [r3, #12]
 8002254:	b29b      	uxth	r3, r3
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8002282:	e007      	b.n	8002294 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	b29b      	uxth	r3, r3
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	809a      	strh	r2, [r3, #4]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	891b      	ldrh	r3, [r3, #8]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	4013      	ands	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e001      	b.n	80022c8 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 80022e0:	2302      	movs	r3, #2
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	2181      	movs	r1, #129	; 0x81
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f002 fb45 	bl	8004976 <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 80022ec:	2302      	movs	r3, #2
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2101      	movs	r1, #1
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f002 fb3f 	bl	8004976 <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 80022f8:	2303      	movs	r3, #3
 80022fa:	2208      	movs	r2, #8
 80022fc:	2182      	movs	r1, #130	; 0x82
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f002 fb39 	bl	8004976 <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <usbd_cdc_Init+0x60>)
 8002306:	60fb      	str	r3, [r7, #12]
  pbuf[4] = DEVICE_CLASS_CDC;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3304      	adds	r3, #4
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3305      	adds	r3, #5
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <usbd_cdc_Init+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <usbd_cdc_Init+0x68>)
 8002322:	2101      	movs	r1, #1
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f002 fbba 	bl	8004a9e <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200000f0 	.word	0x200000f0
 8002338:	200000bc 	.word	0x200000bc
 800233c:	20003cb8 	.word	0x20003cb8

08002340 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 800234c:	2181      	movs	r1, #129	; 0x81
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f002 fb69 	bl	8004a26 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8002354:	2101      	movs	r1, #1
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f002 fb65 	bl	8004a26 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 800235c:	2182      	movs	r1, #130	; 0x82
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f002 fb61 	bl	8004a26 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <usbd_cdc_DeInit+0x34>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4798      	blx	r3
  
  return USBD_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200000bc 	.word	0x200000bc

08002378 <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_CDC_DESC_SIZ;
 8002382:	233a      	movs	r3, #58	; 0x3a
 8002384:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf=usbd_cdc_CfgDesc + 9;
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <usbd_cdc_Setup+0x114>)
 8002388:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002392:	2b00      	cmp	r3, #0
 8002394:	d03d      	beq.n	8002412 <usbd_cdc_Setup+0x9a>
 8002396:	2b20      	cmp	r3, #32
 8002398:	d135      	bne.n	8002406 <usbd_cdc_Setup+0x8e>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	88db      	ldrh	r3, [r3, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d027      	beq.n	80023f2 <usbd_cdc_Setup+0x7a>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da10      	bge.n	80023ce <usbd_cdc_Setup+0x56>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 80023ac:	4b38      	ldr	r3, [pc, #224]	; (8002490 <usbd_cdc_Setup+0x118>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	7852      	ldrb	r2, [r2, #1]
 80023b4:	4610      	mov	r0, r2
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	88d2      	ldrh	r2, [r2, #6]
 80023ba:	4936      	ldr	r1, [pc, #216]	; (8002494 <usbd_cdc_Setup+0x11c>)
 80023bc:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	88db      	ldrh	r3, [r3, #6]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4933      	ldr	r1, [pc, #204]	; (8002494 <usbd_cdc_Setup+0x11c>)
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fc0c 	bl	8002be4 <USBD_CtlSendData>
 80023cc:	e019      	b.n	8002402 <usbd_cdc_Setup+0x8a>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <usbd_cdc_Setup+0x120>)
 80023d6:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	88db      	ldrh	r3, [r3, #6]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <usbd_cdc_Setup+0x124>)
 80023e0:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	88db      	ldrh	r3, [r3, #6]
 80023e6:	461a      	mov	r2, r3
 80023e8:	492a      	ldr	r1, [pc, #168]	; (8002494 <usbd_cdc_Setup+0x11c>)
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fc2e 	bl	8002c4c <USBD_CtlPrepareRx>
 80023f0:	e007      	b.n	8002402 <usbd_cdc_Setup+0x8a>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 80023f2:	4b27      	ldr	r3, [pc, #156]	; (8002490 <usbd_cdc_Setup+0x118>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	7852      	ldrb	r2, [r2, #1]
 80023fa:	4610      	mov	r0, r2
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	4798      	blx	r3
      }
      
      return USBD_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e03d      	b.n	8002482 <usbd_cdc_Setup+0x10a>
      
    default:
      USBD_CtlError (pdev, req);
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 f8a7 	bl	800355c <USBD_CtlError>
      return USBD_FAIL;
 800240e:	2302      	movs	r3, #2
 8002410:	e037      	b.n	8002482 <usbd_cdc_Setup+0x10a>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b0b      	cmp	r3, #11
 8002418:	d021      	beq.n	800245e <usbd_cdc_Setup+0xe6>
 800241a:	2b0b      	cmp	r3, #11
 800241c:	dc30      	bgt.n	8002480 <usbd_cdc_Setup+0x108>
 800241e:	2b06      	cmp	r3, #6
 8002420:	d002      	beq.n	8002428 <usbd_cdc_Setup+0xb0>
 8002422:	2b0a      	cmp	r3, #10
 8002424:	d015      	beq.n	8002452 <usbd_cdc_Setup+0xda>
 8002426:	e02b      	b.n	8002480 <usbd_cdc_Setup+0x108>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	885b      	ldrh	r3, [r3, #2]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b21      	cmp	r3, #33	; 0x21
 8002432:	d107      	bne.n	8002444 <usbd_cdc_Setup+0xcc>
      {
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <usbd_cdc_Setup+0x128>)
 8002436:	60bb      	str	r3, [r7, #8]
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	88db      	ldrh	r3, [r3, #6]
 800243c:	2b3a      	cmp	r3, #58	; 0x3a
 800243e:	bf28      	it	cs
 8002440:	233a      	movcs	r3, #58	; 0x3a
 8002442:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 8002444:	89fb      	ldrh	r3, [r7, #14]
 8002446:	461a      	mov	r2, r3
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fbca 	bl	8002be4 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 8002450:	e016      	b.n	8002480 <usbd_cdc_Setup+0x108>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8002452:	2201      	movs	r2, #1
 8002454:	4913      	ldr	r1, [pc, #76]	; (80024a4 <usbd_cdc_Setup+0x12c>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fbc4 	bl	8002be4 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 800245c:	e010      	b.n	8002480 <usbd_cdc_Setup+0x108>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	885b      	ldrh	r3, [r3, #2]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <usbd_cdc_Setup+0xfe>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	885b      	ldrh	r3, [r3, #2]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <usbd_cdc_Setup+0x12c>)
 8002472:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8002474:	e003      	b.n	800247e <usbd_cdc_Setup+0x106>
        USBD_CtlError (pdev, req);
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f001 f86f 	bl	800355c <USBD_CtlError>
      break;
 800247e:	bf00      	nop
    }
  }
  return USBD_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000021 	.word	0x20000021
 8002490:	200000bc 	.word	0x200000bc
 8002494:	20003cf8 	.word	0x20003cf8
 8002498:	2000005c 	.word	0x2000005c
 800249c:	20000328 	.word	0x20000328
 80024a0:	2000002a 	.word	0x2000002a
 80024a4:	20000314 	.word	0x20000314

080024a8 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <usbd_cdc_EP0_RxReady+0x30>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2bff      	cmp	r3, #255	; 0xff
 80024b6:	d00a      	beq.n	80024ce <usbd_cdc_EP0_RxReady+0x26>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <usbd_cdc_EP0_RxReady+0x34>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <usbd_cdc_EP0_RxReady+0x30>)
 80024be:	6810      	ldr	r0, [r2, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <usbd_cdc_EP0_RxReady+0x38>)
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <usbd_cdc_EP0_RxReady+0x3c>)
 80024c6:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <usbd_cdc_EP0_RxReady+0x30>)
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000005c 	.word	0x2000005c
 80024dc:	200000bc 	.word	0x200000bc
 80024e0:	20000328 	.word	0x20000328
 80024e4:	20003cf8 	.word	0x20003cf8

080024e8 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <usbd_cdc_DataIn+0x94>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d139      	bne.n	8002570 <usbd_cdc_DataIn+0x88>
  {
    if (APP_Rx_length == 0) 
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <usbd_cdc_DataIn+0x98>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <usbd_cdc_DataIn+0x24>
    {
      USB_Tx_State = 0;
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <usbd_cdc_DataIn+0x94>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e031      	b.n	8002570 <usbd_cdc_DataIn+0x88>
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <usbd_cdc_DataIn+0x98>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d90f      	bls.n	8002534 <usbd_cdc_DataIn+0x4c>
        USB_Tx_ptr = APP_Rx_ptr_out;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3340      	adds	r3, #64	; 0x40
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 8002526:	6013      	str	r3, [r2, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <usbd_cdc_DataIn+0x98>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b40      	subs	r3, #64	; 0x40
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <usbd_cdc_DataIn+0x98>)
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e015      	b.n	8002560 <usbd_cdc_DataIn+0x78>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <usbd_cdc_DataIn+0x98>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += APP_Rx_length;
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <usbd_cdc_DataIn+0x98>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4413      	add	r3, r2
 800254a:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 800254c:	6013      	str	r3, [r2, #0]
        APP_Rx_length = 0;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <usbd_cdc_DataIn+0x98>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        //ZS - data smaller than 64 bytes - don't increment pointers...
        APP_Rx_ptr_out = 0;
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <usbd_cdc_DataIn+0x9c>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
        APP_Rx_ptr_in = 0;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <usbd_cdc_DataIn+0xa0>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8002560:	89fb      	ldrh	r3, [r7, #14]
      DCD_EP_Tx (pdev,
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <usbd_cdc_DataIn+0xa4>)
 8002564:	441a      	add	r2, r3
 8002566:	89bb      	ldrh	r3, [r7, #12]
 8002568:	2181      	movs	r1, #129	; 0x81
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f002 fad9 	bl	8004b22 <DCD_EP_Tx>
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000324 	.word	0x20000324
 8002580:	20000320 	.word	0x20000320
 8002584:	2000031c 	.word	0x2000031c
 8002588:	20000318 	.word	0x20000318
 800258c:	20003d00 	.word	0x20003d00

08002590 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	81fb      	strh	r3, [r7, #14]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <usbd_cdc_DataOut+0x44>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	89fa      	ldrh	r2, [r7, #14]
 80025b8:	4611      	mov	r1, r2
 80025ba:	4807      	ldr	r0, [pc, #28]	; (80025d8 <usbd_cdc_DataOut+0x48>)
 80025bc:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80025be:	2340      	movs	r3, #64	; 0x40
 80025c0:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <usbd_cdc_DataOut+0x48>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f002 fa6a 	bl	8004a9e <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200000bc 	.word	0x200000bc
 80025d8:	20003cb8 	.word	0x20003cb8

080025dc <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <usbd_cdc_SOF+0x2c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4907      	ldr	r1, [pc, #28]	; (8002608 <usbd_cdc_SOF+0x2c>)
 80025ec:	600a      	str	r2, [r1, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <usbd_cdc_SOF+0x22>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <usbd_cdc_SOF+0x2c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f807 	bl	800260c <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000032c 	.word	0x2000032c

0800260c <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <Handle_USBAsynchXfer+0xcc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d05a      	beq.n	80026d2 <Handle_USBAsynchXfer+0xc6>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002624:	d102      	bne.n	800262c <Handle_USBAsynchXfer+0x20>
    {
      APP_Rx_ptr_out = 0;
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <Handle_USBAsynchXfer+0xd4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d103      	bne.n	8002640 <Handle_USBAsynchXfer+0x34>
    {
      USB_Tx_State = 0; 
 8002638:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <Handle_USBAsynchXfer+0xcc>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
      return;
 800263e:	e048      	b.n	80026d2 <Handle_USBAsynchXfer+0xc6>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <Handle_USBAsynchXfer+0xd4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d906      	bls.n	800265a <Handle_USBAsynchXfer+0x4e>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002654:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e006      	b.n	8002668 <Handle_USBAsynchXfer+0x5c>
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <Handle_USBAsynchXfer+0xd4>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 8002666:	6013      	str	r3, [r2, #0]
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d90f      	bls.n	8002690 <Handle_USBAsynchXfer+0x84>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3340      	adds	r3, #64	; 0x40
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 8002682:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3b40      	subs	r3, #64	; 0x40
 800268a:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e015      	b.n	80026bc <Handle_USBAsynchXfer+0xb0>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = APP_Rx_length;
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += APP_Rx_length;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 80026a8:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <Handle_USBAsynchXfer+0xd8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

      //ZS - data smaller than 64 bytes - don't increment pointers...
      APP_Rx_ptr_out = 0;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <Handle_USBAsynchXfer+0xd0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
      APP_Rx_ptr_in = 0;
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <Handle_USBAsynchXfer+0xd4>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <Handle_USBAsynchXfer+0xcc>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]

    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 80026c2:	89fb      	ldrh	r3, [r7, #14]
    DCD_EP_Tx (pdev,
 80026c4:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <Handle_USBAsynchXfer+0xdc>)
 80026c6:	441a      	add	r2, r3
 80026c8:	89bb      	ldrh	r3, [r7, #12]
 80026ca:	2181      	movs	r1, #129	; 0x81
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f002 fa28 	bl	8004b22 <DCD_EP_Tx>
               USB_Tx_length);
  }  
  
}
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000324 	.word	0x20000324
 80026dc:	2000031c 	.word	0x2000031c
 80026e0:	20000318 	.word	0x20000318
 80026e4:	20000320 	.word	0x20000320
 80026e8:	20003d00 	.word	0x20003d00

080026ec <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (usbd_cdc_CfgDesc);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2243      	movs	r2, #67	; 0x43
 80026fc:	801a      	strh	r2, [r3, #0]
  return usbd_cdc_CfgDesc;
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <USBD_cdc_GetCfgDesc+0x20>)
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000018 	.word	0x20000018

08002710 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	72fb      	strb	r3, [r7, #11]
	int i, j ;
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f010 fadb 	bl	8012cdc <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f839 	bl	800279e <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	4619      	mov	r1, r3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f002 f891 	bl	8004870 <DCD_Init>
  
  for (j=i=0 ; i< 3 ; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e006      	b.n	8002766 <USBD_Init+0x56>
	  j+=i ;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4413      	add	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
  for (j=i=0 ; i< 3 ; i++)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b02      	cmp	r3, #2
 800276a:	ddf5      	ble.n	8002758 <USBD_Init+0x48>

  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4798      	blx	r3
  for (i=0 ; i< 3 ; i++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e006      	b.n	800278a <USBD_Init+0x7a>
	  j+=i ;
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4413      	add	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
  for (i=0 ; i< 3 ; i++)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b02      	cmp	r3, #2
 800278e:	ddf5      	ble.n	800277c <USBD_Init+0x6c>

  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f010 fad9 	bl	8012d48 <USB_OTG_BSP_EnableInterrupt>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fe83 	bl	80034cc <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 80027c6:	7a3b      	ldrb	r3, [r7, #8]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d014      	beq.n	80027fa <USBD_SetupStage+0x48>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	dc19      	bgt.n	8002808 <USBD_SetupStage+0x56>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <USBD_SetupStage+0x2c>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d007      	beq.n	80027ec <USBD_SetupStage+0x3a>
 80027dc:	e014      	b.n	8002808 <USBD_SetupStage+0x56>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fa95 	bl	8002d14 <USBD_StdDevReq>
    break;
 80027ea:	e016      	b.n	800281a <USBD_SetupStage+0x68>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fade 	bl	8002db4 <USBD_StdItfReq>
    break;
 80027f8:	e00f      	b.n	800281a <USBD_SetupStage+0x68>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fb0b 	bl	8002e1c <USBD_StdEPReq>
    break;
 8002806:	e008      	b.n	800281a <USBD_SetupStage+0x68>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8002808:	7a3b      	ldrb	r3, [r7, #8]
 800280a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f002 f9c1 	bl	8004b9a <DCD_EP_Stall>
    break;
 8002818:	bf00      	nop
  }  
  return USBD_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d144      	bne.n	80028c0 <USBD_DataOutStage+0x9c>
  {
    ep = &pdev->dev.out_ep[0];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800283c:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8002844:	2b03      	cmp	r3, #3
 8002846:	d14e      	bne.n	80028e6 <USBD_DataOutStage+0xc2>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d920      	bls.n	8002896 <USBD_DataOutStage+0x72>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	78db      	ldrb	r3, [r3, #3]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d106      	bne.n	8002878 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	441a      	add	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68d9      	ldr	r1, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4293      	cmp	r3, r2
 8002886:	bf28      	it	cs
 8002888:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f9fc 	bl	8002c8c <USBD_CtlContinueRx>
 8002894:	e027      	b.n	80028e6 <USBD_DataOutStage+0xc2>
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <USBD_DataOutStage+0x94>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d105      	bne.n	80028b8 <USBD_DataOutStage+0x94>
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f9fb 	bl	8002cb4 <USBD_CtlSendStatus>
 80028be:	e012      	b.n	80028e6 <USBD_DataOutStage+0xc2>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <USBD_DataOutStage+0xc2>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <USBD_DataOutStage+0xc2>
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	4611      	mov	r1, r2
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
  }  
  return USBD_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d16b      	bne.n	80029da <USBD_DataInStage+0xea>
  {
    ep = &pdev->dev.in_ep[0];
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002908:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8002910:	2b02      	cmp	r3, #2
 8002912:	d155      	bne.n	80029c0 <USBD_DataInStage+0xd0>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d91b      	bls.n	8002958 <USBD_DataInStage+0x68>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	1ad2      	subs	r2, r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d106      	bne.n	8002944 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	68d9      	ldr	r1, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	69db      	ldr	r3, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f967 	bl	8002c24 <USBD_CtlContinueSendData>
 8002956:	e033      	b.n	80029c0 <USBD_DataInStage+0xd0>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	fbb3 f1f2 	udiv	r1, r3, r2
 8002964:	fb02 f201 	mul.w	r2, r2, r1
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d114      	bne.n	8002998 <USBD_DataInStage+0xa8>
           (ep->total_data_len >= ep->maxpacket) &&
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8002976:	429a      	cmp	r2, r3
 8002978:	d30e      	bcc.n	8002998 <USBD_DataInStage+0xa8>
             (ep->total_data_len < ep->ctl_data_len ))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (ep->total_data_len >= ep->maxpacket) &&
 8002982:	429a      	cmp	r2, r3
 8002984:	d208      	bcs.n	8002998 <USBD_DataInStage+0xa8>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f94a 	bl	8002c24 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
 8002996:	e013      	b.n	80029c0 <USBD_DataInStage+0xd0>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <USBD_DataInStage+0xca>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d105      	bne.n	80029ba <USBD_DataInStage+0xca>
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f992 	bl	8002ce4 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d11a      	bne.n	8002a00 <USBD_DataInStage+0x110>
    {
      USBD_RunTestMode(pdev); 
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f81e 	bl	8002a0c <USBD_RunTestMode>
      pdev->dev.test_mode = 0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 80029d8:	e012      	b.n	8002a00 <USBD_DataInStage+0x110>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <USBD_DataInStage+0x110>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d107      	bne.n	8002a00 <USBD_DataInStage+0x110>
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	4611      	mov	r1, r2
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
  }  
  return USBD_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <USBD_RunTestMode+0x20>)
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
  return USBD_OK;  
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20004d00 	.word	0x20004d00

08002a30 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f001 ff99 	bl	8004976 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8002a44:	2300      	movs	r3, #0
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f001 ff93 	bl	8004976 <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	7892      	ldrb	r2, [r2, #2]
 8002a64:	4610      	mov	r0, r2
 8002a66:	4798      	blx	r3
  
  return USBD_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;  
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2203      	movs	r2, #3
 8002a94:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4798      	blx	r3
  return USBD_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
  }
  return USBD_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4798      	blx	r3
  return USBD_OK; 
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	4611      	mov	r1, r2
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
  return USBD_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
  return USBD_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
  return USBD_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <USBD_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevConnected(USB_OTG_CORE_HANDLE  *pdev)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  pdev->dev.usr_cb->DeviceConnected();
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4798      	blx	r3
  pdev->dev.connection_status = 1;  
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  return USBD_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <USBD_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_DevDisconnected(USB_OTG_CORE_HANDLE  *pdev)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  pdev->dev.usr_cb->DeviceDisconnected();
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	4798      	blx	r3
  pdev->dev.class_cb->DeInit(pdev, 0);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
  pdev->dev.connection_status = 0;    
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
  return USBD_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	2100      	movs	r1, #0
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f001 ff84 	bl	8004b22 <DCD_EP_Tx>
 
  return ret;
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f001 ff70 	bl	8004b22 <DCD_EP_Tx>
  
  
  return ret;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.out_ep[0].total_data_len = len;
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  pdev->dev.out_ep[0].rem_data_len   = len;
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f001 ff0e 	bl	8004a9e <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f001 fefa 	bl	8004a9e <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f001 ff27 	bl	8004b22 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f001 fd6a 	bl	80047ae <USB_OTG_EP0_OutStart>
  
  return ret;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f001 fecd 	bl	8004a9e <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f001 fd52 	bl	80047ae <USB_OTG_EP0_OutStart>
  
  return ret;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	d839      	bhi.n	8002d9e <USBD_StdDevReq+0x8a>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <USBD_StdDevReq+0x1c>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d81 	.word	0x08002d81
 8002d34:	08002d95 	.word	0x08002d95
 8002d38:	08002d9f 	.word	0x08002d9f
 8002d3c:	08002d8b 	.word	0x08002d8b
 8002d40:	08002d9f 	.word	0x08002d9f
 8002d44:	08002d63 	.word	0x08002d63
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d9f 	.word	0x08002d9f
 8002d50:	08002d77 	.word	0x08002d77
 8002d54:	08002d6d 	.word	0x08002d6d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f93a 	bl	8002fd4 <USBD_GetDescriptor>
    break;
 8002d60:	e022      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa09 	bl	800317c <USBD_SetAddress>
    break;
 8002d6a:	e01d      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa44 	bl	80031fc <USBD_SetConfig>
    break;
 8002d74:	e018      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fab9 	bl	80032f0 <USBD_GetConfig>
    break;
 8002d7e:	e013      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fae4 	bl	8003350 <USBD_GetStatus>
    break;
 8002d88:	e00e      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8002d8a:	6839      	ldr	r1, [r7, #0]
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fb09 	bl	80033a4 <USBD_SetFeature>
    break;
 8002d92:	e009      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8002d94:	6839      	ldr	r1, [r7, #0]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fb70 	bl	800347c <USBD_ClrFeature>
    break;
 8002d9c:	e004      	b.n	8002da8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fbdb 	bl	800355c <USBD_CtlError>
    break;
 8002da6:	bf00      	nop
  }
  
  return ret;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d11b      	bne.n	8002e04 <USBD_StdItfReq+0x50>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	889b      	ldrh	r3, [r3, #4]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d811      	bhi.n	8002dfa <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	88db      	ldrh	r3, [r3, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d110      	bne.n	8002e0e <USBD_StdItfReq+0x5a>
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ff5e 	bl	8002cb4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8002df8:	e009      	b.n	8002e0e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fbad 	bl	800355c <USBD_CtlError>
    break;
 8002e02:	e004      	b.n	8002e0e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fba8 	bl	800355c <USBD_CtlError>
    break;
 8002e0c:	e000      	b.n	8002e10 <USBD_StdItfReq+0x5c>
    break;
 8002e0e:	bf00      	nop
  }
  return ret;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	889b      	ldrh	r3, [r3, #4]
 8002e2e:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d007      	beq.n	8002e48 <USBD_StdEPReq+0x2c>
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	f300 80c3 	bgt.w	8002fc4 <USBD_StdEPReq+0x1a8>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06e      	beq.n	8002f20 <USBD_StdEPReq+0x104>
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d035      	beq.n	8002eb2 <USBD_StdEPReq+0x96>
      break;
    }
    break;
    
  default:
    break;
 8002e46:	e0bd      	b.n	8002fc4 <USBD_StdEPReq+0x1a8>
    switch (pdev->dev.device_status) 
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d002      	beq.n	8002e58 <USBD_StdEPReq+0x3c>
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d00c      	beq.n	8002e70 <USBD_StdEPReq+0x54>
 8002e56:	e025      	b.n	8002ea4 <USBD_StdEPReq+0x88>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d027      	beq.n	8002eae <USBD_StdEPReq+0x92>
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d024      	beq.n	8002eae <USBD_StdEPReq+0x92>
        DCD_EP_Stall(pdev , ep_addr);
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f001 fe96 	bl	8004b9a <DCD_EP_Stall>
      break;	
 8002e6e:	e01e      	b.n	8002eae <USBD_StdEPReq+0x92>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	885b      	ldrh	r3, [r3, #2]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <USBD_StdEPReq+0x72>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002e78:	7bbb      	ldrb	r3, [r7, #14]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <USBD_StdEPReq+0x72>
 8002e7e:	7bbb      	ldrb	r3, [r7, #14]
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d004      	beq.n	8002e8e <USBD_StdEPReq+0x72>
          DCD_EP_Stall(pdev , ep_addr);
 8002e84:	7bbb      	ldrb	r3, [r7, #14]
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 fe86 	bl	8004b9a <DCD_EP_Stall>
      pdev->dev.class_cb->Setup (pdev, req);   
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff09 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 8002ea2:	e005      	b.n	8002eb0 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fb58 	bl	800355c <USBD_CtlError>
      break;    
 8002eac:	e000      	b.n	8002eb0 <USBD_StdEPReq+0x94>
      break;	
 8002eae:	bf00      	nop
    break;
 8002eb0:	e089      	b.n	8002fc6 <USBD_StdEPReq+0x1aa>
    switch (pdev->dev.device_status) 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d002      	beq.n	8002ec2 <USBD_StdEPReq+0xa6>
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d00c      	beq.n	8002eda <USBD_StdEPReq+0xbe>
 8002ec0:	e025      	b.n	8002f0e <USBD_StdEPReq+0xf2>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002ec2:	7bbb      	ldrb	r3, [r7, #14]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d027      	beq.n	8002f18 <USBD_StdEPReq+0xfc>
 8002ec8:	7bbb      	ldrb	r3, [r7, #14]
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d024      	beq.n	8002f18 <USBD_StdEPReq+0xfc>
        DCD_EP_Stall(pdev , ep_addr);
 8002ece:	7bbb      	ldrb	r3, [r7, #14]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f001 fe61 	bl	8004b9a <DCD_EP_Stall>
      break;	
 8002ed8:	e01e      	b.n	8002f18 <USBD_StdEPReq+0xfc>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	885b      	ldrh	r3, [r3, #2]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11c      	bne.n	8002f1c <USBD_StdEPReq+0x100>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002ee2:	7bbb      	ldrb	r3, [r7, #14]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <USBD_StdEPReq+0xea>
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d00b      	beq.n	8002f06 <USBD_StdEPReq+0xea>
          DCD_EP_ClrStall(pdev , ep_addr);
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f001 fe8e 	bl	8004c14 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fed4 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 8002f0c:	e006      	b.n	8002f1c <USBD_StdEPReq+0x100>
       USBD_CtlError(pdev , req);
 8002f0e:	6839      	ldr	r1, [r7, #0]
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fb23 	bl	800355c <USBD_CtlError>
      break;    
 8002f16:	e002      	b.n	8002f1e <USBD_StdEPReq+0x102>
      break;	
 8002f18:	bf00      	nop
 8002f1a:	e054      	b.n	8002fc6 <USBD_StdEPReq+0x1aa>
      break;
 8002f1c:	bf00      	nop
    break;
 8002f1e:	e052      	b.n	8002fc6 <USBD_StdEPReq+0x1aa>
    switch (pdev->dev.device_status) 
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d002      	beq.n	8002f30 <USBD_StdEPReq+0x114>
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d00c      	beq.n	8002f48 <USBD_StdEPReq+0x12c>
 8002f2e:	e042      	b.n	8002fb6 <USBD_StdEPReq+0x19a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002f30:	7bbb      	ldrb	r3, [r7, #14]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d044      	beq.n	8002fc0 <USBD_StdEPReq+0x1a4>
 8002f36:	7bbb      	ldrb	r3, [r7, #14]
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d041      	beq.n	8002fc0 <USBD_StdEPReq+0x1a4>
        DCD_EP_Stall(pdev , ep_addr);
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 fe2a 	bl	8004b9a <DCD_EP_Stall>
      break;	
 8002f46:	e03b      	b.n	8002fc0 <USBD_StdEPReq+0x1a4>
      if ((ep_addr & 0x80)== 0x80)
 8002f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	da15      	bge.n	8002f7c <USBD_StdEPReq+0x160>
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8002f50:	7bbb      	ldrb	r3, [r7, #14]
 8002f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <USBD_StdEPReq+0x158>
          USBD_ep_status = 0x0001;     
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <USBD_StdEPReq+0x1b4>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e01a      	b.n	8002faa <USBD_StdEPReq+0x18e>
          USBD_ep_status = 0x0000;  
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <USBD_StdEPReq+0x1b4>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e016      	b.n	8002faa <USBD_StdEPReq+0x18e>
      else if ((ep_addr & 0x80)== 0x00)
 8002f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db12      	blt.n	8002faa <USBD_StdEPReq+0x18e>
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8002f84:	7bba      	ldrb	r2, [r7, #14]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	f203 3376 	addw	r3, r3, #886	; 0x376
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0001;     
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <USBD_StdEPReq+0x1b4>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e002      	b.n	8002faa <USBD_StdEPReq+0x18e>
          USBD_ep_status = 0x0000;     
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <USBD_StdEPReq+0x1b4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
      USBD_CtlSendData (pdev,
 8002faa:	2202      	movs	r2, #2
 8002fac:	4908      	ldr	r1, [pc, #32]	; (8002fd0 <USBD_StdEPReq+0x1b4>)
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff fe18 	bl	8002be4 <USBD_CtlSendData>
      break;
 8002fb4:	e005      	b.n	8002fc2 <USBD_StdEPReq+0x1a6>
       USBD_CtlError(pdev , req);
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 facf 	bl	800355c <USBD_CtlError>
      break;
 8002fbe:	e000      	b.n	8002fc2 <USBD_StdEPReq+0x1a6>
      break;	
 8002fc0:	bf00      	nop
    break;
 8002fc2:	e000      	b.n	8002fc6 <USBD_StdEPReq+0x1aa>
    break;
 8002fc4:	bf00      	nop
  }
  return ret;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000330 	.word	0x20000330

08002fd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	885b      	ldrh	r3, [r3, #2]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	f200 80a9 	bhi.w	8003140 <USBD_GetDescriptor+0x16c>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <USBD_GetDescriptor+0x20>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003011 	.word	0x08003011
 8002ff8:	08003041 	.word	0x08003041
 8002ffc:	08003069 	.word	0x08003069
 8003000:	08003141 	.word	0x08003141
 8003004:	08003141 	.word	0x08003141
 8003008:	0800312d 	.word	0x0800312d
 800300c:	08003137 	.word	0x08003137
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	7892      	ldrb	r2, [r2, #2]
 800301c:	f107 010a 	add.w	r1, r7, #10
 8003020:	4610      	mov	r0, r2
 8003022:	4798      	blx	r3
 8003024:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	88db      	ldrh	r3, [r3, #6]
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d005      	beq.n	800303a <USBD_GetDescriptor+0x66>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003034:	2b01      	cmp	r3, #1
 8003036:	f040 8088 	bne.w	800314a <USBD_GetDescriptor+0x176>
    {                  
      len = 8;
 800303a:	2308      	movs	r3, #8
 800303c:	817b      	strh	r3, [r7, #10]
    }
    break;
 800303e:	e084      	b.n	800314a <USBD_GetDescriptor+0x176>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	7892      	ldrb	r2, [r2, #2]
 800304c:	f107 010a 	add.w	r1, r7, #10
 8003050:	4610      	mov	r0, r2
 8003052:	4798      	blx	r3
 8003054:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3301      	adds	r3, #1
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    break;
 8003066:	e071      	b.n	800314c <USBD_GetDescriptor+0x178>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	885b      	ldrh	r3, [r3, #2]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b05      	cmp	r3, #5
 8003070:	d856      	bhi.n	8003120 <USBD_GetDescriptor+0x14c>
 8003072:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <USBD_GetDescriptor+0xa4>)
 8003074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003078:	08003091 	.word	0x08003091
 800307c:	080030a9 	.word	0x080030a9
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030f1 	.word	0x080030f1
 800308c:	08003109 	.word	0x08003109
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	7892      	ldrb	r2, [r2, #2]
 800309c:	f107 010a 	add.w	r1, r7, #10
 80030a0:	4610      	mov	r0, r2
 80030a2:	4798      	blx	r3
 80030a4:	60f8      	str	r0, [r7, #12]
      break;
 80030a6:	e040      	b.n	800312a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	7892      	ldrb	r2, [r2, #2]
 80030b4:	f107 010a 	add.w	r1, r7, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4798      	blx	r3
 80030bc:	60f8      	str	r0, [r7, #12]
      break;
 80030be:	e034      	b.n	800312a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	7892      	ldrb	r2, [r2, #2]
 80030cc:	f107 010a 	add.w	r1, r7, #10
 80030d0:	4610      	mov	r0, r2
 80030d2:	4798      	blx	r3
 80030d4:	60f8      	str	r0, [r7, #12]
      break;
 80030d6:	e028      	b.n	800312a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	7892      	ldrb	r2, [r2, #2]
 80030e4:	f107 010a 	add.w	r1, r7, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4798      	blx	r3
 80030ec:	60f8      	str	r0, [r7, #12]
      break;
 80030ee:	e01c      	b.n	800312a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	7892      	ldrb	r2, [r2, #2]
 80030fc:	f107 010a 	add.w	r1, r7, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4798      	blx	r3
 8003104:	60f8      	str	r0, [r7, #12]
      break;
 8003106:	e010      	b.n	800312a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	7892      	ldrb	r2, [r2, #2]
 8003114:	f107 010a 	add.w	r1, r7, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4798      	blx	r3
 800311c:	60f8      	str	r0, [r7, #12]
      break;
 800311e:	e004      	b.n	800312a <USBD_GetDescriptor+0x156>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa1a 	bl	800355c <USBD_CtlError>
      return;
 8003128:	e025      	b.n	8003176 <USBD_GetDescriptor+0x1a2>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 800312a:	e00f      	b.n	800314c <USBD_GetDescriptor+0x178>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa14 	bl	800355c <USBD_CtlError>
      return;
 8003134:	e01f      	b.n	8003176 <USBD_GetDescriptor+0x1a2>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8003136:	6839      	ldr	r1, [r7, #0]
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fa0f 	bl	800355c <USBD_CtlError>
      return;
 800313e:	e01a      	b.n	8003176 <USBD_GetDescriptor+0x1a2>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 8003140:	6839      	ldr	r1, [r7, #0]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa0a 	bl	800355c <USBD_CtlError>
    return;
 8003148:	e015      	b.n	8003176 <USBD_GetDescriptor+0x1a2>
    break;
 800314a:	bf00      	nop
  }
  
  if((len != 0)&& (req->wLength != 0))
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d011      	beq.n	8003176 <USBD_GetDescriptor+0x1a2>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	88db      	ldrh	r3, [r3, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <USBD_GetDescriptor+0x1a2>
  {
    
    len = MIN(len , req->wLength);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	88da      	ldrh	r2, [r3, #6]
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	4293      	cmp	r3, r2
 8003162:	bf28      	it	cs
 8003164:	4613      	movcs	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	461a      	mov	r2, r3
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fd37 	bl	8002be4 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	889b      	ldrh	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d12c      	bne.n	80031e8 <USBD_SetAddress+0x6c>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	88db      	ldrh	r3, [r3, #6]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d128      	bne.n	80031e8 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	885b      	ldrh	r3, [r3, #2]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a0:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d104      	bne.n	80031b6 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9d4 	bl	800355c <USBD_CtlError>
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80031b4:	e01d      	b.n	80031f2 <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f001 fd7d 	bl	8004cc2 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fd73 	bl	8002cb4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80031dc:	e009      	b.n	80031f2 <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80031e6:	e004      	b.n	80031f2 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80031e8:	6839      	ldr	r1, [r7, #0]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9b6 	bl	800355c <USBD_CtlError>
  } 
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	885b      	ldrh	r3, [r3, #2]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b37      	ldr	r3, [pc, #220]	; (80032ec <USBD_SetConfig+0xf0>)
 800320e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <USBD_SetConfig+0xf0>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d904      	bls.n	8003222 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f99e 	bl	800355c <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 8003220:	e05f      	b.n	80032e2 <USBD_SetConfig+0xe6>
    switch (pdev->dev.device_status) 
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003228:	2b02      	cmp	r3, #2
 800322a:	d002      	beq.n	8003232 <USBD_SetConfig+0x36>
 800322c:	2b03      	cmp	r3, #3
 800322e:	d01b      	beq.n	8003268 <USBD_SetConfig+0x6c>
 8003230:	e052      	b.n	80032d8 <USBD_SetConfig+0xdc>
      if (cfgidx) 
 8003232:	4b2e      	ldr	r3, [pc, #184]	; (80032ec <USBD_SetConfig+0xf0>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d012      	beq.n	8003260 <USBD_SetConfig+0x64>
        pdev->dev.device_config = cfgidx;
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <USBD_SetConfig+0xf0>)
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <USBD_SetConfig+0xf0>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fc52 	bl	8002afc <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fd2b 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 800325e:	e040      	b.n	80032e2 <USBD_SetConfig+0xe6>
         USBD_CtlSendStatus(pdev);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fd27 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 8003266:	e03c      	b.n	80032e2 <USBD_SetConfig+0xe6>
      if (cfgidx == 0) 
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <USBD_SetConfig+0xf0>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d112      	bne.n	8003296 <USBD_SetConfig+0x9a>
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <USBD_SetConfig+0xf0>)
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 8003282:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <USBD_SetConfig+0xf0>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fc4f 	bl	8002b2c <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fd10 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 8003294:	e025      	b.n	80032e2 <USBD_SetConfig+0xe6>
      else  if (cfgidx != pdev->dev.device_config) 
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <USBD_SetConfig+0xf0>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d015      	beq.n	80032d0 <USBD_SetConfig+0xd4>
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fc3d 	bl	8002b2c <USBD_ClrCfg>
        pdev->dev.device_config = cfgidx;
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <USBD_SetConfig+0xf0>)
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <USBD_SetConfig+0xf0>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fc1a 	bl	8002afc <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fcf3 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 80032ce:	e008      	b.n	80032e2 <USBD_SetConfig+0xe6>
        USBD_CtlSendStatus(pdev);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fcef 	bl	8002cb4 <USBD_CtlSendStatus>
      break;
 80032d6:	e004      	b.n	80032e2 <USBD_SetConfig+0xe6>
       USBD_CtlError(pdev , req);                     
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f93e 	bl	800355c <USBD_CtlError>
      break;
 80032e0:	bf00      	nop
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000033c 	.word	0x2000033c

080032f0 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	88db      	ldrh	r3, [r3, #6]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d004      	beq.n	800330c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8003302:	6839      	ldr	r1, [r7, #0]
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f929 	bl	800355c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800330a:	e01b      	b.n	8003344 <USBD_GetConfig+0x54>
    switch (pdev->dev.device_status )  
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003312:	2b02      	cmp	r3, #2
 8003314:	d002      	beq.n	800331c <USBD_GetConfig+0x2c>
 8003316:	2b03      	cmp	r3, #3
 8003318:	d006      	beq.n	8003328 <USBD_GetConfig+0x38>
 800331a:	e00e      	b.n	800333a <USBD_GetConfig+0x4a>
      USBD_CtlSendData (pdev, 
 800331c:	2201      	movs	r2, #1
 800331e:	490b      	ldr	r1, [pc, #44]	; (800334c <USBD_GetConfig+0x5c>)
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fc5f 	bl	8002be4 <USBD_CtlSendData>
      break;
 8003326:	e00d      	b.n	8003344 <USBD_GetConfig+0x54>
      USBD_CtlSendData (pdev, 
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800332e:	2201      	movs	r2, #1
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff fc56 	bl	8002be4 <USBD_CtlSendData>
      break;
 8003338:	e004      	b.n	8003344 <USBD_GetConfig+0x54>
       USBD_CtlError(pdev , req);
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f90d 	bl	800355c <USBD_CtlError>
      break;
 8003342:	bf00      	nop
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000334 	.word	0x20000334

08003350 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev.device_status) 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003360:	3b02      	subs	r3, #2
 8003362:	2b01      	cmp	r3, #1
 8003364:	d813      	bhi.n	800338e <USBD_GetStatus+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <USBD_GetStatus+0x50>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <USBD_GetStatus+0x32>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <USBD_GetStatus+0x50>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <USBD_GetStatus+0x50>)
 8003380:	6013      	str	r3, [r2, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8003382:	2202      	movs	r2, #2
 8003384:	4906      	ldr	r1, [pc, #24]	; (80033a0 <USBD_GetStatus+0x50>)
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fc2c 	bl	8002be4 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 800338c:	e004      	b.n	8003398 <USBD_GetStatus+0x48>
    
  default :
    USBD_CtlError(pdev , req);                        
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8e3 	bl	800355c <USBD_CtlError>
    break;
 8003396:	bf00      	nop
  }
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000338 	.word	0x20000338

080033a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	885b      	ldrh	r3, [r3, #2]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10e      	bne.n	80033d8 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fc6f 	bl	8002cb4 <USBD_CtlSendStatus>
    SET_TEST_MODE = dctl;
    pdev->dev.test_mode = 1;
    USBD_CtlSendStatus(pdev);
  }

}
 80033d6:	e04b      	b.n	8003470 <USBD_SetFeature+0xcc>
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	885b      	ldrh	r3, [r3, #2]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d147      	bne.n	8003470 <USBD_SetFeature+0xcc>
           ((req->wIndex & 0xFF) == 0))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	889b      	ldrh	r3, [r3, #4]
 80033e4:	b2db      	uxtb	r3, r3
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d142      	bne.n	8003470 <USBD_SetFeature+0xcc>
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	60bb      	str	r3, [r7, #8]
    test_mode = req->wIndex >> 8;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	889b      	ldrh	r3, [r3, #4]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	3b01      	subs	r3, #1
 8003400:	2b04      	cmp	r3, #4
 8003402:	d82b      	bhi.n	800345c <USBD_SetFeature+0xb8>
 8003404:	a201      	add	r2, pc, #4	; (adr r2, 800340c <USBD_SetFeature+0x68>)
 8003406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340a:	bf00      	nop
 800340c:	08003421 	.word	0x08003421
 8003410:	0800342d 	.word	0x0800342d
 8003414:	08003439 	.word	0x08003439
 8003418:	08003445 	.word	0x08003445
 800341c:	08003451 	.word	0x08003451
      dctl.b.tstctl = 1;
 8003420:	7a3b      	ldrb	r3, [r7, #8]
 8003422:	2201      	movs	r2, #1
 8003424:	f362 1306 	bfi	r3, r2, #4, #3
 8003428:	723b      	strb	r3, [r7, #8]
      break;
 800342a:	e017      	b.n	800345c <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 2;
 800342c:	7a3b      	ldrb	r3, [r7, #8]
 800342e:	2202      	movs	r2, #2
 8003430:	f362 1306 	bfi	r3, r2, #4, #3
 8003434:	723b      	strb	r3, [r7, #8]
      break;
 8003436:	e011      	b.n	800345c <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 3;
 8003438:	7a3b      	ldrb	r3, [r7, #8]
 800343a:	2203      	movs	r2, #3
 800343c:	f362 1306 	bfi	r3, r2, #4, #3
 8003440:	723b      	strb	r3, [r7, #8]
      break;
 8003442:	e00b      	b.n	800345c <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 4;
 8003444:	7a3b      	ldrb	r3, [r7, #8]
 8003446:	2204      	movs	r2, #4
 8003448:	f362 1306 	bfi	r3, r2, #4, #3
 800344c:	723b      	strb	r3, [r7, #8]
      break;
 800344e:	e005      	b.n	800345c <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 5;
 8003450:	7a3b      	ldrb	r3, [r7, #8]
 8003452:	2205      	movs	r2, #5
 8003454:	f362 1306 	bfi	r3, r2, #4, #3
 8003458:	723b      	strb	r3, [r7, #8]
      break;
 800345a:	bf00      	nop
    SET_TEST_MODE = dctl;
 800345c:	4a06      	ldr	r2, [pc, #24]	; (8003478 <USBD_SetFeature+0xd4>)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
    pdev->dev.test_mode = 1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fc22 	bl	8002cb4 <USBD_CtlSendStatus>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20004d00 	.word	0x20004d00

0800347c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800348c:	3b02      	subs	r3, #2
 800348e:	2b01      	cmp	r3, #1
 8003490:	d812      	bhi.n	80034b8 <USBD_ClrFeature+0x3c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	885b      	ldrh	r3, [r3, #2]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d113      	bne.n	80034c2 <USBD_ClrFeature+0x46>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fbff 	bl	8002cb4 <USBD_CtlSendStatus>
    }
    break;
 80034b6:	e004      	b.n	80034c2 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f84e 	bl	800355c <USBD_CtlError>
    break;
 80034c0:	e000      	b.n	80034c4 <USBD_ClrFeature+0x48>
    break;
 80034c2:	bf00      	nop
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 25cc 	ldrb.w	r2, [r3, #1484]	; 0x5cc
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 25cd 	ldrb.w	r2, [r3, #1485]	; 0x5cd
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4413      	add	r3, r2
 8003500:	b29a      	uxth	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 35d0 	ldrb.w	r3, [r3, #1488]	; 0x5d0
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 35d1 	ldrb.w	r3, [r3, #1489]	; 0x5d1
 8003514:	b29b      	uxth	r3, r3
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	b29b      	uxth	r3, r3
 800351a:	4413      	add	r3, r2
 800351c:	b29a      	uxth	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 35d2 	ldrb.w	r3, [r3, #1490]	; 0x5d2
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 35d3 	ldrb.w	r3, [r3, #1491]	; 0x5d3
 8003530:	b29b      	uxth	r3, r3
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	b29b      	uxth	r3, r3
 8003536:	4413      	add	r3, r2
 8003538:	b29a      	uxth	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	88db      	ldrh	r3, [r3, #6]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  
  DCD_EP_Stall(pdev , 0x80);
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 fb16 	bl	8004b9a <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 800356e:	2100      	movs	r1, #0
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f001 fb12 	bl	8004b9a <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f001 f919 	bl	80047ae <USB_OTG_EP0_OutStart>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d033      	beq.n	8003602 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f835 	bl	800360a <USBD_GetLen>
 80035a0:	4603      	mov	r3, r0
 80035a2:	3301      	adds	r3, #1
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	1c59      	adds	r1, r3, #1
 80035b6:	75f9      	strb	r1, [r7, #23]
 80035b8:	4619      	mov	r1, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	440b      	add	r3, r1
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	75fa      	strb	r2, [r7, #23]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	2203      	movs	r2, #3
 80035d0:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 80035d2:	e012      	b.n	80035fa <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60fa      	str	r2, [r7, #12]
 80035da:	7dfa      	ldrb	r2, [r7, #23]
 80035dc:	1c51      	adds	r1, r2, #1
 80035de:	75f9      	strb	r1, [r7, #23]
 80035e0:	4611      	mov	r1, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	440a      	add	r2, r1
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	75fa      	strb	r2, [r7, #23]
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4413      	add	r3, r2
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    while (*desc != NULL) 
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e8      	bne.n	80035d4 <USBD_GetString+0x50>
    }
  } 
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 8003616:	e005      	b.n	8003624 <USBD_GetLen+0x1a>
    {
        len++;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	3301      	adds	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3301      	adds	r3, #1
 8003622:	607b      	str	r3, [r7, #4]
    while (*buf != NULL) 
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f5      	bne.n	8003618 <USBD_GetLen+0xe>
    }

    return len;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
 800364c:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003656:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 8003660:	7b7b      	ldrb	r3, [r7, #13]
 8003662:	f043 0308 	orr.w	r3, r3, #8
 8003666:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	619a      	str	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
	...

0800367c <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8003690:	2003      	movs	r0, #3
 8003692:	f00f fb73 	bl	8012d7c <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <USB_OTG_CoreReset+0x8c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e026      	b.n	80036fe <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0e9      	beq.n	8003690 <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3301      	adds	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4a09      	ldr	r2, [pc, #36]	; (8003708 <USB_OTG_CoreReset+0x8c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d806      	bhi.n	80036f4 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d0ee      	beq.n	80036d0 <USB_OTG_CoreReset+0x54>
 80036f2:	e000      	b.n	80036f6 <USB_OTG_CoreReset+0x7a>
      break;
 80036f4:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80036f6:	2003      	movs	r0, #3
 80036f8:	f00f fb40 	bl	8012d7c <USB_OTG_BSP_uDelay>
  return status;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00030d40 	.word	0x00030d40

0800370c <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	460b      	mov	r3, r1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	4613      	mov	r3, r2
 8003720:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	78db      	ldrb	r3, [r3, #3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d122      	bne.n	8003774 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8003736:	88bb      	ldrh	r3, [r7, #4]
 8003738:	3303      	adds	r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	da00      	bge.n	8003740 <USB_OTG_WritePacket+0x34>
 800373e:	3303      	adds	r3, #3
 8003740:	109b      	asrs	r3, r3, #2
 8003742:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e009      	b.n	800376c <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	3301      	adds	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	3304      	adds	r3, #4
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	429a      	cmp	r2, r3
 8003772:	d3f1      	bcc.n	8003758 <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8003774:	7efb      	ldrb	r3, [r7, #27]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	3303      	adds	r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	da00      	bge.n	800379c <USB_OTG_ReadPacket+0x1c>
 800379a:	3303      	adds	r3, #3
 800379c:	109b      	asrs	r3, r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037a6:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e009      	b.n	80037c2 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	3304      	adds	r3, #4
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3f1      	bcc.n	80037ae <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 80037ca:	68bb      	ldr	r3, [r7, #8]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3724      	adds	r7, #36	; 0x24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2240      	movs	r2, #64	; 0x40
 80037fc:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d113      	bne.n	800382c <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8003804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003808:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2208      	movs	r2, #8
 8003814:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2204      	movs	r2, #4
 800381a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003822:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	721a      	strb	r2, [r3, #8]
 800382a:	e011      	b.n	8003850 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8003832:	4b45      	ldr	r3, [pc, #276]	; (8003948 <USB_OTG_SelectCore+0x170>)
 8003834:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	220c      	movs	r2, #12
 8003840:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2206      	movs	r2, #6
 8003846:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800384e:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e01c      	b.n	80038a2 <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8003874:	4619      	mov	r1, r3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3304      	adds	r3, #4
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 800388e:	4619      	mov	r1, r3
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	3314      	adds	r3, #20
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3301      	adds	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	461a      	mov	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d3dc      	bcc.n	8003868 <USB_OTG_SelectCore+0x90>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e00f      	b.n	80038ee <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80038da:	4619      	mov	r1, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3322      	adds	r3, #34	; 0x22
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3301      	adds	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d3e9      	bcc.n	80038ce <USB_OTG_SelectCore+0xf6>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e00f      	b.n	8003920 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390c:	4619      	mov	r1, r3
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3301      	adds	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4293      	cmp	r3, r2
 800392a:	d3e9      	bcc.n	8003900 <USB_OTG_SelectCore+0x128>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40040000 	.word	0x40040000

0800394c <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7a1b      	ldrb	r3, [r3, #8]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d142      	bne.n	80039f2 <USB_OTG_CoreInit+0xa6>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	f36f 0300 	bfc	r3, #0, #1
 800397a:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7a5b      	ldrb	r3, [r3, #9]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	f043 0310 	orr.w	r3, r3, #16
 800398a:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80039a0:	7c3b      	ldrb	r3, [r7, #16]
 80039a2:	f36f 1386 	bfc	r3, #6, #1
 80039a6:	743b      	strb	r3, [r7, #16]
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80039a8:	7cbb      	ldrb	r3, [r7, #18]
 80039aa:	f36f 1386 	bfc	r3, #6, #1
 80039ae:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 80039b0:	7cbb      	ldrb	r3, [r7, #18]
 80039b2:	f36f 0341 	bfc	r3, #1, #1
 80039b6:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 80039b8:	7cbb      	ldrb	r3, [r7, #18]
 80039ba:	f36f 03c3 	bfc	r3, #3, #1
 80039be:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe57 	bl	800367c <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	78db      	ldrb	r3, [r3, #3]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d139      	bne.n	8003a4a <USB_OTG_CoreInit+0xfe>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80039d6:	7a3b      	ldrb	r3, [r7, #8]
 80039d8:	2205      	movs	r2, #5
 80039da:	f362 0344 	bfi	r3, r2, #1, #4
 80039de:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 80039e0:	7a3b      	ldrb	r3, [r7, #8]
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e02b      	b.n	8003a4a <USB_OTG_CoreInit+0xfe>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 80039fa:	7c3b      	ldrb	r3, [r7, #16]
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe36 	bl	800367c <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8003a1c:	7bbb      	ldrb	r3, [r7, #14]
 8003a1e:	f043 0304 	orr.w	r3, r3, #4
 8003a22:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8003a24:	7bbb      	ldrb	r3, [r7, #14]
 8003a26:	f043 0308 	orr.w	r3, r3, #8
 8003a2a:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7a5b      	ldrb	r3, [r3, #9]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <USB_OTG_CoreInit+0xf0>
    {
      gccfg.b.sofouten = 1;  
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	f043 0310 	orr.w	r3, r3, #16
 8003a3a:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8003a44:	2014      	movs	r0, #20
 8003a46:	f00f f9bd 	bl	8012dc4 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	78db      	ldrb	r3, [r3, #3]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d110      	bne.n	8003a74 <USB_OTG_CoreInit+0x128>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8003a5a:	7a3b      	ldrb	r3, [r7, #8]
 8003a5c:	2205      	movs	r2, #5
 8003a5e:	f362 0344 	bfi	r3, r2, #1, #4
 8003a62:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 8003a64:	7a3b      	ldrb	r3, [r7, #8]
 8003a66:	f043 0320 	orr.w	r3, r3, #32
 8003a6a:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8003a8e:	7a3b      	ldrb	r3, [r7, #8]
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	6899      	ldr	r1, [r3, #8]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  return status;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8003ac2:	7a3b      	ldrb	r3, [r7, #8]
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	400a      	ands	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f043 0320 	orr.w	r3, r3, #32
 8003b04:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f362 138a 	bfi	r3, r2, #6, #5
 8003b14:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <USB_OTG_FlushTxFifo+0x6c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d806      	bhi.n	8003b42 <USB_OTG_FlushTxFifo+0x5a>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d0ee      	beq.n	8003b1e <USB_OTG_FlushTxFifo+0x36>
 8003b40:	e000      	b.n	8003b44 <USB_OTG_FlushTxFifo+0x5c>
      break;
 8003b42:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8003b44:	2003      	movs	r0, #3
 8003b46:	f00f f919 	bl	8012d7c <USB_OTG_BSP_uDelay>
  return status;
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00030d40 	.word	0x00030d40

08003b58 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f043 0310 	orr.w	r3, r3, #16
 8003b72:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3301      	adds	r3, #1
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <USB_OTG_FlushRxFifo+0x5c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d806      	bhi.n	8003ba0 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d0ee      	beq.n	8003b7c <USB_OTG_FlushRxFifo+0x24>
 8003b9e:	e000      	b.n	8003ba2 <USB_OTG_FlushRxFifo+0x4a>
      break;
 8003ba0:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	f00f f8ea 	bl	8012d7c <USB_OTG_BSP_uDelay>
  return status;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	00030d40 	.word	0x00030d40

08003bb8 <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8003bd0:	7afb      	ldrb	r3, [r7, #11]
 8003bd2:	f36f 1345 	bfc	r3, #5, #1
 8003bd6:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	f36f 1386 	bfc	r3, #6, #1
 8003bde:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d104      	bne.n	8003bf0 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f043 0320 	orr.w	r3, r3, #32
 8003bec:	72fb      	strb	r3, [r7, #11]
 8003bee:	e006      	b.n	8003bfe <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfc:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8003c06:	2032      	movs	r0, #50	; 0x32
 8003c08:	f00f f8dc 	bl	8012dc4 <USB_OTG_BSP_mDelay>
  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0301 	and.w	r3, r3, #1
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ffeb 	bl	8003c16 <USB_OTG_GetMode>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  return v;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	7b3b      	ldrb	r3, [r7, #12]
 8003c9e:	f362 0301 	bfi	r3, r2, #0, #2
 8003ca2:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b08c      	sub	sp, #48	; 0x30
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8003cea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003cee:	f36f 03c4 	bfc	r3, #3, #2
 8003cf2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	6a3a      	ldr	r2, [r7, #32]
 8003cfc:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7adb      	ldrb	r3, [r3, #11]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d133      	bne.n	8003d6e <USB_OTG_CoreInitDev+0xb8>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8003d06:	2103      	movs	r1, #3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ffb9 	bl	8003c80 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8003d16:	2320      	movs	r3, #32
 8003d18:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8003d26:	8bba      	ldrh	r2, [r7, #28]
 8003d28:	8bfb      	ldrh	r3, [r7, #30]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8003d3e:	8b3a      	ldrh	r2, [r7, #24]
 8003d40:	8b7b      	ldrh	r3, [r7, #26]
 8003d42:	4413      	add	r3, r2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8003d56:	8b3a      	ldrh	r2, [r7, #24]
 8003d58:	8b7b      	ldrh	r3, [r7, #26]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8003d6e:	2110      	movs	r1, #16
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff feb9 	bl	8003ae8 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff feee 	bl	8003b58 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295
 8003d94:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da2:	e03a      	b.n	8003e1a <USB_OTG_CoreInitDev+0x164>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	3304      	adds	r3, #4
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8003db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <USB_OTG_CoreInitDev+0x12a>
    {
      depctl.d32 = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8003dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8003dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd6:	f043 0308 	orr.w	r3, r3, #8
 8003dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dde:	e001      	b.n	8003de4 <USB_OTG_CoreInitDev+0x12e>
    }
    else
    {
      depctl.d32 = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	3304      	adds	r3, #4
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	3304      	adds	r3, #4
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	22ff      	movs	r2, #255	; 0xff
 8003e12:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	3301      	adds	r3, #1
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d3be      	bcc.n	8003da4 <USB_OTG_CoreInitDev+0xee>
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2a:	e035      	b.n	8003e98 <USB_OTG_CoreInitDev+0x1e2>
  {
    USB_OTG_DEPCTL_TypeDef  depctl_2;
    depctl_2.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	3314      	adds	r3, #20
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
    if (depctl_2.b.epena)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <USB_OTG_CoreInitDev+0x1a8>
    {
      depctl_2.d32 = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
      depctl_2.b.epdis = 1;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e52:	73fb      	strb	r3, [r7, #15]
      depctl_2.b.snak = 1;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	f043 0308 	orr.w	r3, r3, #8
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e001      	b.n	8003e62 <USB_OTG_CoreInitDev+0x1ac>
    }
    else
    {
      depctl_2.d32 = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl_2.d32);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	3314      	adds	r3, #20
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	3314      	adds	r3, #20
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	3314      	adds	r3, #20
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	22ff      	movs	r2, #255	; 0xff
 8003e90:	609a      	str	r2, [r3, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	3301      	adds	r3, #1
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d3c3      	bcc.n	8003e2c <USB_OTG_CoreInitDev+0x176>
  }
  msk.d32 = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 8003ea8:	7d7b      	ldrb	r3, [r7, #21]
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	ea02 0103 	and.w	r1, r2, r3
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	78db      	ldrb	r3, [r3, #3]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d11b      	bne.n	8003f08 <USB_OTG_CoreInitDev+0x252>
  {
    dthrctl.d32 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8003ed4:	7c3b      	ldrb	r3, [r7, #16]
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 8003edc:	7c3b      	ldrb	r3, [r7, #16]
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8003ee4:	8a3b      	ldrh	r3, [r7, #16]
 8003ee6:	2240      	movs	r2, #64	; 0x40
 8003ee8:	f362 038a 	bfi	r3, r2, #2, #9
 8003eec:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 8003eee:	7cbb      	ldrb	r3, [r7, #18]
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	2240      	movs	r2, #64	; 0x40
 8003efa:	f362 0349 	bfi	r3, r2, #1, #9
 8003efe:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f806 	bl	8003f1a <USB_OTG_EnableDevInt>
  return status;
 8003f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	; 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f3a:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fb7b 	bl	8003638 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	78db      	ldrb	r3, [r3, #3]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8003f4a:	7a3b      	ldrb	r3, [r7, #8]
 8003f4c:	f043 0310 	orr.w	r3, r3, #16
 8003f50:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 8003f52:	7a7b      	ldrb	r3, [r7, #9]
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8003f5a:	7a7b      	ldrb	r3, [r7, #9]
 8003f5c:	f043 0310 	orr.w	r3, r3, #16
 8003f60:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 8003f62:	7a7b      	ldrb	r3, [r7, #9]
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8003f6a:	7abb      	ldrb	r3, [r7, #10]
 8003f6c:	f043 0304 	orr.w	r3, r3, #4
 8003f70:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 8003f72:	7abb      	ldrb	r3, [r7, #10]
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 8003f7a:	7a3b      	ldrb	r3, [r7, #8]
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	723b      	strb	r3, [r7, #8]
  
  intmsk.b.incomplisoin    = 1; 
 8003f82:	7abb      	ldrb	r3, [r7, #10]
 8003f84:	f043 0310 	orr.w	r3, r3, #16
 8003f88:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 8003f8a:	7abb      	ldrb	r3, [r7, #10]
 8003f8c:	f043 0320 	orr.w	r3, r3, #32
 8003f90:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	72fb      	strb	r3, [r7, #11]
  intmsk.b.otgintr    = 1;    
 8003f9a:	7a3b      	ldrb	r3, [r7, #8]
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	723b      	strb	r3, [r7, #8]
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	ea02 0103 	and.w	r1, r2, r3
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	619a      	str	r2, [r3, #24]
  return status;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8003fd8:	7a3b      	ldrb	r3, [r7, #8]
 8003fda:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d008      	beq.n	8003ff6 <USB_OTG_GetDeviceSpeed+0x32>
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	dc03      	bgt.n	8003ff0 <USB_OTG_GetDeviceSpeed+0x2c>
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d004      	beq.n	8003ff6 <USB_OTG_GetDeviceSpeed+0x32>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d005      	beq.n	8003ffc <USB_OTG_GetDeviceSpeed+0x38>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ff4:	e005      	b.n	8004002 <USB_OTG_GetDeviceSpeed+0x3e>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8003ffa:	e002      	b.n	8004002 <USB_OTG_GetDeviceSpeed+0x3e>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8004000:	bf00      	nop
  }
  
  return speed;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 800402e:	7c3b      	ldrb	r3, [r7, #16]
 8004030:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d004      	beq.n	8004044 <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 800403a:	89bb      	ldrh	r3, [r7, #12]
 800403c:	f36f 030a 	bfc	r3, #0, #11
 8004040:	81bb      	strh	r3, [r7, #12]
    break;
 8004042:	e005      	b.n	8004050 <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8004044:	89bb      	ldrh	r3, [r7, #12]
 8004046:	2203      	movs	r2, #3
 8004048:	f362 030a 	bfi	r3, r2, #0, #11
 800404c:	81bb      	strh	r3, [r7, #12]
    break;
 800404e:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8004058:	7a7b      	ldrb	r3, [r7, #9]
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	43db      	mvns	r3, r3
 800406a:	ea02 0103 	and.w	r1, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  return status;
 8004078:	7dfb      	ldrb	r3, [r7, #23]
}
 800407a:	4618      	mov	r0, r3
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10f      	bne.n	80040c2 <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	2301      	movs	r3, #1
 80040ba:	4093      	lsls	r3, r2
 80040bc:	b29b      	uxth	r3, r3
 80040be:	813b      	strh	r3, [r7, #8]
 80040c0:	e00e      	b.n	80040e0 <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	3314      	adds	r3, #20
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	2301      	movs	r3, #1
 80040da:	4093      	lsls	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 80040e6:	7b7b      	ldrb	r3, [r7, #13]
 80040e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d125      	bne.n	800413e <USB_OTG_EPActivate+0xba>
  {
    depctl.b.mps    = ep->maxpacket;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	89bb      	ldrh	r3, [r7, #12]
 80040fe:	f362 030a 	bfi	r3, r2, #0, #11
 8004102:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	78db      	ldrb	r3, [r3, #3]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	b2da      	uxtb	r2, r3
 800410e:	7bbb      	ldrb	r3, [r7, #14]
 8004110:	f362 0383 	bfi	r3, r2, #2, #2
 8004114:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	88db      	ldrh	r3, [r3, #6]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	b2da      	uxtb	r2, r3
 8004120:	89fb      	ldrh	r3, [r7, #14]
 8004122:	f362 1389 	bfi	r3, r2, #6, #4
 8004126:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	f043 0310 	orr.w	r3, r3, #16
 800412e:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 8004130:	7b7b      	ldrb	r3, [r7, #13]
 8004132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004136:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	430a      	orrs	r2, r1
 800414c:	61da      	str	r2, [r3, #28]
  return status;
 800414e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 800416c:	2300      	movs	r3, #0
 800416e:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10f      	bne.n	8004198 <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	2301      	movs	r3, #1
 8004190:	4093      	lsls	r3, r2
 8004192:	b29b      	uxth	r3, r3
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	e00e      	b.n	80041b6 <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	3314      	adds	r3, #20
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	2301      	movs	r3, #1
 80041b0:	4093      	lsls	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	f36f 13c7 	bfc	r3, #7, #1
 80041bc:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	69d9      	ldr	r1, [r3, #28]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	43da      	mvns	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	400a      	ands	r2, r1
 80041d4:	61da      	str	r2, [r3, #28]
  return status;
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b088      	sub	sp, #32
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	785b      	ldrb	r3, [r3, #1]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 80aa 	bne.w	800435a <USB_OTG_EPStartXfer+0x178>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f36f 0312 	bfc	r3, #0, #19
 8004238:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 800423a:	8a7b      	ldrh	r3, [r7, #18]
 800423c:	2201      	movs	r2, #1
 800423e:	f362 03cc 	bfi	r3, r2, #3, #10
 8004242:	827b      	strh	r3, [r7, #18]
 8004244:	e021      	b.n	800428a <USB_OTG_EPStartXfer+0xa8>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f362 0312 	bfi	r3, r2, #0, #19
 8004254:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	4413      	add	r3, r2
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426e:	b29a      	uxth	r2, r3
 8004270:	8a7b      	ldrh	r3, [r7, #18]
 8004272:	f362 03cc 	bfi	r3, r2, #3, #10
 8004276:	827b      	strh	r3, [r7, #18]
      
      if (ep->type == EP_TYPE_ISOC)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	78db      	ldrb	r3, [r3, #3]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d104      	bne.n	800428a <USB_OTG_EPStartXfer+0xa8>
      {
        deptsiz.b.mc = 1;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2201      	movs	r2, #1
 8004284:	f362 1346 	bfi	r3, r2, #5, #2
 8004288:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	78db      	ldrb	r3, [r3, #3]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10a      	bne.n	80042ba <USB_OTG_EPStartXfer+0xd8>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6912      	ldr	r2, [r2, #16]
 80042b6:	615a      	str	r2, [r3, #20]
 80042b8:	e015      	b.n	80042e6 <USB_OTG_EPStartXfer+0x104>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	78db      	ldrb	r3, [r3, #3]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d011      	beq.n	80042e6 <USB_OTG_EPStartXfer+0x104>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <USB_OTG_EPStartXfer+0x104>
        {
          fifoemptymsk = 1 << ep->num;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	2301      	movs	r3, #1
 80042d2:	4093      	lsls	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d114      	bne.n	8004318 <USB_OTG_EPStartXfer+0x136>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <USB_OTG_EPStartXfer+0x12e>
      {
        depctl.b.setd1pid = 1;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	75fb      	strb	r3, [r7, #23]
 800430e:	e003      	b.n	8004318 <USB_OTG_EPStartXfer+0x136>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	f043 0310 	orr.w	r3, r3, #16
 8004316:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004326:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 808b 	bne.w	800445a <USB_OTG_EPStartXfer+0x278>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68d9      	ldr	r1, [r3, #12]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	b29b      	uxth	r3, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff f9da 	bl	800370c <USB_OTG_WritePacket>
 8004358:	e07f      	b.n	800445a <USB_OTG_EPStartXfer+0x278>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	3314      	adds	r3, #20
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	3314      	adds	r3, #20
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <USB_OTG_EPStartXfer+0x1c0>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f362 0312 	bfi	r3, r2, #0, #19
 8004394:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8004396:	8a7b      	ldrh	r3, [r7, #18]
 8004398:	2201      	movs	r2, #1
 800439a:	f362 03cc 	bfi	r3, r2, #3, #10
 800439e:	827b      	strh	r3, [r7, #18]
 80043a0:	e022      	b.n	80043e8 <USB_OTG_EPStartXfer+0x206>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4413      	add	r3, r2
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	8a7b      	ldrh	r3, [r7, #18]
 80043be:	f362 03cc 	bfi	r3, r2, #3, #10
 80043c2:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 80043c4:	8a7b      	ldrh	r3, [r7, #18]
 80043c6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	6892      	ldr	r2, [r2, #8]
 80043d4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80043d8:	fb02 f203 	mul.w	r2, r2, r3
 80043dc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f362 0312 	bfi	r3, r2, #0, #19
 80043e6:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	3314      	adds	r3, #20
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	78db      	ldrb	r3, [r3, #3]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d109      	bne.n	8004416 <USB_OTG_EPStartXfer+0x234>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	3314      	adds	r3, #20
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	6912      	ldr	r2, [r2, #16]
 8004414:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10c      	bne.n	8004438 <USB_OTG_EPStartXfer+0x256>
    {
      if (ep->even_odd_frame)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	795b      	ldrb	r3, [r3, #5]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <USB_OTG_EPStartXfer+0x24e>
      {
        depctl.b.setd1pid = 1;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	75fb      	strb	r3, [r7, #23]
 800442e:	e003      	b.n	8004438 <USB_OTG_EPStartXfer+0x256>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	f043 0310 	orr.w	r3, r3, #16
 8004436:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	3314      	adds	r3, #20
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	601a      	str	r2, [r3, #0]
  }
  return status;
 800445a:	7ffb      	ldrb	r3, [r7, #31]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d16e      	bne.n	8004564 <USB_OTG_EP0StartXfer+0x100>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 80044a0:	7a3b      	ldrb	r3, [r7, #8]
 80044a2:	f36f 0306 	bfc	r3, #0, #7
 80044a6:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80044a8:	7abb      	ldrb	r3, [r7, #10]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f362 03c4 	bfi	r3, r2, #3, #2
 80044b0:	72bb      	strb	r3, [r7, #10]
 80044b2:	e021      	b.n	80044f8 <USB_OTG_EP0StartXfer+0x94>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d90d      	bls.n	80044dc <USB_OTG_EP0StartXfer+0x78>
      {
        ep->xfer_len = ep->maxpacket;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	7a3b      	ldrb	r3, [r7, #8]
 80044d4:	f362 0306 	bfi	r3, r2, #0, #7
 80044d8:	723b      	strb	r3, [r7, #8]
 80044da:	e008      	b.n	80044ee <USB_OTG_EP0StartXfer+0x8a>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	7a3b      	ldrb	r3, [r7, #8]
 80044e8:	f362 0306 	bfi	r3, r2, #0, #7
 80044ec:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 80044ee:	7abb      	ldrb	r3, [r7, #10]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f362 03c4 	bfi	r3, r2, #3, #2
 80044f6:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	78db      	ldrb	r3, [r3, #3]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d109      	bne.n	800451a <USB_OTG_EP0StartXfer+0xb6>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	6912      	ldr	r2, [r2, #16]
 8004518:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8004522:	7cfb      	ldrb	r3, [r7, #19]
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	78db      	ldrb	r3, [r3, #3]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d174      	bne.n	8004622 <USB_OTG_EP0StartXfer+0x1be>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d070      	beq.n	8004622 <USB_OTG_EP0StartXfer+0x1be>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	2301      	movs	r3, #1
 8004548:	4093      	lsls	r3, r2
 800454a:	461a      	mov	r2, r3
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	430a      	orrs	r2, r1
 8004560:	635a      	str	r2, [r3, #52]	; 0x34
 8004562:	e05e      	b.n	8004622 <USB_OTG_EP0StartXfer+0x1be>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	3314      	adds	r3, #20
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	3314      	adds	r3, #20
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10e      	bne.n	80045ae <USB_OTG_EP0StartXfer+0x14a>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004598:	b2da      	uxtb	r2, r3
 800459a:	7a3b      	ldrb	r3, [r7, #8]
 800459c:	f362 0306 	bfi	r3, r2, #0, #7
 80045a0:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80045a2:	7abb      	ldrb	r3, [r7, #10]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f362 03c4 	bfi	r3, r2, #3, #2
 80045aa:	72bb      	strb	r3, [r7, #10]
 80045ac:	e011      	b.n	80045d2 <USB_OTG_EP0StartXfer+0x16e>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	7a3b      	ldrb	r3, [r7, #8]
 80045c2:	f362 0306 	bfi	r3, r2, #0, #7
 80045c6:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80045c8:	7abb      	ldrb	r3, [r7, #10]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f362 03c4 	bfi	r3, r2, #3, #2
 80045d0:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	3314      	adds	r3, #20
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d109      	bne.n	8004600 <USB_OTG_EP0StartXfer+0x19c>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	3314      	adds	r3, #20
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	6912      	ldr	r2, [r2, #16]
 80045fe:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	3314      	adds	r3, #20
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 8004622:	7ffb      	ldrb	r3, [r7, #31]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3724      	adds	r7, #36	; 0x24
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800462e:	b480      	push	{r7}
 8004630:	b087      	sub	sp, #28
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d11c      	bne.n	8004682 <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004670:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e011      	b.n	80046a6 <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	3314      	adds	r3, #20
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	f043 0320 	orr.w	r3, r3, #32
 800469e:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	601a      	str	r2, [r3, #0]
  }
  return status;
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b087      	sub	sp, #28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d108      	bne.n	80046de <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e007      	b.n	80046ee <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	3314      	adds	r3, #20
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
 80046f6:	f36f 1345 	bfc	r3, #5, #1
 80046fa:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <USB_OTG_EPClearStall+0x5a>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	78db      	ldrb	r3, [r3, #3]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d103      	bne.n	8004714 <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	f043 0310 	orr.w	r3, r3, #16
 8004712:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	601a      	str	r2, [r3, #0]
  return status;
 800471a:	7cfb      	ldrb	r3, [r7, #19]
}
 800471c:	4618      	mov	r0, r3
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4013      	ands	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	0c1b      	lsrs	r3, r3, #16
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	3314      	adds	r3, #20
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4013      	ands	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  return v;
 8004778:	68fb      	ldr	r3, [r7, #12]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	b29b      	uxth	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047c0:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 80047c2:	7cbb      	ldrb	r3, [r7, #18]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f362 03c4 	bfi	r3, r2, #3, #2
 80047ca:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 80047cc:	7c3b      	ldrb	r3, [r7, #16]
 80047ce:	2218      	movs	r2, #24
 80047d0:	f362 0306 	bfi	r3, r2, #0, #7
 80047d4:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	78db      	ldrb	r3, [r3, #3]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d116      	bne.n	8004814 <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f203 52cc 	addw	r2, r3, #1484	; 0x5cc
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 8004806:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800480a:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]
  }
}
 8004814:	bf00      	nop
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	7a9b      	ldrb	r3, [r3, #10]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01b      	beq.n	8004866 <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 8004836:	7b3b      	ldrb	r3, [r7, #12]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d011      	beq.n	8004866 <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(pdev->regs.PCGCCTL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 800484c:	7a3b      	ldrb	r3, [r7, #8]
 800484e:	f36f 0341 	bfc	r3, #1, #1
 8004852:	723b      	strb	r3, [r7, #8]
      power.b.stoppclk = 0;
 8004854:	7a3b      	ldrb	r3, [r7, #8]
 8004856:	f36f 0300 	bfc	r3, #0, #1
 800485a:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fe ffa9 	bl	80037d8 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e024      	b.n	80048e6 <DCD_Init+0x76>
  {
    ep = &pdev->dev.in_ep[i];
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2201      	movs	r2, #1
 80048b6:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2200      	movs	r2, #0
 80048cc:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2240      	movs	r2, #64	; 0x40
 80048d2:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d3d4      	bcc.n	800489c <DCD_Init+0x2c>
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e024      	b.n	8004942 <DCD_Init+0xd2>
  {
    ep = &pdev->dev.out_ep[i];
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	3304      	adds	r3, #4
 800490c:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2200      	movs	r2, #0
 8004912:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	b2da      	uxtb	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	b29a      	uxth	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2200      	movs	r2, #0
 800493a:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4293      	cmp	r3, r2
 800494c:	d3d4      	bcc.n	80048f8 <DCD_Init+0x88>
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff f8af 	bl	8003ab2 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fe fff9 	bl	800394c <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 800495a:	2100      	movs	r1, #0
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff f92b 	bl	8003bb8 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff f9a7 	bl	8003cb6 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff f888 	bl	8003a7e <USB_OTG_EnableGlobalInt>
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	461a      	mov	r2, r3
 8004984:	4603      	mov	r3, r0
 8004986:	70fb      	strb	r3, [r7, #3]
 8004988:	460b      	mov	r3, r1
 800498a:	803b      	strh	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8004990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004994:	2b00      	cmp	r3, #0
 8004996:	da0d      	bge.n	80049b4 <DCD_EP_Open+0x3e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e00c      	b.n	80049ce <DCD_EP_Open+0x58>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	3304      	adds	r3, #4
 80049cc:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80049da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	09db      	lsrs	r3, r3, #7
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80049ea:	883a      	ldrh	r2, [r7, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	78ba      	ldrb	r2, [r7, #2]
 80049f4:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <DCD_EP_Open+0x92>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8004a08:	78bb      	ldrb	r3, [r7, #2]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d102      	bne.n	8004a14 <DCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff fb34 	bl	8004084 <USB_OTG_EPActivate>
  return 0;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8004a32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da0d      	bge.n	8004a56 <DCD_EP_Close+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e00c      	b.n	8004a70 <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8004a7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	09db      	lsrs	r3, r3, #7
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8004a8c:	68f9      	ldr	r1, [r7, #12]
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fb63 	bl	800415a <USB_OTG_EPDeactivate>
  return 0;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	460b      	mov	r3, r1
 8004aac:	72fb      	strb	r3, [r7, #11]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8004ab2:	7afb      	ldrb	r3, [r7, #11]
 8004ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3304      	adds	r3, #4
 8004aca:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 8004ad2:	893a      	ldrh	r2, [r7, #8]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2200      	movs	r2, #0
 8004adc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	78db      	ldrb	r3, [r3, #3]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d102      	bne.n	8004afe <DCD_EP_PrepareRx+0x60>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <DCD_EP_PrepareRx+0x72>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fcab 	bl	8004464 <USB_OTG_EP0StartXfer>
 8004b0e:	e003      	b.n	8004b18 <DCD_EP_PrepareRx+0x7a>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff fb65 	bl	80041e2 <USB_OTG_EPStartXfer>
  }
  return 0;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	3304      	adds	r3, #4
 8004b4a:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <DCD_EP_Tx+0x66>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fc6f 	bl	8004464 <USB_OTG_EP0StartXfer>
 8004b86:	e003      	b.n	8004b90 <DCD_EP_Tx+0x6e>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8004b88:	6979      	ldr	r1, [r7, #20]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fb29 	bl	80041e2 <USB_OTG_EPStartXfer>
  }
  return 0;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8004ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da0d      	bge.n	8004bca <DCD_EP_Stall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e00a      	b.n	8004be0 <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4413      	add	r3, r2
 8004bdc:	3304      	adds	r3, #4
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8004bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fd12 	bl	800462e <USB_OTG_EPSetStall>
  return (0);
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8004c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	da0d      	bge.n	8004c44 <DCD_EP_ClrStall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3304      	adds	r3, #4
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e00a      	b.n	8004c5a <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	3304      	adds	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8004c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8004c7c:	68f9      	ldr	r1, [r7, #12]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fd17 	bl	80046b2 <USB_OTG_EPClearStall>
  return (0);
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <DCD_EP_Flush>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]

  if ((epnum & 0x80) == 0x80)
 8004c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da07      	bge.n	8004cb2 <DCD_EP_Flush+0x24>
  {
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fe ff1c 	bl	8003ae8 <USB_OTG_FlushTxFifo>
 8004cb0:	e002      	b.n	8004cb8 <DCD_EP_Flush+0x2a>
  }
  else
  {
    USB_OTG_FlushRxFifo(pdev);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fe ff50 	bl	8003b58 <USB_OTG_FlushRxFifo>
  }

  return (0);
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	89bb      	ldrh	r3, [r7, #12]
 8004cdc:	f362 130a 	bfi	r3, r2, #4, #7
 8004ce0:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fe ff92 	bl	8003c32 <USB_OTG_IsDeviceMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80b6 	beq.w	8004e82 <USBD_OTG_ISR_Handler+0x186>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe ff9c 	bl	8003c54 <USB_OTG_ReadCoreItr>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e0ac      	b.n	8004e84 <USBD_OTG_ISR_Handler+0x188>
    }
    
    if (gintr_status.b.outepintr)
 8004d2a:	7cbb      	ldrb	r3, [r7, #18]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa4c 	bl	80051d4 <DCD_HandleOutEP_ISR>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 8004d44:	7cbb      	ldrb	r3, [r7, #18]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f971 	bl	8005038 <DCD_HandleInEP_ISR>
 8004d56:	4602      	mov	r2, r0
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8004d5e:	7c3b      	ldrb	r3, [r7, #16]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 8004d6e:	7b3b      	ldrb	r3, [r7, #12]
 8004d70:	f043 0302 	orr.w	r3, r3, #2
 8004d74:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8b6 	bl	8004efc <DCD_HandleResume_ISR>
 8004d90:	4602      	mov	r2, r0
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8004d98:	7c7b      	ldrb	r3, [r7, #17]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d006      	beq.n	8004db2 <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f8e9 	bl	8004f7c <DCD_HandleUSBSuspend_ISR>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8004db2:	7c3b      	ldrb	r3, [r7, #16]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d006      	beq.n	8004dcc <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fab0 	bl	8005324 <DCD_HandleSof_ISR>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8004dcc:	7c3b      	ldrb	r3, [r7, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d006      	beq.n	8004de6 <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fabd 	bl	8005358 <DCD_HandleRxStatusQueueLevel_ISR>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8004de6:	7c7b      	ldrb	r3, [r7, #17]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fbba 	bl	800556c <DCD_HandleUsbReset_ISR>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8004e00:	7c7b      	ldrb	r3, [r7, #17]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d006      	beq.n	8004e1a <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fc3d 	bl	800568c <DCD_HandleEnumDone_ISR>
 8004e12:	4602      	mov	r2, r0
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8004e1a:	7cbb      	ldrb	r3, [r7, #18]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fc6c 	bl	8005704 <DCD_IsoINIncomplete_ISR>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 8004e34:	7cbb      	ldrb	r3, [r7, #18]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d006      	beq.n	8004e4e <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fc79 	bl	8005738 <DCD_IsoOUTIncomplete_ISR>
 8004e46:	4602      	mov	r2, r0
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]
    }    
#ifdef VBUS_SENSING_ENABLED
    if (gintr_status.b.sessreqintr)
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <USBD_OTG_ISR_Handler+0x16c>
    {
      retval |= DCD_SessionRequest_ISR(pdev);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f816 	bl	8004e8c <DCD_SessionRequest_ISR>
 8004e60:	4602      	mov	r2, r0
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.otgintr)
 8004e68:	7c3b      	ldrb	r3, [r7, #16]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d006      	beq.n	8004e82 <USBD_OTG_ISR_Handler+0x186>
    {
      retval |= DCD_OTG_ISR(pdev);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f823 	bl	8004ec0 <DCD_OTG_ISR>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    }   
#endif    
  }
  return retval;
 8004e82:	697b      	ldr	r3, [r7, #20]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <DCD_SessionRequest_ISR>:
*         Indicates that the USB_OTG controller has detected a connection
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_SessionRequest_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;  
  USBD_DCD_INT_fops->DevConnected (pdev);
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <DCD_SessionRequest_ISR+0x30>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3

  /* Clear interrupt */
  gintsts.d32 = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  gintsts.b.sessreqintr = 1;
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea8:	73fb      	strb	r3, [r7, #15]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);   
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	615a      	str	r2, [r3, #20]
  return 1;
 8004eb2:	2301      	movs	r3, #1
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200000b8 	.word	0x200000b8

08004ec0 <DCD_OTG_ISR>:
*                 used to detect the end of session i.e. disconnection
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_OTG_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

  USB_OTG_GOTGINT_TypeDef  gotgint;

  gotgint.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GOTGINT);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]
  
  if (gotgint.b.sesenddet)
 8004ed0:	7b3b      	ldrb	r3, [r7, #12]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <DCD_OTG_ISR+0x26>
  {
    USBD_DCD_INT_fops->DevDisconnected (pdev);
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <DCD_OTG_ISR+0x38>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
  }
  /* Clear OTG interrupt */
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GOTGINT, gotgint.d32); 
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
  return 1;
 8004eee:	2301      	movs	r3, #1
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200000b8 	.word	0x200000b8

08004efc <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7a9b      	ldrb	r3, [r3, #10]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d011      	beq.n	8004f30 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(pdev->regs.PCGCCTL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 8004f16:	7b3b      	ldrb	r3, [r7, #12]
 8004f18:	f36f 0341 	bfc	r3, #1, #1
 8004f1c:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 8004f1e:	7b3b      	ldrb	r3, [r7, #12]
 8004f20:	f36f 0300 	bfc	r3, #0, #1
 8004f24:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 8004f34:	7c3b      	ldrb	r3, [r7, #16]
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	43da      	mvns	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <DCD_HandleResume_ISR+0x7c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f62:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	615a      	str	r2, [r3, #20]
  return 1;
 8004f6c:	2301      	movs	r3, #1
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	200000b8 	.word	0x200000b8

08004f7c <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	72fb      	strb	r3, [r7, #11]
  
  prev_status = pdev->dev.device_status;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004f8e:	72fb      	strb	r3, [r7, #11]
  USBD_DCD_INT_fops->Suspend (pdev);      
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <DCD_HandleUSBSuspend_ISR+0xb4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 8004fa6:	7d7b      	ldrb	r3, [r7, #21]
 8004fa8:	f043 0308 	orr.w	r3, r3, #8
 8004fac:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	7a9b      	ldrb	r3, [r3, #10]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d032      	beq.n	8005024 <DCD_HandleUSBSuspend_ISR+0xa8>
 8004fbe:	7b3b      	ldrb	r3, [r7, #12]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02c      	beq.n	8005024 <DCD_HandleUSBSuspend_ISR+0xa8>
    (pdev->dev.connection_status == 1) && 
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d127      	bne.n	8005024 <DCD_HandleUSBSuspend_ISR+0xa8>
    (prev_status  == USB_OTG_CONFIGURED))
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	b2db      	uxtb	r3, r3
    (pdev->dev.connection_status == 1) && 
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d123      	bne.n	8005024 <DCD_HandleUSBSuspend_ISR+0xa8>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 8004fe0:	7c3b      	ldrb	r3, [r7, #16]
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 8004ffc:	7c3b      	ldrb	r3, [r7, #16]
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <DCD_HandleUSBSuspend_ISR+0xb8>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4a05      	ldr	r2, [pc, #20]	; (8005034 <DCD_HandleUSBSuspend_ISR+0xb8>)
 800501e:	f043 0306 	orr.w	r3, r3, #6
 8005022:	6113      	str	r3, [r2, #16]
  }
  return 1;
 8005024:	2301      	movs	r3, #1
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	200000b8 	.word	0x200000b8
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fb9b 	bl	8004784 <USB_OTG_ReadDevAllInEPItr>
 800504e:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8005050:	e0b4      	b.n	80051bc <DCD_HandleInEP_ISR+0x184>
  {
    if (ep_intr&0x1) /* In ITR */
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80a9 	beq.w	80051b0 <DCD_HandleInEP_ISR+0x178>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fb81 	bl	800576c <DCD_ReadDevInEP>
 800506a:	4603      	mov	r3, r0
 800506c:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 800506e:	7a3b      	ldrb	r3, [r7, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d032      	beq.n	80050e0 <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 800507a:	2201      	movs	r2, #1
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	43da      	mvns	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	400a      	ands	r2, r1
 8005094:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	7a3b      	ldrb	r3, [r7, #8]
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	723b      	strb	r3, [r7, #8]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	3304      	adds	r3, #4
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 80050b2:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <DCD_HandleInEP_ISR+0x198>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	4611      	mov	r1, r2
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d10a      	bne.n	80050e0 <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <DCD_HandleInEP_ISR+0xa8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d102      	bne.n	80050e0 <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fb67 	bl	80047ae <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 80050e0:	7a3b      	ldrb	r3, [r7, #8]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 80050ec:	2300      	movs	r3, #0
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	7a3b      	ldrb	r3, [r7, #8]
 80050f2:	f043 0308 	orr.w	r3, r3, #8
 80050f6:	723b      	strb	r3, [r7, #8]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3304      	adds	r3, #4
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8005108:	7a3b      	ldrb	r3, [r7, #8]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 8005114:	2300      	movs	r3, #0
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	7a3b      	ldrb	r3, [r7, #8]
 800511a:	f043 0310 	orr.w	r3, r3, #16
 800511e:	723b      	strb	r3, [r7, #8]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	3304      	adds	r3, #4
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8005130:	7a3b      	ldrb	r3, [r7, #8]
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	7a3b      	ldrb	r3, [r7, #8]
 8005142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005146:	723b      	strb	r3, [r7, #8]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3304      	adds	r3, #4
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8005158:	7a3b      	ldrb	r3, [r7, #8]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8005164:	2300      	movs	r3, #0
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	7a3b      	ldrb	r3, [r7, #8]
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	723b      	strb	r3, [r7, #8]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3304      	adds	r3, #4
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 8005180:	7a3b      	ldrb	r3, [r7, #8]
 8005182:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d011      	beq.n	80051b0 <DCD_HandleInEP_ISR+0x178>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 800518c:	6939      	ldr	r1, [r7, #16]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f964 	bl	800545c <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	7a3b      	ldrb	r3, [r7, #8]
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	723b      	strb	r3, [r7, #8]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3304      	adds	r3, #4
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	3301      	adds	r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f47f af47 	bne.w	8005052 <DCD_HandleInEP_ISR+0x1a>
  }
  
  return 1;
 80051c4:	2301      	movs	r3, #1
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200000b8 	.word	0x200000b8

080051d4 <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fa9e 	bl	8004726 <USB_OTG_ReadDevAllOutEp_itr>
 80051ea:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 80051ec:	e08f      	b.n	800530e <DCD_HandleOutEP_ISR+0x13a>
  {
    if (ep_intr&0x1)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8084 	beq.w	8005302 <DCD_HandleOutEP_ISR+0x12e>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff faa5 	bl	8004750 <USB_OTG_ReadDevOutEP_itr>
 8005206:	4603      	mov	r3, r0
 8005208:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 800520a:	7b3b      	ldrb	r3, [r7, #12]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d048      	beq.n	80052a8 <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	7b3b      	ldrb	r3, [r7, #12]
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	733b      	strb	r3, [r7, #12]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	3314      	adds	r3, #20
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	78db      	ldrb	r3, [r3, #3]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d11f      	bne.n	800527a <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3314      	adds	r3, #20
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	440b      	add	r3, r1
 8005258:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800525c:	681b      	ldr	r3, [r3, #0]
            deptsiz.b.xfersize;
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	f3c2 0212 	ubfx	r2, r2, #0, #19
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8005264:	1a99      	subs	r1, r3, r2
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4403      	add	r3, r0
 8005274:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8005278:	6019      	str	r1, [r3, #0]
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <DCD_HandleOutEP_ISR+0x14c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	4611      	mov	r1, r2
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10a      	bne.n	80052a8 <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <DCD_HandleOutEP_ISR+0xd4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d102      	bne.n	80052a8 <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fa83 	bl	80047ae <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80052a8:	7b3b      	ldrb	r3, [r7, #12]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	7b3b      	ldrb	r3, [r7, #12]
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	733b      	strb	r3, [r7, #12]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3314      	adds	r3, #20
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 80052d0:	7b3b      	ldrb	r3, [r7, #12]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d012      	beq.n	8005302 <DCD_HandleOutEP_ISR+0x12e>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <DCD_HandleOutEP_ISR+0x14c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	7b3b      	ldrb	r3, [r7, #12]
 80052ec:	f043 0308 	orr.w	r3, r3, #8
 80052f0:	733b      	strb	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3314      	adds	r3, #20
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	3301      	adds	r3, #1
 8005306:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f47f af6c 	bne.w	80051ee <DCD_HandleOutEP_ISR+0x1a>
  }
  return 1;
 8005316:	2301      	movs	r3, #1
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	200000b8 	.word	0x200000b8

08005324 <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <DCD_HandleSof_ISR+0x30>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 800533a:	7b3b      	ldrb	r3, [r7, #12]
 800533c:	f043 0308 	orr.w	r3, r3, #8
 8005340:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	615a      	str	r2, [r3, #20]
  
  return 1;
 800534a:	2301      	movs	r3, #1
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200000b8 	.word	0x200000b8

08005358 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 8005364:	7c3b      	ldrb	r3, [r7, #16]
 8005366:	f043 0310 	orr.w	r3, r3, #16
 800536a:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	6999      	ldr	r1, [r3, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43da      	mvns	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	400a      	ands	r2, r1
 800537c:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8005386:	7b3b      	ldrb	r3, [r7, #12]
 8005388:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	f503 735c 	add.w	r3, r3, #880	; 0x370
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4413      	add	r3, r2
 80053a0:	3304      	adds	r3, #4
 80053a2:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d844      	bhi.n	800543c <DCD_HandleRxStatusQueueLevel_ISR+0xe4>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	080053d1 	.word	0x080053d1
 80053c0:	0800543d 	.word	0x0800543d
 80053c4:	0800543d 	.word	0x0800543d
 80053c8:	0800543d 	.word	0x0800543d
 80053cc:	08005419 	.word	0x08005419
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 80053d0:	89ba      	ldrh	r2, [r7, #12]
 80053d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d030      	beq.n	8005440 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	68d9      	ldr	r1, [r3, #12]
 80053e2:	89bb      	ldrh	r3, [r7, #12]
 80053e4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fe f9c7 	bl	8003780 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	89ba      	ldrh	r2, [r7, #12]
 80053f8:	f3c2 120a 	ubfx	r2, r2, #4, #11
 80053fc:	b292      	uxth	r2, r2
 80053fe:	441a      	add	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	89ba      	ldrh	r2, [r7, #12]
 800540a:	f3c2 120a 	ubfx	r2, r2, #4, #11
 800540e:	b292      	uxth	r2, r2
 8005410:	441a      	add	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	619a      	str	r2, [r3, #24]
    }
    break;
 8005416:	e013      	b.n	8005440 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 800541e:	2208      	movs	r2, #8
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fe f9ac 	bl	8003780 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	89ba      	ldrh	r2, [r7, #12]
 800542e:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8005432:	b292      	uxth	r2, r2
 8005434:	441a      	add	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	619a      	str	r2, [r3, #24]
    break;
 800543a:	e002      	b.n	8005442 <DCD_HandleRxStatusQueueLevel_ISR+0xea>
  default:
    break;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <DCD_HandleRxStatusQueueLevel_ISR+0xea>
    break;
 8005440:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	6999      	ldr	r1, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
  
  return 1;
 8005452:	2301      	movs	r3, #1
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  txstatus.d32 = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.in_ep[epnum];    
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4413      	add	r3, r2
 8005480:	3304      	adds	r3, #4
 8005482:	617b      	str	r3, [r7, #20]
  
  len = ep->xfer_len - ep->xfer_count;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	429a      	cmp	r2, r3
 8005498:	d902      	bls.n	80054a0 <DCD_WriteEmptyTxFifo+0x44>
  {
    len = ep->maxpacket;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	61fb      	str	r3, [r7, #28]
  }
  
  len32b = (len + 3) / 4;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	3303      	adds	r3, #3
 80054a4:	089b      	lsrs	r3, r3, #2
 80054a6:	61bb      	str	r3, [r7, #24]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	60fb      	str	r3, [r7, #12]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80054b8:	e044      	b.n	8005544 <DCD_WriteEmptyTxFifo+0xe8>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d902      	bls.n	80054d6 <DCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3303      	adds	r3, #3
 80054da:	089b      	lsrs	r3, r3, #2
 80054dc:	61bb      	str	r3, [r7, #24]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe f90e 	bl	800370c <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	441a      	add	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	441a      	add	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	619a      	str	r2, [r3, #24]
        }

    (the "break;" is not important - the while loop anyway will quit on next while condition - it just saves you checking this next while condition).
#endif
    		//ZS - added see above
            if( ep->xfer_count >= ep->xfer_len){
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	429a      	cmp	r2, r3
 8005512:	d30f      	bcc.n	8005534 <DCD_WriteEmptyTxFifo+0xd8>
              uint32_t fifoemptymsk = 1 << ep->num;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	2301      	movs	r3, #1
 800551c:	4093      	lsls	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
              USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	43da      	mvns	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	400a      	ands	r2, r1
 8005530:	635a      	str	r2, [r3, #52]	; 0x34
              break;
 8005532:	e016      	b.n	8005562 <DCD_WriteEmptyTxFifo+0x106>
            }
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	3304      	adds	r3, #4
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	60fb      	str	r3, [r7, #12]
  while  (txstatus.b.txfspcavail > len32b &&
 8005544:	89bb      	ldrh	r3, [r7, #12]
 8005546:	461a      	mov	r2, r3
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	4293      	cmp	r3, r2
 800554c:	d209      	bcs.n	8005562 <DCD_WriteEmptyTxFifo+0x106>
          ep->xfer_count < ep->xfer_len &&
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	695b      	ldr	r3, [r3, #20]
  while  (txstatus.b.txfspcavail > len32b &&
 8005556:	429a      	cmp	r2, r3
 8005558:	d203      	bcs.n	8005562 <DCD_WriteEmptyTxFifo+0x106>
            ep->xfer_len != 0)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1ab      	bne.n	80054ba <DCD_WriteEmptyTxFifo+0x5e>
  }
  
  return 1;
 8005562:	2301      	movs	r3, #1
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 800558c:	7c3b      	ldrb	r3, [r7, #16]
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	43da      	mvns	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	400a      	ands	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fe fa9d 	bl	8003ae8 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	e012      	b.n	80055da <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	3304      	adds	r3, #4
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	3314      	adds	r3, #20
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	3301      	adds	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	461a      	mov	r2, r3
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d3e6      	bcc.n	80055b4 <DCD_HandleUsbReset_ISR+0x48>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
 80055ee:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 80055f0:	2301      	movs	r3, #1
 80055f2:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 80055f4:	2301      	movs	r3, #1
 80055f6:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 8005600:	7f3b      	ldrb	r3, [r7, #28]
 8005602:	f043 0308 	orr.w	r3, r3, #8
 8005606:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 8005608:	7f3b      	ldrb	r3, [r7, #28]
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 8005610:	7f3b      	ldrb	r3, [r7, #28]
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 8005620:	7e3b      	ldrb	r3, [r7, #24]
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8005628:	7e3b      	ldrb	r3, [r7, #24]
 800562a:	f043 0308 	orr.w	r3, r3, #8
 800562e:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 8005630:	7e3b      	ldrb	r3, [r7, #24]
 8005632:	f043 0302 	orr.w	r3, r3, #2
 8005636:	763b      	strb	r3, [r7, #24]

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8005648:	8abb      	ldrh	r3, [r7, #20]
 800564a:	f36f 130a 	bfc	r3, #4, #7
 800564e:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff f8a8 	bl	80047ae <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	f043 0310 	orr.w	r3, r3, #16
 8005668:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <DCD_HandleUsbReset_ISR+0x11c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
  return 1;
 800567c:	2301      	movs	r3, #1
}
 800567e:	4618      	mov	r0, r3
 8005680:	3728      	adds	r7, #40	; 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200000b8 	.word	0x200000b8

0800568c <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7fe fcba 	bl	800400e <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fe fc8e 	bl	8003fc4 <USB_OTG_GetDeviceSpeed>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d10c      	bne.n	80056c8 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ba:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 80056bc:	7a7b      	ldrb	r3, [r7, #9]
 80056be:	2209      	movs	r2, #9
 80056c0:	f362 0385 	bfi	r3, r2, #2, #4
 80056c4:	727b      	strb	r3, [r7, #9]
 80056c6:	e00a      	b.n	80056de <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2240      	movs	r2, #64	; 0x40
 80056d2:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 80056d4:	7a7b      	ldrb	r3, [r7, #9]
 80056d6:	2205      	movs	r2, #5
 80056d8:	f362 0385 	bfi	r3, r2, #2, #4
 80056dc:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 80056ea:	7b7b      	ldrb	r3, [r7, #13]
 80056ec:	f043 0320 	orr.w	r3, r3, #32
 80056f0:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	615a      	str	r2, [r3, #20]
  return 1;
 80056fa:	2301      	movs	r3, #1
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 8005710:	4b08      	ldr	r3, [pc, #32]	; (8005734 <DCD_IsoINIncomplete_ISR+0x30>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 800571a:	7bbb      	ldrb	r3, [r7, #14]
 800571c:	f043 0310 	orr.w	r3, r3, #16
 8005720:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	615a      	str	r2, [r3, #20]
  
  return 1;
 800572a:	2301      	movs	r3, #1
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	200000b8 	.word	0x200000b8

08005738 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <DCD_IsoOUTIncomplete_ISR+0x30>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	f043 0320 	orr.w	r3, r3, #32
 8005754:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	615a      	str	r2, [r3, #20]
  return 1;
 800575e:	2301      	movs	r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200000b8 	.word	0x200000b8

0800576c <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	01db      	lsls	r3, r3, #7
 8005792:	b2db      	uxtb	r3, r3
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4013      	ands	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  return v;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <main>:
 */

extern int dw_main(void);

int main(void)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
	int ret = dw_main();
 80057c0:	f000 f92e 	bl	8005a20 <dw_main>
 80057c4:	6078      	str	r0, [r7, #4]
	return ret;
 80057c6:	687b      	ldr	r3, [r7, #4]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <inittestapplication>:
uint8 dataseq1[LCD_BUFF_LEN];

int ranging = 0;

uint32 inittestapplication(uint8 mode_switch)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
    uint32 devID ;
    int result;

    port_set_dw1000_slowrate();  //max SPI before PLLs configured is ~4M
 80057da:	f00c fe6f 	bl	80124bc <port_set_dw1000_slowrate>

    //this is called here to wake up the device (i.e. if it was in sleep mode before the restart)
    devID = instancereaddeviceid();
 80057de:	f005 fb5b 	bl	800ae98 <instancereaddeviceid>
 80057e2:	6178      	str	r0, [r7, #20]
    if(DWT_DEVICE_ID != devID) //if the read of device ID fails, the DW1000 could be asleep
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4a35      	ldr	r2, [pc, #212]	; (80058bc <inittestapplication+0xec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00d      	beq.n	8005808 <inittestapplication+0x38>
    {
        port_wakeup_dw1000();
 80057ec:	f00c fe52 	bl	8012494 <port_wakeup_dw1000>

        devID = instancereaddeviceid() ;
 80057f0:	f005 fb52 	bl	800ae98 <instancereaddeviceid>
 80057f4:	6178      	str	r0, [r7, #20]
        // SPI not working or Unsupported Device ID
        if(DWT_DEVICE_ID != devID)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	4a30      	ldr	r2, [pc, #192]	; (80058bc <inittestapplication+0xec>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d002      	beq.n	8005804 <inittestapplication+0x34>
            return(-1) ;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	e057      	b.n	80058b4 <inittestapplication+0xe4>
        //clear the sleep bit - so that after the hard reset below the DW does not go into sleep
        dwt_softreset();
 8005804:	f00c f856 	bl	80118b4 <dwt_softreset>
    }

    //reset the DW1000 by driving the RSTn line low
    reset_DW1000();
 8005808:	f00c fd7a 	bl	8012300 <reset_DW1000>


    result = instance_init() ;
 800580c:	f005 fa5c 	bl	800acc8 <instance_init>
 8005810:	6138      	str	r0, [r7, #16]
    if (0 > result) return(-1) ; // Some failure has occurred
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	da02      	bge.n	800581e <inittestapplication+0x4e>
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	e04a      	b.n	80058b4 <inittestapplication+0xe4>



    port_set_dw1000_fastrate();
 800581e:	f00c fe54 	bl	80124ca <port_set_dw1000_fastrate>
    devID = instancereaddeviceid() ;
 8005822:	f005 fb39 	bl	800ae98 <instancereaddeviceid>
 8005826:	6178      	str	r0, [r7, #20]

    if (DWT_DEVICE_ID != devID)   // Means it is NOT DW1000 device
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4a24      	ldr	r2, [pc, #144]	; (80058bc <inittestapplication+0xec>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d002      	beq.n	8005836 <inittestapplication+0x66>
    {
        // SPI not working or Unsupported Device ID
        return(-1) ;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	e03e      	b.n	80058b4 <inittestapplication+0xe4>
    }

    instance_init_s();
 8005836:	f002 fd95 	bl	8008364 <instance_init_s>
	int dr_mode = decarangingmode(mode_switch);
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fe35 	bl	80094ac <decarangingmode>
 8005842:	60f8      	str	r0, [r7, #12]
	instance_data_t* inst = instance_get_local_structure_ptr(0);
 8005844:	2000      	movs	r0, #0
 8005846:	f003 fdf9 	bl	800943c <instance_get_local_structure_ptr>
 800584a:	60b8      	str	r0, [r7, #8]
	

    chan = inst->chConfig[dr_mode].channelNumber ;
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	440b      	add	r3, r1
 800585a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800585e:	331a      	adds	r3, #26
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <inittestapplication+0xf0>)
 8005866:	601a      	str	r2, [r3, #0]
    prf = (inst->chConfig[dr_mode].pulseRepFreq == DWT_PRF_16M)? 16 : 64 ;
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	440b      	add	r3, r1
 8005876:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800587a:	331c      	adds	r3, #28
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <inittestapplication+0xb6>
 8005882:	2310      	movs	r3, #16
 8005884:	e000      	b.n	8005888 <inittestapplication+0xb8>
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	4a0e      	ldr	r2, [pc, #56]	; (80058c4 <inittestapplication+0xf4>)
 800588a:	6013      	str	r3, [r2, #0]

    instance_config(&inst->chConfig[dr_mode]) ;                  // Set operating channel etc
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800589a:	3318      	adds	r3, #24
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	4413      	add	r3, r2
 80058a0:	3302      	adds	r3, #2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 fb00 	bl	800aea8 <instance_config>

    instance_init_timings();
 80058a8:	f002 fd96 	bl	80083d8 <instance_init_timings>

    inst->mode =  DISCOVERY;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]

    return devID;
 80058b2:	697b      	ldr	r3, [r7, #20]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	deca0130 	.word	0xdeca0130
 80058c0:	20004ed4 	.word	0x20004ed4
 80058c4:	20004ed0 	.word	0x20004ed0

080058c8 <initLCD>:

void initLCD(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
    uint8 initseq[9] = { 0x39, 0x14, 0x55, 0x6D, 0x78, 0x38 /*0x3C*/, 0x0C, 0x01, 0x06 };
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <initLCD+0x5c>)
 80058d0:	f107 0308 	add.w	r3, r7, #8
 80058d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80058d6:	c303      	stmia	r3!, {r0, r1}
 80058d8:	701a      	strb	r2, [r3, #0]
    uint8 command = 0x0;
 80058da:	2300      	movs	r3, #0
 80058dc:	71fb      	strb	r3, [r7, #7]
    int j = 100000;
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <initLCD+0x60>)
 80058e0:	617b      	str	r3, [r7, #20]

    writetoLCD( 9, 0,  initseq); //init seq
 80058e2:	f107 0308 	add.w	r3, r7, #8
 80058e6:	461a      	mov	r2, r3
 80058e8:	2100      	movs	r1, #0
 80058ea:	2009      	movs	r0, #9
 80058ec:	f00c f908 	bl	8011b00 <writetoLCD>
    while(j--);
 80058f0:	bf00      	nop
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	617a      	str	r2, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1fa      	bne.n	80058f2 <initLCD+0x2a>

    command = 0x2 ;  //return cursor home
 80058fc:	2302      	movs	r3, #2
 80058fe:	71fb      	strb	r3, [r7, #7]
    writetoLCD( 1, 0,  &command);
 8005900:	1dfb      	adds	r3, r7, #7
 8005902:	461a      	mov	r2, r3
 8005904:	2100      	movs	r1, #0
 8005906:	2001      	movs	r0, #1
 8005908:	f00c f8fa 	bl	8011b00 <writetoLCD>
    command = 0x1 ;  //clear screen
 800590c:	2301      	movs	r3, #1
 800590e:	71fb      	strb	r3, [r7, #7]
    writetoLCD( 1, 0,  &command);
 8005910:	1dfb      	adds	r3, r7, #7
 8005912:	461a      	mov	r2, r3
 8005914:	2100      	movs	r1, #0
 8005916:	2001      	movs	r0, #1
 8005918:	f00c f8f2 	bl	8011b00 <writetoLCD>
}
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	08017668 	.word	0x08017668
 8005928:	000186a0 	.word	0x000186a0

0800592c <setLCDline1>:

void setLCDline1(uint8 mode_switch)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
	uint8 command = 0x2 ;  //return cursor home
 8005936:	2302      	movs	r3, #2
 8005938:	73fb      	strb	r3, [r7, #15]
    writetoLCD( 1, 0,  &command);
 800593a:	f107 030f 	add.w	r3, r7, #15
 800593e:	461a      	mov	r2, r3
 8005940:	2100      	movs	r1, #0
 8005942:	2001      	movs	r0, #1
 8005944:	f00c f8dc 	bl	8011b00 <writetoLCD>

	sprintf((char*)&dataseq[0], "DecaRanging  %02x", mode_switch);
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	461a      	mov	r2, r3
 800594c:	490a      	ldr	r1, [pc, #40]	; (8005978 <setLCDline1+0x4c>)
 800594e:	480b      	ldr	r0, [pc, #44]	; (800597c <setLCDline1+0x50>)
 8005950:	f00e f90c 	bl	8013b6c <siprintf>
	writetoLCD( 40, 1, dataseq); //send some data
 8005954:	4a09      	ldr	r2, [pc, #36]	; (800597c <setLCDline1+0x50>)
 8005956:	2101      	movs	r1, #1
 8005958:	2028      	movs	r0, #40	; 0x28
 800595a:	f00c f8d1 	bl	8011b00 <writetoLCD>

	sprintf((char*)&dataseq1[0], "                 ");
 800595e:	4908      	ldr	r1, [pc, #32]	; (8005980 <setLCDline1+0x54>)
 8005960:	4808      	ldr	r0, [pc, #32]	; (8005984 <setLCDline1+0x58>)
 8005962:	f00e f903 	bl	8013b6c <siprintf>
	writetoLCD( 16, 1, dataseq1); //send some data
 8005966:	4a07      	ldr	r2, [pc, #28]	; (8005984 <setLCDline1+0x58>)
 8005968:	2101      	movs	r1, #1
 800596a:	2010      	movs	r0, #16
 800596c:	f00c f8c8 	bl	8011b00 <writetoLCD>
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	08017674 	.word	0x08017674
 800597c:	20004e08 	.word	0x20004e08
 8005980:	08017688 	.word	0x08017688
 8005984:	20004e6c 	.word	0x20004e6c

08005988 <configure_continuous_txspectrum_mode>:
/*
 * @fn configure_continuous_txspectrum_mode
 * @brief   test application for production to check the TX power in various modes
**/
void configure_continuous_txspectrum_mode(uint8 mode_switch)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af02      	add	r7, sp, #8
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
	if(port_is_switch_on(TA_SW1_4) == S1_SWITCH_ON)
 8005992:	2002      	movs	r0, #2
 8005994:	f00c fcf4 	bl	8012380 <port_is_switch_on>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d129      	bne.n	80059f2 <configure_continuous_txspectrum_mode+0x6a>
	{
		//LCD display ON

		uint8 command = 0x2 ;  //return cursor home
 800599e:	2302      	movs	r3, #2
 80059a0:	73fb      	strb	r3, [r7, #15]
		writetoLCD(1, 0,  &command);
 80059a2:	f107 030f 	add.w	r3, r7, #15
 80059a6:	461a      	mov	r2, r3
 80059a8:	2100      	movs	r1, #0
 80059aa:	2001      	movs	r0, #1
 80059ac:	f00c f8a8 	bl	8011b00 <writetoLCD>
		sprintf((char*)&dataseq[0], "Conti TX %s:%d:%d ", (mode_switch & SWS1_SHF_MODE) ? "S" : "L", chan, prf);
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <configure_continuous_txspectrum_mode+0x36>
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <configure_continuous_txspectrum_mode+0x7c>)
 80059bc:	e000      	b.n	80059c0 <configure_continuous_txspectrum_mode+0x38>
 80059be:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <configure_continuous_txspectrum_mode+0x80>)
 80059c0:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <configure_continuous_txspectrum_mode+0x84>)
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <configure_continuous_txspectrum_mode+0x88>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	460b      	mov	r3, r1
 80059cc:	4911      	ldr	r1, [pc, #68]	; (8005a14 <configure_continuous_txspectrum_mode+0x8c>)
 80059ce:	4812      	ldr	r0, [pc, #72]	; (8005a18 <configure_continuous_txspectrum_mode+0x90>)
 80059d0:	f00e f8cc 	bl	8013b6c <siprintf>
		writetoLCD(LCD_BUFF_LEN, 1, dataseq); //send some data
 80059d4:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <configure_continuous_txspectrum_mode+0x90>)
 80059d6:	2101      	movs	r1, #1
 80059d8:	2064      	movs	r0, #100	; 0x64
 80059da:	f00c f891 	bl	8011b00 <writetoLCD>
		memcpy(dataseq, (const uint8 *) "Spectrum Test   ", 17);
 80059de:	2211      	movs	r2, #17
 80059e0:	490e      	ldr	r1, [pc, #56]	; (8005a1c <configure_continuous_txspectrum_mode+0x94>)
 80059e2:	480d      	ldr	r0, [pc, #52]	; (8005a18 <configure_continuous_txspectrum_mode+0x90>)
 80059e4:	f00d fb28 	bl	8013038 <memcpy>
		writetoLCD(LCD_BUFF_LEN, 1, dataseq); //send some data
 80059e8:	4a0b      	ldr	r2, [pc, #44]	; (8005a18 <configure_continuous_txspectrum_mode+0x90>)
 80059ea:	2101      	movs	r1, #1
 80059ec:	2064      	movs	r0, #100	; 0x64
 80059ee:	f00c f887 	bl	8011b00 <writetoLCD>
	}

	//configure DW1000 into Continuous TX mode
	instance_starttxtest(0x1000);
 80059f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80059f6:	f003 fcf9 	bl	80093ec <instance_starttxtest>
	//measure channel power

	//user has to reset the board to exit mode
	while(1)
	{
		Sleep(2);
 80059fa:	2002      	movs	r0, #2
 80059fc:	f00c fa64 	bl	8011ec8 <Sleep>
 8005a00:	e7fb      	b.n	80059fa <configure_continuous_txspectrum_mode+0x72>
 8005a02:	bf00      	nop
 8005a04:	0801769c 	.word	0x0801769c
 8005a08:	080176a0 	.word	0x080176a0
 8005a0c:	20004ed4 	.word	0x20004ed4
 8005a10:	20004ed0 	.word	0x20004ed0
 8005a14:	080176a4 	.word	0x080176a4
 8005a18:	20004e08 	.word	0x20004e08
 8005a1c:	080176b8 	.word	0x080176b8

08005a20 <dw_main>:
/*
 * @fn      main()
 * @brief   main entry point
**/
int dw_main(void)
{
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b0c1      	sub	sp, #260	; 0x104
 8005a24:	af08      	add	r7, sp, #32
    int i = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    double range_result = 0;
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

    //LCD variables
    bool enableLCD = FALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	int toggle = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	uint8 command = 0x0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	uint32 toggle_period = 2000;
 8005a4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32 last_toggle = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	instance_data_t* inst = instance_get_local_structure_ptr(0);
 8005a58:	2000      	movs	r0, #0
 8005a5a:	f003 fcef 	bl	800943c <instance_get_local_structure_ptr>
 8005a5e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	//Configuration for DecaRanging Modes (8 default use cases selectable by the switch S1 on EVK)
	instanceConfig_t cfg1 = {
 8005a62:	4aa8      	ldr	r2, [pc, #672]	; (8005d04 <dw_main+0x2e4>)
 8005a64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a6a:	c303      	stmia	r3!, {r0, r1}
 8005a6c:	801a      	strh	r2, [r3, #0]
            DWT_PLEN_1024,  // preambleLength
            DWT_PAC32,      // pacSize
            1,       // non-standard SFD
            (1025 + 64 - 32) //SFD timeout
        };
	inst->chConfig[0] = cfg1;
 8005a6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a72:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8005a76:	331a      	adds	r3, #26
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005a7e:	cb03      	ldmia	r3!, {r0, r1}
 8005a80:	6010      	str	r0, [r2, #0]
 8005a82:	6051      	str	r1, [r2, #4]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	8113      	strh	r3, [r2, #8]
	instanceConfig_t cfg2 = {
 8005a88:	4a9f      	ldr	r2, [pc, #636]	; (8005d08 <dw_main+0x2e8>)
 8005a8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a90:	c303      	stmia	r3!, {r0, r1}
 8005a92:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_128,   // preambleLength
			DWT_PAC8,       // pacSize
			0,       // non-standard SFD
			(129 + 8 - 8) //SFD timeout
		};
	inst->chConfig[1] = cfg2;
 8005a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a98:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8005a9c:	3324      	adds	r3, #36	; 0x24
 8005a9e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8005aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005aa4:	c303      	stmia	r3!, {r0, r1}
 8005aa6:	801a      	strh	r2, [r3, #0]
	instanceConfig_t cfg3 = {
 8005aa8:	4a98      	ldr	r2, [pc, #608]	; (8005d0c <dw_main+0x2ec>)
 8005aaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ab0:	c303      	stmia	r3!, {r0, r1}
 8005ab2:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_1024,  // preambleLength
			DWT_PAC32,      // pacSize
			1,       // non-standard SFD
			(1025 + 64 - 32) //SFD timeout
		};
	inst->chConfig[2] = cfg3;
 8005ab4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ab8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8005abc:	332e      	adds	r3, #46	; 0x2e
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ac4:	cb03      	ldmia	r3!, {r0, r1}
 8005ac6:	6010      	str	r0, [r2, #0]
 8005ac8:	6051      	str	r1, [r2, #4]
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	8113      	strh	r3, [r2, #8]
	instanceConfig_t cfg4 = {
 8005ace:	4a90      	ldr	r2, [pc, #576]	; (8005d10 <dw_main+0x2f0>)
 8005ad0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ad6:	c303      	stmia	r3!, {r0, r1}
 8005ad8:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_128,   // preambleLength
			DWT_PAC8,       // pacSize
			0,       // non-standard SFD
			(129 + 8 - 8) //SFD timeout
		};
	inst->chConfig[3] = cfg4;
 8005ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ade:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8005ae2:	3338      	adds	r3, #56	; 0x38
 8005ae4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8005aea:	c303      	stmia	r3!, {r0, r1}
 8005aec:	801a      	strh	r2, [r3, #0]
	instanceConfig_t cfg5 = {
 8005aee:	4a89      	ldr	r2, [pc, #548]	; (8005d14 <dw_main+0x2f4>)
 8005af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005af6:	c303      	stmia	r3!, {r0, r1}
 8005af8:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_1024,  // preambleLength
			DWT_PAC32,      // pacSize
			1,       // non-standard SFD
			(1025 + 64 - 32) //SFD timeout
		};
	inst->chConfig[4] = cfg5;
 8005afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005afe:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8005b02:	3302      	adds	r3, #2
 8005b04:	461a      	mov	r2, r3
 8005b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b0a:	cb03      	ldmia	r3!, {r0, r1}
 8005b0c:	6010      	str	r0, [r2, #0]
 8005b0e:	6051      	str	r1, [r2, #4]
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	8113      	strh	r3, [r2, #8]
	instanceConfig_t cfg6 = {
 8005b14:	4a80      	ldr	r2, [pc, #512]	; (8005d18 <dw_main+0x2f8>)
 8005b16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b1c:	c303      	stmia	r3!, {r0, r1}
 8005b1e:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_128,   // preambleLength
			DWT_PAC8,       // pacSize
			0,       // non-standard SFD
			(129 + 8 - 8) //SFD timeout
		};
	inst->chConfig[5] = cfg6;
 8005b20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b24:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8005b28:	330c      	adds	r3, #12
 8005b2a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b30:	c303      	stmia	r3!, {r0, r1}
 8005b32:	801a      	strh	r2, [r3, #0]
	instanceConfig_t cfg7 = {
 8005b34:	4a79      	ldr	r2, [pc, #484]	; (8005d1c <dw_main+0x2fc>)
 8005b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b3c:	c303      	stmia	r3!, {r0, r1}
 8005b3e:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_1024,  // preambleLength
			DWT_PAC32,      // pacSize
			1,       // non-standard SFD
			(1025 + 64 - 32) //SFD timeout
		};
	inst->chConfig[6] = cfg7;
 8005b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b44:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8005b48:	3316      	adds	r3, #22
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b50:	cb03      	ldmia	r3!, {r0, r1}
 8005b52:	6010      	str	r0, [r2, #0]
 8005b54:	6051      	str	r1, [r2, #4]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	8113      	strh	r3, [r2, #8]
	instanceConfig_t cfg8 = {
 8005b5a:	4a71      	ldr	r2, [pc, #452]	; (8005d20 <dw_main+0x300>)
 8005b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b62:	c303      	stmia	r3!, {r0, r1}
 8005b64:	801a      	strh	r2, [r3, #0]
			DWT_PLEN_128,   // preambleLength
			DWT_PAC8,       // pacSize
			0,       // non-standard SFD
			(129 + 8 - 8) //SFD timeout
		};
	inst->chConfig[7] = cfg8;
 8005b66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b6a:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8005b6e:	3320      	adds	r3, #32
 8005b70:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005b74:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b76:	c303      	stmia	r3!, {r0, r1}
 8005b78:	801a      	strh	r2, [r3, #0]


    led_off(LED_ALL); //turn off all the LEDs
 8005b7a:	2004      	movs	r0, #4
 8005b7c:	f00c fc16 	bl	80123ac <led_off>

    peripherals_init();
 8005b80:	f00c f9b9 	bl	8011ef6 <peripherals_init>

    s1switch = port_is_boot1_on(0) << 1
 8005b84:	2000      	movs	r0, #0
 8005b86:	f00c fbe5 	bl	8012354 <port_is_boot1_on>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	005b      	lsls	r3, r3, #1
    		| port_is_switch_on(TA_SW1_3) << 2
 8005b8e:	b25c      	sxtb	r4, r3
 8005b90:	2001      	movs	r0, #1
 8005b92:	f00c fbf5 	bl	8012380 <port_is_switch_on>
 8005b96:	4603      	mov	r3, r0
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	4323      	orrs	r3, r4
 8005b9e:	b25c      	sxtb	r4, r3
    		| port_is_switch_on(TA_SW1_4) << 3
 8005ba0:	2002      	movs	r0, #2
 8005ba2:	f00c fbed 	bl	8012380 <port_is_switch_on>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	4323      	orrs	r3, r4
 8005bae:	b25c      	sxtb	r4, r3
    		| port_is_switch_on(TA_SW1_5) << 4
 8005bb0:	2004      	movs	r0, #4
 8005bb2:	f00c fbe5 	bl	8012380 <port_is_switch_on>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	4323      	orrs	r3, r4
 8005bbe:	b25c      	sxtb	r4, r3
		    | port_is_switch_on(TA_SW1_6) << 5
 8005bc0:	2008      	movs	r0, #8
 8005bc2:	f00c fbdd 	bl	8012380 <port_is_switch_on>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	015b      	lsls	r3, r3, #5
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	4323      	orrs	r3, r4
 8005bce:	b25c      	sxtb	r4, r3
    		| port_is_switch_on(TA_SW1_7) << 6
 8005bd0:	2010      	movs	r0, #16
 8005bd2:	f00c fbd5 	bl	8012380 <port_is_switch_on>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	019b      	lsls	r3, r3, #6
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	4323      	orrs	r3, r4
 8005bde:	b25c      	sxtb	r4, r3
    		| port_is_switch_on(TA_SW1_8) << 7;
 8005be0:	2020      	movs	r0, #32
 8005be2:	f00c fbcd 	bl	8012380 <port_is_switch_on>
 8005be6:	4603      	mov	r3, r0
 8005be8:	01db      	lsls	r3, r3, #7
 8005bea:	b25b      	sxtb	r3, r3
 8005bec:	4323      	orrs	r3, r4
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	b2da      	uxtb	r2, r3
    s1switch = port_is_boot1_on(0) << 1
 8005bf2:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <dw_main+0x304>)
 8005bf4:	701a      	strb	r2, [r3, #0]


    if(port_is_switch_on(TA_SW1_4) == S1_SWITCH_ON)
 8005bf6:	2002      	movs	r0, #2
 8005bf8:	f00c fbc2 	bl	8012380 <port_is_switch_on>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d102      	bne.n	8005c08 <dw_main+0x1e8>
	{
		//display ON
    	enableLCD = TRUE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	}

    if(enableLCD == TRUE)
 8005c08:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <dw_main+0x1f8>
    {
		spi_peripheral_init(1);
 8005c10:	2001      	movs	r0, #1
 8005c12:	f00c f97d 	bl	8011f10 <spi_peripheral_init>
 8005c16:	e002      	b.n	8005c1e <dw_main+0x1fe>
    }
    else
    {
    	spi_peripheral_init(0);
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f00c f979 	bl	8011f10 <spi_peripheral_init>
    }


    Sleep(1000); //wait for LCD to power on
 8005c1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c22:	f00c f951 	bl	8011ec8 <Sleep>


    if(enableLCD == TRUE)
 8005c26:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01f      	beq.n	8005c6e <dw_main+0x24e>
	{
    	initLCD();
 8005c2e:	f7ff fe4b 	bl	80058c8 <initLCD>

		memset(dataseq, 0x0, sizeof(dataseq));
 8005c32:	2264      	movs	r2, #100	; 0x64
 8005c34:	2100      	movs	r1, #0
 8005c36:	483c      	ldr	r0, [pc, #240]	; (8005d28 <dw_main+0x308>)
 8005c38:	f00d fa0c 	bl	8013054 <memset>
		writetoLCD(1, 0, dataseq);
 8005c3c:	4a3a      	ldr	r2, [pc, #232]	; (8005d28 <dw_main+0x308>)
 8005c3e:	2100      	movs	r1, #0
 8005c40:	2001      	movs	r0, #1
 8005c42:	f00b ff5d 	bl	8011b00 <writetoLCD>
		memcpy(dataseq, (const uint8 *) "GGRG UWB RANGING", 17);
 8005c46:	2211      	movs	r2, #17
 8005c48:	4938      	ldr	r1, [pc, #224]	; (8005d2c <dw_main+0x30c>)
 8005c4a:	4837      	ldr	r0, [pc, #220]	; (8005d28 <dw_main+0x308>)
 8005c4c:	f00d f9f4 	bl	8013038 <memcpy>
		writetoLCD(40, 1, dataseq); //send some data
 8005c50:	4a35      	ldr	r2, [pc, #212]	; (8005d28 <dw_main+0x308>)
 8005c52:	2101      	movs	r1, #1
 8005c54:	2028      	movs	r0, #40	; 0x28
 8005c56:	f00b ff53 	bl	8011b00 <writetoLCD>
		memcpy(dataseq, (const uint8 *) SOFTWARE_VER_STRING, 17);
 8005c5a:	2211      	movs	r2, #17
 8005c5c:	4934      	ldr	r1, [pc, #208]	; (8005d30 <dw_main+0x310>)
 8005c5e:	4832      	ldr	r0, [pc, #200]	; (8005d28 <dw_main+0x308>)
 8005c60:	f00d f9ea 	bl	8013038 <memcpy>
		writetoLCD(16, 1, dataseq); //send some data
 8005c64:	4a30      	ldr	r2, [pc, #192]	; (8005d28 <dw_main+0x308>)
 8005c66:	2101      	movs	r1, #1
 8005c68:	2010      	movs	r0, #16
 8005c6a:	f00b ff49 	bl	8011b00 <writetoLCD>
	}



    Sleep(1000);
 8005c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c72:	f00c f929 	bl	8011ec8 <Sleep>

    port_DisableEXT_IRQ(); 	//disable DW1000 IRQ until we configure the application
 8005c76:	f00c fc7b 	bl	8012570 <port_DisableEXT_IRQ>

#ifdef USB_SUPPORT
    // enable the USB functionality
    usb_init();
 8005c7a:	f00c ffb9 	bl	8012bf0 <usb_init>
    Sleep(1000);
 8005c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c82:	f00c f921 	bl	8011ec8 <Sleep>
    usb_run();
 8005c86:	f00c ffe7 	bl	8012c58 <usb_run>
#endif

    //run DecaRanging application

	led_off(LED_ALL);
 8005c8a:	2004      	movs	r0, #4
 8005c8c:	f00c fb8e 	bl	80123ac <led_off>

#ifdef USB_SUPPORT //this is set in the port.h file
	usb_printconfig(16, (uint8 *)SOFTWARE_VER_STRING, s1switch);
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <dw_main+0x304>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	4926      	ldr	r1, [pc, #152]	; (8005d30 <dw_main+0x310>)
 8005c98:	2010      	movs	r0, #16
 8005c9a:	f00c ff95 	bl	8012bc8 <usb_printconfig>
#endif

	if(inittestapplication(s1switch) == (uint32)-1)
 8005c9e:	4b21      	ldr	r3, [pc, #132]	; (8005d24 <dw_main+0x304>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fd94 	bl	80057d0 <inittestapplication>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d145      	bne.n	8005d3c <dw_main+0x31c>
	{
		if(enableLCD == TRUE)
 8005cb0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d023      	beq.n	8005d00 <dw_main+0x2e0>
		{
			led_on(LED_ALL); //to display error....
 8005cb8:	2004      	movs	r0, #4
 8005cba:	f00c fbb1 	bl	8012420 <led_on>
			dataseq[0] = 0x2 ;  //return cursor home
 8005cbe:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <dw_main+0x308>)
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	701a      	strb	r2, [r3, #0]
			writetoLCD(1, 0,  &dataseq[0]);
 8005cc4:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <dw_main+0x308>)
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f00b ff19 	bl	8011b00 <writetoLCD>
			memset(dataseq, ' ', LCD_BUFF_LEN);
 8005cce:	2264      	movs	r2, #100	; 0x64
 8005cd0:	2120      	movs	r1, #32
 8005cd2:	4815      	ldr	r0, [pc, #84]	; (8005d28 <dw_main+0x308>)
 8005cd4:	f00d f9be 	bl	8013054 <memset>
			memcpy(dataseq, (const uint8 *) "ERROR           ", 17);
 8005cd8:	2211      	movs	r2, #17
 8005cda:	4916      	ldr	r1, [pc, #88]	; (8005d34 <dw_main+0x314>)
 8005cdc:	4812      	ldr	r0, [pc, #72]	; (8005d28 <dw_main+0x308>)
 8005cde:	f00d f9ab 	bl	8013038 <memcpy>
			writetoLCD( 40, 1, dataseq); //send some data
 8005ce2:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <dw_main+0x308>)
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	2028      	movs	r0, #40	; 0x28
 8005ce8:	f00b ff0a 	bl	8011b00 <writetoLCD>
			memcpy(dataseq, (const uint8 *) "INIT FAIL       ", 17);
 8005cec:	2211      	movs	r2, #17
 8005cee:	4912      	ldr	r1, [pc, #72]	; (8005d38 <dw_main+0x318>)
 8005cf0:	480d      	ldr	r0, [pc, #52]	; (8005d28 <dw_main+0x308>)
 8005cf2:	f00d f9a1 	bl	8013038 <memcpy>
			writetoLCD( 16, 1, dataseq); //send some data
 8005cf6:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <dw_main+0x308>)
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	2010      	movs	r0, #16
 8005cfc:	f00b ff00 	bl	8011b00 <writetoLCD>
		}
		return 0; //error
 8005d00:	2300      	movs	r3, #0
 8005d02:	e3a3      	b.n	800644c <dw_main+0xa2c>
 8005d04:	08017800 	.word	0x08017800
 8005d08:	0801780c 	.word	0x0801780c
 8005d0c:	08017818 	.word	0x08017818
 8005d10:	08017824 	.word	0x08017824
 8005d14:	08017830 	.word	0x08017830
 8005d18:	0801783c 	.word	0x0801783c
 8005d1c:	08017848 	.word	0x08017848
 8005d20:	08017854 	.word	0x08017854
 8005d24:	20000344 	.word	0x20000344
 8005d28:	20004e08 	.word	0x20004e08
 8005d2c:	080176cc 	.word	0x080176cc
 8005d30:	080176e0 	.word	0x080176e0
 8005d34:	080176f4 	.word	0x080176f4
 8005d38:	08017708 	.word	0x08017708
	}

	tdma_init_s(inst->durationSlotMax_us);	//call after instance_init_timings() to get slot duration
 8005d3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d40:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	f003 fb90 	bl	800946c <tdma_init_s>

	if(enableLCD == TRUE)
 8005d4c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8087 	beq.w	8005e64 <dw_main+0x444>
	{
		dataseq[0] = 0x2 ;  //return cursor home
 8005d56:	4b51      	ldr	r3, [pc, #324]	; (8005e9c <dw_main+0x47c>)
 8005d58:	2202      	movs	r2, #2
 8005d5a:	701a      	strb	r2, [r3, #0]
		writetoLCD( 1, 0,  dataseq);
 8005d5c:	4a4f      	ldr	r2, [pc, #316]	; (8005e9c <dw_main+0x47c>)
 8005d5e:	2100      	movs	r1, #0
 8005d60:	2001      	movs	r0, #1
 8005d62:	f00b fecd 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005d66:	2264      	movs	r2, #100	; 0x64
 8005d68:	2120      	movs	r1, #32
 8005d6a:	484c      	ldr	r0, [pc, #304]	; (8005e9c <dw_main+0x47c>)
 8005d6c:	f00d f972 	bl	8013054 <memset>
		memcpy(dataseq, (const uint8 *) "MAX NETWORK SIZE", 17);
 8005d70:	2211      	movs	r2, #17
 8005d72:	494b      	ldr	r1, [pc, #300]	; (8005ea0 <dw_main+0x480>)
 8005d74:	4849      	ldr	r0, [pc, #292]	; (8005e9c <dw_main+0x47c>)
 8005d76:	f00d f95f 	bl	8013038 <memcpy>
		writetoLCD(40, 1, dataseq); //send some data
 8005d7a:	4a48      	ldr	r2, [pc, #288]	; (8005e9c <dw_main+0x47c>)
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	2028      	movs	r0, #40	; 0x28
 8005d80:	f00b febe 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005d84:	2264      	movs	r2, #100	; 0x64
 8005d86:	2120      	movs	r1, #32
 8005d88:	4844      	ldr	r0, [pc, #272]	; (8005e9c <dw_main+0x47c>)
 8005d8a:	f00d f963 	bl	8013054 <memset>
		sprintf((char*)&dataseq[0], "%d", UWB_LIST_SIZE);
 8005d8e:	220a      	movs	r2, #10
 8005d90:	4944      	ldr	r1, [pc, #272]	; (8005ea4 <dw_main+0x484>)
 8005d92:	4842      	ldr	r0, [pc, #264]	; (8005e9c <dw_main+0x47c>)
 8005d94:	f00d feea 	bl	8013b6c <siprintf>
		writetoLCD(16, 1, dataseq); //send some data
 8005d98:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <dw_main+0x47c>)
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	2010      	movs	r0, #16
 8005d9e:	f00b feaf 	bl	8011b00 <writetoLCD>

		Sleep(2000);
 8005da2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005da6:	f00c f88f 	bl	8011ec8 <Sleep>

		dataseq[0] = 0x2 ;  //return cursor home
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <dw_main+0x47c>)
 8005dac:	2202      	movs	r2, #2
 8005dae:	701a      	strb	r2, [r3, #0]
		writetoLCD( 1, 0,  dataseq);
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <dw_main+0x47c>)
 8005db2:	2100      	movs	r1, #0
 8005db4:	2001      	movs	r0, #1
 8005db6:	f00b fea3 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005dba:	2264      	movs	r2, #100	; 0x64
 8005dbc:	2120      	movs	r1, #32
 8005dbe:	4837      	ldr	r0, [pc, #220]	; (8005e9c <dw_main+0x47c>)
 8005dc0:	f00d f948 	bl	8013054 <memset>
		memcpy(dataseq, (const uint8 *) "SLOT DURATION   ", 17);
 8005dc4:	2211      	movs	r2, #17
 8005dc6:	4938      	ldr	r1, [pc, #224]	; (8005ea8 <dw_main+0x488>)
 8005dc8:	4834      	ldr	r0, [pc, #208]	; (8005e9c <dw_main+0x47c>)
 8005dca:	f00d f935 	bl	8013038 <memcpy>
		writetoLCD(40, 1, dataseq); //send some data
 8005dce:	4a33      	ldr	r2, [pc, #204]	; (8005e9c <dw_main+0x47c>)
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	2028      	movs	r0, #40	; 0x28
 8005dd4:	f00b fe94 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005dd8:	2264      	movs	r2, #100	; 0x64
 8005dda:	2120      	movs	r1, #32
 8005ddc:	482f      	ldr	r0, [pc, #188]	; (8005e9c <dw_main+0x47c>)
 8005dde:	f00d f939 	bl	8013054 <memset>
		sprintf((char*)&dataseq[0], "%llu us", inst->durationSlotMax_us);
 8005de2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005de6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005dea:	4930      	ldr	r1, [pc, #192]	; (8005eac <dw_main+0x48c>)
 8005dec:	482b      	ldr	r0, [pc, #172]	; (8005e9c <dw_main+0x47c>)
 8005dee:	f00d febd 	bl	8013b6c <siprintf>
		writetoLCD(16, 1, dataseq); //send some data
 8005df2:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <dw_main+0x47c>)
 8005df4:	2101      	movs	r1, #1
 8005df6:	2010      	movs	r0, #16
 8005df8:	f00b fe82 	bl	8011b00 <writetoLCD>

		Sleep(2000);
 8005dfc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005e00:	f00c f862 	bl	8011ec8 <Sleep>




		dataseq[0] = 0x2 ;  //return cursor home
 8005e04:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <dw_main+0x47c>)
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]
		writetoLCD( 1, 0,  dataseq);
 8005e0a:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <dw_main+0x47c>)
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f00b fe76 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005e14:	2264      	movs	r2, #100	; 0x64
 8005e16:	2120      	movs	r1, #32
 8005e18:	4820      	ldr	r0, [pc, #128]	; (8005e9c <dw_main+0x47c>)
 8005e1a:	f00d f91b 	bl	8013054 <memset>
		sprintf((char*)&dataseq[0], "TX DELAY: %.5u ", inst->txAntennaDelay);
 8005e1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e22:	8b1b      	ldrh	r3, [r3, #24]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4922      	ldr	r1, [pc, #136]	; (8005eb0 <dw_main+0x490>)
 8005e28:	481c      	ldr	r0, [pc, #112]	; (8005e9c <dw_main+0x47c>)
 8005e2a:	f00d fe9f 	bl	8013b6c <siprintf>
		writetoLCD(40, 1, dataseq); //send some data
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <dw_main+0x47c>)
 8005e30:	2101      	movs	r1, #1
 8005e32:	2028      	movs	r0, #40	; 0x28
 8005e34:	f00b fe64 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005e38:	2264      	movs	r2, #100	; 0x64
 8005e3a:	2120      	movs	r1, #32
 8005e3c:	4817      	ldr	r0, [pc, #92]	; (8005e9c <dw_main+0x47c>)
 8005e3e:	f00d f909 	bl	8013054 <memset>
		sprintf((char*)&dataseq[0], "RX DELAY: %.5u ", inst->rxAntennaDelay);
 8005e42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e46:	8b5b      	ldrh	r3, [r3, #26]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	491a      	ldr	r1, [pc, #104]	; (8005eb4 <dw_main+0x494>)
 8005e4c:	4813      	ldr	r0, [pc, #76]	; (8005e9c <dw_main+0x47c>)
 8005e4e:	f00d fe8d 	bl	8013b6c <siprintf>
		writetoLCD(16, 1, dataseq); //send some data
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <dw_main+0x47c>)
 8005e54:	2101      	movs	r1, #1
 8005e56:	2010      	movs	r0, #16
 8005e58:	f00b fe52 	bl	8011b00 <writetoLCD>

		Sleep(2000);
 8005e5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005e60:	f00c f832 	bl	8011ec8 <Sleep>

	}

	//test EVB1000 - used in EVK1000 production
	if((s1switch & SWS1_TXSPECT_MODE) == SWS1_TXSPECT_MODE) //to test TX power
 8005e64:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <dw_main+0x498>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	b25b      	sxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da04      	bge.n	8005e78 <dw_main+0x458>
	{
		//this function does not return!
		configure_continuous_txspectrum_mode(s1switch);
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <dw_main+0x498>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fd88 	bl	8005988 <configure_continuous_txspectrum_mode>
	}

	//sleep for 5 seconds displaying "Decawave"
	i=30;
 8005e78:	231e      	movs	r3, #30
 8005e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	while(i--)
 8005e7e:	e023      	b.n	8005ec8 <dw_main+0x4a8>
	{
		if(enableLCD == TRUE)
 8005e80:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01c      	beq.n	8005ec2 <dw_main+0x4a2>
		{
			if (i & 1) led_off(LED_ALL);
 8005e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <dw_main+0x49c>
 8005e94:	2004      	movs	r0, #4
 8005e96:	f00c fa89 	bl	80123ac <led_off>
 8005e9a:	e012      	b.n	8005ec2 <dw_main+0x4a2>
 8005e9c:	20004e08 	.word	0x20004e08
 8005ea0:	0801771c 	.word	0x0801771c
 8005ea4:	08017730 	.word	0x08017730
 8005ea8:	08017734 	.word	0x08017734
 8005eac:	08017748 	.word	0x08017748
 8005eb0:	08017750 	.word	0x08017750
 8005eb4:	08017760 	.word	0x08017760
 8005eb8:	20000344 	.word	0x20000344
			else    led_on(LED_ALL);
 8005ebc:	2004      	movs	r0, #4
 8005ebe:	f00c faaf 	bl	8012420 <led_on>
		}
		Sleep(200);
 8005ec2:	20c8      	movs	r0, #200	; 0xc8
 8005ec4:	f00c f800 	bl	8011ec8 <Sleep>
	while(i--)
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	1e5a      	subs	r2, r3, #1
 8005ece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1d4      	bne.n	8005e80 <dw_main+0x460>
	}
	i = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	led_off(LED_ALL);
 8005edc:	2004      	movs	r0, #4
 8005ede:	f00c fa65 	bl	80123ac <led_off>

	if(enableLCD == TRUE)
 8005ee2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <dw_main+0x4e8>
	{
		command = 0x2 ;  //return cursor home
 8005eea:	2302      	movs	r3, #2
 8005eec:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		writetoLCD( 1, 0,  &command);
 8005ef0:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	2001      	movs	r0, #1
 8005efa:	f00b fe01 	bl	8011b00 <writetoLCD>
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005efe:	2264      	movs	r2, #100	; 0x64
 8005f00:	2120      	movs	r1, #32
 8005f02:	48d6      	ldr	r0, [pc, #856]	; (800625c <dw_main+0x83c>)
 8005f04:	f00d f8a6 	bl	8013054 <memset>
	}

    if(enableLCD == TRUE)
 8005f08:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <dw_main+0x504>
	{
		memset(dataseq, ' ', LCD_BUFF_LEN);
 8005f10:	2264      	movs	r2, #100	; 0x64
 8005f12:	2120      	movs	r1, #32
 8005f14:	48d1      	ldr	r0, [pc, #836]	; (800625c <dw_main+0x83c>)
 8005f16:	f00d f89d 	bl	8013054 <memset>
		memset(dataseq1, ' ', LCD_BUFF_LEN);
 8005f1a:	2264      	movs	r2, #100	; 0x64
 8005f1c:	2120      	movs	r1, #32
 8005f1e:	48d0      	ldr	r0, [pc, #832]	; (8006260 <dw_main+0x840>)
 8005f20:	f00d f898 	bl	8013054 <memset>
	}

    port_EnableEXT_IRQ();
 8005f24:	f00c fb2b 	bl	801257e <port_EnableEXT_IRQ>

    last_toggle = portGetTickCnt();
 8005f28:	f00b fed2 	bl	8011cd0 <portGetTickCnt>
 8005f2c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	//TODO remove? struct TDMAHandler* tdma_handler =  tdma_get_local_structure_ptr();

    // main loop
    while(1)
    {
    	bool updateLCD = FALSE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		instance_run(); //run the state machine!!!
 8005f36:	f006 fdc7 	bl	800cac8 <instance_run>
		instance_mode = inst->mode;
 8005f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	4bc8      	ldr	r3, [pc, #800]	; (8006264 <dw_main+0x844>)
 8005f44:	601a      	str	r2, [r3, #0]

		if(inst->canPrintUSB == TRUE)
 8005f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8163 	beq.w	800621a <dw_main+0x7fa>
		{
			if(instancenewrange())
 8005f54:	f004 fe28 	bl	800aba8 <instancenewrange>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 815d 	beq.w	800621a <dw_main+0x7fa>
			{
				int n;
				updateLCD = TRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
				//send the new range information to LCD and/or USB
				int rng_rng = (int)(instance_get_idist(inst->newRangeUWBIndex)*1000);
 8005f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f6a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005f6e:	3308      	adds	r3, #8
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f005 f94a 	bl	800b20c <instance_get_idist>
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	4bba      	ldr	r3, [pc, #744]	; (8006268 <dw_main+0x848>)
 8005f7e:	f7fa fb17 	bl	80005b0 <__aeabi_dmul>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f7fa fdc1 	bl	8000b10 <__aeabi_d2iz>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				int rng_rsl = (int)(instance_get_idistrsl(inst->newRangeUWBIndex)*1000);
 8005f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f98:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f005 f94d 	bl	800b240 <instance_get_idistrsl>
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	4baf      	ldr	r3, [pc, #700]	; (8006268 <dw_main+0x848>)
 8005fac:	f7fa fb00 	bl	80005b0 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f7fa fdaa 	bl	8000b10 <__aeabi_d2iz>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				int rng_raw = (int)(instance_get_idistraw(inst->newRangeUWBIndex)*1000);
 8005fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fc6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005fca:	3308      	adds	r3, #8
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f005 f950 	bl	800b274 <instance_get_idistraw>
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	4ba3      	ldr	r3, [pc, #652]	; (8006268 <dw_main+0x848>)
 8005fda:	f7fa fae9 	bl	80005b0 <__aeabi_dmul>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7fa fd93 	bl	8000b10 <__aeabi_d2iz>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				int rsl = (int)(instance_get_irsl(inst->newRangeUWBIndex)*1000);
 8005ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ff4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f005 f953 	bl	800b2a8 <instance_get_irsl>
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	4b98      	ldr	r3, [pc, #608]	; (8006268 <dw_main+0x848>)
 8006008:	f7fa fad2 	bl	80005b0 <__aeabi_dmul>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	f7fa fd7c 	bl	8000b10 <__aeabi_d2iz>
 8006018:	4603      	mov	r3, r0
 800601a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

				uint64 saddr = instance_get_addr();
 800601e:	f003 f8e9 	bl	80091f4 <instance_get_addr>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	e9c7 2308 	strd	r2, r3, [r7, #32]
				uint64 aaddr = instancenewrangeancadd();
 800602a:	f004 fdd5 	bl	800abd8 <instancenewrangeancadd>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	e9c7 2306 	strd	r2, r3, [r7, #24]
				uint64 taddr = instancenewrangetagadd();
 8006036:	f004 fddf 	bl	800abf8 <instancenewrangetagadd>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	e9c7 2304 	strd	r2, r3, [r7, #16]

				if(enableLCD == TRUE)
 8006042:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80c2 	beq.w	80061d0 <dw_main+0x7b0>
				{
					//only update range on display if this UWB is one of the UWBs involved in the range measurement
					if(memcmp(&saddr, &aaddr, sizeof(uint64)) == 0 || memcmp(&saddr, &taddr, sizeof(uint64)) == 0){
 800604c:	f107 0118 	add.w	r1, r7, #24
 8006050:	f107 0320 	add.w	r3, r7, #32
 8006054:	2208      	movs	r2, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f00c ffe0 	bl	801301c <memcmp>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <dw_main+0x658>
 8006062:	f107 0110 	add.w	r1, r7, #16
 8006066:	f107 0320 	add.w	r3, r7, #32
 800606a:	2208      	movs	r2, #8
 800606c:	4618      	mov	r0, r3
 800606e:	f00c ffd5 	bl	801301c <memcmp>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <dw_main+0x66e>
						range_result = instance_get_idistrsl(inst->newRangeUWBIndex);
 8006078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800607c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006080:	3308      	adds	r3, #8
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f005 f8db 	bl	800b240 <instance_get_idistrsl>
 800608a:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
					}

					inst->RSL[inst->idxRSL] = instance_get_irsl(inst->newRangeUWBIndex);
 800608e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006092:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006096:	3308      	adds	r3, #8
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800609e:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80060a2:	3319      	adds	r3, #25
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	461c      	mov	r4, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f005 f8fd 	bl	800b2a8 <instance_get_irsl>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80060b6:	f504 710f 	add.w	r1, r4, #572	; 0x23c
 80060ba:	00c9      	lsls	r1, r1, #3
 80060bc:	4401      	add	r1, r0
 80060be:	e9c1 2300 	strd	r2, r3, [r1]
					inst->idxRSL = (inst->idxRSL + 1)%NUM_RSL_AVG;
 80060c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060c6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80060ca:	3319      	adds	r3, #25
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	4a66      	ldr	r2, [pc, #408]	; (800626c <dw_main+0x84c>)
 80060d2:	fb82 1203 	smull	r1, r2, r2, r3
 80060d6:	1111      	asrs	r1, r2, #4
 80060d8:	17da      	asrs	r2, r3, #31
 80060da:	1a8a      	subs	r2, r1, r2
 80060dc:	2132      	movs	r1, #50	; 0x32
 80060de:	fb01 f202 	mul.w	r2, r1, r2
 80060e2:	1a9a      	subs	r2, r3, r2
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060ea:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80060ee:	3319      	adds	r3, #25
 80060f0:	701a      	strb	r2, [r3, #0]


					if(inst->rslCnt >= NUM_RSL_AVG)
 80060f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060f6:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80060fa:	3318      	adds	r3, #24
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b31      	cmp	r3, #49	; 0x31
 8006100:	d94d      	bls.n	800619e <dw_main+0x77e>
					{
						inst->avgRSL = 0;
 8006102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006106:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800610a:	3310      	adds	r3, #16
 800610c:	f04f 0000 	mov.w	r0, #0
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	e9c3 0100 	strd	r0, r1, [r3]
						for(int j = 0; j < NUM_RSL_AVG; j++)
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800611e:	e022      	b.n	8006166 <dw_main+0x746>
						{
							inst->avgRSL += inst->RSL[j];
 8006120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006124:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006128:	3310      	adds	r3, #16
 800612a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800612e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006136:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa f87f 	bl	8000244 <__adddf3>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4610      	mov	r0, r2
 800614c:	4619      	mov	r1, r3
 800614e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006152:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006156:	3310      	adds	r3, #16
 8006158:	e9c3 0100 	strd	r0, r1, [r3]
						for(int j = 0; j < NUM_RSL_AVG; j++)
 800615c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006160:	3301      	adds	r3, #1
 8006162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800616a:	2b31      	cmp	r3, #49	; 0x31
 800616c:	ddd8      	ble.n	8006120 <dw_main+0x700>
						}
						inst->avgRSL /= NUM_RSL_AVG;
 800616e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006172:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006176:	3310      	adds	r3, #16
 8006178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <dw_main+0x850>)
 8006182:	f7fa fb3f 	bl	8000804 <__aeabi_ddiv>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006192:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006196:	3310      	adds	r3, #16
 8006198:	e9c3 0100 	strd	r0, r1, [r3]
 800619c:	e018      	b.n	80061d0 <dw_main+0x7b0>
					}
					else
					{
						inst->avgRSL = 0;
 800619e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061a2:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80061a6:	3310      	adds	r3, #16
 80061a8:	f04f 0000 	mov.w	r0, #0
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	e9c3 0100 	strd	r0, r1, [r3]
						inst->rslCnt++;
 80061b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061b8:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80061bc:	3318      	adds	r3, #24
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061c8:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80061cc:	3318      	adds	r3, #24
 80061ce:	701a      	strb	r2, [r3, #0]




//				n = sprintf((char*)&dataseq[0], "%08i, %08i, %08i, %08f", rng_rng, rng_rsl, rng_raw, rsl/1000.0);
				n = sprintf((char*)&dataseq[0], "%016llX %016llX %016llX %08X %08X %08X %08X", saddr, aaddr, taddr, rng_rng, rng_rsl, rng_raw, rsl);
 80061d0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80061d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80061dc:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 80061e0:	9607      	str	r6, [sp, #28]
 80061e2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80061e6:	9606      	str	r6, [sp, #24]
 80061e8:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 80061ec:	9605      	str	r6, [sp, #20]
 80061ee:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80061f2:	9604      	str	r6, [sp, #16]
 80061f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f8:	e9cd 2300 	strd	r2, r3, [sp]
 80061fc:	4622      	mov	r2, r4
 80061fe:	462b      	mov	r3, r5
 8006200:	491c      	ldr	r1, [pc, #112]	; (8006274 <dw_main+0x854>)
 8006202:	4816      	ldr	r0, [pc, #88]	; (800625c <dw_main+0x83c>)
 8006204:	f00d fcb2 	bl	8013b6c <siprintf>
 8006208:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

				send_usbmessage(&dataseq[0], n);
 800620c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006210:	4812      	ldr	r0, [pc, #72]	; (800625c <dw_main+0x83c>)
 8006212:	f00c fcbb 	bl	8012b8c <send_usbmessage>
				usb_run();
 8006216:	f00c fd1f 	bl	8012c58 <usb_run>
			}
        }

        //only write to LCD if we aren't in the middle of  ranging messages
        //the sleep messages embedded in the LCD calls mess up the timing otherwise
		if(enableLCD == TRUE && inst->canPrintLCD == TRUE)
 800621a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800621e:	2b00      	cmp	r3, #0
 8006220:	f43f ae86 	beq.w	8005f30 <dw_main+0x510>
 8006224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006228:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800622c:	2b00      	cmp	r3, #0
 800622e:	f43f ae7f 	beq.w	8005f30 <dw_main+0x510>
		{
			if(get_dt32(last_toggle, portGetTickCnt()) >= toggle_period)
 8006232:	f00b fd4d 	bl	8011cd0 <portGetTickCnt>
 8006236:	4603      	mov	r3, r0
 8006238:	4619      	mov	r1, r3
 800623a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800623e:	f003 f828 	bl	8009292 <get_dt32>
 8006242:	4602      	mov	r2, r0
 8006244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006248:	4293      	cmp	r3, r2
 800624a:	d81f      	bhi.n	800628c <dw_main+0x86c>
			{
				if(toggle == 2)
 800624c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006250:	2b02      	cmp	r3, #2
 8006252:	d111      	bne.n	8006278 <dw_main+0x858>
				{
					toggle = 1;
 8006254:	2301      	movs	r3, #1
 8006256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800625a:	e010      	b.n	800627e <dw_main+0x85e>
 800625c:	20004e08 	.word	0x20004e08
 8006260:	20004e6c 	.word	0x20004e6c
 8006264:	20000340 	.word	0x20000340
 8006268:	408f4000 	.word	0x408f4000
 800626c:	51eb851f 	.word	0x51eb851f
 8006270:	40490000 	.word	0x40490000
 8006274:	08017770 	.word	0x08017770
				}
				else
				{
					toggle = 2;
 8006278:	2302      	movs	r3, #2
 800627a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				}

				last_toggle = portGetTickCnt();
 800627e:	f00b fd27 	bl	8011cd0 <portGetTickCnt>
 8006282:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
				updateLCD = TRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
			}

			if(updateLCD == TRUE)
 800628c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8006290:	2b00      	cmp	r3, #0
 8006292:	f43f ae4d 	beq.w	8005f30 <dw_main+0x510>
			{
				memset(dataseq, ' ', LCD_BUFF_LEN);
 8006296:	2264      	movs	r2, #100	; 0x64
 8006298:	2120      	movs	r1, #32
 800629a:	486e      	ldr	r0, [pc, #440]	; (8006454 <dw_main+0xa34>)
 800629c:	f00c feda 	bl	8013054 <memset>
				memset(dataseq1, ' ', LCD_BUFF_LEN);
 80062a0:	2264      	movs	r2, #100	; 0x64
 80062a2:	2120      	movs	r1, #32
 80062a4:	486c      	ldr	r0, [pc, #432]	; (8006458 <dw_main+0xa38>)
 80062a6:	f00c fed5 	bl	8013054 <memset>
				uint64 addr = instance_get_addr();
 80062aa:	f002 ffa3 	bl	80091f4 <instance_get_addr>
 80062ae:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90

				uint8 num_neighbors = instfindnumneighbors(inst);
 80062b2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80062b6:	f004 fbd9 	bl	800aa6c <instfindnumneighbors>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				uint8 num_hidden = instfindnumhidden(inst);
 80062c0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80062c4:	f004 fbfe 	bl	800aac4 <instfindnumhidden>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
				char status[10];

				if(instance_mode == DISCOVERY)
 80062ce:	4b63      	ldr	r3, [pc, #396]	; (800645c <dw_main+0xa3c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d131      	bne.n	800633a <dw_main+0x91a>
				{
					strcpy(status, "SEARCHING");
 80062d6:	4a62      	ldr	r2, [pc, #392]	; (8006460 <dw_main+0xa40>)
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	ca07      	ldmia	r2, {r0, r1, r2}
 80062dc:	c303      	stmia	r3!, {r0, r1}
 80062de:	801a      	strh	r2, [r3, #0]
					range_result = 0;
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
					inst->avgRSL = 0;
 80062ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062f0:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80062f4:	3310      	adds	r3, #16
 80062f6:	f04f 0000 	mov.w	r0, #0
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	e9c3 0100 	strd	r0, r1, [r3]
					for(int j = 0; j < NUM_RSL_AVG; j++)
 8006302:	2300      	movs	r3, #0
 8006304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006308:	e012      	b.n	8006330 <dw_main+0x910>
					{
						inst->RSL[j] = 0;
 800630a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800630e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006312:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	18d1      	adds	r1, r2, r3
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9c1 2300 	strd	r2, r3, [r1]
					for(int j = 0; j < NUM_RSL_AVG; j++)
 8006326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800632a:	3301      	adds	r3, #1
 800632c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006334:	2b31      	cmp	r3, #49	; 0x31
 8006336:	dde8      	ble.n	800630a <dw_main+0x8ea>
 8006338:	e004      	b.n	8006344 <dw_main+0x924>
					}

				}
				else
				{
					strcpy(status, "CONNECTED");
 800633a:	4a4a      	ldr	r2, [pc, #296]	; (8006464 <dw_main+0xa44>)
 800633c:	1d3b      	adds	r3, r7, #4
 800633e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006340:	c303      	stmia	r3!, {r0, r1}
 8006342:	801a      	strh	r2, [r3, #0]
				}


				dataseq[0] = 0x2 ;  //return cursor home
 8006344:	4b43      	ldr	r3, [pc, #268]	; (8006454 <dw_main+0xa34>)
 8006346:	2202      	movs	r2, #2
 8006348:	701a      	strb	r2, [r3, #0]
				writetoLCD( 1, 0,  dataseq);
 800634a:	4a42      	ldr	r2, [pc, #264]	; (8006454 <dw_main+0xa34>)
 800634c:	2100      	movs	r1, #0
 800634e:	2001      	movs	r0, #1
 8006350:	f00b fbd6 	bl	8011b00 <writetoLCD>

				if(toggle == 1)
 8006354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006358:	2b01      	cmp	r3, #1
 800635a:	d139      	bne.n	80063d0 <dw_main+0x9b0>
				{
					if(inst->addrByteSize == 8)
 800635c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006360:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006364:	3306      	adds	r3, #6
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d117      	bne.n	800639c <dw_main+0x97c>
					{
						sprintf((char*)&dataseq[0], "%s       ", status);
 800636c:	1d3b      	adds	r3, r7, #4
 800636e:	461a      	mov	r2, r3
 8006370:	493d      	ldr	r1, [pc, #244]	; (8006468 <dw_main+0xa48>)
 8006372:	4838      	ldr	r0, [pc, #224]	; (8006454 <dw_main+0xa34>)
 8006374:	f00d fbfa 	bl	8013b6c <siprintf>
						sprintf((char*)&dataseq1[0], "% 05.1fdB % 05.2fm", inst->avgRSL, range_result);
 8006378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800637c:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006380:	3310      	adds	r3, #16
 8006382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006386:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800638a:	e9cd 2300 	strd	r2, r3, [sp]
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4936      	ldr	r1, [pc, #216]	; (800646c <dw_main+0xa4c>)
 8006394:	4830      	ldr	r0, [pc, #192]	; (8006458 <dw_main+0xa38>)
 8006396:	f00d fbe9 	bl	8013b6c <siprintf>
 800639a:	e04c      	b.n	8006436 <dw_main+0xa16>
					}
					else
					{
						sprintf((char*)&dataseq[0], "%04llX %s", addr, status);
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80063a4:	4932      	ldr	r1, [pc, #200]	; (8006470 <dw_main+0xa50>)
 80063a6:	482b      	ldr	r0, [pc, #172]	; (8006454 <dw_main+0xa34>)
 80063a8:	f00d fbe0 	bl	8013b6c <siprintf>
						sprintf((char*)&dataseq1[0], "% 05.1fdB % 05.2fm", inst->avgRSL, range_result);
 80063ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063b0:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80063b4:	3310      	adds	r3, #16
 80063b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ba:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80063be:	e9cd 2300 	strd	r2, r3, [sp]
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4929      	ldr	r1, [pc, #164]	; (800646c <dw_main+0xa4c>)
 80063c8:	4823      	ldr	r0, [pc, #140]	; (8006458 <dw_main+0xa38>)
 80063ca:	f00d fbcf 	bl	8013b6c <siprintf>
 80063ce:	e032      	b.n	8006436 <dw_main+0xa16>
					}
				}
				else //if(toggle == 2)
				{
					if(inst->addrByteSize == 8)
 80063d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063d4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80063d8:	3306      	adds	r3, #6
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d114      	bne.n	800640a <dw_main+0x9ea>
					{
						sprintf((char*)&dataseq[0], "%016llX", addr);
 80063e0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80063e4:	4923      	ldr	r1, [pc, #140]	; (8006474 <dw_main+0xa54>)
 80063e6:	481b      	ldr	r0, [pc, #108]	; (8006454 <dw_main+0xa34>)
 80063e8:	f00d fbc0 	bl	8013b6c <siprintf>
						sprintf((char*)&dataseq1[0], "N%02u H%02u % 05.2fm", num_neighbors, num_hidden, range_result);
 80063ec:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 80063f0:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 80063f4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80063f8:	e9cd 2300 	strd	r2, r3, [sp]
 80063fc:	4603      	mov	r3, r0
 80063fe:	460a      	mov	r2, r1
 8006400:	491d      	ldr	r1, [pc, #116]	; (8006478 <dw_main+0xa58>)
 8006402:	4815      	ldr	r0, [pc, #84]	; (8006458 <dw_main+0xa38>)
 8006404:	f00d fbb2 	bl	8013b6c <siprintf>
 8006408:	e015      	b.n	8006436 <dw_main+0xa16>
					}
					else
					{

						sprintf((char*)&dataseq[0], "%04llX %s", addr, status);
 800640a:	1d3b      	adds	r3, r7, #4
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006412:	4917      	ldr	r1, [pc, #92]	; (8006470 <dw_main+0xa50>)
 8006414:	480f      	ldr	r0, [pc, #60]	; (8006454 <dw_main+0xa34>)
 8006416:	f00d fba9 	bl	8013b6c <siprintf>
						sprintf((char*)&dataseq1[0], "N%02u H%02u % 05.2fm", num_neighbors, num_hidden, range_result);
 800641a:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 800641e:	f897 008e 	ldrb.w	r0, [r7, #142]	; 0x8e
 8006422:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006426:	e9cd 2300 	strd	r2, r3, [sp]
 800642a:	4603      	mov	r3, r0
 800642c:	460a      	mov	r2, r1
 800642e:	4912      	ldr	r1, [pc, #72]	; (8006478 <dw_main+0xa58>)
 8006430:	4809      	ldr	r0, [pc, #36]	; (8006458 <dw_main+0xa38>)
 8006432:	f00d fb9b 	bl	8013b6c <siprintf>
					}

				}

				writetoLCD(40, 1, dataseq); //send some data
 8006436:	4a07      	ldr	r2, [pc, #28]	; (8006454 <dw_main+0xa34>)
 8006438:	2101      	movs	r1, #1
 800643a:	2028      	movs	r0, #40	; 0x28
 800643c:	f00b fb60 	bl	8011b00 <writetoLCD>
				writetoLCD(16, 1, dataseq1); //send some data
 8006440:	4a05      	ldr	r2, [pc, #20]	; (8006458 <dw_main+0xa38>)
 8006442:	2101      	movs	r1, #1
 8006444:	2010      	movs	r0, #16
 8006446:	f00b fb5b 	bl	8011b00 <writetoLCD>
    {
 800644a:	e571      	b.n	8005f30 <dw_main+0x510>
			}
		}
    }

    return 0;
}
 800644c:	4618      	mov	r0, r3
 800644e:	37e4      	adds	r7, #228	; 0xe4
 8006450:	46bd      	mov	sp, r7
 8006452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006454:	20004e08 	.word	0x20004e08
 8006458:	20004e6c 	.word	0x20004e6c
 800645c:	20000340 	.word	0x20000340
 8006460:	0801779c 	.word	0x0801779c
 8006464:	080177a8 	.word	0x080177a8
 8006468:	080177b4 	.word	0x080177b4
 800646c:	080177c0 	.word	0x080177c0
 8006470:	080177d4 	.word	0x080177d4
 8006474:	080177e0 	.word	0x080177e0
 8006478:	080177e8 	.word	0x080177e8

0800647c <instanceconfigframeheader>:
// -------------------------------------------------------------------------------------------------------------------
//


void instanceconfigframeheader(instance_data_t *inst)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	//configure ranging message
	inst->msg.panID[0] = (inst->panID) & 0xff;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800648a:	3304      	adds	r3, #4
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	inst->msg.panID[1] = inst->panID >> 8;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800649c:	3304      	adds	r3, #4
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133

	//set frame type (0-2), SEC (3), Pending (4), ACK (5), PanIDcomp(6)
	inst->msg.frameCtrl[0] = 0x1 /*frame type 0x1 == data*/ | 0x40 /*PID comp*/;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2241      	movs	r2, #65	; 0x41
 80064b0:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
#if (USING_64BIT_ADDR==1)
		//source/dest addressing modes and frame version
	inst->msg.frameCtrl[1] = 0xC /*dest extended address (64bits)*/ | 0xC0 /*src extended address (64bits)*/;
#else
	inst->msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0x80 /*src short address (16bits)*/;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2288      	movs	r2, #136	; 0x88
 80064b8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
#endif


	//configure RNG_INIT message
    inst->rng_initmsg.frameCtrl[0] = 0x41;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2241      	movs	r2, #65	; 0x41
 80064c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

#if (USING_64BIT_ADDR == 1)
    inst->rng_initmsg.frameCtrl[1] = 0xCC;
#else
    inst->rng_initmsg.frameCtrl[1] = 0x8C;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	228c      	movs	r2, #140	; 0x8c
 80064c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
#endif
    inst->rng_initmsg.panID[0] = (inst->panID) & 0xff;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80064d2:	3304      	adds	r3, #4
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    inst->rng_initmsg.panID[1] = inst->panID >> 8;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80064e4:	3304      	adds	r3, #4
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	0a1b      	lsrs	r3, r3, #8
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4


	//configure INF message
	inst->inf_msg.panID[0] = (inst->panID) & 0xff;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80064fa:	3304      	adds	r3, #4
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
	inst->inf_msg.panID[1] = inst->panID >> 8;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800650c:	3304      	adds	r3, #4
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	0a1b      	lsrs	r3, r3, #8
 8006512:	b29b      	uxth	r3, r3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532

	//set frame type (0-2), SEC (3), Pending (4), ACK (5), PanIDcomp(6)
	inst->inf_msg.frameCtrl[0] = 0x1 /*frame type 0x1 == data*/ | 0x40 /*PID comp*/;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2241      	movs	r2, #65	; 0x41
 8006520:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
#if (USING_64BIT_ADDR==1)
	//source/dest addressing modes and frame version
	inst->inf_msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0xC0 /*src extended address (64bits)*/;
#else
	inst->inf_msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0x80 /*src short address (16bits)*/;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2288      	movs	r2, #136	; 0x88
 8006528:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
#endif


	//configure RNG_REPORT
	inst->report_msg.panID[0] = (inst->panID) & 0xff;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006532:	3304      	adds	r3, #4
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
	inst->report_msg.panID[1] = inst->panID >> 8;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006544:	3304      	adds	r3, #4
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	b29b      	uxth	r3, r3
 800654c:	b2da      	uxtb	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931

	//set frame type (0-2), SEC (3), Pending (4), ACK (5), PanIDcomp(6)
	inst->report_msg.frameCtrl[0] = 0x1 /*frame type 0x1 == data*/ | 0x40 /*PID comp*/;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2241      	movs	r2, #65	; 0x41
 8006558:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
#if (USING_64BIT_ADDR==1)
	//source/dest addressing modes and frame version
	inst->report_msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0xC0 /*src extended address (64bits)*/;
#else
	inst->report_msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0x80 /*src short address (16bits)*/;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2288      	movs	r2, #136	; 0x88
 8006560:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
#endif


	//configure SYNC message
	inst->sync_msg.panID[0] = (inst->panID) & 0xff;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800656a:	3304      	adds	r3, #4
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f883 2d2f 	strb.w	r2, [r3, #3375]	; 0xd2f
	inst->sync_msg.panID[1] = inst->panID >> 8;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800657c:	3304      	adds	r3, #4
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	0a1b      	lsrs	r3, r3, #8
 8006582:	b29b      	uxth	r3, r3
 8006584:	b2da      	uxtb	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f883 2d30 	strb.w	r2, [r3, #3376]	; 0xd30

	//set frame type (0-2), SEC (3), Pending (4), ACK (5), PanIDcomp(6)
	inst->sync_msg.frameCtrl[0] = 0x1 /*frame type 0x1 == data*/ | 0x40 /*PID comp*/;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2241      	movs	r2, #65	; 0x41
 8006590:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c
#if (USING_64BIT_ADDR==1)
	//source/dest addressing modes and frame version
	inst->sync_msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0xC0 /*src extended address (64bits)*/;
#else
	inst->sync_msg.frameCtrl[1] = 0x8 /*dest short address (16bits)*/ | 0x80 /*src short address (16bits)*/;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2288      	movs	r2, #136	; 0x88
 8006598:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d
#endif


	//configure BLINK
	//blink frames with IEEE EUI-64 tag ID
	inst->blinkmsg.frameCtrl = 0xC5 ;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80065a2:	330b      	adds	r3, #11
 80065a4:	22c5      	movs	r2, #197	; 0xc5
 80065a6:	701a      	strb	r2, [r3, #0]

}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <instanceconfigmessages>:
// function to construct the fixed portions of the message definitions
//
// -------------------------------------------------------------------------------------------------------------------
//
void instanceconfigmessages(instance_data_t *inst)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
	//initialize ranging message
	//set source address into the message structure
	memcpy(&inst->msg.sourceAddr[0], &inst->eui64[0], inst->addrByteSize);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 709b 	add.w	r0, r3, #310	; 0x136
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f503 5189 	add.w	r1, r3, #4384	; 0x1120
 80065c6:	3117      	adds	r1, #23
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80065ce:	3306      	adds	r3, #6
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f00c fd30 	bl	8013038 <memcpy>

	//initialize RNG_INIT message
	//set source address into the message structure
	memcpy(&inst->rng_initmsg.sourceAddr[0], &inst->eui64[0], inst->addrByteSize);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f103 00bd 	add.w	r0, r3, #189	; 0xbd
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f503 5189 	add.w	r1, r3, #4384	; 0x1120
 80065e4:	3117      	adds	r1, #23
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80065ec:	3306      	adds	r3, #6
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	f00c fd21 	bl	8013038 <memcpy>
	inst->rng_initmsg.messageData[FCODE] = RTLS_DEMO_MSG_RNG_INIT;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf

	//configure INF message
	uint16 broadcast_address = BROADCAST_ADDRESS;
 80065fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006602:	81fb      	strh	r3, [r7, #14]
	memcpy(&inst->inf_msg.sourceAddr[0], &inst->eui64[0], inst->addrByteSize);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f203 5035 	addw	r0, r3, #1333	; 0x535
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f503 5189 	add.w	r1, r3, #4384	; 0x1120
 8006610:	3117      	adds	r1, #23
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006618:	3306      	adds	r3, #6
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	f00c fd0b 	bl	8013038 <memcpy>
	memcpy(&inst->inf_msg.destAddr[0], &broadcast_address, 2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f203 5333 	addw	r3, r3, #1331	; 0x533
 8006628:	89fa      	ldrh	r2, [r7, #14]
 800662a:	801a      	strh	r2, [r3, #0]
	inst->inf_msg.messageData[FCODE] = 0; //message function code (specifies if message is a poll, response or other...)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537

	//configure RNG_REPORT
	memcpy(&inst->report_msg.sourceAddr[0], &inst->eui64[0], inst->addrByteSize);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f603 1034 	addw	r0, r3, #2356	; 0x934
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f503 5189 	add.w	r1, r3, #4384	; 0x1120
 8006640:	3117      	adds	r1, #23
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006648:	3306      	adds	r3, #6
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	f00c fcf3 	bl	8013038 <memcpy>
	memcpy(&inst->report_msg.destAddr[0], &broadcast_address, 2);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f603 1332 	addw	r3, r3, #2354	; 0x932
 8006658:	89fa      	ldrh	r2, [r7, #14]
 800665a:	801a      	strh	r2, [r3, #0]
	inst->report_msg.messageData[FCODE] = RTLS_DEMO_MSG_RNG_REPORT; //message function code (specifies if message is a poll, response or other...)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2211      	movs	r2, #17
 8006660:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936

	//configure SYNC message
	memcpy(&inst->sync_msg.sourceAddr[0], &inst->eui64[0], inst->addrByteSize);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f603 5033 	addw	r0, r3, #3379	; 0xd33
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f503 5189 	add.w	r1, r3, #4384	; 0x1120
 8006670:	3117      	adds	r1, #23
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006678:	3306      	adds	r3, #6
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	f00c fcdb 	bl	8013038 <memcpy>
	memcpy(&inst->sync_msg.destAddr[0], &broadcast_address, 2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f603 5331 	addw	r3, r3, #3377	; 0xd31
 8006688:	89fa      	ldrh	r2, [r7, #14]
 800668a:	801a      	strh	r2, [r3, #0]
	inst->sync_msg.messageData[FCODE] = RTLS_DEMO_MSG_SYNC; //message function code (specifies if message is a poll, response or other...)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2222      	movs	r2, #34	; 0x22
 8006690:	f883 2d35 	strb.w	r2, [r3, #3381]	; 0xd35

	//configure BLINK message
	memcpy(&inst->blinkmsg.tagID[0], &inst->eui64[0], ADDR_BYTE_SIZE_L);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800669a:	330d      	adds	r3, #13
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	f502 5189 	add.w	r1, r2, #4384	; 0x1120
 80066a2:	3117      	adds	r1, #23
 80066a4:	2208      	movs	r2, #8
 80066a6:	4618      	mov	r0, r3
 80066a8:	f00c fcc6 	bl	8013038 <memcpy>
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <instancerxon>:
// Turn on the receiver with/without delay
//
// -------------------------------------------------------------------------------------------------------------------
//
void instancerxon(instance_data_t *inst, int delayed, uint64 delayedReceiveTime)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	e9c7 2300 	strd	r2, r3, [r7]
    if (delayed)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00e      	beq.n	80066e6 <instancerxon+0x32>
    {
        uint32 dtime;
        dtime =  (uint32) (delayedReceiveTime>>8);
 80066c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	0a02      	lsrs	r2, r0, #8
 80066d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80066da:	0a0b      	lsrs	r3, r1, #8
 80066dc:	4613      	mov	r3, r2
 80066de:	617b      	str	r3, [r7, #20]
        dwt_setdelayedtrxtime(dtime) ;
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f00a ff6f 	bl	80115c4 <dwt_setdelayedtrxtime>
    }

    int dwt_rx_enable_return = dwt_rxenable(delayed);
 80066e6:	68b8      	ldr	r0, [r7, #8]
 80066e8:	f00b f81c 	bl	8011724 <dwt_rxenable>
 80066ec:	6138      	str	r0, [r7, #16]
    inst->lateRX -= dwt_rx_enable_return;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80066f4:	3304      	adds	r3, #4
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006702:	3304      	adds	r3, #4
 8006704:	601a      	str	r2, [r3, #0]

} // end instancerxon()
 8006706:	bf00      	nop
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <instancesendpacket>:


int instancesendpacket(uint16 length, uint8 txmode, uint32 dtime)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	4603      	mov	r3, r0
 8006716:	603a      	str	r2, [r7, #0]
 8006718:	80fb      	strh	r3, [r7, #6]
 800671a:	460b      	mov	r3, r1
 800671c:	717b      	strb	r3, [r7, #5]
    int result = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]

    dwt_writetxfctrl(length, 0, 1);
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	2201      	movs	r2, #1
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f00a fa09 	bl	8010b40 <dwt_writetxfctrl>
    if(txmode & DWT_START_TX_DELAYED)
 800672e:	797b      	ldrb	r3, [r7, #5]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <instancesendpacket+0x30>
    {
        dwt_setdelayedtrxtime(dtime) ;
 8006738:	6838      	ldr	r0, [r7, #0]
 800673a:	f00a ff43 	bl	80115c4 <dwt_setdelayedtrxtime>
    }

    //begin delayed TX of frame
    if (dwt_starttx(txmode))  // delayed start was too late
 800673e:	797b      	ldrb	r3, [r7, #5]
 8006740:	4618      	mov	r0, r3
 8006742:	f00a ff4d 	bl	80115e0 <dwt_starttx>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <instancesendpacket+0x42>
    {
        result = 1; //late/error
 800674c:	2301      	movs	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
    }

    return result;                                              // state changes
 8006750:	68fb      	ldr	r3, [r7, #12]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <testapprun>:
// the main instance state machine (all the instance modes Tag or Anchor use the same state machine)
//
// -------------------------------------------------------------------------------------------------------------------
//
int testapprun(instance_data_t *inst, struct TDMAHandler *tdma_handler, int message)
{
 800675c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006760:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006764:	af04      	add	r7, sp, #16
 8006766:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800676a:	6018      	str	r0, [r3, #0]
 800676c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006770:	6019      	str	r1, [r3, #0]
 8006772:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006776:	601a      	str	r2, [r3, #0]
//	send_statetousb(inst, tdma_handler);


    int done = INST_NOT_DONE_YET;
 8006778:	2300      	movs	r3, #0
 800677a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    if(tdma_handler->slot_transition(tdma_handler))
 800677e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8006788:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	4790      	blx	r2
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <testapprun+0x48>
    {
    	done = INST_DONE_WAIT_FOR_NEXT_EVENT;
 8006796:	2301      	movs	r3, #1
 8006798:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		message = 0;
 800679c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80067a0:	2300      	movs	r3, #0
 80067a2:	6013      	str	r3, [r2, #0]
    }

    tdma_handler->check_discovery_mode_expiration(tdma_handler);
 80067a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80067ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	4790      	blx	r2


    if(message ==  DWT_SIG_TX_DONE && inst->testAppState != TA_TX_WAIT_CONF)
 80067b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10b      	bne.n	80067d8 <testapprun+0x7c>
 80067c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b05      	cmp	r3, #5
 80067ca:	d005      	beq.n	80067d8 <testapprun+0x7c>
	{
		//It is possible to get an interrupt which takes the UWB out of TX_WAIT_CONF
		//before we have to process it a DWT_SIG_TX_DONE event.
    	//Clear the event in this case
		instance_getevent(11);
 80067cc:	200b      	movs	r0, #11
 80067ce:	f005 fffb 	bl	800c7c8 <instance_getevent>
		done = INST_DONE_WAIT_FOR_NEXT_EVENT;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	}

    switch (inst->testAppState)
 80067d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b0b      	cmp	r3, #11
 80067e2:	f201 85b1 	bhi.w	8008348 <testapprun+0x1bec>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <testapprun+0x90>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	0800681d 	.word	0x0800681d
 80067f0:	08006f21 	.word	0x08006f21
 80067f4:	0800709f 	.word	0x0800709f
 80067f8:	08008349 	.word	0x08008349
 80067fc:	08008349 	.word	0x08008349
 8006800:	080073b1 	.word	0x080073b1
 8006804:	08007525 	.word	0x08007525
 8006808:	0800758d 	.word	0x0800758d
 800680c:	08006b55 	.word	0x08006b55
 8006810:	08006c7f 	.word	0x08006c7f
 8006814:	08006b2b 	.word	0x08006b2b
 8006818:	0800723b 	.word	0x0800723b
    {
        case TA_INIT :
        {
            switch (inst->mode)
 800681c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 817d 	bne.w	8006b24 <testapprun+0x3c8>
            {
                case DISCOVERY:
                {
                    dwt_forcetrxoff();
 800682a:	f00a ff31 	bl	8011690 <dwt_forcetrxoff>

                    dwt_enableframefilter(DWT_FF_DATA_EN | DWT_FF_ACK_EN | DWT_FF_RSVD_EN);
 800682e:	2058      	movs	r0, #88	; 0x58
 8006830:	f00a fbbe 	bl	8010fb0 <dwt_enableframefilter>
					inst->frameFilteringEnabled = 1 ;
 8006834:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	2301      	movs	r3, #1
 800683c:	77d3      	strb	r3, [r2, #31]
					dwt_setpanid(inst->panID);
 800683e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006848:	3304      	adds	r3, #4
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f00a fbe1 	bl	8011014 <dwt_setpanid>
					dwt_seteui(inst->eui64);
 8006852:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800685c:	3317      	adds	r3, #23
 800685e:	4618      	mov	r0, r3
 8006860:	f00a fbf6 	bl	8011050 <dwt_seteui>


					//seed random number generator with our 64-bit address
				    uint64 seed = 0;
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[0];
 8006870:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800687a:	3317      	adds	r3, #23
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2d8      	uxtb	r0, r3
 8006880:	f04f 0100 	mov.w	r1, #0
 8006884:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006888:	ea42 0400 	orr.w	r4, r2, r0
 800688c:	663c      	str	r4, [r7, #96]	; 0x60
 800688e:	430b      	orrs	r3, r1
 8006890:	667b      	str	r3, [r7, #100]	; 0x64
 8006892:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006896:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[1] << 8;
 800689a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80068a4:	3318      	adds	r3, #24
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	f04f 0300 	mov.w	r3, #0
 80068ae:	f04f 0000 	mov.w	r0, #0
 80068b2:	f04f 0100 	mov.w	r1, #0
 80068b6:	0219      	lsls	r1, r3, #8
 80068b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80068bc:	0210      	lsls	r0, r2, #8
 80068be:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80068c2:	ea42 0400 	orr.w	r4, r2, r0
 80068c6:	65bc      	str	r4, [r7, #88]	; 0x58
 80068c8:	430b      	orrs	r3, r1
 80068ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068cc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80068d0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[2] << 16;
 80068d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80068de:	3319      	adds	r3, #25
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	f04f 0000 	mov.w	r0, #0
 80068ec:	f04f 0100 	mov.w	r1, #0
 80068f0:	0419      	lsls	r1, r3, #16
 80068f2:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80068f6:	0410      	lsls	r0, r2, #16
 80068f8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80068fc:	ea42 0400 	orr.w	r4, r2, r0
 8006900:	653c      	str	r4, [r7, #80]	; 0x50
 8006902:	430b      	orrs	r3, r1
 8006904:	657b      	str	r3, [r7, #84]	; 0x54
 8006906:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800690a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[3] << 24;
 800690e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006918:	331a      	adds	r3, #26
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b2da      	uxtb	r2, r3
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	0a11      	lsrs	r1, r2, #8
 8006924:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8006928:	0613      	lsls	r3, r2, #24
 800692a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800692e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006932:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8006936:	4621      	mov	r1, r4
 8006938:	4311      	orrs	r1, r2
 800693a:	64b9      	str	r1, [r7, #72]	; 0x48
 800693c:	4629      	mov	r1, r5
 800693e:	4319      	orrs	r1, r3
 8006940:	64f9      	str	r1, [r7, #76]	; 0x4c
 8006942:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006946:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[4] << 32;
 800694a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006954:	331b      	adds	r3, #27
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b2d8      	uxtb	r0, r3
 800695a:	f04f 0100 	mov.w	r1, #0
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	0003      	movs	r3, r0
 8006968:	2200      	movs	r2, #0
 800696a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800696e:	ea40 0402 	orr.w	r4, r0, r2
 8006972:	643c      	str	r4, [r7, #64]	; 0x40
 8006974:	430b      	orrs	r3, r1
 8006976:	647b      	str	r3, [r7, #68]	; 0x44
 8006978:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800697c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[5] << 40;
 8006980:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800698a:	331c      	adds	r3, #28
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b2d8      	uxtb	r0, r3
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	0203      	lsls	r3, r0, #8
 800699e:	2200      	movs	r2, #0
 80069a0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80069a4:	ea40 0402 	orr.w	r4, r0, r2
 80069a8:	63bc      	str	r4, [r7, #56]	; 0x38
 80069aa:	430b      	orrs	r3, r1
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80069b2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[6] << 48;
 80069b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80069c0:	331d      	adds	r3, #29
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b2d8      	uxtb	r0, r3
 80069c6:	f04f 0100 	mov.w	r1, #0
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	0403      	lsls	r3, r0, #16
 80069d4:	2200      	movs	r2, #0
 80069d6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80069da:	ea40 0402 	orr.w	r4, r0, r2
 80069de:	633c      	str	r4, [r7, #48]	; 0x30
 80069e0:	430b      	orrs	r3, r1
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
 80069e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80069e8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    seed |= (uint64) inst->eui64[7] << 56;
 80069ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80069f6:	331e      	adds	r3, #30
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	b2d8      	uxtb	r0, r3
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	0603      	lsls	r3, r0, #24
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006a10:	ea40 0402 	orr.w	r4, r0, r2
 8006a14:	62bc      	str	r4, [r7, #40]	; 0x28
 8006a16:	430b      	orrs	r3, r1
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006a1e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
				    srand(seed);
 8006a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a26:	4618      	mov	r0, r3
 8006a28:	f00d f822 	bl	8013a70 <srand>


					inst->uwbShortAdd = inst->eui64[0] + (inst->eui64[1] << 8);//NOTE a hashing algorithm could be used instead
 8006a2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006a36:	3317      	adds	r3, #23
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006a46:	3318      	adds	r3, #24
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4413      	add	r3, r2
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006a5e:	801a      	strh	r2, [r3, #0]

#if (USING_64BIT_ADDR==0)
					dwt_setaddress16(inst->uwbShortAdd);
 8006a60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f00a fae0 	bl	8011032 <dwt_setaddress16>
					memcpy(&inst->uwbList[0][0], &inst->uwbShortAdd, inst->addrByteSize);
 8006a72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f503 50a7 	add.w	r0, r3, #5344	; 0x14e0
 8006a7c:	3002      	adds	r0, #2
 8006a7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f503 518a 	add.w	r1, r3, #4416	; 0x1140
 8006a88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006a92:	3306      	adds	r3, #6
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f00c face 	bl	8013038 <memcpy>
#else
					memcpy(&inst->uwbList[0][0], &inst->eui64, inst->addrByteSize);
#endif
					inst->uwbListLen = 1;
 8006a9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
					tdma_handler->uwbListTDMAInfo[0].connectionType = UWB_LIST_SELF;
 8006aac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	721a      	strb	r2, [r3, #8]


                    instanceconfigframeheader(inst);
 8006ab6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	f7ff fcde 	bl	800647c <instanceconfigframeheader>
                    instanceconfigmessages(inst);
 8006ac0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f7ff fd74 	bl	80065b2 <instanceconfigmessages>

					//change to next state - wait to receive a message
					tdma_handler->discoveryStartTime = portGetTickCnt();
 8006aca:	f00b f901 	bl	8011cd0 <portGetTickCnt>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
					tdma_handler->last_blink_time = portGetTickCnt();
 8006ada:	f00b f8f9 	bl	8011cd0 <portGetTickCnt>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
					inst->testAppState = TA_RXE_WAIT ;
 8006aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2206      	movs	r2, #6
 8006af2:	705a      	strb	r2, [r3, #1]

					dwt_setrxtimeout(0);
 8006af4:	2000      	movs	r0, #0
 8006af6:	f00a fe57 	bl	80117a8 <dwt_setrxtimeout>
					inst->wait4ack = 0;
 8006afa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006b04:	3318      	adds	r3, #24
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
					inst->canPrintUSB = TRUE;
 8006b0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					inst->canPrintLCD = TRUE;
 8006b16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                }
                break;
 8006b22:	e000      	b.n	8006b26 <testapprun+0x3ca>
                default:
                break;
 8006b24:	bf00      	nop
            }
            break;
 8006b26:	f001 bc14 	b.w	8008352 <testapprun+0x1bf6>
        }// end case TA_INIT
        case TA_TX_SELECT :
        {
          	//select a TX action, return TRUE if we should move on to another state
        	if(tdma_handler->tx_select(tdma_handler) == TRUE)
 8006b2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b34:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006b38:	6810      	ldr	r0, [r2, #0]
 8006b3a:	4798      	blx	r3
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <testapprun+0x3ee>
        	{
        		dwt_forcetrxoff();
 8006b42:	f00a fda5 	bl	8011690 <dwt_forcetrxoff>
        	else
        	{
        		done = INST_DONE_WAIT_FOR_NEXT_EVENT;
        	}

            break;
 8006b46:	f001 bc04 	b.w	8008352 <testapprun+0x1bf6>
        		done = INST_DONE_WAIT_FOR_NEXT_EVENT;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            break;
 8006b50:	f001 bbff 	b.w	8008352 <testapprun+0x1bf6>
        }// end case TA_TX_SELECT
        case TA_TXBLINK_WAIT_SEND :
		{
			int psduLength = BLINK_FRAME_LEN_BYTES;
 8006b54:	230c      	movs	r3, #12
 8006b56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

            //blink frames with IEEE EUI-64 tag ID
			inst->blinkmsg.seqNum = inst->frameSN++;
 8006b5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006b64:	3302      	adds	r3, #2
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	1c53      	adds	r3, r2, #1
 8006b6a:	b2d9      	uxtb	r1, r3
 8006b6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006b76:	3302      	adds	r3, #2
 8006b78:	7019      	strb	r1, [r3, #0]
 8006b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006b84:	330c      	adds	r3, #12
 8006b86:	701a      	strb	r2, [r3, #0]
			inst->wait4ack = 0;
 8006b88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006b92:	3318      	adds	r3, #24
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]

        	dwt_writetxdata(psduLength, (uint8 *)  (&inst->blinkmsg), 0) ; // write the frame data
 8006b98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006b9c:	b298      	uxth	r0, r3
 8006b9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8006ba8:	330b      	adds	r3, #11
 8006baa:	2200      	movs	r2, #0
 8006bac:	4619      	mov	r1, r3
 8006bae:	f009 ffa8 	bl	8010b02 <dwt_writetxdata>
			if(instancesendpacket(psduLength, DWT_START_TX_IMMEDIATE | inst->wait4ack, 0))
 8006bb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006bb6:	b298      	uxth	r0, r3
 8006bb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4619      	mov	r1, r3
 8006bca:	f7ff fda0 	bl	800670e <instancesendpacket>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d018      	beq.n	8006c06 <testapprun+0x4aa>
			{
				inst->previousState = TA_INIT;
 8006bd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	70da      	strb	r2, [r3, #3]
				inst->nextState = TA_INIT;
 8006bde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2200      	movs	r2, #0
 8006be6:	709a      	strb	r2, [r3, #2]
				inst->testAppState = TA_RXE_WAIT ;  // wait to receive a new blink or poll message
 8006be8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2206      	movs	r2, #6
 8006bf0:	705a      	strb	r2, [r3, #1]
				inst->wait4ack = 0; //clear the flag as the TX has failed the TRX is off
 8006bf2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006bfc:	3318      	adds	r3, #24
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
				inst->txDoneTimeoutDuration = inst->durationBlinkTxDoneTimeout_ms;
				tdma_handler->last_blink_time = portGetTickCnt();
				tdma_handler->blinkPeriodRand = (uint32)rand()%BLINK_PERIOD_RAND_MS;
			}

			break ;
 8006c02:	f001 bba6 	b.w	8008352 <testapprun+0x1bf6>
				inst->testAppState = TA_TX_WAIT_CONF ; // wait confirmation
 8006c06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	705a      	strb	r2, [r3, #1]
				inst->previousState = TA_TXBLINK_WAIT_SEND ;
 8006c10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2208      	movs	r2, #8
 8006c18:	70da      	strb	r2, [r3, #3]
				done = INST_DONE_WAIT_FOR_NEXT_EVENT; //will use RX FWTO to time out (set below)
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				inst->timeofTx = portGetTickCnt();
 8006c20:	f00b f856 	bl	8011cd0 <portGetTickCnt>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8006c30:	3314      	adds	r3, #20
 8006c32:	601a      	str	r2, [r3, #0]
				inst->txDoneTimeoutDuration = inst->durationBlinkTxDoneTimeout_ms;
 8006c34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8006c46:	601a      	str	r2, [r3, #0]
				tdma_handler->last_blink_time = portGetTickCnt();
 8006c48:	f00b f842 	bl	8011cd0 <portGetTickCnt>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
				tdma_handler->blinkPeriodRand = (uint32)rand()%BLINK_PERIOD_RAND_MS;
 8006c58:	f00c ff38 	bl	8013acc <rand>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4bac      	ldr	r3, [pc, #688]	; (8006f14 <testapprun+0x7b8>)
 8006c62:	fba3 1302 	umull	r1, r3, r3, r2
 8006c66:	099b      	lsrs	r3, r3, #6
 8006c68:	21c8      	movs	r1, #200	; 0xc8
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
			break ;
 8006c7a:	f001 bb6a 	b.w	8008352 <testapprun+0x1bf6>
		}// end case TA_TXBLINK_WAIT_SEND
        case TA_TXRANGINGINIT_WAIT_SEND :
        {
        	int psduLength = RNG_INIT_FRAME_LEN_BYTES;
 8006c7e:	2312      	movs	r3, #18
 8006c80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4

            inst->rng_initmsg.seqNum = inst->frameSN++;
 8006c84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006c8e:	3302      	adds	r3, #2
 8006c90:	7819      	ldrb	r1, [r3, #0]
 8006c92:	1c4b      	adds	r3, r1, #1
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	460b      	mov	r3, r1
 8006cac:	f882 30b2 	strb.w	r3, [r2, #178]	; 0xb2

            inst->wait4ack = 0;
 8006cb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8006cba:	3218      	adds	r2, #24
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	7013      	strb	r3, [r2, #0]

            //add a small random number to this to reduce chance of collisions
			uint8 sys_time_arr[5] = {0, 0, 0, 0, 0};
 8006cc0:	4a95      	ldr	r2, [pc, #596]	; (8006f18 <testapprun+0x7bc>)
 8006cc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cca:	6018      	str	r0, [r3, #0]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	7019      	strb	r1, [r3, #0]
			dwt_readsystime(sys_time_arr);
 8006cd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f009 ffb2 	bl	8010c3e <dwt_readsystime>
			uint64 dwt_time_now = 0;
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
			dwt_time_now = (uint64)sys_time_arr[0] + ((uint64)sys_time_arr[1] << 8) + ((uint64)sys_time_arr[2] << 16) + ((uint64)sys_time_arr[3] << 24) + ((uint64)sys_time_arr[4] << 32);
 8006ce6:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8006cea:	b2dc      	uxtb	r4, r3
 8006cec:	f04f 0500 	mov.w	r5, #0
 8006cf0:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	f04f 0000 	mov.w	r0, #0
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	0219      	lsls	r1, r3, #8
 8006d04:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8006d08:	0210      	lsls	r0, r2, #8
 8006d0a:	eb14 0a00 	adds.w	sl, r4, r0
 8006d0e:	eb45 0b01 	adc.w	fp, r5, r1
 8006d12:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	f04f 0000 	mov.w	r0, #0
 8006d20:	f04f 0100 	mov.w	r1, #0
 8006d24:	0419      	lsls	r1, r3, #16
 8006d26:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8006d2a:	0410      	lsls	r0, r2, #16
 8006d2c:	eb1a 0300 	adds.w	r3, sl, r0
 8006d30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d34:	eb4b 0301 	adc.w	r3, fp, r1
 8006d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d3c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	0a11      	lsrs	r1, r2, #8
 8006d48:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8006d4c:	0613      	lsls	r3, r2, #24
 8006d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d52:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8006d56:	4623      	mov	r3, r4
 8006d58:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d64:	460b      	mov	r3, r1
 8006d66:	462a      	mov	r2, r5
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d70:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8006d74:	b2d8      	uxtb	r0, r3
 8006d76:	f04f 0100 	mov.w	r1, #0
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	0003      	movs	r3, r0
 8006d84:	2200      	movs	r2, #0
 8006d86:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	1889      	adds	r1, r1, r2
 8006d8e:	6239      	str	r1, [r7, #32]
 8006d90:	4629      	mov	r1, r5
 8006d92:	eb43 0101 	adc.w	r1, r3, r1
 8006d96:	6279      	str	r1, [r7, #36]	; 0x24
 8006d98:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006d9c:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
			inst->delayedReplyTime = (dwt_time_now + inst->rnginitReplyDelay + convertmicrosectodevicetimeu(rand()%RANGE_INIT_RAND_US)) >> 8 ;  // time we should send the blink response
 8006da0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006daa:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8006dae:	1884      	adds	r4, r0, r2
 8006db0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006db4:	eb41 0303 	adc.w	r3, r1, r3
 8006db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dbc:	f00c fe86 	bl	8013acc <rand>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4b56      	ldr	r3, [pc, #344]	; (8006f1c <testapprun+0x7c0>)
 8006dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8006dc8:	1199      	asrs	r1, r3, #6
 8006dca:	17d3      	asrs	r3, r2, #31
 8006dcc:	1acb      	subs	r3, r1, r3
 8006dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7f9 fb7f 	bl	80004dc <__aeabi_i2d>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	f002 fb87 	bl	80094f8 <convertmicrosectodevicetimeu>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006df2:	4621      	mov	r1, r4
 8006df4:	eb11 0802 	adds.w	r8, r1, r2
 8006df8:	4629      	mov	r1, r5
 8006dfa:	eb41 0903 	adc.w	r9, r1, r3
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006e0a:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8006e0e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8006e12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80


            dwt_writetxdata(psduLength, (uint8 *)  &inst->rng_initmsg, 0) ; // write the frame data
 8006e1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006e20:	b298      	uxth	r0, r3
 8006e22:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	33b0      	adds	r3, #176	; 0xb0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f009 fe68 	bl	8010b02 <dwt_writetxdata>
			if(instancesendpacket(psduLength, DWT_START_TX_DELAYED | inst->wait4ack, inst->delayedReplyTime))
 8006e32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006e36:	b298      	uxth	r0, r3
 8006e38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006e42:	3318      	adds	r3, #24
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	b2d9      	uxtb	r1, r3
 8006e4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7ff fc59 	bl	800670e <instancesendpacket>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d025      	beq.n	8006eae <testapprun+0x752>
			{
				inst->previousState = TA_INIT;
 8006e62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	70da      	strb	r2, [r3, #3]
				inst->nextState = TA_INIT;
 8006e6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	709a      	strb	r2, [r3, #2]
				inst->testAppState = TA_RXE_WAIT ;  // wait to receive a new blink or poll message
 8006e76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2206      	movs	r2, #6
 8006e7e:	705a      	strb	r2, [r3, #1]
				inst->wait4ack = 0; //clear the flag as the TX has failed the TRX is off
 8006e80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006e8a:	3318      	adds	r3, #24
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
				inst->lateTX++;
 8006e90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006ea8:	601a      	str	r2, [r3, #0]

				inst->txDoneTimeoutDuration = inst->durationRngInitTxDoneTimeout_ms;
				tdma_handler->set_discovery_mode(tdma_handler, WAIT_INF_INIT, time_now);
			}

			break;
 8006eaa:	f001 ba52 	b.w	8008352 <testapprun+0x1bf6>
				inst->testAppState = TA_TX_WAIT_CONF ;                                               // wait confirmation
 8006eae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	705a      	strb	r2, [r3, #1]
				inst->previousState = TA_TXRANGINGINIT_WAIT_SEND ;
 8006eb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2209      	movs	r2, #9
 8006ec0:	70da      	strb	r2, [r3, #3]
				done = INST_DONE_WAIT_FOR_NEXT_EVENT;  //no timeout
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				uint32 time_now = portGetTickCnt();
 8006ec8:	f00a ff02 	bl	8011cd0 <portGetTickCnt>
 8006ecc:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
				inst->timeofTx = time_now;
 8006ed0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8006eda:	3314      	adds	r3, #20
 8006edc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006ee0:	601a      	str	r2, [r3, #0]
				inst->txDoneTimeoutDuration = inst->durationRngInitTxDoneTimeout_ms;
 8006ee2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8006ef4:	601a      	str	r2, [r3, #0]
				tdma_handler->set_discovery_mode(tdma_handler, WAIT_INF_INIT, time_now);
 8006ef6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f00:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8006f04:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006f08:	2102      	movs	r1, #2
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	4798      	blx	r3
			break;
 8006f0e:	f001 ba20 	b.w	8008352 <testapprun+0x1bf6>
 8006f12:	bf00      	nop
 8006f14:	51eb851f 	.word	0x51eb851f
 8006f18:	08017ae0 	.word	0x08017ae0
 8006f1c:	10624dd3 	.word	0x10624dd3
        }
        case TA_TXINF_WAIT_SEND :
		{
			//NOTE: handles INF_SUG, INF_INIT, INF_UPDATE, and INF_REG
			int psduLength = tdma_handler->infMessageLength;
 8006f20:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8b3 31e8 	ldrh.w	r3, [r3, #488]	; 0x1e8
 8006f2a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

			inst->inf_msg.seqNum = inst->frameSN++;
 8006f2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006f38:	3302      	adds	r3, #2
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	1c53      	adds	r3, r2, #1
 8006f3e:	b2d9      	uxtb	r1, r3
 8006f40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8006f4a:	3302      	adds	r3, #2
 8006f4c:	7019      	strb	r1, [r3, #0]
 8006f4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
			//update time since frame start!
			tdma_handler->update_inf_tsfs(tdma_handler);
 8006f58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006f62:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006f66:	6810      	ldr	r0, [r2, #0]
 8006f68:	4798      	blx	r3

			inst->wait4ack = 0;
 8006f6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006f74:	3318      	adds	r3, #24
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]

			dwt_writetxdata(psduLength, (uint8 *)  &inst->inf_msg, 0) ; // write the frame data
 8006f7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f7e:	b298      	uxth	r0, r3
 8006f80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f203 532e 	addw	r3, r3, #1326	; 0x52e
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f009 fdb8 	bl	8010b02 <dwt_writetxdata>
			if(instancesendpacket(psduLength, DWT_START_TX_IMMEDIATE | inst->wait4ack, 0))
 8006f92:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f96:	b298      	uxth	r0, r3
 8006f98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	f7ff fbb0 	bl	800670e <instancesendpacket>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d029      	beq.n	8007008 <testapprun+0x8ac>
			{
				//get the message FCODE
				uint8 fcode;
				memcpy(&fcode, &inst->inf_msg.messageData[FCODE], sizeof(uint8));
 8006fb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f203 5337 	addw	r3, r3, #1335	; 0x537
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

				if(fcode == RTLS_DEMO_MSG_INF_SUG)
 8006fc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fc8:	2b15      	cmp	r3, #21
 8006fca:	d10c      	bne.n	8006fe6 <testapprun+0x88a>
				{
					tdma_handler->set_discovery_mode(tdma_handler, WAIT_SEND_SUG, portGetTickCnt());
 8006fcc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
 8006fd6:	f00a fe7b 	bl	8011cd0 <portGetTickCnt>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	47a0      	blx	r4
				}

				inst->previousState = TA_INIT;
 8006fe6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2200      	movs	r2, #0
 8006fee:	70da      	strb	r2, [r3, #3]
				inst->nextState = TA_INIT;
 8006ff0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	709a      	strb	r2, [r3, #2]
				inst->testAppState = TA_RXE_WAIT;
 8006ffa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2206      	movs	r2, #6
 8007002:	705a      	strb	r2, [r3, #1]
				uint64 framelength_us = instance_getmessageduration_us(psduLength);
				inst->txDoneTimeoutDuration = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + framelength_us + margin_us, 1000);			//tx cmd to tx cb

			}

			break;
 8007004:	f001 b9a5 	b.w	8008352 <testapprun+0x1bf6>
				inst->testAppState = TA_TX_WAIT_CONF ;
 8007008:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2205      	movs	r2, #5
 8007010:	705a      	strb	r2, [r3, #1]
				inst->previousState = TA_TXINF_WAIT_SEND ;
 8007012:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2201      	movs	r2, #1
 800701a:	70da      	strb	r2, [r3, #3]
				done = INST_DONE_WAIT_FOR_NEXT_EVENT; //will use RX FWTO to time out (set below)
 800701c:	2301      	movs	r3, #1
 800701e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				inst->timeofTx = portGetTickCnt();
 8007022:	f00a fe55 	bl	8011cd0 <portGetTickCnt>
 8007026:	4602      	mov	r2, r0
 8007028:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8007032:	3314      	adds	r3, #20
 8007034:	601a      	str	r2, [r3, #0]
				uint64 margin_us = 1000;
 8007036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
				uint64 framelength_us = instance_getmessageduration_us(psduLength);
 8007042:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8007046:	f002 f873 	bl	8009130 <instance_getmessageduration_us>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	f04f 0300 	mov.w	r3, #0
 8007052:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
				inst->txDoneTimeoutDuration = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + framelength_us + margin_us, 1000);			//tx cmd to tx cb
 8007056:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800705a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800705e:	1884      	adds	r4, r0, r2
 8007060:	eb41 0503 	adc.w	r5, r1, r3
 8007064:	f240 4241 	movw	r2, #1089	; 0x441
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	18a1      	adds	r1, r4, r2
 800706e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007072:	eb45 0303 	adc.w	r3, r5, r3
 8007076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800707a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007086:	f7f9 fee9 	bl	8000e5c <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8007098:	601a      	str	r2, [r3, #0]
			break;
 800709a:	f001 b95a 	b.w	8008352 <testapprun+0x1bf6>
		}
        case TA_TXPOLL_WAIT_SEND :
        {
        	int psduLength = POLL_FRAME_LEN_BYTES;
 800709e:	230c      	movs	r3, #12
 80070a0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

            inst->msg.seqNum = inst->frameSN++;
 80070a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80070ae:	3302      	adds	r3, #2
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	1c53      	adds	r3, r2, #1
 80070b4:	b2d9      	uxtb	r1, r3
 80070b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80070c0:	3302      	adds	r3, #2
 80070c2:	7019      	strb	r1, [r3, #0]
 80070c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
			inst->msg.messageData[FCODE] = RTLS_DEMO_MSG_TAG_POLL; //message function code (specifies if message is a poll, response or other...)
 80070ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2221      	movs	r2, #33	; 0x21
 80070d6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			memcpy(&inst->msg.destAddr[0], &inst->uwbList[inst->uwbToRangeWith], inst->addrByteSize);
 80070da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80070e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80070f4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	6812      	ldr	r2, [r2, #0]
 80070fc:	4413      	add	r3, r2
 80070fe:	1c99      	adds	r1, r3, #2
 8007100:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800710a:	3306      	adds	r3, #6
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	f00b ff92 	bl	8013038 <memcpy>

			tdma_handler->nthOldest++;
 8007114:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800711e:	3301      	adds	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

            inst->wait4ack = 0;
 800712c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007136:	3318      	adds	r3, #24
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]

			dwt_writetxdata(psduLength, (uint8 *)  &inst->msg, 0) ; // write the frame data
 800713c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007140:	b298      	uxth	r0, r3
 8007142:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f203 132f 	addw	r3, r3, #303	; 0x12f
 800714c:	2200      	movs	r2, #0
 800714e:	4619      	mov	r1, r3
 8007150:	f009 fcd7 	bl	8010b02 <dwt_writetxdata>

            if(instancesendpacket(psduLength, DWT_START_TX_IMMEDIATE | inst->wait4ack, 0))
 8007154:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007158:	b298      	uxth	r0, r3
 800715a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007164:	3318      	adds	r3, #24
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2200      	movs	r2, #0
 800716a:	4619      	mov	r1, r3
 800716c:	f7ff facf 	bl	800670e <instancesendpacket>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d020      	beq.n	80071b8 <testapprun+0xa5c>
			{
            	//failed
            	inst->tx_poll = FALSE;
 8007176:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8007180:	3304      	adds	r3, #4
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]

				inst->previousState = TA_INIT;
 8007186:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2200      	movs	r2, #0
 800718e:	70da      	strb	r2, [r3, #3]
				inst->nextState = TA_INIT;
 8007190:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	709a      	strb	r2, [r3, #2]
				inst->testAppState = TA_RXE_WAIT;
 800719a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2206      	movs	r2, #6
 80071a2:	705a      	strb	r2, [r3, #1]

				inst->wait4ack = 0; //clear the flag as the TX has failed the TRX is off
 80071a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80071ae:	3318      	adds	r3, #24
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
				inst->timeofTx = portGetTickCnt();
				inst->timeofTxPoll = portGetTickCnt();
				inst->txDoneTimeoutDuration = inst->durationPollTxDoneTimeout_ms;
			}

            break;
 80071b4:	f001 b8cd 	b.w	8008352 <testapprun+0x1bf6>
				inst->tx_poll = TRUE;
 80071b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80071c2:	3304      	adds	r3, #4
 80071c4:	2201      	movs	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
				inst->testAppState = TA_TX_WAIT_CONF ;
 80071c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2205      	movs	r2, #5
 80071d0:	705a      	strb	r2, [r3, #1]
				inst->previousState = TA_TXPOLL_WAIT_SEND ;
 80071d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2202      	movs	r2, #2
 80071da:	70da      	strb	r2, [r3, #3]
				done = INST_DONE_WAIT_FOR_NEXT_EVENT; //will use RX FWTO to time out (set below)
 80071dc:	2301      	movs	r3, #1
 80071de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				inst->canPrintUSB = FALSE;
 80071e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				inst->canPrintLCD = FALSE;
 80071ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				inst->timeofTx = portGetTickCnt();
 80071fa:	f00a fd69 	bl	8011cd0 <portGetTickCnt>
 80071fe:	4602      	mov	r2, r0
 8007200:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800720a:	3314      	adds	r3, #20
 800720c:	601a      	str	r2, [r3, #0]
				inst->timeofTxPoll = portGetTickCnt();
 800720e:	f00a fd5f 	bl	8011cd0 <portGetTickCnt>
 8007212:	4602      	mov	r2, r0
 8007214:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800721e:	3318      	adds	r3, #24
 8007220:	601a      	str	r2, [r3, #0]
				inst->txDoneTimeoutDuration = inst->durationPollTxDoneTimeout_ms;
 8007222:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800722a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8007234:	601a      	str	r2, [r3, #0]
            break;
 8007236:	f001 b88c 	b.w	8008352 <testapprun+0x1bf6>
        }
        case TA_TXREPORT_WAIT_SEND :
		{
			int psduLength = REPORT_FRAME_LEN_BYTES;
 800723a:	231c      	movs	r3, #28
 800723c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

			// Write calculated TOF into response message
			memcpy(&inst->report_msg.messageData[REPORT_TOF], &inst->tof[inst->uwbToRangeWith], 6);
 8007240:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f603 1037 	addw	r0, r3, #2359	; 0x937
 800724a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800725a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	4413      	add	r3, r2
 8007264:	2206      	movs	r2, #6
 8007266:	4619      	mov	r1, r3
 8007268:	f00b fee6 	bl	8013038 <memcpy>
			memcpy(&inst->report_msg.messageData[REPORT_RSL], &inst->rxPWR, sizeof(double));
 800726c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f603 103d 	addw	r0, r3, #2365	; 0x93d
 8007276:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8007280:	3310      	adds	r3, #16
 8007282:	2208      	movs	r2, #8
 8007284:	4619      	mov	r1, r3
 8007286:	f00b fed7 	bl	8013038 <memcpy>
			memcpy(&inst->report_msg.messageData[REPORT_ADDR], &inst->uwbList[inst->uwbToRangeWith], inst->addrByteSize);
 800728a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f603 1045 	addw	r0, r3, #2373	; 0x945
 8007294:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80072a4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	4413      	add	r3, r2
 80072ae:	1c99      	adds	r1, r3, #2
 80072b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80072ba:	3306      	adds	r3, #6
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	f00b feba 	bl	8013038 <memcpy>
			inst->report_msg.seqNum = inst->frameSN++;
 80072c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80072ce:	3302      	adds	r3, #2
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	1c53      	adds	r3, r2, #1
 80072d4:	b2d9      	uxtb	r1, r3
 80072d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80072e0:	3302      	adds	r3, #2
 80072e2:	7019      	strb	r1, [r3, #0]
 80072e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f

			inst->wait4ack = 0;
 80072ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80072f8:	3318      	adds	r3, #24
 80072fa:	2200      	movs	r2, #0
 80072fc:	701a      	strb	r2, [r3, #0]

			dwt_writetxdata(psduLength, (uint8 *)  &inst->report_msg, 0) ; // write the frame data
 80072fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007302:	b298      	uxth	r0, r3
 8007304:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f603 132d 	addw	r3, r3, #2349	; 0x92d
 800730e:	2200      	movs	r2, #0
 8007310:	4619      	mov	r1, r3
 8007312:	f009 fbf6 	bl	8010b02 <dwt_writetxdata>
			if(instancesendpacket(psduLength, DWT_START_RX_IMMEDIATE, 0))
 8007316:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800731a:	b29b      	uxth	r3, r3
 800731c:	2200      	movs	r2, #0
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff f9f4 	bl	800670e <instancesendpacket>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d018      	beq.n	800735e <testapprun+0xc02>
			{
				inst->previousState = TA_INIT;
 800732c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2200      	movs	r2, #0
 8007334:	70da      	strb	r2, [r3, #3]
				inst->nextState = TA_INIT;
 8007336:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	709a      	strb	r2, [r3, #2]
				inst->testAppState = TA_RXE_WAIT;
 8007340:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2206      	movs	r2, #6
 8007348:	705a      	strb	r2, [r3, #1]
				inst->wait4ack = 0;
 800734a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007354:	3318      	adds	r3, #24
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]

				inst->txDoneTimeoutDuration = inst->durationReportTxDoneTimeout_ms;
				inst->canPrintLCD = FALSE;
			}

			break;
 800735a:	f000 bffa 	b.w	8008352 <testapprun+0x1bf6>
				inst->testAppState = TA_TX_WAIT_CONF;                                               // wait confirmation
 800735e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2205      	movs	r2, #5
 8007366:	705a      	strb	r2, [r3, #1]
				inst->previousState = TA_TXREPORT_WAIT_SEND;
 8007368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	220b      	movs	r2, #11
 8007370:	70da      	strb	r2, [r3, #3]
				done = INST_DONE_WAIT_FOR_NEXT_EVENT; //will use RX FWTO to time out  (set below)
 8007372:	2301      	movs	r3, #1
 8007374:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
				inst->timeofTx = portGetTickCnt();
 8007378:	f00a fcaa 	bl	8011cd0 <portGetTickCnt>
 800737c:	4602      	mov	r2, r0
 800737e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8007388:	3314      	adds	r3, #20
 800738a:	601a      	str	r2, [r3, #0]
				inst->txDoneTimeoutDuration = inst->durationReportTxDoneTimeout_ms;
 800738c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007394:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800739e:	601a      	str	r2, [r3, #0]
				inst->canPrintLCD = FALSE;
 80073a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 80073ac:	f000 bfd1 	b.w	8008352 <testapprun+0x1bf6>
		}
        case TA_TX_WAIT_CONF :
        {
            event_data_t* dw_event = instance_getevent(11); //get and clear this event
 80073b0:	200b      	movs	r0, #11
 80073b2:	f005 fa09 	bl	800c7c8 <instance_getevent>
 80073b6:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc

            //NOTE: Can get the ACK before the TX confirm event for the frame requesting the ACK
            //this happens because if polling the ISR the RX event will be processed 1st and then the TX event
            //thus the reception of the ACK will be processed before the TX confirmation of the frame that requested it.
            if(dw_event->type != DWT_SIG_TX_DONE) //wait for TX done confirmation
 80073ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d03b      	beq.n	800743c <testapprun+0xce0>
            {
                if(dw_event->type == DWT_SIG_RX_TIMEOUT) //got RX timeout - i.e. did not get the response (e.g. ACK)
 80073c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d107      	bne.n	80073de <testapprun+0xc82>
                {
                    inst->gotTO = 1;
 80073ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 80073d8:	3219      	adds	r2, #25
 80073da:	2301      	movs	r3, #1
 80073dc:	7013      	strb	r3, [r2, #0]
                }

                //sometimes the DW1000 tx callback (TXFRS) fails to trigger and the the SYS_STATE register
                //reads IDLE for for PMSC, RX, and TX so we need another way to timeout since RX FWTO won't be triggered.
                uint32 dt = get_dt32(inst->timeofTx, portGetTickCnt());
 80073de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 80073e8:	3314      	adds	r3, #20
 80073ea:	681c      	ldr	r4, [r3, #0]
 80073ec:	f00a fc70 	bl	8011cd0 <portGetTickCnt>
 80073f0:	4603      	mov	r3, r0
 80073f2:	4619      	mov	r1, r3
 80073f4:	4620      	mov	r0, r4
 80073f6:	f001 ff4c 	bl	8009292 <get_dt32>
 80073fa:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
                if(dt > inst->txDoneTimeoutDuration) //duration set at time of tx
 80073fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800740e:	4293      	cmp	r3, r2
 8007410:	d907      	bls.n	8007422 <testapprun+0xcc6>
                {
                	inst->gotTO = 1;
 8007412:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 800741c:	3219      	adds	r2, #25
 800741e:	2301      	movs	r3, #1
 8007420:	7013      	strb	r3, [r2, #0]
                }

                done = INST_DONE_WAIT_FOR_NEXT_EVENT;
 8007422:	2301      	movs	r3, #1
 8007424:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

                if(inst->gotTO == 0)
 8007428:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007432:	3319      	adds	r3, #25
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8788 	beq.w	800834c <testapprun+0x1bf0>
                {
                	break;
                }
            }

            done = INST_NOT_DONE_YET;
 800743c:	2300      	movs	r3, #0
 800743e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

            if (inst->gotTO) //timeout
 8007442:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800744c:	3319      	adds	r3, #25
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d016      	beq.n	8007482 <testapprun+0xd26>
			{
            	inst_processtxrxtimeout(inst);
 8007454:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f003 ff3f 	bl	800b2dc <inst_processtxrxtimeout>
				inst->gotTO = 0;
 800745e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007468:	3319      	adds	r3, #25
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
				inst->wait4ack = 0 ; //clear this
 800746e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007478:	3318      	adds	r3, #24
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]

				break;
 800747e:	f000 bf68 	b.w	8008352 <testapprun+0x1bf6>
			}
            else
            {
                if(inst->previousState == TA_TXINF_WAIT_SEND)
 8007482:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	78db      	ldrb	r3, [r3, #3]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d141      	bne.n	8007512 <testapprun+0xdb6>
                {
					inst->canPrintUSB = TRUE;
 800748e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	2301      	movs	r3, #1
 8007496:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
					inst->canPrintLCD = TRUE;
 800749a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	2301      	movs	r3, #1
 80074a2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

        			//get the message FCODE
        			uint8 fcode;
        			memcpy(&fcode, &inst->inf_msg.messageData[FCODE], sizeof(uint8));
 80074a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f203 5337 	addw	r3, r3, #1335	; 0x537
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

                	//exit discovery mode if we successfully send INF_SUG
					if(fcode == RTLS_DEMO_MSG_INF_SUG)
 80074b6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80074ba:	2b15      	cmp	r3, #21
 80074bc:	d112      	bne.n	80074e4 <testapprun+0xd88>
					{
						tdma_handler->set_discovery_mode(tdma_handler, EXIT, portGetTickCnt());
 80074be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
 80074c8:	f00a fc02 	bl	8011cd0 <portGetTickCnt>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80074d2:	461a      	mov	r2, r3
 80074d4:	2106      	movs	r1, #6
 80074d6:	6800      	ldr	r0, [r0, #0]
 80074d8:	47a0      	blx	r4
						inst->mode = ANCHOR;
 80074da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	2302      	movs	r3, #2
 80074e2:	7013      	strb	r3, [r2, #0]
					}

					//if we successfully send out INF_INIT, INF_SUG, or INF_UPDATE, switch to INF_REG
					if(fcode == RTLS_DEMO_MSG_INF_INIT ||
 80074e4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80074e8:	2b14      	cmp	r3, #20
 80074ea:	d007      	beq.n	80074fc <testapprun+0xda0>
					   fcode == RTLS_DEMO_MSG_INF_SUG ||
 80074ec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
					if(fcode == RTLS_DEMO_MSG_INF_INIT ||
 80074f0:	2b15      	cmp	r3, #21
 80074f2:	d003      	beq.n	80074fc <testapprun+0xda0>
					   fcode == RTLS_DEMO_MSG_INF_UPDATE)
 80074f4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
					   fcode == RTLS_DEMO_MSG_INF_SUG ||
 80074f8:	2b16      	cmp	r3, #22
 80074fa:	d10a      	bne.n	8007512 <testapprun+0xdb6>
					{
						fcode = RTLS_DEMO_MSG_INF_REG;
 80074fc:	2313      	movs	r3, #19
 80074fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
						memcpy(&inst->inf_msg.messageData[FCODE], &fcode, sizeof(uint8));
 8007502:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f203 5237 	addw	r2, r3, #1335	; 0x537
 800750c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007510:	7013      	strb	r3, [r2, #0]
					}
                }

                inst->testAppState = TA_RXE_WAIT ;       // After sending, tag expects response/report, anchor waits to receive a final/new poll
 8007512:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	2306      	movs	r3, #6
 800751a:	7053      	strb	r3, [r2, #1]

                //fall into the next case (turn on the RX)
                message = 0;
 800751c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8007520:	2300      	movs	r3, #0
 8007522:	6013      	str	r3, [r2, #0]
            }
        }// end case TA_TX_WAIT_CONF
        case TA_RXE_WAIT :
        {
            if(inst->wait4ack == 0) //if this is set the RX will turn on automatically after TX
 8007524:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800752e:	3318      	adds	r3, #24
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <testapprun+0xdf0>
            {
                //turn RX on
                instancerxon(inst, 0, 0) ;   // turn RX on, without delay
 8007536:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	2100      	movs	r1, #0
 8007544:	6800      	ldr	r0, [r0, #0]
 8007546:	f7ff f8b5 	bl	80066b4 <instancerxon>
 800754a:	e007      	b.n	800755c <testapprun+0xe00>
            }
            else
            {
                inst->wait4ack = 0 ; //clear the flag, the next time we want to turn the RX on it might not be auto
 800754c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8007556:	3218      	adds	r2, #24
 8007558:	2300      	movs	r3, #0
 800755a:	7013      	strb	r3, [r2, #0]
            }

			//we are going to use anchor/tag timeout
			done = INST_DONE_WAIT_FOR_NEXT_EVENT; //using RX FWTO
 800755c:	2301      	movs	r3, #1
 800755e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

            inst->testAppState = TA_RX_WAIT_DATA;   // let this state handle it
 8007562:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	2307      	movs	r3, #7
 800756a:	7053      	strb	r3, [r2, #1]
            inst->rxCheckOnTime = portGetTickCnt();
 800756c:	f00a fbb0 	bl	8011cd0 <portGetTickCnt>
 8007570:	4602      	mov	r2, r0
 8007572:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800757c:	330c      	adds	r3, #12
 800757e:	601a      	str	r2, [r3, #0]


            // end case TA_RXE_WAIT, don't break, but fall through into the TA_RX_WAIT_DATA state to process it immediately.
            if(message == 0)
 8007580:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 86e2 	beq.w	8008350 <testapprun+0x1bf4>
 800758c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b07      	cmp	r3, #7
 8007594:	d012      	beq.n	80075bc <testapprun+0xe60>
 8007596:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b07      	cmp	r3, #7
 800759e:	f300 8625 	bgt.w	80081ec <testapprun+0x1a90>
 80075a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d02f      	beq.n	800760c <testapprun+0xeb0>
 80075ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	f000 85ef 	beq.w	8008196 <testapprun+0x1a3a>
 80075b8:	f000 be18 	b.w	80081ec <testapprun+0x1a90>
            // Wait RX data
            switch (message)
            {
                case DWT_SIG_RX_BLINK :
                {
                    event_data_t* dw_event = instance_getevent(12); //get and clear this event
 80075bc:	200c      	movs	r0, #12
 80075be:	f005 f903 	bl	800c7c8 <instance_getevent>
 80075c2:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4

					if(inst->mode == DISCOVERY)
 80075c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d112      	bne.n	80075f8 <testapprun+0xe9c>
					{
                        //set destination address
                        memcpy(&inst->rng_initmsg.destAddr[0], &(dw_event->msgu.rxblinkmsg.tagID[0]), BLINK_FRAME_SOURCE_ADDRESS); //remember who to send the reply to
 80075d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f103 00b5 	add.w	r0, r3, #181	; 0xb5
 80075dc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80075e0:	331a      	adds	r3, #26
 80075e2:	2208      	movs	r2, #8
 80075e4:	4619      	mov	r1, r3
 80075e6:	f00b fd27 	bl	8013038 <memcpy>


                        inst->testAppState = TA_TXRANGINGINIT_WAIT_SEND;
 80075ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2209      	movs	r2, #9
 80075f2:	705a      	strb	r2, [r3, #1]
                    {
                        inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
                        done = INST_NOT_DONE_YET;
                    }

                    break;
 80075f4:	f000 bea7 	b.w	8008346 <testapprun+0x1bea>
                        inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
 80075f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2206      	movs	r2, #6
 8007600:	705a      	strb	r2, [r3, #1]
                        done = INST_NOT_DONE_YET;
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    break;
 8007608:	f000 be9d 	b.w	8008346 <testapprun+0x1bea>
                }
                case DWT_SIG_RX_OKAY :
                {
                    //if we have received a DWT_SIG_RX_OKAY event - this means that the message is IEEE data type - need to check frame control to know which addressing mode is used

                    event_data_t* dw_event = instance_getevent(15); //get and clear this event
 800760c:	200f      	movs	r0, #15
 800760e:	f005 f8db 	bl	800c7c8 <instance_getevent>
 8007612:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
                    uint8  srcAddr[8] = {0,0,0,0,0,0,0,0};
 8007616:	4b96      	ldr	r3, [pc, #600]	; (8007870 <testapprun+0x1114>)
 8007618:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800761c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007620:	e882 0003 	stmia.w	r2, {r0, r1}
                    int fcode = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
                    int fn_code = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    uint8 *messageData;

                    // 16 or 64 bit addresses
                    switch(dw_event->msgu.frame[1])
 8007630:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007634:	7e5b      	ldrb	r3, [r3, #25]
 8007636:	2bcc      	cmp	r3, #204	; 0xcc
 8007638:	d00a      	beq.n	8007650 <testapprun+0xef4>
 800763a:	2bcc      	cmp	r3, #204	; 0xcc
 800763c:	dc5a      	bgt.n	80076f4 <testapprun+0xf98>
 800763e:	2bc8      	cmp	r3, #200	; 0xc8
 8007640:	d01c      	beq.n	800767c <testapprun+0xf20>
 8007642:	2bc8      	cmp	r3, #200	; 0xc8
 8007644:	dc56      	bgt.n	80076f4 <testapprun+0xf98>
 8007646:	2b88      	cmp	r3, #136	; 0x88
 8007648:	d041      	beq.n	80076ce <testapprun+0xf72>
 800764a:	2b8c      	cmp	r3, #140	; 0x8c
 800764c:	d02c      	beq.n	80076a8 <testapprun+0xf4c>
 800764e:	e051      	b.n	80076f4 <testapprun+0xf98>
                    {
                        case 0xCC:
                            memcpy(&srcAddr[0], &(dw_event->msgu.rxmsg_ll.sourceAddr[0]), ADDR_BYTE_SIZE_L);
 8007650:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007654:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8007658:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800765c:	2208      	movs	r2, #8
 800765e:	4618      	mov	r0, r3
 8007660:	f00b fcea 	bl	8013038 <memcpy>
                            fn_code = dw_event->msgu.rxmsg_ll.messageData[FCODE];
 8007664:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800766c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                            messageData = &dw_event->msgu.rxmsg_ll.messageData[0];
 8007670:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007674:	332d      	adds	r3, #45	; 0x2d
 8007676:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                            break;
 800767a:	e03b      	b.n	80076f4 <testapprun+0xf98>
                        case 0xC8:
                            memcpy(&srcAddr[0], &(dw_event->msgu.rxmsg_sl.sourceAddr[0]), ADDR_BYTE_SIZE_L);
 800767c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007680:	f103 011f 	add.w	r1, r3, #31
 8007684:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007688:	2208      	movs	r2, #8
 800768a:	4618      	mov	r0, r3
 800768c:	f00b fcd4 	bl	8013038 <memcpy>
                            fn_code = dw_event->msgu.rxmsg_sl.messageData[FCODE];
 8007690:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007694:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007698:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                            messageData = &dw_event->msgu.rxmsg_sl.messageData[0];
 800769c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076a0:	3327      	adds	r3, #39	; 0x27
 80076a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                            break;
 80076a6:	e025      	b.n	80076f4 <testapprun+0xf98>
                        case 0x8C:
                            memcpy(&srcAddr[0], &(dw_event->msgu.rxmsg_ls.sourceAddr[0]), ADDR_BYTE_SIZE_S);
 80076a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076ac:	3325      	adds	r3, #37	; 0x25
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                            fn_code = dw_event->msgu.rxmsg_ls.messageData[FCODE];
 80076b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076ba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80076be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                            messageData = &dw_event->msgu.rxmsg_ls.messageData[0];
 80076c2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076c6:	3327      	adds	r3, #39	; 0x27
 80076c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                            break;
 80076cc:	e012      	b.n	80076f4 <testapprun+0xf98>
                        case 0x88:
                            memcpy(&srcAddr[0], &(dw_event->msgu.rxmsg_ss.sourceAddr[0]), ADDR_BYTE_SIZE_S);
 80076ce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076d2:	331f      	adds	r3, #31
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                            fn_code = dw_event->msgu.rxmsg_ss.messageData[FCODE];
 80076dc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                            messageData = &dw_event->msgu.rxmsg_ss.messageData[0];
 80076e8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80076ec:	3321      	adds	r3, #33	; 0x21
 80076ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                            break;
 80076f2:	bf00      	nop
                    }

                    fcode = fn_code;
 80076f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80076f8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80076fc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007700:	3b10      	subs	r3, #16
 8007702:	2b19      	cmp	r3, #25
 8007704:	f200 853f 	bhi.w	8008186 <testapprun+0x1a2a>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <testapprun+0xfb4>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007c07 	.word	0x08007c07
 8007714:	08007f7d 	.word	0x08007f7d
 8007718:	08008187 	.word	0x08008187
 800771c:	08007875 	.word	0x08007875
 8007720:	08007af7 	.word	0x08007af7
 8007724:	08007875 	.word	0x08007875
 8007728:	08007875 	.word	0x08007875
 800772c:	08008187 	.word	0x08008187
 8007730:	08008187 	.word	0x08008187
 8007734:	08008187 	.word	0x08008187
 8007738:	08008187 	.word	0x08008187
 800773c:	08008187 	.word	0x08008187
 8007740:	08008187 	.word	0x08008187
 8007744:	08008187 	.word	0x08008187
 8007748:	08008187 	.word	0x08008187
 800774c:	08008187 	.word	0x08008187
 8007750:	08007779 	.word	0x08007779
 8007754:	08007bdb 	.word	0x08007bdb
 8007758:	080077d7 	.word	0x080077d7
 800775c:	08008187 	.word	0x08008187
 8007760:	08008187 	.word	0x08008187
 8007764:	08008187 	.word	0x08008187
 8007768:	08008187 	.word	0x08008187
 800776c:	08008187 	.word	0x08008187
 8007770:	08008187 	.word	0x08008187
 8007774:	08007c33 	.word	0x08007c33
                    {
                        case RTLS_DEMO_MSG_RNG_INIT:
                        {
                        	//NOTE: WAIT_RNG_INIT checked in RX callback

							uint32 time_now = portGetTickCnt();
 8007778:	f00a faaa 	bl	8011cd0 <portGetTickCnt>
 800777c:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
                            tdma_handler->build_new_network(tdma_handler);
 8007780:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800778a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800778e:	6810      	ldr	r0, [r2, #0]
 8007790:	4798      	blx	r3
                            tdma_handler->populate_inf_msg(tdma_handler, RTLS_DEMO_MSG_INF_INIT);
 8007792:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800779c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80077a0:	2114      	movs	r1, #20
 80077a2:	6810      	ldr	r0, [r2, #0]
 80077a4:	4798      	blx	r3
							tdma_handler->set_discovery_mode(tdma_handler, EXIT, time_now);
 80077a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077b0:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80077b4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80077b8:	2106      	movs	r1, #6
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	4798      	blx	r3

							inst->testAppState = TA_TX_SELECT;
 80077be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	220a      	movs	r2, #10
 80077c6:	705a      	strb	r2, [r3, #1]
							inst->mode = TAG;
 80077c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]

                            break;
 80077d2:	f000 bcdf 	b.w	8008194 <testapprun+0x1a38>
                        } //RTLS_DEMO_MSG_RNG_INIT
                        case RTLS_DEMO_MSG_SYNC :
                        {
                        	uint8 srcIndex = instgetuwblistindex(inst, &srcAddr[0], inst->addrByteSize);
 80077d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80077e0:	3306      	adds	r3, #6
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80077e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	f003 f8e3 	bl	800a9b8 <instgetuwblistindex>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
                        	uint8 framelength;
							uint64 timeSinceFrameStart_us = 0;
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

							memcpy(&framelength, &messageData[SYNC_FRAMELENGTH], sizeof(uint8));
 8007804:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007808:	3301      	adds	r3, #1
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
							memcpy(&timeSinceFrameStart_us, &messageData[SYNC_TSFS], 6);
 8007810:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007814:	1c99      	adds	r1, r3, #2
 8007816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781a:	2206      	movs	r2, #6
 800781c:	4618      	mov	r0, r3
 800781e:	f00b fc0b 	bl	8013038 <memcpy>

							if(inst->mode == ANCHOR || inst->mode == TAG)
 8007822:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d006      	beq.n	800783c <testapprun+0x10e0>
 800782e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b01      	cmp	r3, #1
 8007838:	f040 84ab 	bne.w	8008192 <testapprun+0x1a36>
							{
								//evaluate our frame synchronization to see if we need to snap to the incoming value
								//and rebroadcast a SYNC message
								tdma_handler->frame_sync(tdma_handler, dw_event, framelength, timeSinceFrameStart_us, srcIndex, FS_EVAL);
 800783c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8d3 41f0 	ldr.w	r4, [r3, #496]	; 0x1f0
 8007846:	f897 5113 	ldrb.w	r5, [r7, #275]	; 0x113
 800784a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800784e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007852:	2103      	movs	r1, #3
 8007854:	9103      	str	r1, [sp, #12]
 8007856:	f897 1177 	ldrb.w	r1, [r7, #375]	; 0x177
 800785a:	9102      	str	r1, [sp, #8]
 800785c:	e9cd 2300 	strd	r2, r3, [sp]
 8007860:	462a      	mov	r2, r5
 8007862:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007866:	6800      	ldr	r0, [r0, #0]
 8007868:	47a0      	blx	r4
							}

                        	break;
 800786a:	f000 bc92 	b.w	8008192 <testapprun+0x1a36>
 800786e:	bf00      	nop
 8007870:	08017ae8 	.word	0x08017ae8
                        }
                        case RTLS_DEMO_MSG_INF_UPDATE : //fall through
                        case RTLS_DEMO_MSG_INF_SUG :    //fall through
                        case RTLS_DEMO_MSG_INF_REG :
                        {
                        	uint32 time_now = portGetTickCnt();
 8007874:	f00a fa2c 	bl	8011cd0 <portGetTickCnt>
 8007878:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
							uint8 srcIndex = instgetuwblistindex(inst, &srcAddr[0], inst->addrByteSize);
 800787c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8007886:	3306      	adds	r3, #6
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800788e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	f003 f890 	bl	800a9b8 <instgetuwblistindex>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

							uint8 framelength;
							uint64 timeSinceFrameStart_us = 0;
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
							memcpy(&framelength, &messageData[TDMA_FRAMELENGTH], sizeof(uint8));
 80078aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80078ae:	3309      	adds	r3, #9
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
							memcpy(&timeSinceFrameStart_us, &messageData[TDMA_TSFS], 6);
 80078b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80078ba:	1c59      	adds	r1, r3, #1
 80078bc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80078c0:	2206      	movs	r2, #6
 80078c2:	4618      	mov	r0, r3
 80078c4:	f00b fbb8 	bl	8013038 <memcpy>

							//return to discovery mode if no slots assigned to this UWB
							if(inst->mode == ANCHOR || inst->mode == TAG)
 80078c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d005      	beq.n	80078e0 <testapprun+0x1184>
 80078d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d117      	bne.n	8007910 <testapprun+0x11b4>
							{
								if(tdma_handler->uwbListTDMAInfo[0].slotsLength == 0)
 80078e0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d110      	bne.n	8007910 <testapprun+0x11b4>
								{
									inst->mode = DISCOVERY;
 80078ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
									tdma_handler->set_discovery_mode(tdma_handler, WAIT_INF_REG, time_now);
 80078f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007902:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007906:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800790a:	2100      	movs	r1, #0
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	4798      	blx	r3
								}
							}

                        	if(inst->mode == DISCOVERY)
 8007910:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f040 8098 	bne.w	8007a4e <testapprun+0x12f2>
                        		//NOTE: RX callback only accepts INF_UPDATE/INF_SUG/INF_REG for discovery modes WAIT_INF_REG and COLLECT_INF_REG.

                        		//1.) sync our frame start time to the local network
                        		//2.) collect and combine tdma info so we can construct a SUG packet and send it out

                        		if(tdma_handler->discovery_mode == WAIT_INF_INIT)
 800791e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8007928:	2b02      	cmp	r3, #2
 800792a:	d10b      	bne.n	8007944 <testapprun+0x11e8>
                        		{
                        			//if we receive network traffic while waiting for INF_INIT, transition to collecting INF messages
                        			tdma_handler->set_discovery_mode(tdma_handler, COLLECT_INF_REG, time_now);
 800792c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007936:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800793a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800793e:	2101      	movs	r1, #1
 8007940:	6800      	ldr	r0, [r0, #0]
 8007942:	4798      	blx	r3
                        		}

                        		if(tdma_handler->discovery_mode == WAIT_INF_REG) //treat INF_UPDATE and INF_SUG the same
 8007944:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d131      	bne.n	80079b6 <testapprun+0x125a>
								{
                        			//synchronize the frames
                        			tdma_handler->frame_sync(tdma_handler, dw_event, framelength, timeSinceFrameStart_us, srcIndex, FS_ADOPT);
 8007952:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8d3 41f0 	ldr.w	r4, [r3, #496]	; 0x1f0
 800795c:	f897 5107 	ldrb.w	r5, [r7, #263]	; 0x107
 8007960:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8007964:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007968:	2100      	movs	r1, #0
 800796a:	9103      	str	r1, [sp, #12]
 800796c:	f897 1163 	ldrb.w	r1, [r7, #355]	; 0x163
 8007970:	9102      	str	r1, [sp, #8]
 8007972:	e9cd 2300 	strd	r2, r3, [sp]
 8007976:	462a      	mov	r2, r5
 8007978:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	47a0      	blx	r4
                        			//initialize collection of tdma info, clear any previously stored info
                        			tdma_handler->process_inf_msg(tdma_handler, messageData, srcIndex, CLEAR_ALL_COPY);
 8007980:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800798a:	f897 2163 	ldrb.w	r2, [r7, #355]	; 0x163
 800798e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007992:	2300      	movs	r3, #0
 8007994:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8007998:	6800      	ldr	r0, [r0, #0]
 800799a:	47a0      	blx	r4
                        			//set discovery mode to COLLECT_INF_REG
                        			tdma_handler->set_discovery_mode(tdma_handler, COLLECT_INF_REG, time_now);
 800799c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079a6:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80079aa:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80079ae:	2101      	movs	r1, #1
 80079b0:	6800      	ldr	r0, [r0, #0]
 80079b2:	4798      	blx	r3
 80079b4:	e08d      	b.n	8007ad2 <testapprun+0x1376>
								}
                        		else if(tdma_handler->discovery_mode == COLLECT_INF_REG)
 80079b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d125      	bne.n	8007a10 <testapprun+0x12b4>
                        		{
                        			//synchronize the frames
									tdma_handler->frame_sync(tdma_handler, dw_event, framelength, timeSinceFrameStart_us, srcIndex, FS_COLLECT);
 80079c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8d3 41f0 	ldr.w	r4, [r3, #496]	; 0x1f0
 80079ce:	f897 5107 	ldrb.w	r5, [r7, #263]	; 0x107
 80079d2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80079d6:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80079da:	2102      	movs	r1, #2
 80079dc:	9103      	str	r1, [sp, #12]
 80079de:	f897 1163 	ldrb.w	r1, [r7, #355]	; 0x163
 80079e2:	9102      	str	r1, [sp, #8]
 80079e4:	e9cd 2300 	strd	r2, r3, [sp]
 80079e8:	462a      	mov	r2, r5
 80079ea:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	47a0      	blx	r4
									//collecting tdma info, append to previously stored info
                        			tdma_handler->process_inf_msg(tdma_handler, messageData, srcIndex, COPY);
 80079f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80079fc:	f897 2163 	ldrb.w	r2, [r7, #355]	; 0x163
 8007a00:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007a04:	2302      	movs	r3, #2
 8007a06:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	47a0      	blx	r4
 8007a0e:	e060      	b.n	8007ad2 <testapprun+0x1376>
                        		}
                        		else if(tdma_handler->discovery_mode == WAIT_SEND_SUG)
 8007a10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d159      	bne.n	8007ad2 <testapprun+0x1376>
								{
                        			//process frame sync while waiting to send sug so we maintain syn with selected (sub)network
                        			//also give ourselves the opportunity to detect the need to transmit frame sync rebase messages
									tdma_handler->frame_sync(tdma_handler, dw_event, framelength, timeSinceFrameStart_us, srcIndex, FS_AVERAGE);
 8007a1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8d3 41f0 	ldr.w	r4, [r3, #496]	; 0x1f0
 8007a28:	f897 5107 	ldrb.w	r5, [r7, #263]	; 0x107
 8007a2c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8007a30:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007a34:	2101      	movs	r1, #1
 8007a36:	9103      	str	r1, [sp, #12]
 8007a38:	f897 1163 	ldrb.w	r1, [r7, #355]	; 0x163
 8007a3c:	9102      	str	r1, [sp, #8]
 8007a3e:	e9cd 2300 	strd	r2, r3, [sp]
 8007a42:	462a      	mov	r2, r5
 8007a44:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007a48:	6800      	ldr	r0, [r0, #0]
 8007a4a:	47a0      	blx	r4
 8007a4c:	e041      	b.n	8007ad2 <testapprun+0x1376>
								}
                        	}
                        	else if(inst->mode == ANCHOR || inst->mode == TAG)
 8007a4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d005      	beq.n	8007a66 <testapprun+0x130a>
 8007a5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d135      	bne.n	8007ad2 <testapprun+0x1376>
                        		//if we are a TAG or ANCHOR
								//1.) sync our frame start time to the local network
                        		//2.) check for and adopt any tdma changes, sending an INF_UPDATE or INF_REG accordingly

                        		//synchronize the frames
								tdma_handler->frame_sync(tdma_handler, dw_event, framelength, timeSinceFrameStart_us, srcIndex, FS_AVERAGE);
 8007a66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8d3 41f0 	ldr.w	r4, [r3, #496]	; 0x1f0
 8007a70:	f897 5107 	ldrb.w	r5, [r7, #263]	; 0x107
 8007a74:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8007a78:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	9103      	str	r1, [sp, #12]
 8007a80:	f897 1163 	ldrb.w	r1, [r7, #355]	; 0x163
 8007a84:	9102      	str	r1, [sp, #8]
 8007a86:	e9cd 2300 	strd	r2, r3, [sp]
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007a90:	6800      	ldr	r0, [r0, #0]
 8007a92:	47a0      	blx	r4

								//collecting tdma info, append to previously stored info
								bool tdma_modified = tdma_handler->process_inf_msg(tdma_handler, messageData, srcIndex, CLEAR_LISTED_COPY);
 8007a94:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8007a9e:	f897 2163 	ldrb.w	r2, [r7, #355]	; 0x163
 8007aa2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	47a0      	blx	r4
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162

								if(tdma_modified)
 8007ab6:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <testapprun+0x1376>
								{
									//only repopulate the INF message if there was a modification to the TDMA configuration
									tdma_handler->populate_inf_msg(tdma_handler, RTLS_DEMO_MSG_INF_UPDATE);
 8007abe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ac8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8007acc:	2116      	movs	r1, #22
 8007ace:	6810      	ldr	r0, [r2, #0]
 8007ad0:	4798      	blx	r3
								}
                        	}


                        	//INF is last message in slot, we can print after processing
                        	inst->canPrintUSB = TRUE;
 8007ad2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							inst->canPrintLCD = TRUE;
 8007ade:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

							//wait for next RX
							inst->testAppState = TA_RXE_WAIT ;
 8007aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2206      	movs	r2, #6
 8007af2:	705a      	strb	r2, [r3, #1]

                        	break;
 8007af4:	e34e      	b.n	8008194 <testapprun+0x1a38>
                        case RTLS_DEMO_MSG_INF_INIT :
						{
							//NOTE: discovery mode WAIT_INF_INIT checked in RX callback

							//process the INF packet
							uint32 time_now = portGetTickCnt();
 8007af6:	f00a f8eb 	bl	8011cd0 <portGetTickCnt>
 8007afa:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
							uint8 srcIndex = instgetuwblistindex(inst, &srcAddr[0], inst->addrByteSize);
 8007afe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8007b08:	3306      	adds	r3, #6
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8007b10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f002 ff4f 	bl	800a9b8 <instgetuwblistindex>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b

							uint8 framelength;
							uint64 timeSinceFrameStart_us = 0;
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
							memcpy(&framelength, &messageData[TDMA_FRAMELENGTH], sizeof(uint8));
 8007b2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b30:	3309      	adds	r3, #9
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	f107 03f7 	add.w	r3, r7, #247	; 0xf7
 8007b38:	701a      	strb	r2, [r3, #0]
							memcpy(&timeSinceFrameStart_us, &messageData[TDMA_TSFS], 6);
 8007b3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b3e:	1c59      	adds	r1, r3, #1
 8007b40:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007b44:	2206      	movs	r2, #6
 8007b46:	4618      	mov	r0, r3
 8007b48:	f00b fa76 	bl	8013038 <memcpy>

							//synchronize the frames
							tdma_handler->frame_sync(tdma_handler, dw_event, framelength, timeSinceFrameStart_us, srcIndex, FS_ADOPT);
 8007b4c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8d3 41f0 	ldr.w	r4, [r3, #496]	; 0x1f0
 8007b56:	f107 03f7 	add.w	r3, r7, #247	; 0xf7
 8007b5a:	781d      	ldrb	r5, [r3, #0]
 8007b5c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8007b60:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007b64:	2100      	movs	r1, #0
 8007b66:	9103      	str	r1, [sp, #12]
 8007b68:	f897 116b 	ldrb.w	r1, [r7, #363]	; 0x16b
 8007b6c:	9102      	str	r1, [sp, #8]
 8007b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8007b72:	462a      	mov	r2, r5
 8007b74:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007b78:	6800      	ldr	r0, [r0, #0]
 8007b7a:	47a0      	blx	r4
							//copy the TDMA network configuration directly
							tdma_handler->process_inf_msg(tdma_handler, messageData, srcIndex, CLEAR_ALL_COPY);
 8007b7c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8007b86:	f897 216b 	ldrb.w	r2, [r7, #363]	; 0x16b
 8007b8a:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8007b94:	6800      	ldr	r0, [r0, #0]
 8007b96:	47a0      	blx	r4
							//copy new TDMA configuration into the INF message that this UWB will send out
							tdma_handler->populate_inf_msg(tdma_handler, RTLS_DEMO_MSG_INF_UPDATE);
 8007b98:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ba2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8007ba6:	2116      	movs	r1, #22
 8007ba8:	6810      	ldr	r0, [r2, #0]
 8007baa:	4798      	blx	r3
							//set discovery mode to EXIT
							tdma_handler->set_discovery_mode(tdma_handler, EXIT, time_now);
 8007bac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007bb6:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007bba:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8007bbe:	2106      	movs	r1, #6
 8007bc0:	6800      	ldr	r0, [r0, #0]
 8007bc2:	4798      	blx	r3

							inst->mode = ANCHOR;
 8007bc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	701a      	strb	r2, [r3, #0]

							//stay in RX wait for next frame...
							inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
 8007bce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2206      	movs	r2, #6
 8007bd6:	705a      	strb	r2, [r3, #1]

							break;
 8007bd8:	e2dc      	b.n	8008194 <testapprun+0x1a38>
						}//RTLS_DEMO_MSG_INF
                        case RTLS_DEMO_MSG_TAG_POLL:
                        {
                            if(dw_event->typePend == DWT_SIG_TX_PENDING)
 8007bda:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007bde:	789b      	ldrb	r3, [r3, #2]
 8007be0:	2b0c      	cmp	r3, #12
 8007be2:	d10a      	bne.n	8007bfa <testapprun+0x149e>
                            {
                                inst->testAppState = TA_TX_WAIT_CONF;              // wait confirmation
 8007be4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2205      	movs	r2, #5
 8007bec:	705a      	strb	r2, [r3, #1]
                                inst->previousState = TA_TXRESPONSE_WAIT_SEND ;
 8007bee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	70da      	strb	r2, [r3, #3]
                            {
                                //stay in RX wait for next frame...
                                inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
                            }

                            break;
 8007bf8:	e2cc      	b.n	8008194 <testapprun+0x1a38>
                                inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
 8007bfa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2206      	movs	r2, #6
 8007c02:	705a      	strb	r2, [r3, #1]
                            break;
 8007c04:	e2c6      	b.n	8008194 <testapprun+0x1a38>
                        }//RTLS_DEMO_MSG_TAG_POLL
                        case RTLS_DEMO_MSG_ANCH_RESP:
                        {
                        	if(dw_event->typePend == DWT_SIG_TX_PENDING)
 8007c06:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007c0a:	789b      	ldrb	r3, [r3, #2]
 8007c0c:	2b0c      	cmp	r3, #12
 8007c0e:	d10a      	bne.n	8007c26 <testapprun+0x14ca>
							{
								inst->testAppState = TA_TX_WAIT_CONF;              // wait confirmation
 8007c10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2205      	movs	r2, #5
 8007c18:	705a      	strb	r2, [r3, #1]
								inst->previousState = TA_TXFINAL_WAIT_SEND ;
 8007c1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2203      	movs	r2, #3
 8007c22:	70da      	strb	r2, [r3, #3]
							{
								//stay in RX wait for next frame...
								inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
							}

							break;
 8007c24:	e2b6      	b.n	8008194 <testapprun+0x1a38>
								inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
 8007c26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2206      	movs	r2, #6
 8007c2e:	705a      	strb	r2, [r3, #1]
							break;
 8007c30:	e2b0      	b.n	8008194 <testapprun+0x1a38>
						} //RTLS_DEMO_MSG_ANCH_RESP
                        case RTLS_DEMO_MSG_TAG_FINAL :
                        {
                            int64 Rb, Da, Ra, Db ;
                            uint64 tagFinalTxTime  = 0;
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                            uint64 tagFinalRxTime  = 0;
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
                            uint64 tagPollTxTime  = 0;
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
                            uint64 anchorRespRxTime  = 0;
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

                            double RaRbxDaDb = 0;
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
                            double RbyDb = 0;
 8007c6e:	f04f 0200 	mov.w	r2, #0
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
                            double RayDa = 0;
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198

                            // time of arrival of Final message
                            tagFinalRxTime = inst->dwt_final_rx;
 8007c86:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007c90:	3310      	adds	r3, #16
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0

                            // times measured at Tag extracted from the message buffer
                            // extract 40bit times
                            memcpy(&tagPollTxTime, &(messageData[PTXT]), 5);
 8007c9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f00b f9c6 	bl	8013038 <memcpy>
                            memcpy(&anchorRespRxTime, &(messageData[RRXT]), 5);
 8007cac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007cb0:	1d99      	adds	r1, r3, #6
 8007cb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007cb6:	2205      	movs	r2, #5
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f00b f9bd 	bl	8013038 <memcpy>
                            memcpy(&tagFinalTxTime, &(messageData[FTXT]), 5);
 8007cbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007cc2:	f103 010b 	add.w	r1, r3, #11
 8007cc6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007cca:	2205      	movs	r2, #5
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f00b f9b3 	bl	8013038 <memcpy>

                            // poll response round trip delay time is calculated as
                            // (anchorRespRxTime - tagPollTxTime) - (anchorRespTxTime - tagPollRxTime)
                            Ra = (int64)((anchorRespRxTime - tagPollTxTime) & MASK_40BIT);
 8007cd2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007cd6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007cda:	1a84      	subs	r4, r0, r2
 8007cdc:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8007ce0:	eb61 0303 	sbc.w	r3, r1, r3
 8007ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ce8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8007cf4:	ea00 0402 	and.w	r4, r0, r2
 8007cf8:	61bc      	str	r4, [r7, #24]
 8007cfa:	400b      	ands	r3, r1
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007d02:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
                            Db = (int64)((inst->anchorRespTxTime - inst->tagPollRxTime) & MASK_40BIT);
 8007d06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8007d10:	3318      	adds	r3, #24
 8007d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007d20:	3308      	adds	r3, #8
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	1a84      	subs	r4, r0, r2
 8007d28:	67bc      	str	r4, [r7, #120]	; 0x78
 8007d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8007d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007d34:	f04f 32ff 	mov.w	r2, #4294967295
 8007d38:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8007d3c:	ea00 0402 	and.w	r4, r0, r2
 8007d40:	613c      	str	r4, [r7, #16]
 8007d42:	400b      	ands	r3, r1
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007d4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188

                            // response final round trip delay time is calculated as
                            // (tagFinalRxTime - anchorRespTxTime) - (tagFinalTxTime - anchorRespRxTime)
                            Rb = (int64)((tagFinalRxTime - inst->anchorRespTxTime) & MASK_40BIT);
 8007d4e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8007d58:	3318      	adds	r3, #24
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8007d62:	1a84      	subs	r4, r0, r2
 8007d64:	673c      	str	r4, [r7, #112]	; 0x70
 8007d66:	eb61 0303 	sbc.w	r3, r1, r3
 8007d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8007d6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295
 8007d74:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8007d78:	ea00 0402 	and.w	r4, r0, r2
 8007d7c:	60bc      	str	r4, [r7, #8]
 8007d7e:	400b      	ands	r3, r1
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007d86:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
							Da = (int64)((tagFinalTxTime - anchorRespRxTime) & MASK_40BIT);
 8007d8a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d8e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8007d92:	1a84      	subs	r4, r0, r2
 8007d94:	66bc      	str	r4, [r7, #104]	; 0x68
 8007d96:	eb61 0303 	sbc.w	r3, r1, r3
 8007d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007da0:	f04f 32ff 	mov.w	r2, #4294967295
 8007da4:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8007da8:	ea00 0402 	and.w	r4, r0, r2
 8007dac:	603c      	str	r4, [r7, #0]
 8007dae:	400b      	ands	r3, r1
 8007db0:	607b      	str	r3, [r7, #4]
 8007db2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007db6:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

                            RaRbxDaDb = (((double)Ra))*(((double)Rb)) - (((double)Da))*(((double)Db));
 8007dba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007dbe:	f7f8 fbc9 	bl	8000554 <__aeabi_l2d>
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8007dca:	f7f8 fbc3 	bl	8000554 <__aeabi_l2d>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f7f8 fbeb 	bl	80005b0 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4690      	mov	r8, r2
 8007de0:	4699      	mov	r9, r3
 8007de2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8007de6:	f7f8 fbb5 	bl	8000554 <__aeabi_l2d>
 8007dea:	4604      	mov	r4, r0
 8007dec:	460d      	mov	r5, r1
 8007dee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007df2:	f7f8 fbaf 	bl	8000554 <__aeabi_l2d>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7f8 fbd7 	bl	80005b0 <__aeabi_dmul>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4640      	mov	r0, r8
 8007e08:	4649      	mov	r1, r9
 8007e0a:	f7f8 fa19 	bl	8000240 <__aeabi_dsub>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
                            RbyDb = ((double)Rb + (double)Db);
 8007e16:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8007e1a:	f7f8 fb9b 	bl	8000554 <__aeabi_l2d>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007e26:	f7f8 fb95 	bl	8000554 <__aeabi_l2d>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fa07 	bl	8000244 <__adddf3>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
                            RayDa = ((double)Ra + (double)Da);
 8007e3e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8007e42:	f7f8 fb87 	bl	8000554 <__aeabi_l2d>
 8007e46:	4604      	mov	r4, r0
 8007e48:	460d      	mov	r5, r1
 8007e4a:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8007e4e:	f7f8 fb81 	bl	8000554 <__aeabi_l2d>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 f9f3 	bl	8000244 <__adddf3>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198

                            //time-of-flight
                            inst->tof[inst->uwbToRangeWith] = (int64) ( RaRbxDaDb/(RbyDb + RayDa) );
 8007e66:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8007e6a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8007e6e:	f7f8 f9e9 	bl	8000244 <__adddf3>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8007e7a:	f7f8 fcc3 	bl	8000804 <__aeabi_ddiv>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4610      	mov	r0, r2
 8007e84:	4619      	mov	r1, r3
 8007e86:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	461c      	mov	r4, r3
 8007e94:	f7f8 fffa 	bl	8000e8c <__aeabi_d2lz>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8007ea6:	00c9      	lsls	r1, r1, #3
 8007ea8:	4401      	add	r1, r0
 8007eaa:	e9c1 2300 	strd	r2, r3, [r1]
                            inst->newRangeUWBIndex = inst->uwbToRangeWith;
 8007eae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	701a      	strb	r2, [r3, #0]

							if(reportTOF(inst, inst->newRangeUWBIndex, inst->rxPWR)==0)
 8007ec8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	7819      	ldrb	r1, [r3, #0]
 8007ed6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	f002 fc78 	bl	800a7e0 <reportTOF>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <testapprun+0x17aa>
							{
								inst->newRange = 1;
 8007ef6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007f00:	330c      	adds	r3, #12
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
							}

                            tdma_handler->uwbListTDMAInfo[inst->uwbToRangeWith].lastRange = portGetTickCnt();
 8007f06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	461c      	mov	r4, r3
 8007f14:	f009 fedc 	bl	8011cd0 <portGetTickCnt>
 8007f18:	4601      	mov	r1, r0
 8007f1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4623      	mov	r3, r4
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4423      	add	r3, r4
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4413      	add	r3, r2
 8007f2a:	3318      	adds	r3, #24
 8007f2c:	6019      	str	r1, [r3, #0]

                            inst->newRangeTagAddress = instance_get_uwbaddr(inst->uwbToRangeWith);
 8007f2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f001 f964 	bl	8009208 <instance_get_uwbaddr>
 8007f40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007f4a:	3318      	adds	r3, #24
 8007f4c:	e9c3 0100 	strd	r0, r1, [r3]
                            inst->newRangeAncAddress = instance_get_addr();
 8007f50:	f001 f950 	bl	80091f4 <instance_get_addr>
 8007f54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007f5e:	3310      	adds	r3, #16
 8007f60:	e9c3 0100 	strd	r0, r1, [r3]

                            inst->testAppState = TA_TXREPORT_WAIT_SEND;
 8007f64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	220b      	movs	r2, #11
 8007f6c:	705a      	strb	r2, [r3, #1]
                            inst->delayedReplyTime = 0 ;
 8007f6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            break;
 8007f7a:	e10b      	b.n	8008194 <testapprun+0x1a38>
                        } //RTLS_DEMO_MSG_TAG_FINAL
                        case RTLS_DEMO_MSG_RNG_REPORT :
						{
							uint8 tag_index = instgetuwblistindex(inst, &messageData[REPORT_ADDR], inst->addrByteSize);
 8007f7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007f80:	f103 010f 	add.w	r1, r3, #15
 8007f84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8007f8e:	3306      	adds	r3, #6
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	f002 fd0e 	bl	800a9b8 <instgetuwblistindex>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3161 	strb.w	r3, [r7, #353]	; 0x161
							uint8 anchor_index = instgetuwblistindex(inst, &srcAddr[0], inst->addrByteSize);
 8007fa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8007fac:	3306      	adds	r3, #6
 8007fae:	781a      	ldrb	r2, [r3, #0]
 8007fb0:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8007fb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f002 fcfd 	bl	800a9b8 <instgetuwblistindex>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160

							//for now only process if we are the TAG that ranged with the reporting ANCHOR
							inst->tof[anchor_index] = 0;
 8007fc4:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 8007fc8:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	18d1      	adds	r1, r2, r3
 8007fd6:	f04f 0200 	mov.w	r2, #0
 8007fda:	f04f 0300 	mov.w	r3, #0
 8007fde:	e9c1 2300 	strd	r2, r3, [r1]

							//copy previously calculated ToF
							memcpy(&inst->tof[anchor_index], &messageData[REPORT_TOF], 6);
 8007fe2:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 8007fe6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8007fea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	18d0      	adds	r0, r2, r3
 8007ff4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	2206      	movs	r2, #6
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f00b f81b 	bl	8013038 <memcpy>
							memcpy(&inst->rxPWR, &messageData[REPORT_RSL], sizeof(double));
 8008002:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800800c:	3310      	adds	r3, #16
 800800e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8008012:	1dd1      	adds	r1, r2, #7
 8008014:	2208      	movs	r2, #8
 8008016:	4618      	mov	r0, r3
 8008018:	f00b f80e 	bl	8013038 <memcpy>


							inst->newRangeAncAddress = instance_get_uwbaddr(anchor_index);
 800801c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 8008020:	4618      	mov	r0, r3
 8008022:	f001 f8f1 	bl	8009208 <instance_get_uwbaddr>
 8008026:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008030:	3310      	adds	r3, #16
 8008032:	e9c3 0100 	strd	r0, r1, [r3]
							inst->newRangeTagAddress = instance_get_uwbaddr(tag_index);
 8008036:	f897 3161 	ldrb.w	r3, [r7, #353]	; 0x161
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f8e4 	bl	8009208 <instance_get_uwbaddr>
 8008040:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800804a:	3318      	adds	r3, #24
 800804c:	e9c3 0100 	strd	r0, r1, [r3]

							inst->newRangeUWBIndex = anchor_index;
 8008050:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800805a:	3308      	adds	r3, #8
 800805c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008060:	701a      	strb	r2, [r3, #0]
							if(inst->tof[inst->newRangeUWBIndex] > 0) //if ToF == 0 - then no new range to report
 8008062:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800806c:	3308      	adds	r3, #8
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	4619      	mov	r1, r3
 8008072:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	f501 730c 	add.w	r3, r1, #560	; 0x230
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	2a01      	cmp	r2, #1
 8008086:	f173 0300 	sbcs.w	r3, r3, #0
 800808a:	db1e      	blt.n	80080ca <testapprun+0x196e>
							{
								if(reportTOF(inst, inst->newRangeUWBIndex, inst->rxPWR)==0)
 800808c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008096:	3308      	adds	r3, #8
 8008098:	7819      	ldrb	r1, [r3, #0]
 800809a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80080a4:	3310      	adds	r3, #16
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80080ae:	6800      	ldr	r0, [r0, #0]
 80080b0:	f002 fb96 	bl	800a7e0 <reportTOF>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d107      	bne.n	80080ca <testapprun+0x196e>
								{
									inst->newRange = 1;
 80080ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80080c4:	330c      	adds	r3, #12
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
								}
							}

							if(tag_index == 0)
 80080ca:	f897 3161 	ldrb.w	r3, [r7, #353]	; 0x161
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d136      	bne.n	8008140 <testapprun+0x19e4>
							{
								tdma_handler->nthOldest = 1;
 80080d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
								tdma_handler->uwbListTDMAInfo[inst->uwbToRangeWith].lastRange = portGetTickCnt();
 80080de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461c      	mov	r4, r3
 80080ec:	f009 fdf0 	bl	8011cd0 <portGetTickCnt>
 80080f0:	4601      	mov	r1, r0
 80080f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4623      	mov	r3, r4
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4423      	add	r3, r4
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4413      	add	r3, r2
 8008102:	3318      	adds	r3, #24
 8008104:	6019      	str	r1, [r3, #0]
								tdma_handler->firstPollComplete = TRUE;
 8008106:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
								inst->testAppState = TA_TX_SELECT;
 8008112:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	220a      	movs	r2, #10
 800811a:	705a      	strb	r2, [r3, #1]
								inst->previousState = TA_INIT;
 800811c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	70da      	strb	r2, [r3, #3]
								inst->nextState = TA_INIT;
 8008126:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	709a      	strb	r2, [r3, #2]
								inst->uwbToRangeWith = 255;
 8008130:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800813a:	22ff      	movs	r2, #255	; 0xff
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	e015      	b.n	800816c <testapprun+0x1a10>
							}
							else
							{
								inst->testAppState = TA_RXE_WAIT ;
 8008140:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2206      	movs	r2, #6
 8008148:	705a      	strb	r2, [r3, #1]
								inst->previousState = TA_INIT;
 800814a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2200      	movs	r2, #0
 8008152:	70da      	strb	r2, [r3, #3]
								inst->nextState = TA_INIT;
 8008154:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	709a      	strb	r2, [r3, #2]
								inst->uwbToRangeWith = 255;
 800815e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8008168:	22ff      	movs	r2, #255	; 0xff
 800816a:	701a      	strb	r2, [r3, #0]
							}

							inst->canPrintUSB = TRUE;
 800816c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							inst->canPrintLCD = FALSE;
 8008178:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

							break;
 8008184:	e006      	b.n	8008194 <testapprun+0x1a38>
						} //RTLS_DEMO_MSG_RNG_REPORT
                        default:
                        {
                            inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
 8008186:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2206      	movs	r2, #6
 800818e:	705a      	strb	r2, [r3, #1]

                            break;
 8008190:	e000      	b.n	8008194 <testapprun+0x1a38>
                        	break;
 8008192:	bf00      	nop
                        }
                    } //end switch (fcode)


                    break ;
 8008194:	e0d7      	b.n	8008346 <testapprun+0x1bea>
                } //end of DWT_SIG_RX_OKAY
                case DWT_SIG_RX_TIMEOUT :
                {
                	if(tdma_handler->discovery_mode == WAIT_RNG_INIT || tdma_handler->discovery_mode == WAIT_INF_INIT)
 8008196:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d006      	beq.n	80081b2 <testapprun+0x1a56>
 80081a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d10f      	bne.n	80081d2 <testapprun+0x1a76>
					{
                		uint32 time_now = portGetTickCnt();
 80081b2:	f009 fd8d 	bl	8011cd0 <portGetTickCnt>
 80081b6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
						tdma_handler->set_discovery_mode(tdma_handler, WAIT_INF_REG, time_now);
 80081ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081c4:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80081c8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80081cc:	2100      	movs	r1, #0
 80081ce:	6800      	ldr	r0, [r0, #0]
 80081d0:	4798      	blx	r3
					}

                    instance_getevent(17); //get and clear this event
 80081d2:	2011      	movs	r0, #17
 80081d4:	f004 faf8 	bl	800c7c8 <instance_getevent>
                    inst_processtxrxtimeout(inst);
 80081d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	f003 f87d 	bl	800b2dc <inst_processtxrxtimeout>
                    message = 0; //clear the message as we have processed the event
 80081e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]

                    break;
 80081ea:	e0ac      	b.n	8008346 <testapprun+0x1bea>
                }
                case DWT_SIG_TX_AA_DONE: //ignore this event - just process the rx frame that was received before the ACK response
                case 0:
                default:
                {
                	if(inst->mode == TAG){
 80081ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d151      	bne.n	800829c <testapprun+0x1b40>
                		//get the message FCODE
						uint8 fcode;
						memcpy(&fcode, &inst->msg.messageData[FCODE], sizeof(uint8));
 80081f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8008208:	701a      	strb	r2, [r3, #0]

						if(fcode == RTLS_DEMO_MSG_TAG_POLL)
 800820a:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b21      	cmp	r3, #33	; 0x21
 8008212:	d11f      	bne.n	8008254 <testapprun+0x1af8>
						{
							uint32 dt = get_dt32(inst->timeofTxPoll, portGetTickCnt());
 8008214:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800821e:	3318      	adds	r3, #24
 8008220:	681c      	ldr	r4, [r3, #0]
 8008222:	f009 fd55 	bl	8011cd0 <portGetTickCnt>
 8008226:	4603      	mov	r3, r0
 8008228:	4619      	mov	r1, r3
 800822a:	4620      	mov	r0, r4
 800822c:	f001 f831 	bl	8009292 <get_dt32>
 8008230:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
							if(dt > inst->durationPollTimeout_ms)
 8008234:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800823e:	461a      	mov	r2, r3
 8008240:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008244:	4293      	cmp	r3, r2
 8008246:	d929      	bls.n	800829c <testapprun+0x1b40>
							{
								inst_processtxrxtimeout(inst);
 8008248:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	f003 f845 	bl	800b2dc <inst_processtxrxtimeout>
 8008252:	e023      	b.n	800829c <testapprun+0x1b40>
							}
						}
						else if(fcode == RTLS_DEMO_MSG_TAG_FINAL)
 8008254:	f107 03cf 	add.w	r3, r7, #207	; 0xcf
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b29      	cmp	r3, #41	; 0x29
 800825c:	d11e      	bne.n	800829c <testapprun+0x1b40>
						{
							uint32 dt = get_dt32(inst->timeofTxFinal, portGetTickCnt());
 800825e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8008268:	331c      	adds	r3, #28
 800826a:	681c      	ldr	r4, [r3, #0]
 800826c:	f009 fd30 	bl	8011cd0 <portGetTickCnt>
 8008270:	4603      	mov	r3, r0
 8008272:	4619      	mov	r1, r3
 8008274:	4620      	mov	r0, r4
 8008276:	f001 f80c 	bl	8009292 <get_dt32>
 800827a:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
							if(dt > inst->durationFinalTimeout_ms)
 800827e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8008288:	461a      	mov	r2, r3
 800828a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800828e:	4293      	cmp	r3, r2
 8008290:	d904      	bls.n	800829c <testapprun+0x1b40>
							{
								inst_processtxrxtimeout(inst);
 8008292:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	f003 f820 	bl	800b2dc <inst_processtxrxtimeout>
							}
						}
                	}

                	//check if RX is on every so often. Turn it on if it isn't.
                	uint32 time_now = portGetTickCnt();
 800829c:	f009 fd18 	bl	8011cd0 <portGetTickCnt>
 80082a0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
					uint32 timeSinceRxCheck = get_dt32(inst->rxCheckOnTime, time_now);
 80082a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80082ae:	330c      	adds	r3, #12
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 ffeb 	bl	8009292 <get_dt32>
 80082bc:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
					if(timeSinceRxCheck >= RX_CHECK_ON_PERIOD_MS)
 80082c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80082c4:	2bc7      	cmp	r3, #199	; 0xc7
 80082c6:	d925      	bls.n	8008314 <testapprun+0x1bb8>
					{
						inst->rxCheckOnTime = time_now;
 80082c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80082d2:	330c      	adds	r3, #12
 80082d4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80082d8:	601a      	str	r2, [r3, #0]

						//read SYS_STATE, getting second byte
						uint8 regval = dwt_read8bitoffsetreg(SYS_STATE_ID,1);
 80082da:	2101      	movs	r1, #1
 80082dc:	2019      	movs	r0, #25
 80082de:	f008 fdfd 	bl	8010edc <dwt_read8bitoffsetreg>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
						//get the first 5 bytes
						regval &= 0x1F;
 80082e8:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
						if(regval == 0){//RX IDLE
 80082f4:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <testapprun+0x1bb8>
							dwt_forcetrxoff();
 80082fc:	f009 f9c8 	bl	8011690 <dwt_forcetrxoff>
							instancerxon(inst, 0, 0);
 8008300:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	f04f 0300 	mov.w	r3, #0
 800830c:	2100      	movs	r1, #0
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	f7fe f9d0 	bl	80066b4 <instancerxon>
						}
					}

					//check if it's time to BLINK
					if(tdma_handler->check_blink(tdma_handler) == TRUE)
 8008314:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800831e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8008322:	6810      	ldr	r0, [r2, #0]
 8008324:	4798      	blx	r3
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d004      	beq.n	8008336 <testapprun+0x1bda>
					{
						inst->testAppState = TA_TX_SELECT;
 800832c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	220a      	movs	r2, #10
 8008334:	705a      	strb	r2, [r3, #1]
					}

                    if(done == INST_NOT_DONE_YET)
 8008336:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <testapprun+0x1be8>
                    {
                        done = INST_DONE_WAIT_FOR_NEXT_EVENT;
 800833e:	2301      	movs	r3, #1
 8008340:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    }

                    break;
 8008344:	bf00      	nop
                }
            } // end of switch on message

            break;
 8008346:	e004      	b.n	8008352 <testapprun+0x1bf6>
        } // end case TA_RX_WAIT_DATA
        default:
        {
            break;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <testapprun+0x1bf6>
                	break;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <testapprun+0x1bf6>
                break;
 8008350:	bf00      	nop
        }
    } // end switch on testAppState

    return done;
 8008352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
} // end testapprun()
 8008356:	4618      	mov	r0, r3
 8008358:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 800835c:	46bd      	mov	sp, r7
 800835e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008362:	bf00      	nop

08008364 <instance_init_s>:
// -------------------------------------------------------------------------------------------------------------------
// function to initialise instance structures
//
// Returns 0 on success and -1 on error
int instance_init_s()
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af02      	add	r7, sp, #8
    instance_data_t* inst = instance_get_local_structure_ptr(0);
 800836a:	2000      	movs	r0, #0
 800836c:	f001 f866 	bl	800943c <instance_get_local_structure_ptr>
 8008370:	6078      	str	r0, [r7, #4]

    inst->mode = DISCOVERY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
    inst->testAppState = TA_INIT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	705a      	strb	r2, [r3, #1]

    // if using auto CRC check (DWT_INT_RFCG and DWT_INT_RFCE) are used instead of DWT_INT_RDFR flag
    // other errors which need to be checked (as they disable receiver) are
    dwt_setinterrupt(SYS_MASK_VAL, 1);
 800837e:	2101      	movs	r1, #1
 8008380:	480e      	ldr	r0, [pc, #56]	; (80083bc <instance_init_s+0x58>)
 8008382:	f009 fa4d 	bl	8011820 <dwt_setinterrupt>

    //this is platform dependent - only program if DW EVK/EVB
    dwt_setleds(3) ; //configure the GPIOs which control the LEDs on EVBs
 8008386:	2003      	movs	r0, #3
 8008388:	f009 f81a 	bl	80113c0 <dwt_setleds>

    dwt_setcallbacks(instance_txcallback, instance_rxgoodcallback, instance_rxtimeoutcallback, instance_rxerrorcallback, instance_irqstuckcallback);
 800838c:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <instance_init_s+0x5c>)
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <instance_init_s+0x60>)
 8008392:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <instance_init_s+0x64>)
 8008394:	490d      	ldr	r1, [pc, #52]	; (80083cc <instance_init_s+0x68>)
 8008396:	480e      	ldr	r0, [pc, #56]	; (80083d0 <instance_init_s+0x6c>)
 8008398:	f008 ff1c 	bl	80111d4 <dwt_setcallbacks>

#if (USING_64BIT_ADDR==0)
    inst->addrByteSize = ADDR_BYTE_SIZE_S;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80083a2:	3306      	adds	r3, #6
 80083a4:	2202      	movs	r2, #2
 80083a6:	701a      	strb	r2, [r3, #0]
#else
    inst->addrByteSize = ADDR_BYTE_SIZE_L;
#endif

    inst->uwbToRangeWith = 255;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80083ae:	22ff      	movs	r2, #255	; 0xff
 80083b0:	701a      	strb	r2, [r3, #0]

    return 0 ;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	2403d080 	.word	0x2403d080
 80083c0:	0800b3a5 	.word	0x0800b3a5
 80083c4:	0800b62d 	.word	0x0800b62d
 80083c8:	0800b5b9 	.word	0x0800b5b9
 80083cc:	0800b749 	.word	0x0800b749
 80083d0:	0800b41d 	.word	0x0800b41d
 80083d4:	00000000 	.word	0x00000000

080083d8 <instance_init_timings>:
extern uint8 dwnsSFDlen[];

// Pre-compute frame lengths, timeouts and delays needed in ranging process.
// /!\ This function assumes that there is no user payload in the frame.
void instance_init_timings(void)
{
 80083d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083dc:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80083e0:	af00      	add	r7, sp, #0
    instance_data_t* inst = instance_get_local_structure_ptr(0);
 80083e2:	2000      	movs	r0, #0
 80083e4:	f001 f82a 	bl	800943c <instance_get_local_structure_ptr>
 80083e8:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
            BLINK_FRAME_LEN_BYTES, RNG_INIT_FRAME_LEN_BYTES, POLL_FRAME_LEN_BYTES,
            RESP_FRAME_LEN_BYTES, FINAL_FRAME_LEN_BYTES, REPORT_FRAME_LEN_BYTES, SYNC_FRAME_LEN_BYTES, INF_FRAME_LEN_BYTES_MAX};


    // Margin used for timeouts computation.
    uint64 margin_us = 200;
 80083ec:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
    // conversion into microseconds in order to ensure that we keep the needed
    // precision while not having to use 64 bits variables.

    // Compute frame lengths.
    // First step is preamble plus SFD length.
    sfd_len = dwnsSFDlen[inst->configData.dataRate];
 80083f8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80083fc:	7adb      	ldrb	r3, [r3, #11]
 80083fe:	461a      	mov	r2, r3
 8008400:	4b61      	ldr	r3, [pc, #388]	; (8008588 <instance_init_timings+0x1b0>)
 8008402:	5c9b      	ldrb	r3, [r3, r2]
 8008404:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
    switch (inst->configData.txPreambLength)
 8008408:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800840c:	799b      	ldrb	r3, [r3, #6]
 800840e:	3b08      	subs	r3, #8
 8008410:	2b2c      	cmp	r3, #44	; 0x2c
 8008412:	d87f      	bhi.n	8008514 <instance_init_timings+0x13c>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <instance_init_timings+0x44>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	080084ef 	.word	0x080084ef
 8008420:	08008515 	.word	0x08008515
 8008424:	08008515 	.word	0x08008515
 8008428:	08008515 	.word	0x08008515
 800842c:	080084d1 	.word	0x080084d1
 8008430:	08008515 	.word	0x08008515
 8008434:	08008515 	.word	0x08008515
 8008438:	08008515 	.word	0x08008515
 800843c:	08008515 	.word	0x08008515
 8008440:	08008515 	.word	0x08008515
 8008444:	08008515 	.word	0x08008515
 8008448:	08008515 	.word	0x08008515
 800844c:	0800850d 	.word	0x0800850d
 8008450:	08008515 	.word	0x08008515
 8008454:	08008515 	.word	0x08008515
 8008458:	08008515 	.word	0x08008515
 800845c:	080084e5 	.word	0x080084e5
 8008460:	08008515 	.word	0x08008515
 8008464:	08008515 	.word	0x08008515
 8008468:	08008515 	.word	0x08008515
 800846c:	08008515 	.word	0x08008515
 8008470:	08008515 	.word	0x08008515
 8008474:	08008515 	.word	0x08008515
 8008478:	08008515 	.word	0x08008515
 800847c:	08008515 	.word	0x08008515
 8008480:	08008515 	.word	0x08008515
 8008484:	08008515 	.word	0x08008515
 8008488:	08008515 	.word	0x08008515
 800848c:	08008503 	.word	0x08008503
 8008490:	08008515 	.word	0x08008515
 8008494:	08008515 	.word	0x08008515
 8008498:	08008515 	.word	0x08008515
 800849c:	080084db 	.word	0x080084db
 80084a0:	08008515 	.word	0x08008515
 80084a4:	08008515 	.word	0x08008515
 80084a8:	08008515 	.word	0x08008515
 80084ac:	08008515 	.word	0x08008515
 80084b0:	08008515 	.word	0x08008515
 80084b4:	08008515 	.word	0x08008515
 80084b8:	08008515 	.word	0x08008515
 80084bc:	08008515 	.word	0x08008515
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008515 	.word	0x08008515
 80084cc:	080084f9 	.word	0x080084f9
    {
    case DWT_PLEN_4096:
        pre_len = 4096;
 80084d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 80084d8:	e020      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_2048:
        pre_len = 2048;
 80084da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084de:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 80084e2:	e01b      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_1536:
        pre_len = 1536;
 80084e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80084e8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 80084ec:	e016      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_1024:
        pre_len = 1024;
 80084ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 80084f6:	e011      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_512:
        pre_len = 512;
 80084f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084fc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 8008500:	e00c      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_256:
        pre_len = 256;
 8008502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008506:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 800850a:	e007      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_128:
        pre_len = 128;
 800850c:	2380      	movs	r3, #128	; 0x80
 800850e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 8008512:	e003      	b.n	800851c <instance_init_timings+0x144>
    case DWT_PLEN_64:
    default:
        pre_len = 64;
 8008514:	2340      	movs	r3, #64	; 0x40
 8008516:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
        break;
 800851a:	bf00      	nop
    }
    pre_len += sfd_len;
 800851c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008520:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008524:	4413      	add	r3, r2
 8008526:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    // Convert preamble length from symbols to time. Length of symbol is defined
    // in IEEE 802.15.4 standard.
    if (inst->configData.prf == DWT_PRF_16M)
 800852a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800852e:	795b      	ldrb	r3, [r3, #5]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d107      	bne.n	8008544 <instance_init_timings+0x16c>
        pre_len *= 99359;
 8008534:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008538:	4b14      	ldr	r3, [pc, #80]	; (800858c <instance_init_timings+0x1b4>)
 800853a:	fb03 f302 	mul.w	r3, r3, r2
 800853e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8008542:	e006      	b.n	8008552 <instance_init_timings+0x17a>
    else
        pre_len *= 101763;
 8008544:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8008548:	4b11      	ldr	r3, [pc, #68]	; (8008590 <instance_init_timings+0x1b8>)
 800854a:	fb03 f302 	mul.w	r3, r3, r2
 800854e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

    inst->storedPreLen = pre_len; //store to be used later with inf messages and frame_sync
 8008552:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8008556:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800855a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    inst->storedPreLen_us = CEIL_DIV(pre_len, 100000);
 800855e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8008562:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008566:	339f      	adds	r3, #159	; 0x9f
 8008568:	095a      	lsrs	r2, r3, #5
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <instance_init_timings+0x1bc>)
 800856c:	fba3 2302 	umull	r2, r3, r3, r2
 8008570:	09db      	lsrs	r3, r3, #7
 8008572:	4618      	mov	r0, r3
 8008574:	f04f 0100 	mov.w	r1, #0
 8008578:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800857c:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8

    // Second step is data length for all frame types.
    for (int i = 0; i < FRAME_TYPE_NB; i++)
 8008580:	2300      	movs	r3, #0
 8008582:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8008586:	e01d      	b.n	80085c4 <instance_init_timings+0x1ec>
 8008588:	08017cfc 	.word	0x08017cfc
 800858c:	0001841f 	.word	0x0001841f
 8008590:	00018d83 	.word	0x00018d83
 8008594:	0a7c5ac5 	.word	0x0a7c5ac5
    {
    	inst->frameLengths_us[i] = instance_getmessageduration_us(data_len_bytes[i]);
 8008598:	4a89      	ldr	r2, [pc, #548]	; (80087c0 <instance_init_timings+0x3e8>)
 800859a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fdc4 	bl	8009130 <instance_getmessageduration_us>
 80085a8:	4601      	mov	r1, r0
 80085aa:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80085ae:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80085b2:	3320      	adds	r3, #32
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < FRAME_TYPE_NB; i++)
 80085ba:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80085be:	3301      	adds	r3, #1
 80085c0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80085c4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80085c8:	2b07      	cmp	r3, #7
 80085ca:	dde5      	ble.n	8008598 <instance_init_timings+0x1c0>
    }

    //delayed tx durations
    uint8 reply_margin_us = 25;
 80085cc:	2319      	movs	r3, #25
 80085ce:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
    uint64 duration = 0;
 80085d2:	f04f 0200 	mov.w	r2, #0
 80085d6:	f04f 0300 	mov.w	r3, #0
 80085da:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
	duration += inst->frameLengths_us[POLL] - inst->storedPreLen_us + RX_TO_CB_DLY_US;		//poll rx timestamp to poll rx cb
 80085de:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80085e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e6:	4618      	mov	r0, r3
 80085e8:	f04f 0100 	mov.w	r1, #0
 80085ec:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80085f0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80085f4:	1a84      	subs	r4, r0, r2
 80085f6:	eb61 0503 	sbc.w	r5, r1, r3
 80085fa:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80085fe:	eb14 0802 	adds.w	r8, r4, r2
 8008602:	eb45 0903 	adc.w	r9, r5, r3
 8008606:	f118 0332 	adds.w	r3, r8, #50	; 0x32
 800860a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800860e:	f149 0300 	adc.w	r3, r9, #0
 8008612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008616:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800861a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	duration += RX_CB_TO_TX_CMD_DLY_US + MIN_DELAYED_TX_DLY_US + inst->storedPreLen_us;		//poll rx cb to resp tx timestamp
 800861e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008622:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008626:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800862a:	eb10 0a02 	adds.w	sl, r0, r2
 800862e:	eb41 0b03 	adc.w	fp, r1, r3
 8008632:	f51a 739b 	adds.w	r3, sl, #310	; 0x136
 8008636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800863a:	f14b 0300 	adc.w	r3, fp, #0
 800863e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008642:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008646:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	uint64 respDelay_us = duration + reply_margin_us;
 800864a:	f897 0263 	ldrb.w	r0, [r7, #611]	; 0x263
 800864e:	f04f 0100 	mov.w	r1, #0
 8008652:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008656:	1814      	adds	r4, r2, r0
 8008658:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800865c:	414b      	adcs	r3, r1
 800865e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008662:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8008666:	e9c7 3496 	strd	r3, r4, [r7, #600]	; 0x258
	uint64 respDelay = convertmicrosectodevicetimeu(respDelay_us);
 800866a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 800866e:	f7f7 ff69 	bl	8000544 <__aeabi_ul2d>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	f000 ff3d 	bl	80094f8 <convertmicrosectodevicetimeu>
 800867e:	e9c7 0194 	strd	r0, r1, [r7, #592]	; 0x250

	duration = 0;
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	f04f 0300 	mov.w	r3, #0
 800868a:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
	duration += inst->frameLengths_us[RESP] - inst->storedPreLen_us + RX_TO_CB_DLY_US;		//resp rx timestamp to resp rx cb
 800868e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008696:	4618      	mov	r0, r3
 8008698:	f04f 0100 	mov.w	r1, #0
 800869c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80086a0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80086a4:	1a84      	subs	r4, r0, r2
 80086a6:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 80086aa:	eb61 0303 	sbc.w	r3, r1, r3
 80086ae:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80086b2:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80086b6:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80086ba:	4621      	mov	r1, r4
 80086bc:	1889      	adds	r1, r1, r2
 80086be:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80086c2:	4629      	mov	r1, r5
 80086c4:	eb43 0101 	adc.w	r1, r3, r1
 80086c8:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80086cc:	e9d7 1280 	ldrd	r1, r2, [r7, #512]	; 0x200
 80086d0:	460b      	mov	r3, r1
 80086d2:	3332      	adds	r3, #50	; 0x32
 80086d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086d8:	4613      	mov	r3, r2
 80086da:	f143 0300 	adc.w	r3, r3, #0
 80086de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086e2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80086e6:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	duration += RX_CB_TO_TX_CMD_DLY_US + MIN_DELAYED_TX_DLY_US + inst->storedPreLen_us;		//resp rx cb to final tx timestamp
 80086ea:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80086ee:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80086f2:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80086f6:	1884      	adds	r4, r0, r2
 80086f8:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 80086fc:	eb41 0303 	adc.w	r3, r1, r3
 8008700:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8008704:	e9d7 127e 	ldrd	r1, r2, [r7, #504]	; 0x1f8
 8008708:	460b      	mov	r3, r1
 800870a:	f513 739b 	adds.w	r3, r3, #310	; 0x136
 800870e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008712:	4613      	mov	r3, r2
 8008714:	f143 0300 	adc.w	r3, r3, #0
 8008718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800871c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8008720:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	uint64 finalDelay_us = duration + reply_margin_us;
 8008724:	f897 0263 	ldrb.w	r0, [r7, #611]	; 0x263
 8008728:	f04f 0100 	mov.w	r1, #0
 800872c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008730:	1814      	adds	r4, r2, r0
 8008732:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8008736:	414b      	adcs	r3, r1
 8008738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800873c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8008740:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
	uint64 finalDelay = convertmicrosectodevicetimeu(finalDelay_us);
 8008744:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8008748:	f7f7 fefc 	bl	8000544 <__aeabi_ul2d>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4610      	mov	r0, r2
 8008752:	4619      	mov	r1, r3
 8008754:	f000 fed0 	bl	80094f8 <convertmicrosectodevicetimeu>
 8008758:	e9c7 0190 	strd	r0, r1, [r7, #576]	; 0x240

	//make reply times the same to minimize clock drift error. See Application Note APS011 for more information
	inst->respReplyDelay = inst->finalReplyDelay = MAX(respDelay, finalDelay);
 800875c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8008760:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
 8008764:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8008768:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
 800876c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8008770:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8008774:	4299      	cmp	r1, r3
 8008776:	bf08      	it	eq
 8008778:	4290      	cmpeq	r0, r2
 800877a:	d201      	bcs.n	8008780 <instance_init_timings+0x3a8>
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008784:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
 8008788:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800878c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008790:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008794:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
	uint64 replyDelay_us = MAX(respDelay_us, finalDelay_us);
 8008798:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800879c:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
 80087a0:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80087a4:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
 80087a8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80087ac:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf08      	it	eq
 80087b4:	4282      	cmpeq	r2, r0
 80087b6:	d205      	bcs.n	80087c4 <instance_init_timings+0x3ec>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e002      	b.n	80087c4 <instance_init_timings+0x3ec>
 80087be:	bf00      	nop
 80087c0:	08017c28 	.word	0x08017c28
 80087c4:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218


	//POLL TX TS TO FINAL TX TS
	duration = 0;
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
	duration += respDelay_us + finalDelay_us;												//poll tx ts to final tx ts
 80087d4:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 80087d8:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80087dc:	1884      	adds	r4, r0, r2
 80087de:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80087e2:	eb41 0303 	adc.w	r3, r1, r3
 80087e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80087ea:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80087ee:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80087f2:	4621      	mov	r1, r4
 80087f4:	1851      	adds	r1, r2, r1
 80087f6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80087fa:	4629      	mov	r1, r5
 80087fc:	eb43 0101 	adc.w	r1, r3, r1
 8008800:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8008804:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008808:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	uint64 pollTxToFinalTx = duration;
 800880c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008810:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210

    // Delay between blink reception and ranging init message transmission.
	inst->rnginitReplyDelay = convertmicrosectodevicetimeu(MIN_DELAYED_TX_DLY_US + inst->storedPreLen_us); //rng_init tx cmd to rng_init tx ts
 8008814:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008818:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800881c:	f112 015a 	adds.w	r1, r2, #90	; 0x5a
 8008820:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8008824:	f143 0300 	adc.w	r3, r3, #0
 8008828:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800882c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8008830:	f7f7 fe88 	bl	8000544 <__aeabi_ul2d>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4610      	mov	r0, r2
 800883a:	4619      	mov	r1, r3
 800883c:	f000 fe5c 	bl	80094f8 <convertmicrosectodevicetimeu>
 8008840:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008844:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28

	margin_us = 1000;
 8008848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
    //rx timeout durations (_nus units are 1.0256us)
    duration = 0;
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	f04f 0300 	mov.w	r3, #0
 800885c:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    duration +=	TX_CMD_TO_TX_CB_DLY_US + replyDelay_us;						//poll tx cmd to resp tx ts
 8008860:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8008864:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008868:	1884      	adds	r4, r0, r2
 800886a:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800886e:	eb41 0303 	adc.w	r3, r1, r3
 8008872:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008876:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800887a:	460b      	mov	r3, r1
 800887c:	335a      	adds	r3, #90	; 0x5a
 800887e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008882:	4613      	mov	r3, r2
 8008884:	f143 0300 	adc.w	r3, r3, #0
 8008888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800888c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008890:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration +=	inst->frameLengths_us[RESP] - inst->storedPreLen_us;		//resp tx ts to resp tx cb
 8008894:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889c:	4618      	mov	r0, r3
 800889e:	f04f 0100 	mov.w	r1, #0
 80088a2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80088a6:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80088aa:	1a84      	subs	r4, r0, r2
 80088ac:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 80088b0:	eb61 0303 	sbc.w	r3, r1, r3
 80088b4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80088b8:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80088bc:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 80088c0:	4621      	mov	r1, r4
 80088c2:	1851      	adds	r1, r2, r1
 80088c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80088c8:	4629      	mov	r1, r5
 80088ca:	eb43 0101 	adc.w	r1, r3, r1
 80088ce:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80088d2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80088d6:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration += RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US;					//resp tx cb to final tx cmd
 80088da:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80088de:	f512 7187 	adds.w	r1, r2, #270	; 0x10e
 80088e2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80088e6:	f143 0300 	adc.w	r3, r3, #0
 80088ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088ee:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80088f2:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration += margin_us;
 80088f6:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 80088fa:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80088fe:	1884      	adds	r4, r0, r2
 8008900:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008904:	eb41 0303 	adc.w	r3, r1, r3
 8008908:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800890c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8008910:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    inst->durationPollTimeout_nus = (uint16)(duration/1.0256) + 1;
 8008914:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8008918:	f7f7 fe14 	bl	8000544 <__aeabi_ul2d>
 800891c:	a3c8      	add	r3, pc, #800	; (adr r3, 8008c40 <instance_init_timings+0x868>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 ff6f 	bl	8000804 <__aeabi_ddiv>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	f7f8 f917 	bl	8000b60 <__aeabi_d2uiz>
 8008932:	4603      	mov	r3, r0
 8008934:	b29b      	uxth	r3, r3
 8008936:	3301      	adds	r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800893e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	inst->durationPollTimeout_ms = (uint16)CEIL_DIV(duration, 1000);
 8008942:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8008946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	1884      	adds	r4, r0, r2
 8008950:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 8008954:	eb41 0303 	adc.w	r3, r1, r3
 8008958:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800895c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8008968:	f7f8 fa78 	bl	8000e5c <__aeabi_uldivmod>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	b293      	uxth	r3, r2
 8008972:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8008976:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

	duration = 0;
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
	duration += TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[FINAL]; 	                                           //final tx cmd to final tx cb
 8008986:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800898a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800898e:	335a      	adds	r3, #90	; 0x5a
 8008990:	4618      	mov	r0, r3
 8008992:	f04f 0100 	mov.w	r1, #0
 8008996:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800899a:	1814      	adds	r4, r2, r0
 800899c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80089a0:	414b      	adcs	r3, r1
 80089a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089a6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80089aa:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	duration += RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US;			  	                                           //final tx cb to place final
 80089ae:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80089b2:	f512 7187 	adds.w	r1, r2, #270	; 0x10e
 80089b6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80089ba:	f143 0300 	adc.w	r3, r3, #0
 80089be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089c2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80089c6:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	duration += (uint64)MEASURED_SLOT_DURATIONS_US/2;                                   						   //place final to report tx cmd
 80089ca:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80089ce:	f512 6191 	adds.w	r1, r2, #1160	; 0x488
 80089d2:	67b9      	str	r1, [r7, #120]	; 0x78
 80089d4:	f143 0300 	adc.w	r3, r3, #0
 80089d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089da:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80089de:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	duration += TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[REPORT] + RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US; //report tx cmd to place report
 80089e2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80089e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80089ee:	4618      	mov	r0, r3
 80089f0:	f04f 0100 	mov.w	r1, #0
 80089f4:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80089f8:	1814      	adds	r4, r2, r0
 80089fa:	673c      	str	r4, [r7, #112]	; 0x70
 80089fc:	414b      	adcs	r3, r1
 80089fe:	677b      	str	r3, [r7, #116]	; 0x74
 8008a00:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8008a04:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	duration += margin_us;
 8008a08:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8008a0c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008a10:	1884      	adds	r4, r0, r2
 8008a12:	66bc      	str	r4, [r7, #104]	; 0x68
 8008a14:	eb41 0303 	adc.w	r3, r1, r3
 8008a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a1a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8008a1e:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	inst->durationFinalTimeout_ms = (uint16)CEIL_DIV(duration, 1000);
 8008a22:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8008a26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a2a:	f04f 0300 	mov.w	r3, #0
 8008a2e:	1884      	adds	r4, r0, r2
 8008a30:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8008a34:	eb41 0303 	adc.w	r3, r1, r3
 8008a38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8008a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8008a48:	f7f8 fa08 	bl	8000e5c <__aeabi_uldivmod>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	b293      	uxth	r3, r2
 8008a52:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8008a56:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c

	margin_us = 1000;
 8008a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
    //tx conf timeout durations
    inst->durationBlinkTxDoneTimeout_ms = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[BLINK] + margin_us, 1000);			//tx cmd to tx cb
 8008a66:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6e:	335a      	adds	r3, #90	; 0x5a
 8008a70:	4618      	mov	r0, r3
 8008a72:	f04f 0100 	mov.w	r1, #0
 8008a76:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008a7a:	1884      	adds	r4, r0, r2
 8008a7c:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 8008a80:	eb41 0303 	adc.w	r3, r1, r3
 8008a84:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8008a94:	4621      	mov	r1, r4
 8008a96:	1889      	adds	r1, r1, r2
 8008a98:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	eb43 0101 	adc.w	r1, r3, r1
 8008aa2:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 8008aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008aaa:	f04f 0300 	mov.w	r3, #0
 8008aae:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8008ab2:	f7f8 f9d3 	bl	8000e5c <__aeabi_uldivmod>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008abe:	651a      	str	r2, [r3, #80]	; 0x50
    inst->durationRngInitTxDoneTimeout_ms = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[RNG_INIT] + margin_us, 1000);		//tx cmd to tx cb
 8008ac0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac8:	335a      	adds	r3, #90	; 0x5a
 8008aca:	4618      	mov	r0, r3
 8008acc:	f04f 0100 	mov.w	r1, #0
 8008ad0:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008ad4:	1884      	adds	r4, r0, r2
 8008ad6:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 8008ada:	eb41 0303 	adc.w	r3, r1, r3
 8008ade:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8008ae2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8008aee:	4621      	mov	r1, r4
 8008af0:	1889      	adds	r1, r1, r2
 8008af2:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8008af6:	4629      	mov	r1, r5
 8008af8:	eb43 0101 	adc.w	r1, r3, r1
 8008afc:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 8008b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8008b0c:	f7f8 f9a6 	bl	8000e5c <__aeabi_uldivmod>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008b18:	655a      	str	r2, [r3, #84]	; 0x54
    inst->durationPollTxDoneTimeout_ms = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[POLL] + margin_us, 1000);				//tx cmd to tx cb
 8008b1a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b22:	335a      	adds	r3, #90	; 0x5a
 8008b24:	4618      	mov	r0, r3
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008b2e:	1884      	adds	r4, r0, r2
 8008b30:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8008b34:	eb41 0303 	adc.w	r3, r1, r3
 8008b38:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008b40:	f04f 0300 	mov.w	r3, #0
 8008b44:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8008b48:	4621      	mov	r1, r4
 8008b4a:	1889      	adds	r1, r1, r2
 8008b4c:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8008b50:	4629      	mov	r1, r5
 8008b52:	eb43 0101 	adc.w	r1, r3, r1
 8008b56:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8008b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b5e:	f04f 0300 	mov.w	r3, #0
 8008b62:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8008b66:	f7f8 f979 	bl	8000e5c <__aeabi_uldivmod>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008b72:	659a      	str	r2, [r3, #88]	; 0x58
    inst->durationReportTxDoneTimeout_ms = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[REPORT] + margin_us, 1000);			//tx cmd to tx cb
 8008b74:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b7c:	335a      	adds	r3, #90	; 0x5a
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f04f 0100 	mov.w	r1, #0
 8008b84:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008b88:	1884      	adds	r4, r0, r2
 8008b8a:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 8008b8e:	eb41 0303 	adc.w	r3, r1, r3
 8008b92:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008b96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	1889      	adds	r1, r1, r2
 8008ba6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8008baa:	4629      	mov	r1, r5
 8008bac:	eb43 0101 	adc.w	r1, r3, r1
 8008bb0:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 8008bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bb8:	f04f 0300 	mov.w	r3, #0
 8008bbc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8008bc0:	f7f8 f94c 	bl	8000e5c <__aeabi_uldivmod>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008bcc:	665a      	str	r2, [r3, #100]	; 0x64
    inst->durationSyncTxDoneTimeout_ms = CEIL_DIV(TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[SYNC] + margin_us, 1000);				//tx cmd to tx cb
 8008bce:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bd6:	335a      	adds	r3, #90	; 0x5a
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f04f 0100 	mov.w	r1, #0
 8008bde:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008be2:	1884      	adds	r4, r0, r2
 8008be4:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8008be8:	eb41 0303 	adc.w	r3, r1, r3
 8008bec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008bf4:	f04f 0300 	mov.w	r3, #0
 8008bf8:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	1889      	adds	r1, r1, r2
 8008c00:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8008c04:	4629      	mov	r1, r5
 8008c06:	eb43 0101 	adc.w	r1, r3, r1
 8008c0a:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8008c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8008c1a:	f7f8 f91f 	bl	8000e5c <__aeabi_uldivmod>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c26:	669a      	str	r2, [r3, #104]	; 0x68

    uint32 fl = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    if(inst->frameLengths_us[RESP] < inst->frameLengths_us[FINAL])
 8008c2e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c32:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008c36:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c3a:	e005      	b.n	8008c48 <instance_init_timings+0x870>
 8008c3c:	f3af 8000 	nop.w
 8008c40:	8bac710d 	.word	0x8bac710d
 8008c44:	3ff068db 	.word	0x3ff068db
 8008c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d20c      	bcs.n	8008c6a <instance_init_timings+0x892>
    {
    	fl = inst->frameLengths_us[RESP] - inst->storedPreLen_us;
 8008c50:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c54:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008c58:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c5c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8008c60:	4613      	mov	r3, r2
 8008c62:	1acb      	subs	r3, r1, r3
 8008c64:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8008c68:	e00b      	b.n	8008c82 <instance_init_timings+0x8aa>
    }
    else
    {
    	fl = inst->frameLengths_us[FINAL] - inst->storedPreLen_us;
 8008c6a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c6e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008c72:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008c76:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	1acb      	subs	r3, r1, r3
 8008c7e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    }
    duration = 0;
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    duration += replyDelay_us - fl;
 8008c8e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8008c92:	4618      	mov	r0, r3
 8008c94:	f04f 0100 	mov.w	r1, #0
 8008c98:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8008c9c:	1a14      	subs	r4, r2, r0
 8008c9e:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8008ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8008ca6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8008caa:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008cae:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	1851      	adds	r1, r2, r1
 8008cb6:	6639      	str	r1, [r7, #96]	; 0x60
 8008cb8:	4629      	mov	r1, r5
 8008cba:	eb43 0101 	adc.w	r1, r3, r1
 8008cbe:	6679      	str	r1, [r7, #100]	; 0x64
 8008cc0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008cc4:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration -= RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US;
 8008cc8:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008ccc:	f5b2 7187 	subs.w	r1, r2, #270	; 0x10e
 8008cd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cd2:	f143 33ff 	adc.w	r3, r3, #4294967295
 8008cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cd8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8008cdc:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    inst->durationRespTxDoneTimeout_ms = CEIL_DIV(duration + inst->frameLengths_us[RESP] - inst->storedPreLen_us + margin_us, 1000);	//tx cmd to tx cb
 8008ce0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008cf2:	1884      	adds	r4, r0, r2
 8008cf4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8008cf8:	eb41 0303 	adc.w	r3, r1, r3
 8008cfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8008d00:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008d04:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8008d08:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	1a89      	subs	r1, r1, r2
 8008d10:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8008d14:	4629      	mov	r1, r5
 8008d16:	eb61 0303 	sbc.w	r3, r1, r3
 8008d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8008d1e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008d22:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8008d26:	4621      	mov	r1, r4
 8008d28:	1889      	adds	r1, r1, r2
 8008d2a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8008d2e:	4629      	mov	r1, r5
 8008d30:	eb43 0101 	adc.w	r1, r3, r1
 8008d34:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8008d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8008d44:	4621      	mov	r1, r4
 8008d46:	1889      	adds	r1, r1, r2
 8008d48:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	eb43 0101 	adc.w	r1, r3, r1
 8008d52:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8008d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8008d62:	f7f8 f87b 	bl	8000e5c <__aeabi_uldivmod>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008d6e:	65da      	str	r2, [r3, #92]	; 0x5c
    inst->durationFinalTxDoneTimeout_ms = CEIL_DIV(duration + inst->frameLengths_us[FINAL] - inst->storedPreLen_us + margin_us, 1000);	//tx cmd to tx cb
 8008d70:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f04f 0100 	mov.w	r1, #0
 8008d7e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008d82:	1884      	adds	r4, r0, r2
 8008d84:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8008d88:	eb41 0303 	adc.w	r3, r1, r3
 8008d8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008d90:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008d94:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8008d98:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	1a89      	subs	r1, r1, r2
 8008da0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8008da4:	4629      	mov	r1, r5
 8008da6:	eb61 0303 	sbc.w	r3, r1, r3
 8008daa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008dae:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008db2:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8008db6:	4621      	mov	r1, r4
 8008db8:	1889      	adds	r1, r1, r2
 8008dba:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	eb43 0101 	adc.w	r1, r3, r1
 8008dc4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8008dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	1889      	adds	r1, r1, r2
 8008dd8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8008ddc:	4629      	mov	r1, r5
 8008dde:	eb43 0101 	adc.w	r1, r3, r1
 8008de2:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8008de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8008df2:	f7f8 f833 	bl	8000e5c <__aeabi_uldivmod>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008dfe:	661a      	str	r2, [r3, #96]	; 0x60

    //figure maximum duration of a TDMA slot in microseconds
    duration = 0;
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    duration += SLOT_START_BUFFER_US;	//frame start buffer
 8008e0c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008e10:	f512 617a 	adds.w	r1, r2, #4000	; 0xfa0
 8008e14:	6539      	str	r1, [r7, #80]	; 0x50
 8008e16:	f143 0300 	adc.w	r3, r3, #0
 8008e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e1c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008e20:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration += SLOT_BUFFER_EXP_TO_POLL_CMD_US; //buffer expiration to cmd poll
 8008e24:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008e28:	f112 018a 	adds.w	r1, r2, #138	; 0x8a
 8008e2c:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e2e:	f143 0300 	adc.w	r3, r3, #0
 8008e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e34:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008e38:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration += TX_CMD_TO_TX_CB_DLY_US + pollTxToFinalTx + inst->frameLengths_us[FINAL] + RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US;//poll cmd to place final
 8008e3c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e44:	4618      	mov	r0, r3
 8008e46:	f04f 0100 	mov.w	r1, #0
 8008e4a:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8008e4e:	1884      	adds	r4, r0, r2
 8008e50:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008e54:	eb41 0303 	adc.w	r3, r1, r3
 8008e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e5c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008e60:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8008e64:	4621      	mov	r1, r4
 8008e66:	1889      	adds	r1, r1, r2
 8008e68:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	eb43 0101 	adc.w	r1, r3, r1
 8008e72:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8008e76:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	f513 73b4 	adds.w	r3, r3, #360	; 0x168
 8008e80:	643b      	str	r3, [r7, #64]	; 0x40
 8008e82:	4613      	mov	r3, r2
 8008e84:	f143 0300 	adc.w	r3, r3, #0
 8008e88:	647b      	str	r3, [r7, #68]	; 0x44
 8008e8a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008e8e:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    //duration += B //place final to cmd report
    duration += TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[REPORT] + RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US; //cmd report to place report
 8008e92:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f04f 0100 	mov.w	r1, #0
 8008ea4:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008ea8:	1814      	adds	r4, r2, r0
 8008eaa:	63bc      	str	r4, [r7, #56]	; 0x38
 8008eac:	414b      	adcs	r3, r1
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8008eb4:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    //duration += C //place report to cmd inf
    duration += TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[INF_MAX] + RX_TO_CB_DLY_US + RX_CB_TO_TX_CMD_DLY_US; //cmd INF to place INF
 8008eb8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008ebc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ec0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f04f 0100 	mov.w	r1, #0
 8008eca:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008ece:	1814      	adds	r4, r2, r0
 8008ed0:	633c      	str	r4, [r7, #48]	; 0x30
 8008ed2:	414b      	adcs	r3, r1
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ed6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8008eda:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    //duration += D place inf to process inf

    //MEASURED_SLOT_DURATIONS_US is experimentally found value found for B+C+D described above
    duration += (uint64)MEASURED_SLOT_DURATIONS_US;
 8008ede:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008ee2:	f512 6111 	adds.w	r1, r2, #2320	; 0x910
 8008ee6:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ee8:	f143 0300 	adc.w	r3, r3, #0
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008ef2:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280

    //add some time to account for possibly timing out on first poll
    duration += SLOT_BUFFER_EXP_TO_POLL_CMD_US; //assume this is the same amount of time go get from timeout to poll command
 8008ef6:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008efa:	f112 018a 	adds.w	r1, r2, #138	; 0x8a
 8008efe:	6239      	str	r1, [r7, #32]
 8008f00:	f143 0300 	adc.w	r3, r3, #0
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
 8008f06:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008f0a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    duration += TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[POLL] - inst->storedPreLen_us + (uint64)(inst->durationPollTimeout_nus*1.0256) + 200; //add small margin of 200
 8008f0e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f16:	335a      	adds	r3, #90	; 0x5a
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f04f 0100 	mov.w	r1, #0
 8008f1e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008f22:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8008f26:	1a84      	subs	r4, r0, r2
 8008f28:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8008f2c:	eb61 0303 	sbc.w	r3, r1, r3
 8008f30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008f34:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008f38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7f7 facd 	bl	80004dc <__aeabi_i2d>
 8008f42:	a377      	add	r3, pc, #476	; (adr r3, 8009120 <instance_init_timings+0xd48>)
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f7f7 fb32 	bl	80005b0 <__aeabi_dmul>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4610      	mov	r0, r2
 8008f52:	4619      	mov	r1, r3
 8008f54:	f7f7 ffb4 	bl	8000ec0 <__aeabi_d2ulz>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8008f60:	4621      	mov	r1, r4
 8008f62:	1889      	adds	r1, r1, r2
 8008f64:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8008f68:	4629      	mov	r1, r5
 8008f6a:	eb43 0101 	adc.w	r1, r3, r1
 8008f6e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8008f72:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008f76:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	1889      	adds	r1, r1, r2
 8008f7e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8008f82:	4629      	mov	r1, r5
 8008f84:	eb43 0101 	adc.w	r1, r3, r1
 8008f88:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8008f8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008f90:	460b      	mov	r3, r1
 8008f92:	33c8      	adds	r3, #200	; 0xc8
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	4613      	mov	r3, r2
 8008f98:	f143 0300 	adc.w	r3, r3, #0
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008fa2:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280


    //if LCD is on, add time to allow for Sleep calls in the LCD display logic
    bool enableLCD = FALSE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
    if(port_is_switch_on(TA_SW1_4) == S1_SWITCH_ON)
 8008fac:	2002      	movs	r0, #2
 8008fae:	f009 f9e7 	bl	8012380 <port_is_switch_on>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d111      	bne.n	8008fdc <instance_init_timings+0xc04>
	{
    	enableLCD = TRUE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		duration += LCD_ENABLE_BUFFER_US;
 8008fbe:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8008fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	1884      	adds	r4, r0, r2
 8008fcc:	613c      	str	r4, [r7, #16]
 8008fce:	eb41 0303 	adc.w	r3, r1, r3
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008fd8:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
	}

    duration += SLOT_END_BUFFER_US;

    inst->durationSlotMax_us = duration;
 8008fdc:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 8008fe0:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008fe4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    duration = 0;
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    //from set discovery to cmd tx blink, to rx blink cb to cmd resp to rx resp ts
    duration += TX_CMD_TO_TX_CB_DLY_US + inst->frameLengths_us[BLINK] + RX_TO_CB_DLY_US + BLINK_RX_CB_TO_RESP_TX_CMD_DLY_US + (uint64)(convertdevicetimetosec(inst->rnginitReplyDelay)*1000000.0)  + RANGE_INIT_RAND_US + margin_us;
 8008ff4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8008ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ffc:	f203 6336 	addw	r3, r3, #1590	; 0x636
 8009000:	461c      	mov	r4, r3
 8009002:	f04f 0500 	mov.w	r5, #0
 8009006:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800900a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800900e:	4613      	mov	r3, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f000 faa1 	bl	8009558 <convertdevicetimetosec>
 8009016:	a344      	add	r3, pc, #272	; (adr r3, 8009128 <instance_init_timings+0xd50>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 fac8 	bl	80005b0 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	f7f7 ff4a 	bl	8000ec0 <__aeabi_d2ulz>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	18a1      	adds	r1, r4, r2
 8009032:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009036:	eb45 0303 	adc.w	r3, r5, r3
 800903a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800903e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8009042:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8009046:	4621      	mov	r1, r4
 8009048:	1889      	adds	r1, r1, r2
 800904a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800904e:	4629      	mov	r1, r5
 8009050:	eb43 0101 	adc.w	r1, r3, r1
 8009054:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8009058:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800905c:	460b      	mov	r3, r1
 800905e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
 8009062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009066:	4613      	mov	r3, r2
 8009068:	f143 0300 	adc.w	r3, r3, #0
 800906c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009070:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8009074:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009078:	4621      	mov	r1, r4
 800907a:	1851      	adds	r1, r2, r1
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4629      	mov	r1, r5
 8009080:	eb43 0101 	adc.w	r1, r3, r1
 8009084:	60f9      	str	r1, [r7, #12]
 8009086:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800908a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    if(enableLCD == TRUE)
 800908e:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00d      	beq.n	80090b2 <instance_init_timings+0xcda>
    {
    	duration += LCD_ENABLE_BUFFER_US*2;
 8009096:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800909a:	f242 7010 	movw	r0, #10000	; 0x2710
 800909e:	f04f 0100 	mov.w	r1, #0
 80090a2:	1814      	adds	r4, r2, r0
 80090a4:	603c      	str	r4, [r7, #0]
 80090a6:	414b      	adcs	r3, r1
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80090ae:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    }
    inst->durationWaitRangeInit_ms = CEIL_DIV(duration, 1000);
 80090b2:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80090b6:	f240 30e7 	movw	r0, #999	; 0x3e7
 80090ba:	f04f 0100 	mov.w	r1, #0
 80090be:	1814      	adds	r4, r2, r0
 80090c0:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80090c4:	414b      	adcs	r3, r1
 80090c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80090d6:	f7f7 fec1 	bl	8000e5c <__aeabi_uldivmod>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80090e2:	671a      	str	r2, [r3, #112]	; 0x70


    // Smart Power is automatically applied by DW chip for frame of which length
	// is < 1 ms. Let the application know if it will be used depending on the
	// length of the longest frame.
	if (inst->frameLengths_us[FINAL] <= 1000)
 80090e4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80090e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090f0:	d807      	bhi.n	8009102 <instance_init_timings+0xd2a>
	{
		inst->smartPowerEn = 1;
 80090f2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80090f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 80090fa:	330b      	adds	r3, #11
 80090fc:	2201      	movs	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		inst->smartPowerEn = 0;
	}
}
 8009100:	e006      	b.n	8009110 <instance_init_timings+0xd38>
		inst->smartPowerEn = 0;
 8009102:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8009106:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800910a:	330b      	adds	r3, #11
 800910c:	2200      	movs	r2, #0
 800910e:	701a      	strb	r2, [r3, #0]
}
 8009110:	bf00      	nop
 8009112:	f507 7724 	add.w	r7, r7, #656	; 0x290
 8009116:	46bd      	mov	sp, r7
 8009118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800911c:	f3af 8000 	nop.w
 8009120:	8bac710d 	.word	0x8bac710d
 8009124:	3ff068db 	.word	0x3ff068db
 8009128:	00000000 	.word	0x00000000
 800912c:	412e8480 	.word	0x412e8480

08009130 <instance_getmessageduration_us>:

uint32 instance_getmessageduration_us(int data_length_bytes)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	instance_data_t* inst = instance_get_local_structure_ptr(0);
 8009138:	2000      	movs	r0, #0
 800913a:	f000 f97f 	bl	800943c <instance_get_local_structure_ptr>
 800913e:	60b8      	str	r0, [r7, #8]

	// Compute the number of symbols for the given length.
	uint32 framelength_us = data_length_bytes * 8
				 + CEIL_DIV(data_length_bytes * 8, 330) * 48;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	f203 1349 	addw	r3, r3, #329	; 0x149
 8009148:	4a24      	ldr	r2, [pc, #144]	; (80091dc <instance_getmessageduration_us+0xac>)
 800914a:	fb82 1203 	smull	r1, r2, r2, r3
 800914e:	11d2      	asrs	r2, r2, #7
 8009150:	17db      	asrs	r3, r3, #31
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	4613      	mov	r3, r2
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	461a      	mov	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4413      	add	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
	uint32 framelength_us = data_length_bytes * 8
 8009164:	60fb      	str	r3, [r7, #12]
	// Convert from symbols to time and add PHY header length.
	if(inst->configData.dataRate == DWT_BR_110K)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	7adb      	ldrb	r3, [r3, #11]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d109      	bne.n	8009182 <instance_getmessageduration_us+0x52>
	{
		framelength_us *= 820513;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <instance_getmessageduration_us+0xb0>)
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	60fb      	str	r3, [r7, #12]
		framelength_us += 17230800;
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <instance_getmessageduration_us+0xb4>)
 800917c:	4413      	add	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	e017      	b.n	80091b2 <instance_getmessageduration_us+0x82>
	}
	else if (inst->configData.dataRate == DWT_BR_850K)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	7adb      	ldrb	r3, [r3, #11]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d109      	bne.n	800919e <instance_getmessageduration_us+0x6e>
	{
		framelength_us *= 102564;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4a16      	ldr	r2, [pc, #88]	; (80091e8 <instance_getmessageduration_us+0xb8>)
 800918e:	fb02 f303 	mul.w	r3, r2, r3
 8009192:	60fb      	str	r3, [r7, #12]
		framelength_us += 2153900;
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4b15      	ldr	r3, [pc, #84]	; (80091ec <instance_getmessageduration_us+0xbc>)
 8009198:	4413      	add	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	e009      	b.n	80091b2 <instance_getmessageduration_us+0x82>
	}
	else
	{
		framelength_us *= 12821;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f243 2215 	movw	r2, #12821	; 0x3215
 80091a4:	fb02 f303 	mul.w	r3, r2, r3
 80091a8:	60fb      	str	r3, [r7, #12]
		framelength_us += 2153900;
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <instance_getmessageduration_us+0xbc>)
 80091ae:	4413      	add	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
	}
	// Last step: add preamble and SFD length and convert to microseconds.
	framelength_us += inst->storedPreLen;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
	framelength_us = CEIL_DIV(framelength_us, 100000);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80091c4:	339f      	adds	r3, #159	; 0x9f
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <instance_getmessageduration_us+0xc0>)
 80091ca:	fba2 2303 	umull	r2, r3, r2, r3
 80091ce:	09db      	lsrs	r3, r3, #7
 80091d0:	60fb      	str	r3, [r7, #12]

	return framelength_us;
 80091d2:	68fb      	ldr	r3, [r7, #12]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	634c0635 	.word	0x634c0635
 80091e0:	000c8521 	.word	0x000c8521
 80091e4:	0106ebd0 	.word	0x0106ebd0
 80091e8:	000190a4 	.word	0x000190a4
 80091ec:	0020ddac 	.word	0x0020ddac
 80091f0:	0a7c5ac5 	.word	0x0a7c5ac5

080091f4 <instance_get_addr>:

uint64 instance_get_addr(void) //get own address
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
    return instance_get_uwbaddr(0);
 80091f8:	2000      	movs	r0, #0
 80091fa:	f000 f805 	bl	8009208 <instance_get_uwbaddr>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
}
 8009202:	4610      	mov	r0, r2
 8009204:	4619      	mov	r1, r3
 8009206:	bd80      	pop	{r7, pc}

08009208 <instance_get_uwbaddr>:

uint64 instance_get_uwbaddr(uint8 uwb_index) //get uwb address by index
{
 8009208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800920c:	b086      	sub	sp, #24
 800920e:	af00      	add	r7, sp, #0
 8009210:	4603      	mov	r3, r0
 8009212:	71fb      	strb	r3, [r7, #7]
    instance_data_t* inst = instance_get_local_structure_ptr(0);
 8009214:	2000      	movs	r0, #0
 8009216:	f000 f911 	bl	800943c <instance_get_local_structure_ptr>
 800921a:	6178      	str	r0, [r7, #20]
    uint64 x = 0;
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	e9c7 2302 	strd	r2, r3, [r7, #8]
    x |= (uint64) inst->uwbList[uwb_index][0];
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	789b      	ldrb	r3, [r3, #2]
 8009236:	b2da      	uxtb	r2, r3
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009240:	ea40 0802 	orr.w	r8, r0, r2
 8009244:	ea41 0903 	orr.w	r9, r1, r3
 8009248:	e9c7 8902 	strd	r8, r9, [r7, #8]
    x |= (uint64) inst->uwbList[uwb_index][1] << 8;
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	4413      	add	r3, r2
 8009254:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8009258:	3303      	adds	r3, #3
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b2d8      	uxtb	r0, r3
 800925e:	f04f 0100 	mov.w	r1, #0
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	f04f 0300 	mov.w	r3, #0
 800926a:	020b      	lsls	r3, r1, #8
 800926c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009270:	0202      	lsls	r2, r0, #8
 8009272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009276:	ea40 0402 	orr.w	r4, r0, r2
 800927a:	ea41 0503 	orr.w	r5, r1, r3
 800927e:	e9c7 4502 	strd	r4, r5, [r7, #8]
    x |= (uint64) inst->uwbList[uwb_index][5] << 40;
    x |= (uint64) inst->uwbList[uwb_index][6] << 48;
    x |= (uint64) inst->uwbList[uwb_index][7] << 56;
#endif

    return (x);
 8009282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8009286:	4610      	mov	r0, r2
 8009288:	4619      	mov	r1, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08009292 <get_dt32>:

//get the time difference between two between two 32-bit unsigned timestamps
//t1 is the first timestamp
//t2 is the second timetamp that occured after t1 
uint32 get_dt32(uint32 t1, uint32 t2)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
    if(t2 >= t1)
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d303      	bcc.n	80092ac <get_dt32+0x1a>
    {
        return t2 - t1;
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	e003      	b.n	80092b4 <get_dt32+0x22>
    }
    else
    {
        //handle timestamp roleover
        return 4294967295 - t1 + t2;
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	3b01      	subs	r3, #1
    }
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr

080092be <get_dt64>:

//get the time difference between two between two 64-bit unsigned timestamps
//t1 is the first timestamp
//t2 is the second timetamp that occured after t1
uint64 get_dt64(uint64 t1, uint64 t2)
{
 80092be:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80092ca:	e9c7 2300 	strd	r2, r3, [r7]
    if(t2 >= t1)
 80092ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092d6:	4299      	cmp	r1, r3
 80092d8:	bf08      	it	eq
 80092da:	4290      	cmpeq	r0, r2
 80092dc:	d307      	bcc.n	80092ee <get_dt64+0x30>
    {
        return t2 - t1;
 80092de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092e6:	1a84      	subs	r4, r0, r2
 80092e8:	eb61 0503 	sbc.w	r5, r1, r3
 80092ec:	e00f      	b.n	800930e <get_dt64+0x50>
    }
    else
    {
        //handle timestamp rollover
        return 4294967295999 - t1 + t2;
 80092ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092f6:	ebb0 0802 	subs.w	r8, r0, r2
 80092fa:	eb61 0903 	sbc.w	r9, r1, r3
 80092fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009302:	f240 33e7 	movw	r3, #999	; 0x3e7
 8009306:	eb18 0402 	adds.w	r4, r8, r2
 800930a:	eb49 0503 	adc.w	r5, r9, r3
 800930e:	4622      	mov	r2, r4
 8009310:	462b      	mov	r3, r5
    }
}
 8009312:	4610      	mov	r0, r2
 8009314:	4619      	mov	r1, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800931e:	4770      	bx	lr

08009320 <timestamp_add64>:

//add a duration to a 64 bit timestamp. This function handles number wrapping
uint64 timestamp_add64(uint64 timestamp, uint64 duration)
{
 8009320:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8009324:	b087      	sub	sp, #28
 8009326:	af00      	add	r7, sp, #0
 8009328:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800932c:	e9c7 2300 	strd	r2, r3, [r7]
	uint64 to_wrap = (uint64)4294967295999 - timestamp;
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	f240 31e7 	movw	r1, #999	; 0x3e7
 8009338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800933c:	ebb0 0802 	subs.w	r8, r0, r2
 8009340:	eb61 0903 	sbc.w	r9, r1, r3
 8009344:	e9c7 8904 	strd	r8, r9, [r7, #16]
	if(duration > to_wrap)
 8009348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009350:	4299      	cmp	r1, r3
 8009352:	bf08      	it	eq
 8009354:	4290      	cmpeq	r0, r2
 8009356:	d207      	bcs.n	8009368 <timestamp_add64+0x48>
	{
		return to_wrap + duration;
 8009358:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800935c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009360:	1884      	adds	r4, r0, r2
 8009362:	eb41 0503 	adc.w	r5, r1, r3
 8009366:	e006      	b.n	8009376 <timestamp_add64+0x56>
	}
	else
	{
		return timestamp + duration;
 8009368:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800936c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009370:	1884      	adds	r4, r0, r2
 8009372:	eb41 0503 	adc.w	r5, r1, r3
 8009376:	4622      	mov	r2, r4
 8009378:	462b      	mov	r3, r5
	}
}
 800937a:	4610      	mov	r0, r2
 800937c:	4619      	mov	r1, r3
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8009386:	4770      	bx	lr

08009388 <timestamp_subtract64>:

//subtract a duration from a 64 bit timestamp. This function handles number wrapping
uint64 timestamp_subtract64(uint64 timestamp, uint64 duration)
{
 8009388:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800938c:	b085      	sub	sp, #20
 800938e:	af00      	add	r7, sp, #0
 8009390:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009394:	e9c7 2300 	strd	r2, r3, [r7]
	if(duration > timestamp)
 8009398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093a0:	4299      	cmp	r1, r3
 80093a2:	bf08      	it	eq
 80093a4:	4290      	cmpeq	r0, r2
 80093a6:	d210      	bcs.n	80093ca <timestamp_subtract64+0x42>
	{
		return (uint64)4294967295999 - (duration - timestamp);
 80093a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b0:	ebb0 0802 	subs.w	r8, r0, r2
 80093b4:	eb61 0903 	sbc.w	r9, r1, r3
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80093c0:	eb18 0402 	adds.w	r4, r8, r2
 80093c4:	eb49 0503 	adc.w	r5, r9, r3
 80093c8:	e006      	b.n	80093d8 <timestamp_subtract64+0x50>
	}
	else
	{
		return timestamp - duration;
 80093ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d2:	1a84      	subs	r4, r0, r2
 80093d4:	eb61 0503 	sbc.w	r5, r1, r3
 80093d8:	4622      	mov	r2, r4
 80093da:	462b      	mov	r3, r5
	}
}
 80093dc:	4610      	mov	r0, r2
 80093de:	4619      	mov	r1, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80093e8:	4770      	bx	lr
	...

080093ec <instance_starttxtest>:

// -------------------------------------------------------------------------------------------------------------------
extern instance_data_t instance_data[NUM_INST] ;

int instance_starttxtest(int framePeriod)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b0a2      	sub	sp, #136	; 0x88
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	//define some test data for the tx buffer
	uint8 msg[127] = "The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the l";
 80093f4:	4a10      	ldr	r2, [pc, #64]	; (8009438 <instance_starttxtest+0x4c>)
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	4611      	mov	r1, r2
 80093fc:	227f      	movs	r2, #127	; 0x7f
 80093fe:	4618      	mov	r0, r3
 8009400:	f009 fe1a 	bl	8013038 <memcpy>

	//NOTE: SPI frequency must be < 3MHz
	port_set_dw1000_slowrate();  //max SPI before PLLs configured is ~4M
 8009404:	f009 f85a 	bl	80124bc <port_set_dw1000_slowrate>

	// the value here 0x1000 gives a period of 32.82 �s
	//this is setting 0x1000 as frame period (125MHz clock cycles) (time from Tx en - to next - Tx en)
	dwt_configcontinuousframemode(framePeriod);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4618      	mov	r0, r3
 800940c:	f008 fa8e 	bl	801192c <dwt_configcontinuousframemode>

	dwt_writetxdata(127, (uint8 *)  msg, 0) ;
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	2200      	movs	r2, #0
 8009416:	4619      	mov	r1, r3
 8009418:	207f      	movs	r0, #127	; 0x7f
 800941a:	f007 fb72 	bl	8010b02 <dwt_writetxdata>
	dwt_writetxfctrl(127, 0, 0);
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	207f      	movs	r0, #127	; 0x7f
 8009424:	f007 fb8c 	bl	8010b40 <dwt_writetxfctrl>

        //to start the first frame - set TXSTRT
	dwt_starttx(DWT_START_TX_IMMEDIATE);
 8009428:	2000      	movs	r0, #0
 800942a:	f008 f8d9 	bl	80115e0 <dwt_starttx>
	//SPAN to 1GHz
	//SWEEP TIME 1s
	//RBW and VBW 1MHz
	//measure channel power

	return DWT_SUCCESS ;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3788      	adds	r7, #136	; 0x88
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	08017af0 	.word	0x08017af0

0800943c <instance_get_local_structure_ptr>:
// -------------------------------------------------------------------------------------------------------------------
/* @fn 	  instance_get_local_structure_ptr
 * @brief function to return the pointer to local instance data structure
 * */
instance_data_t* instance_get_local_structure_ptr(unsigned int x)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
	if (x >= NUM_INST)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <instance_get_local_structure_ptr+0x12>
	{
		return NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	e006      	b.n	800945c <instance_get_local_structure_ptr+0x20>
	}

	return &instance_data[x];
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f243 6270 	movw	r2, #13936	; 0x3670
 8009454:	fb02 f303 	mul.w	r3, r2, r3
 8009458:	4a03      	ldr	r2, [pc, #12]	; (8009468 <instance_get_local_structure_ptr+0x2c>)
 800945a:	4413      	add	r3, r2
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	bc80      	pop	{r7}
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20000348 	.word	0x20000348

0800946c <tdma_init_s>:
// -------------------------------------------------------------------------------------------------------------------
// function to initialise tdma structures
//
// Returns 0 on success and -1 on error
int tdma_init_s(uint64 slot_duration)
{
 800946c:	b590      	push	{r4, r7, lr}
 800946e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009472:	af00      	add	r7, sp, #0
 8009474:	e9c7 0196 	strd	r0, r1, [r7, #600]	; 0x258

    tdma_handler = TDMAHandler.new(slot_duration);
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <tdma_init_s+0x38>)
 800947a:	6819      	ldr	r1, [r3, #0]
 800947c:	4c0a      	ldr	r4, [pc, #40]	; (80094a8 <tdma_init_s+0x3c>)
 800947e:	4638      	mov	r0, r7
 8009480:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8009484:	4788      	blx	r1
 8009486:	463b      	mov	r3, r7
 8009488:	4620      	mov	r0, r4
 800948a:	4619      	mov	r1, r3
 800948c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009490:	461a      	mov	r2, r3
 8009492:	f009 fdd1 	bl	8013038 <memcpy>

    return 0;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	f507 7719 	add.w	r7, r7, #612	; 0x264
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd90      	pop	{r4, r7, pc}
 80094a2:	bf00      	nop
 80094a4:	08017cac 	.word	0x08017cac
 80094a8:	200039b8 	.word	0x200039b8

080094ac <decarangingmode>:


int decarangingmode(uint8 mode_switch)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
    int mode = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]

    if(mode_switch & SWS1_SHF_MODE)
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <decarangingmode+0x1c>
    {
        mode = 1;
 80094c4:	2301      	movs	r3, #1
 80094c6:	60fb      	str	r3, [r7, #12]
    }

    if(mode_switch & SWS1_64M_MODE)
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <decarangingmode+0x2c>
    {
        mode = mode + 2;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3302      	adds	r3, #2
 80094d6:	60fb      	str	r3, [r7, #12]
    }
    if(mode_switch & SWS1_CH5_MODE)
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <decarangingmode+0x3c>
    {
        mode = mode + 4;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3304      	adds	r3, #4
 80094e6:	60fb      	str	r3, [r7, #12]
    }

    return mode;
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr
 80094f4:	0000      	movs	r0, r0
	...

080094f8 <convertmicrosectodevicetimeu>:


// -------------------------------------------------------------------------------------------------------------------
// convert microseconds to device time
uint64 convertmicrosectodevicetimeu (double microsecu)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	e9c7 0100 	strd	r0, r1, [r7]
    uint64 dt;
    long double dtime;

    dtime = (microsecu / (double) DWT_TIME_UNITS) / 1e6 ;
 8009502:	a311      	add	r3, pc, #68	; (adr r3, 8009548 <convertmicrosectodevicetimeu+0x50>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800950c:	f7f7 f97a 	bl	8000804 <__aeabi_ddiv>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4610      	mov	r0, r2
 8009516:	4619      	mov	r1, r3
 8009518:	a30d      	add	r3, pc, #52	; (adr r3, 8009550 <convertmicrosectodevicetimeu+0x58>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f7 f971 	bl	8000804 <__aeabi_ddiv>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dt =  (uint64) (dtime) ;
 800952a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800952e:	f7f7 fcc7 	bl	8000ec0 <__aeabi_d2ulz>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return dt;
 800953a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	3bce48fa 	.word	0x3bce48fa
 800954c:	3db13518 	.word	0x3db13518
 8009550:	00000000 	.word	0x00000000
 8009554:	412e8480 	.word	0x412e8480

08009558 <convertdevicetimetosec>:
    return dt;
}


double convertdevicetimetosec(int32 dt)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
    double f = 0;
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9c7 2302 	strd	r2, r3, [r7, #8]

    f =  dt * DWT_TIME_UNITS ;  // seconds #define TIME_UNITS          (1.0/499.2e6/128.0) = 15.65e-12
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7f6 ffb5 	bl	80004dc <__aeabi_i2d>
 8009572:	a309      	add	r3, pc, #36	; (adr r3, 8009598 <convertdevicetimetosec+0x40>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f7 f81a 	bl	80005b0 <__aeabi_dmul>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return f ;
 8009584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8009588:	4610      	mov	r0, r2
 800958a:	4619      	mov	r1, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	f3af 8000 	nop.w
 8009598:	3bce48fa 	.word	0x3bce48fa
 800959c:	3db13518 	.word	0x3db13518

080095a0 <getrangebias_rng>:

    return f ;
}

double getrangebias_rng(uint8 channel, uint8 prf, double distance)
{
 80095a0:	b5b0      	push	{r4, r5, r7, lr}
 80095a2:	b0c8      	sub	sp, #288	; 0x120
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	e9c7 2300 	strd	r2, r3, [r7]
 80095aa:	f107 030f 	add.w	r3, r7, #15
 80095ae:	4602      	mov	r2, r0
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	f107 030e 	add.w	r3, r7, #14
 80095b6:	460a      	mov	r2, r1
 80095b8:	701a      	strb	r2, [r3, #0]
	float bias = 0;
 80095ba:	f04f 0300 	mov.w	r3, #0
 80095be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	distance *= 1000.0; //convert to mm
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	4bc0      	ldr	r3, [pc, #768]	; (80098c8 <getrangebias_rng+0x328>)
 80095c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095cc:	f7f6 fff0 	bl	80005b0 <__aeabi_dmul>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	e9c7 2300 	strd	r2, r3, [r7]

	if(channel == 2)
 80095d8:	f107 030f 	add.w	r3, r7, #15
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	f040 8174 	bne.w	80098cc <getrangebias_rng+0x32c>
	{
		if(prf == DWT_PRF_16M) //00
 80095e4:	f107 030e 	add.w	r3, r7, #14
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	f040 80cf 	bne.w	800978e <getrangebias_rng+0x1ee>
		{
			if(distance < 40800.0)
 80095f0:	a395      	add	r3, pc, #596	; (adr r3, 8009848 <getrangebias_rng+0x2a8>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095fa:	f7f7 fa4b 	bl	8000a94 <__aeabi_dcmplt>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d03d      	beq.n	8009680 <getrangebias_rng+0xe0>
			{
				double a1 = -0.536346023;
 8009604:	a392      	add	r3, pc, #584	; (adr r3, 8009850 <getrangebias_rng+0x2b0>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				double b1 = -0.0000935073535;
 800960e:	a392      	add	r3, pc, #584	; (adr r3, 8009858 <getrangebias_rng+0x2b8>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	e9c7 2308 	strd	r2, r3, [r7, #32]
				double c1 = 6.47523309;
 8009618:	a391      	add	r3, pc, #580	; (adr r3, 8009860 <getrangebias_rng+0x2c0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	e9c7 2306 	strd	r2, r3, [r7, #24]
				double d1 = -85.2803987;
 8009622:	a391      	add	r3, pc, #580	; (adr r3, 8009868 <getrangebias_rng+0x2c8>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	e9c7 2304 	strd	r2, r3, [r7, #16]

				bias = a1*exp(b1*distance + c1) + d1;
 800962c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009634:	f7f6 ffbc 	bl	80005b0 <__aeabi_dmul>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4610      	mov	r0, r2
 800963e:	4619      	mov	r1, r3
 8009640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009644:	f7f6 fdfe 	bl	8000244 <__adddf3>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4610      	mov	r0, r2
 800964e:	4619      	mov	r1, r3
 8009650:	f00c fbfa 	bl	8015e48 <exp>
 8009654:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009658:	f7f6 ffaa 	bl	80005b0 <__aeabi_dmul>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4610      	mov	r0, r2
 8009662:	4619      	mov	r1, r3
 8009664:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009668:	f7f6 fdec 	bl	8000244 <__adddf3>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4610      	mov	r0, r2
 8009672:	4619      	mov	r1, r3
 8009674:	f7f7 fa94 	bl	8000ba0 <__aeabi_d2f>
 8009678:	4603      	mov	r3, r0
 800967a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800967e:	e301      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else if(distance < 91000.0)
 8009680:	a37b      	add	r3, pc, #492	; (adr r3, 8009870 <getrangebias_rng+0x2d0>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800968a:	f7f7 fa03 	bl	8000a94 <__aeabi_dcmplt>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d03d      	beq.n	8009710 <getrangebias_rng+0x170>
			{
				double a2 = -0.279365897;
 8009694:	a378      	add	r3, pc, #480	; (adr r3, 8009878 <getrangebias_rng+0x2d8>)
 8009696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				double b2 = -0.0000136494099;
 800969e:	a378      	add	r3, pc, #480	; (adr r3, 8009880 <getrangebias_rng+0x2e0>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				double c2 = 7.21745083;
 80096a8:	a377      	add	r3, pc, #476	; (adr r3, 8009888 <getrangebias_rng+0x2e8>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				double d2 = 171.189077;
 80096b2:	a377      	add	r3, pc, #476	; (adr r3, 8009890 <getrangebias_rng+0x2f0>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

				bias = a2*exp(b2*distance + c2) + d2;
 80096bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80096c4:	f7f6 ff74 	bl	80005b0 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4610      	mov	r0, r2
 80096ce:	4619      	mov	r1, r3
 80096d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096d4:	f7f6 fdb6 	bl	8000244 <__adddf3>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4610      	mov	r0, r2
 80096de:	4619      	mov	r1, r3
 80096e0:	f00c fbb2 	bl	8015e48 <exp>
 80096e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80096e8:	f7f6 ff62 	bl	80005b0 <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4610      	mov	r0, r2
 80096f2:	4619      	mov	r1, r3
 80096f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80096f8:	f7f6 fda4 	bl	8000244 <__adddf3>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4610      	mov	r0, r2
 8009702:	4619      	mov	r1, r3
 8009704:	f7f7 fa4c 	bl	8000ba0 <__aeabi_d2f>
 8009708:	4603      	mov	r3, r0
 800970a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800970e:	e2b9      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else
			{
				double a2 = -0.279365897;
 8009710:	a359      	add	r3, pc, #356	; (adr r3, 8009878 <getrangebias_rng+0x2d8>)
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
				double b2 = -0.0000136494099;
 800971a:	a359      	add	r3, pc, #356	; (adr r3, 8009880 <getrangebias_rng+0x2e0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				double c2 = 7.21745083;
 8009724:	a358      	add	r3, pc, #352	; (adr r3, 8009888 <getrangebias_rng+0x2e8>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				double d2 = 171.189077;
 800972e:	a358      	add	r3, pc, #352	; (adr r3, 8009890 <getrangebias_rng+0x2f0>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

				bias = a2*exp(b2*91000.0 + c2) + d2;
 8009738:	a34d      	add	r3, pc, #308	; (adr r3, 8009870 <getrangebias_rng+0x2d0>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009742:	f7f6 ff35 	bl	80005b0 <__aeabi_dmul>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4610      	mov	r0, r2
 800974c:	4619      	mov	r1, r3
 800974e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009752:	f7f6 fd77 	bl	8000244 <__adddf3>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4610      	mov	r0, r2
 800975c:	4619      	mov	r1, r3
 800975e:	f00c fb73 	bl	8015e48 <exp>
 8009762:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009766:	f7f6 ff23 	bl	80005b0 <__aeabi_dmul>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	4610      	mov	r0, r2
 8009770:	4619      	mov	r1, r3
 8009772:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009776:	f7f6 fd65 	bl	8000244 <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	f7f7 fa0d 	bl	8000ba0 <__aeabi_d2f>
 8009786:	4603      	mov	r3, r0
 8009788:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800978c:	e27a      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
		}
		else if(prf == DWT_PRF_64M) //10
 800978e:	f107 030e 	add.w	r3, r7, #14
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b02      	cmp	r3, #2
 8009796:	f040 8275 	bne.w	8009c84 <getrangebias_rng+0x6e4>
		{
			double a = -0.746580470;
 800979a:	a33f      	add	r3, pc, #252	; (adr r3, 8009898 <getrangebias_rng+0x2f8>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			double b = -0.000100581928;
 80097a4:	a33e      	add	r3, pc, #248	; (adr r3, 80098a0 <getrangebias_rng+0x300>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			double c = 5.66511916;
 80097ae:	a33e      	add	r3, pc, #248	; (adr r3, 80098a8 <getrangebias_rng+0x308>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			double d = -16.8215660;
 80097b8:	a33d      	add	r3, pc, #244	; (adr r3, 80098b0 <getrangebias_rng+0x310>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			double e = 6.85427230;
 80097c2:	a33d      	add	r3, pc, #244	; (adr r3, 80098b8 <getrangebias_rng+0x318>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

			if(distance < 67000)
 80097cc:	a33c      	add	r3, pc, #240	; (adr r3, 80098c0 <getrangebias_rng+0x320>)
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097d6:	f7f7 f95d 	bl	8000a94 <__aeabi_dcmplt>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d029      	beq.n	8009834 <getrangebias_rng+0x294>
			{
				bias = a * exp(b*distance+c) + d;
 80097e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80097e8:	f7f6 fee2 	bl	80005b0 <__aeabi_dmul>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4610      	mov	r0, r2
 80097f2:	4619      	mov	r1, r3
 80097f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80097f8:	f7f6 fd24 	bl	8000244 <__adddf3>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4610      	mov	r0, r2
 8009802:	4619      	mov	r1, r3
 8009804:	f00c fb20 	bl	8015e48 <exp>
 8009808:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800980c:	f7f6 fed0 	bl	80005b0 <__aeabi_dmul>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4610      	mov	r0, r2
 8009816:	4619      	mov	r1, r3
 8009818:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800981c:	f7f6 fd12 	bl	8000244 <__adddf3>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4610      	mov	r0, r2
 8009826:	4619      	mov	r1, r3
 8009828:	f7f7 f9ba 	bl	8000ba0 <__aeabi_d2f>
 800982c:	4603      	mov	r3, r0
 800982e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009832:	e227      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else
			{
				bias = e;
 8009834:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009838:	f7f7 f9b2 	bl	8000ba0 <__aeabi_d2f>
 800983c:	4603      	mov	r3, r0
 800983e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009842:	e21f      	b.n	8009c84 <getrangebias_rng+0x6e4>
 8009844:	f3af 8000 	nop.w
 8009848:	00000000 	.word	0x00000000
 800984c:	40e3ec00 	.word	0x40e3ec00
 8009850:	2283fd3f 	.word	0x2283fd3f
 8009854:	bfe129bf 	.word	0xbfe129bf
 8009858:	19d2c014 	.word	0x19d2c014
 800985c:	bf18832c 	.word	0xbf18832c
 8009860:	80ce1bac 	.word	0x80ce1bac
 8009864:	4019e6a3 	.word	0x4019e6a3
 8009868:	0d6395d2 	.word	0x0d6395d2
 800986c:	c05551f2 	.word	0xc05551f2
 8009870:	00000000 	.word	0x00000000
 8009874:	40f63780 	.word	0x40f63780
 8009878:	7fcee4a1 	.word	0x7fcee4a1
 800987c:	bfd1e121 	.word	0xbfd1e121
 8009880:	9cb6ef2f 	.word	0x9cb6ef2f
 8009884:	beec9ff8 	.word	0xbeec9ff8
 8009888:	6e2d5a2b 	.word	0x6e2d5a2b
 800988c:	401cdeab 	.word	0x401cdeab
 8009890:	eb356da0 	.word	0xeb356da0
 8009894:	4065660c 	.word	0x4065660c
 8009898:	b9cf6f14 	.word	0xb9cf6f14
 800989c:	bfe7e3fc 	.word	0xbfe7e3fc
 80098a0:	5d854063 	.word	0x5d854063
 80098a4:	bf1a5df0 	.word	0xbf1a5df0
 80098a8:	ff40926c 	.word	0xff40926c
 80098ac:	4016a914 	.word	0x4016a914
 80098b0:	263d816b 	.word	0x263d816b
 80098b4:	c030d252 	.word	0xc030d252
 80098b8:	5b9983ca 	.word	0x5b9983ca
 80098bc:	401b6ac6 	.word	0x401b6ac6
 80098c0:	00000000 	.word	0x00000000
 80098c4:	40f05b80 	.word	0x40f05b80
 80098c8:	408f4000 	.word	0x408f4000
			}
		}
	}
	else if(channel == 5)
 80098cc:	f107 030f 	add.w	r3, r7, #15
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	f040 81d6 	bne.w	8009c84 <getrangebias_rng+0x6e4>
	{
		if(prf == DWT_PRF_16M) //01
 80098d8:	f107 030e 	add.w	r3, r7, #14
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	f040 818e 	bne.w	8009c00 <getrangebias_rng+0x660>
		{
			double m = -0.0127206623;
 80098e4:	a3b0      	add	r3, pc, #704	; (adr r3, 8009ba8 <getrangebias_rng+0x608>)
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			double bx = 589.971543;
 80098ee:	a3b0      	add	r3, pc, #704	; (adr r3, 8009bb0 <getrangebias_rng+0x610>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			double by = -365.378639;
 80098f8:	a3af      	add	r3, pc, #700	; (adr r3, 8009bb8 <getrangebias_rng+0x618>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			double cx = 12543.2809;
 8009902:	a3af      	add	r3, pc, #700	; (adr r3, 8009bc0 <getrangebias_rng+0x620>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
			double cy = -163.200647;
 800990c:	a3ae      	add	r3, pc, #696	; (adr r3, 8009bc8 <getrangebias_rng+0x628>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			double a1 = -0.970942265;
 8009916:	a3ae      	add	r3, pc, #696	; (adr r3, 8009bd0 <getrangebias_rng+0x630>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			double b1 = -0.0000284505196;
 8009920:	a3ad      	add	r3, pc, #692	; (adr r3, 8009bd8 <getrangebias_rng+0x638>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
			double c1 = 6.40529252;
 800992a:	a3ad      	add	r3, pc, #692	; (adr r3, 8009be0 <getrangebias_rng+0x640>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
			double d1 = 112.149301;
 8009934:	a3ac      	add	r3, pc, #688	; (adr r3, 8009be8 <getrangebias_rng+0x648>)
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

			double x40k = 40000.0;
 800993e:	a3ac      	add	r3, pc, #688	; (adr r3, 8009bf0 <getrangebias_rng+0x650>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			double x91k = 91000.0;
 8009948:	a3ab      	add	r3, pc, #684	; (adr r3, 8009bf8 <getrangebias_rng+0x658>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0


			if(distance < bx)
 8009952:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800995a:	f7f7 f89b 	bl	8000a94 <__aeabi_dcmplt>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01f      	beq.n	80099a4 <getrangebias_rng+0x404>
			{
				bias = (bx - distance)*m+by;
 8009964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009968:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800996c:	f7f6 fc68 	bl	8000240 <__aeabi_dsub>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4610      	mov	r0, r2
 8009976:	4619      	mov	r1, r3
 8009978:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800997c:	f7f6 fe18 	bl	80005b0 <__aeabi_dmul>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4610      	mov	r0, r2
 8009986:	4619      	mov	r1, r3
 8009988:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800998c:	f7f6 fc5a 	bl	8000244 <__adddf3>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4610      	mov	r0, r2
 8009996:	4619      	mov	r1, r3
 8009998:	f7f7 f902 	bl	8000ba0 <__aeabi_d2f>
 800999c:	4603      	mov	r3, r0
 800999e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099a2:	e16f      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else if(distance < cx)
 80099a4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80099a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ac:	f7f7 f872 	bl	8000a94 <__aeabi_dcmplt>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d037      	beq.n	8009a26 <getrangebias_rng+0x486>
			{
				bias = (distance-bx)/(cx-bx)*(cy-by)+by;
 80099b6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80099ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099be:	f7f6 fc3f 	bl	8000240 <__aeabi_dsub>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4614      	mov	r4, r2
 80099c8:	461d      	mov	r5, r3
 80099ca:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80099ce:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80099d2:	f7f6 fc35 	bl	8000240 <__aeabi_dsub>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4620      	mov	r0, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	f7f6 ff11 	bl	8000804 <__aeabi_ddiv>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4614      	mov	r4, r2
 80099e8:	461d      	mov	r5, r3
 80099ea:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80099ee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80099f2:	f7f6 fc25 	bl	8000240 <__aeabi_dsub>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7f6 fdd7 	bl	80005b0 <__aeabi_dmul>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4610      	mov	r0, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8009a0e:	f7f6 fc19 	bl	8000244 <__adddf3>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4610      	mov	r0, r2
 8009a18:	4619      	mov	r1, r3
 8009a1a:	f7f7 f8c1 	bl	8000ba0 <__aeabi_d2f>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009a24:	e12e      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else if(distance < x40k)
 8009a26:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a2e:	f7f7 f831 	bl	8000a94 <__aeabi_dcmplt>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d059      	beq.n	8009aec <getrangebias_rng+0x54c>
			{
				double y40k = a1*exp(b1*x40k+c1) + d1;
 8009a38:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009a3c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009a40:	f7f6 fdb6 	bl	80005b0 <__aeabi_dmul>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8009a50:	f7f6 fbf8 	bl	8000244 <__adddf3>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	f00c f9f4 	bl	8015e48 <exp>
 8009a60:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8009a64:	f7f6 fda4 	bl	80005b0 <__aeabi_dmul>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a70:	f7f6 fbe8 	bl	8000244 <__adddf3>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
				bias = (distance-cx)/(x40k-cx)*(y40k-cy)+cy;
 8009a7c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a84:	f7f6 fbdc 	bl	8000240 <__aeabi_dsub>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	461d      	mov	r5, r3
 8009a90:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8009a94:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009a98:	f7f6 fbd2 	bl	8000240 <__aeabi_dsub>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f7f6 feae 	bl	8000804 <__aeabi_ddiv>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	461d      	mov	r5, r3
 8009ab0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009ab4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ab8:	f7f6 fbc2 	bl	8000240 <__aeabi_dsub>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	f7f6 fd74 	bl	80005b0 <__aeabi_dmul>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4610      	mov	r0, r2
 8009ace:	4619      	mov	r1, r3
 8009ad0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009ad4:	f7f6 fbb6 	bl	8000244 <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f7f7 f85e 	bl	8000ba0 <__aeabi_d2f>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009aea:	e0cb      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else if(distance < x91k)
 8009aec:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009af4:	f7f6 ffce 	bl	8000a94 <__aeabi_dcmplt>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d029      	beq.n	8009b52 <getrangebias_rng+0x5b2>
			{
				bias = a1*exp(b1*distance+c1) + d1;
 8009afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b02:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009b06:	f7f6 fd53 	bl	80005b0 <__aeabi_dmul>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4619      	mov	r1, r3
 8009b12:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8009b16:	f7f6 fb95 	bl	8000244 <__adddf3>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4619      	mov	r1, r3
 8009b22:	f00c f991 	bl	8015e48 <exp>
 8009b26:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8009b2a:	f7f6 fd41 	bl	80005b0 <__aeabi_dmul>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4610      	mov	r0, r2
 8009b34:	4619      	mov	r1, r3
 8009b36:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8009b3a:	f7f6 fb83 	bl	8000244 <__adddf3>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4610      	mov	r0, r2
 8009b44:	4619      	mov	r1, r3
 8009b46:	f7f7 f82b 	bl	8000ba0 <__aeabi_d2f>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009b50:	e098      	b.n	8009c84 <getrangebias_rng+0x6e4>
			}
			else
			{
				bias = a1*exp(b1*x91k+c1) + d1;
 8009b52:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009b56:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009b5a:	f7f6 fd29 	bl	80005b0 <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4610      	mov	r0, r2
 8009b64:	4619      	mov	r1, r3
 8009b66:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8009b6a:	f7f6 fb6b 	bl	8000244 <__adddf3>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4610      	mov	r0, r2
 8009b74:	4619      	mov	r1, r3
 8009b76:	f00c f967 	bl	8015e48 <exp>
 8009b7a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8009b7e:	f7f6 fd17 	bl	80005b0 <__aeabi_dmul>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	4610      	mov	r0, r2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8009b8e:	f7f6 fb59 	bl	8000244 <__adddf3>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4610      	mov	r0, r2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	f7f7 f801 	bl	8000ba0 <__aeabi_d2f>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009ba4:	e06e      	b.n	8009c84 <getrangebias_rng+0x6e4>
 8009ba6:	bf00      	nop
 8009ba8:	647ee4f5 	.word	0x647ee4f5
 8009bac:	bf8a0d4a 	.word	0xbf8a0d4a
 8009bb0:	b8561d43 	.word	0xb8561d43
 8009bb4:	40826fc5 	.word	0x40826fc5
 8009bb8:	e7c49fd8 	.word	0xe7c49fd8
 8009bbc:	c076d60e 	.word	0xc076d60e
 8009bc0:	f487fcb9 	.word	0xf487fcb9
 8009bc4:	40c87fa3 	.word	0x40c87fa3
 8009bc8:	b341e14c 	.word	0xb341e14c
 8009bcc:	c064666b 	.word	0xc064666b
 8009bd0:	834f5553 	.word	0x834f5553
 8009bd4:	bfef11f5 	.word	0xbfef11f5
 8009bd8:	d1dd0e97 	.word	0xd1dd0e97
 8009bdc:	befdd520 	.word	0xbefdd520
 8009be0:	009ada8c 	.word	0x009ada8c
 8009be4:	40199f05 	.word	0x40199f05
 8009be8:	25c810a5 	.word	0x25c810a5
 8009bec:	405c098e 	.word	0x405c098e
 8009bf0:	00000000 	.word	0x00000000
 8009bf4:	40e38800 	.word	0x40e38800
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	40f63780 	.word	0x40f63780
			}
		}
		else if(prf == DWT_PRF_64M) //11
 8009c00:	f107 030e 	add.w	r3, r7, #14
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d13c      	bne.n	8009c84 <getrangebias_rng+0x6e4>
		{
			double a = -0.922756193;
 8009c0a:	a327      	add	r3, pc, #156	; (adr r3, 8009ca8 <getrangebias_rng+0x708>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
			double b = -0.0000694702324;
 8009c14:	a326      	add	r3, pc, #152	; (adr r3, 8009cb0 <getrangebias_rng+0x710>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			double c = 5.57166578;
 8009c1e:	a326      	add	r3, pc, #152	; (adr r3, 8009cb8 <getrangebias_rng+0x718>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			double d = 10.5099467;
 8009c28:	a325      	add	r3, pc, #148	; (adr r3, 8009cc0 <getrangebias_rng+0x720>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

			bias = a*exp(b*distance+c) + d;
 8009c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c36:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8009c3a:	f7f6 fcb9 	bl	80005b0 <__aeabi_dmul>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4610      	mov	r0, r2
 8009c44:	4619      	mov	r1, r3
 8009c46:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8009c4a:	f7f6 fafb 	bl	8000244 <__adddf3>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4610      	mov	r0, r2
 8009c54:	4619      	mov	r1, r3
 8009c56:	f00c f8f7 	bl	8015e48 <exp>
 8009c5a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8009c5e:	f7f6 fca7 	bl	80005b0 <__aeabi_dmul>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4610      	mov	r0, r2
 8009c68:	4619      	mov	r1, r3
 8009c6a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8009c6e:	f7f6 fae9 	bl	8000244 <__adddf3>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4610      	mov	r0, r2
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f7f6 ff91 	bl	8000ba0 <__aeabi_d2f>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
	}

	return bias/1000.0; //convert to meters
 8009c84:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009c88:	f7f6 fc3a 	bl	8000500 <__aeabi_f2d>
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <getrangebias_rng+0x728>)
 8009c92:	f7f6 fdb7 	bl	8000804 <__aeabi_ddiv>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
}
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	fee3ba13 	.word	0xfee3ba13
 8009cac:	bfed8737 	.word	0xbfed8737
 8009cb0:	813b7ed5 	.word	0x813b7ed5
 8009cb4:	bf123611 	.word	0xbf123611
 8009cb8:	c1155e8c 	.word	0xc1155e8c
 8009cbc:	40164962 	.word	0x40164962
 8009cc0:	bbde6800 	.word	0xbbde6800
 8009cc4:	40250517 	.word	0x40250517
 8009cc8:	408f4000 	.word	0x408f4000
 8009ccc:	00000000 	.word	0x00000000

08009cd0 <getrangebias_rsl>:

double getrangebias_rsl(uint8 channel, uint8 prf, double rsl)
{
 8009cd0:	b5b0      	push	{r4, r5, r7, lr}
 8009cd2:	b0c0      	sub	sp, #256	; 0x100
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	e9c7 2300 	strd	r2, r3, [r7]
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	73bb      	strb	r3, [r7, #14]
	float bias = 0;
 8009ce2:	f04f 0300 	mov.w	r3, #0
 8009ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	if(channel == 2)
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	f040 82f0 	bne.w	800a2d2 <getrangebias_rsl+0x602>
	{
		if(prf == DWT_PRF_16M) //00
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	f040 80fd 	bne.w	8009ef4 <getrangebias_rsl+0x224>
		{
			float m = -62.04;
 8009cfa:	4b77      	ldr	r3, [pc, #476]	; (8009ed8 <getrangebias_rsl+0x208>)
 8009cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
			float bx = -82.83;
 8009cfe:	4b77      	ldr	r3, [pc, #476]	; (8009edc <getrangebias_rsl+0x20c>)
 8009d00:	62bb      	str	r3, [r7, #40]	; 0x28
			float by = -129.82;
 8009d02:	4b77      	ldr	r3, [pc, #476]	; (8009ee0 <getrangebias_rsl+0x210>)
 8009d04:	627b      	str	r3, [r7, #36]	; 0x24
			float cx = -90.05;
 8009d06:	4b77      	ldr	r3, [pc, #476]	; (8009ee4 <getrangebias_rsl+0x214>)
 8009d08:	623b      	str	r3, [r7, #32]
			float cy = 28.16;
 8009d0a:	4b77      	ldr	r3, [pc, #476]	; (8009ee8 <getrangebias_rsl+0x218>)
 8009d0c:	61fb      	str	r3, [r7, #28]
			float dx = -92.40;
 8009d0e:	4b77      	ldr	r3, [pc, #476]	; (8009eec <getrangebias_rsl+0x21c>)
 8009d10:	61bb      	str	r3, [r7, #24]
			float dy = 49.44;
 8009d12:	4b77      	ldr	r3, [pc, #476]	; (8009ef0 <getrangebias_rsl+0x220>)
 8009d14:	617b      	str	r3, [r7, #20]

			if(rsl > bx) //region 1
 8009d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d18:	f7f6 fbf2 	bl	8000500 <__aeabi_f2d>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d24:	f7f6 fed4 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d02d      	beq.n	8009d8a <getrangebias_rsl+0xba>
			{
				bias = (rsl-bx)*m+by;
 8009d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d30:	f7f6 fbe6 	bl	8000500 <__aeabi_f2d>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d3c:	f7f6 fa80 	bl	8000240 <__aeabi_dsub>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4614      	mov	r4, r2
 8009d46:	461d      	mov	r5, r3
 8009d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d4a:	f7f6 fbd9 	bl	8000500 <__aeabi_f2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 fc2b 	bl	80005b0 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4614      	mov	r4, r2
 8009d60:	461d      	mov	r5, r3
 8009d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d64:	f7f6 fbcc 	bl	8000500 <__aeabi_f2d>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f7f6 fa68 	bl	8000244 <__adddf3>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f7f6 ff10 	bl	8000ba0 <__aeabi_d2f>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d86:	f000 bcfa 	b.w	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > cx) //region 2
 8009d8a:	6a38      	ldr	r0, [r7, #32]
 8009d8c:	f7f6 fbb8 	bl	8000500 <__aeabi_f2d>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d98:	f7f6 fe9a 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d044      	beq.n	8009e2c <getrangebias_rsl+0x15c>
			{
				bias = (rsl-cx)/(bx-cx)*(by-cy)+cy;
 8009da2:	6a38      	ldr	r0, [r7, #32]
 8009da4:	f7f6 fbac 	bl	8000500 <__aeabi_f2d>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009db0:	f7f6 fa46 	bl	8000240 <__aeabi_dsub>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4614      	mov	r4, r2
 8009dba:	461d      	mov	r5, r3
 8009dbc:	6a39      	ldr	r1, [r7, #32]
 8009dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dc0:	f7f6 ff42 	bl	8000c48 <__aeabi_fsub>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7f6 fb9a 	bl	8000500 <__aeabi_f2d>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	f7f6 fd16 	bl	8000804 <__aeabi_ddiv>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4614      	mov	r4, r2
 8009dde:	461d      	mov	r5, r3
 8009de0:	69f9      	ldr	r1, [r7, #28]
 8009de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009de4:	f7f6 ff30 	bl	8000c48 <__aeabi_fsub>
 8009de8:	4603      	mov	r3, r0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f6 fb88 	bl	8000500 <__aeabi_f2d>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	4620      	mov	r0, r4
 8009df6:	4629      	mov	r1, r5
 8009df8:	f7f6 fbda 	bl	80005b0 <__aeabi_dmul>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4614      	mov	r4, r2
 8009e02:	461d      	mov	r5, r3
 8009e04:	69f8      	ldr	r0, [r7, #28]
 8009e06:	f7f6 fb7b 	bl	8000500 <__aeabi_f2d>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4620      	mov	r0, r4
 8009e10:	4629      	mov	r1, r5
 8009e12:	f7f6 fa17 	bl	8000244 <__adddf3>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f7f6 febf 	bl	8000ba0 <__aeabi_d2f>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e28:	f000 bca9 	b.w	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > dx) //region 3
 8009e2c:	69b8      	ldr	r0, [r7, #24]
 8009e2e:	f7f6 fb67 	bl	8000500 <__aeabi_f2d>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e3a:	f7f6 fe49 	bl	8000ad0 <__aeabi_dcmpgt>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d044      	beq.n	8009ece <getrangebias_rsl+0x1fe>
			{
				bias = (rsl-dx)/(cx-dx)*(cy-dy)+dy;
 8009e44:	69b8      	ldr	r0, [r7, #24]
 8009e46:	f7f6 fb5b 	bl	8000500 <__aeabi_f2d>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e52:	f7f6 f9f5 	bl	8000240 <__aeabi_dsub>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	461d      	mov	r5, r3
 8009e5e:	69b9      	ldr	r1, [r7, #24]
 8009e60:	6a38      	ldr	r0, [r7, #32]
 8009e62:	f7f6 fef1 	bl	8000c48 <__aeabi_fsub>
 8009e66:	4603      	mov	r3, r0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7f6 fb49 	bl	8000500 <__aeabi_f2d>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4620      	mov	r0, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7f6 fcc5 	bl	8000804 <__aeabi_ddiv>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4614      	mov	r4, r2
 8009e80:	461d      	mov	r5, r3
 8009e82:	6979      	ldr	r1, [r7, #20]
 8009e84:	69f8      	ldr	r0, [r7, #28]
 8009e86:	f7f6 fedf 	bl	8000c48 <__aeabi_fsub>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7f6 fb37 	bl	8000500 <__aeabi_f2d>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fb89 	bl	80005b0 <__aeabi_dmul>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	461d      	mov	r5, r3
 8009ea6:	6978      	ldr	r0, [r7, #20]
 8009ea8:	f7f6 fb2a 	bl	8000500 <__aeabi_f2d>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	f7f6 f9c6 	bl	8000244 <__adddf3>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f7f6 fe6e 	bl	8000ba0 <__aeabi_d2f>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009eca:	f000 bc58 	b.w	800a77e <getrangebias_rsl+0xaae>
			}
			else //region 4
			{
				bias = dy;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ed4:	f000 bc53 	b.w	800a77e <getrangebias_rsl+0xaae>
 8009ed8:	c27828f6 	.word	0xc27828f6
 8009edc:	c2a5a8f6 	.word	0xc2a5a8f6
 8009ee0:	c301d1ec 	.word	0xc301d1ec
 8009ee4:	c2b4199a 	.word	0xc2b4199a
 8009ee8:	41e147ae 	.word	0x41e147ae
 8009eec:	c2b8cccd 	.word	0xc2b8cccd
 8009ef0:	4245c28f 	.word	0x4245c28f
			}
		}
		else if(prf == DWT_PRF_64M) //10
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	f040 8441 	bne.w	800a77e <getrangebias_rsl+0xaae>
		{
			double m = -45.48484848;
 8009efc:	a3b6      	add	r3, pc, #728	; (adr r3, 800a1d8 <getrangebias_rsl+0x508>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
			double bx = -80.62270464;
 8009f06:	a3b6      	add	r3, pc, #728	; (adr r3, 800a1e0 <getrangebias_rsl+0x510>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			double by = -92.36287762;
 8009f10:	a3b5      	add	r3, pc, #724	; (adr r3, 800a1e8 <getrangebias_rsl+0x518>)
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			double cx = -82.03729358;
 8009f1a:	a3b5      	add	r3, pc, #724	; (adr r3, 800a1f0 <getrangebias_rsl+0x520>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			double cy = -109.84714946;
 8009f24:	a3b4      	add	r3, pc, #720	; (adr r3, 800a1f8 <getrangebias_rsl+0x528>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			double dx = -82.83220438;
 8009f2e:	a3b4      	add	r3, pc, #720	; (adr r3, 800a200 <getrangebias_rsl+0x530>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			double dy = -50.94116132;
 8009f38:	a3b3      	add	r3, pc, #716	; (adr r3, 800a208 <getrangebias_rsl+0x538>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			double ex = -85.42920938;
 8009f42:	a3b3      	add	r3, pc, #716	; (adr r3, 800a210 <getrangebias_rsl+0x540>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			double ey = -22.6320239;
 8009f4c:	a3b2      	add	r3, pc, #712	; (adr r3, 800a218 <getrangebias_rsl+0x548>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			double fx = -89.88519826;
 8009f56:	a3b2      	add	r3, pc, #712	; (adr r3, 800a220 <getrangebias_rsl+0x550>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			double fy = -38.18332969;
 8009f60:	a3b1      	add	r3, pc, #708	; (adr r3, 800a228 <getrangebias_rsl+0x558>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			double gx = -91.7826361;
 8009f6a:	a3b1      	add	r3, pc, #708	; (adr r3, 800a230 <getrangebias_rsl+0x560>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			double gy = 7.25759428;
 8009f74:	a3b0      	add	r3, pc, #704	; (adr r3, 800a238 <getrangebias_rsl+0x568>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			if(rsl > bx) //region 1
 8009f7e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009f82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f86:	f7f6 fda3 	bl	8000ad0 <__aeabi_dcmpgt>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01f      	beq.n	8009fd0 <getrangebias_rsl+0x300>
			{
				bias = (rsl-bx)*m+by;
 8009f90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f98:	f7f6 f952 	bl	8000240 <__aeabi_dsub>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009fa8:	f7f6 fb02 	bl	80005b0 <__aeabi_dmul>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009fb8:	f7f6 f944 	bl	8000244 <__adddf3>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f7f6 fdec 	bl	8000ba0 <__aeabi_d2f>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fce:	e3d6      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > cx) //region 2
 8009fd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fd8:	f7f6 fd7a 	bl	8000ad0 <__aeabi_dcmpgt>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d037      	beq.n	800a052 <getrangebias_rsl+0x382>
			{
				bias = (rsl-cx)/(bx-cx)*(by-cy)+cy;
 8009fe2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fea:	f7f6 f929 	bl	8000240 <__aeabi_dsub>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4614      	mov	r4, r2
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009ffa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009ffe:	f7f6 f91f 	bl	8000240 <__aeabi_dsub>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 fbfb 	bl	8000804 <__aeabi_ddiv>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4614      	mov	r4, r2
 800a014:	461d      	mov	r5, r3
 800a016:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a01a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a01e:	f7f6 f90f 	bl	8000240 <__aeabi_dsub>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4620      	mov	r0, r4
 800a028:	4629      	mov	r1, r5
 800a02a:	f7f6 fac1 	bl	80005b0 <__aeabi_dmul>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4610      	mov	r0, r2
 800a034:	4619      	mov	r1, r3
 800a036:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a03a:	f7f6 f903 	bl	8000244 <__adddf3>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4610      	mov	r0, r2
 800a044:	4619      	mov	r1, r3
 800a046:	f7f6 fdab 	bl	8000ba0 <__aeabi_d2f>
 800a04a:	4603      	mov	r3, r0
 800a04c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a050:	e395      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > dx) //region 3
 800a052:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a05a:	f7f6 fd39 	bl	8000ad0 <__aeabi_dcmpgt>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d037      	beq.n	800a0d4 <getrangebias_rsl+0x404>
			{
				bias = (rsl-dx)/(cx-dx)*(cy-dy)+dy;
 800a064:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a06c:	f7f6 f8e8 	bl	8000240 <__aeabi_dsub>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4614      	mov	r4, r2
 800a076:	461d      	mov	r5, r3
 800a078:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a07c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800a080:	f7f6 f8de 	bl	8000240 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 fbba 	bl	8000804 <__aeabi_ddiv>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4614      	mov	r4, r2
 800a096:	461d      	mov	r5, r3
 800a098:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a09c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a0a0:	f7f6 f8ce 	bl	8000240 <__aeabi_dsub>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f7f6 fa80 	bl	80005b0 <__aeabi_dmul>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a0bc:	f7f6 f8c2 	bl	8000244 <__adddf3>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	f7f6 fd6a 	bl	8000ba0 <__aeabi_d2f>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0d2:	e354      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > ex) //region 4
 800a0d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0dc:	f7f6 fcf8 	bl	8000ad0 <__aeabi_dcmpgt>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d037      	beq.n	800a156 <getrangebias_rsl+0x486>
			{
				bias = (rsl-ex)/(dx-ex)*(dy-ey)+ey;
 800a0e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0ee:	f7f6 f8a7 	bl	8000240 <__aeabi_dsub>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461d      	mov	r5, r3
 800a0fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a0fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a102:	f7f6 f89d 	bl	8000240 <__aeabi_dsub>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4620      	mov	r0, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 fb79 	bl	8000804 <__aeabi_ddiv>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4614      	mov	r4, r2
 800a118:	461d      	mov	r5, r3
 800a11a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a11e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a122:	f7f6 f88d 	bl	8000240 <__aeabi_dsub>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4620      	mov	r0, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 fa3f 	bl	80005b0 <__aeabi_dmul>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4610      	mov	r0, r2
 800a138:	4619      	mov	r1, r3
 800a13a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a13e:	f7f6 f881 	bl	8000244 <__adddf3>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4610      	mov	r0, r2
 800a148:	4619      	mov	r1, r3
 800a14a:	f7f6 fd29 	bl	8000ba0 <__aeabi_d2f>
 800a14e:	4603      	mov	r3, r0
 800a150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a154:	e313      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > fx) //region 5
 800a156:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a15a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a15e:	f7f6 fcb7 	bl	8000ad0 <__aeabi_dcmpgt>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d06b      	beq.n	800a240 <getrangebias_rsl+0x570>
			{
				bias = (rsl-fx)/(ex-fx)*(ey-fy)+fy;
 800a168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a16c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a170:	f7f6 f866 	bl	8000240 <__aeabi_dsub>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4614      	mov	r4, r2
 800a17a:	461d      	mov	r5, r3
 800a17c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a180:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a184:	f7f6 f85c 	bl	8000240 <__aeabi_dsub>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4620      	mov	r0, r4
 800a18e:	4629      	mov	r1, r5
 800a190:	f7f6 fb38 	bl	8000804 <__aeabi_ddiv>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4614      	mov	r4, r2
 800a19a:	461d      	mov	r5, r3
 800a19c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a1a4:	f7f6 f84c 	bl	8000240 <__aeabi_dsub>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 f9fe 	bl	80005b0 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a1c0:	f7f6 f840 	bl	8000244 <__adddf3>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f7f6 fce8 	bl	8000ba0 <__aeabi_d2f>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1d6:	e2d2      	b.n	800a77e <getrangebias_rsl+0xaae>
 800a1d8:	83d68ec2 	.word	0x83d68ec2
 800a1dc:	c046be0f 	.word	0xc046be0f
 800a1e0:	648ff784 	.word	0x648ff784
 800a1e4:	c05427da 	.word	0xc05427da
 800a1e8:	630d966c 	.word	0x630d966c
 800a1ec:	c0571739 	.word	0xc0571739
 800a1f0:	049c9cd9 	.word	0x049c9cd9
 800a1f4:	c0548263 	.word	0xc0548263
 800a1f8:	b25e618a 	.word	0xb25e618a
 800a1fc:	c05b7637 	.word	0xc05b7637
 800a200:	d628ec07 	.word	0xd628ec07
 800a204:	c054b542 	.word	0xc054b542
 800a208:	f960d481 	.word	0xf960d481
 800a20c:	c0497877 	.word	0xc0497877
 800a210:	2a9e8f22 	.word	0x2a9e8f22
 800a214:	c0555b78 	.word	0xc0555b78
 800a218:	517cca56 	.word	0x517cca56
 800a21c:	c036a1cc 	.word	0xc036a1cc
 800a220:	169a4b45 	.word	0x169a4b45
 800a224:	c05678a7 	.word	0xc05678a7
 800a228:	58e777c9 	.word	0x58e777c9
 800a22c:	c0431777 	.word	0xc0431777
 800a230:	b5b98ad1 	.word	0xb5b98ad1
 800a234:	c056f216 	.word	0xc056f216
 800a238:	cb80f259 	.word	0xcb80f259
 800a23c:	401d07c6 	.word	0x401d07c6
			}
			else if(rsl > gx) //region 6
 800a240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a244:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a248:	f7f6 fc42 	bl	8000ad0 <__aeabi_dcmpgt>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d037      	beq.n	800a2c2 <getrangebias_rsl+0x5f2>
			{
				bias = (rsl-gx)/(fx-gx)*(fy-gy)+gy;
 800a252:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a25a:	f7f5 fff1 	bl	8000240 <__aeabi_dsub>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4614      	mov	r4, r2
 800a264:	461d      	mov	r5, r3
 800a266:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a26a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a26e:	f7f5 ffe7 	bl	8000240 <__aeabi_dsub>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 fac3 	bl	8000804 <__aeabi_ddiv>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4614      	mov	r4, r2
 800a284:	461d      	mov	r5, r3
 800a286:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a28a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a28e:	f7f5 ffd7 	bl	8000240 <__aeabi_dsub>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f6 f989 	bl	80005b0 <__aeabi_dmul>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2aa:	f7f5 ffcb 	bl	8000244 <__adddf3>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f7f6 fc73 	bl	8000ba0 <__aeabi_d2f>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2c0:	e25d      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else //region 7
			{
				bias = gy;
 800a2c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a2c6:	f7f6 fc6b 	bl	8000ba0 <__aeabi_d2f>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2d0:	e255      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
		}
	}
	else if(channel == 5)
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b05      	cmp	r3, #5
 800a2d6:	f040 8252 	bne.w	800a77e <getrangebias_rsl+0xaae>
	{
		if(prf == DWT_PRF_16M) //01
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f040 8175 	bne.w	800a5cc <getrangebias_rsl+0x8fc>
		{
			float m = -60.771777;
 800a2e2:	4bb1      	ldr	r3, [pc, #708]	; (800a5a8 <getrangebias_rsl+0x8d8>)
 800a2e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			float bx = -84.68474012;
 800a2e8:	4bb0      	ldr	r3, [pc, #704]	; (800a5ac <getrangebias_rsl+0x8dc>)
 800a2ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			float by = -61.42658856;
 800a2ee:	4bb0      	ldr	r3, [pc, #704]	; (800a5b0 <getrangebias_rsl+0x8e0>)
 800a2f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			float cx = -88.40823804;
 800a2f4:	4baf      	ldr	r3, [pc, #700]	; (800a5b4 <getrangebias_rsl+0x8e4>)
 800a2f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			float cy =  55.46391624;
 800a2fa:	4baf      	ldr	r3, [pc, #700]	; (800a5b8 <getrangebias_rsl+0x8e8>)
 800a2fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			float dx = -90.59395975;
 800a300:	4bae      	ldr	r3, [pc, #696]	; (800a5bc <getrangebias_rsl+0x8ec>)
 800a302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			float dy = 1.48597902;
 800a306:	4bae      	ldr	r3, [pc, #696]	; (800a5c0 <getrangebias_rsl+0x8f0>)
 800a308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			float ex = -95.42385593;
 800a30c:	4bad      	ldr	r3, [pc, #692]	; (800a5c4 <getrangebias_rsl+0x8f4>)
 800a30e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			float ey = -52.4786514;
 800a312:	4bad      	ldr	r3, [pc, #692]	; (800a5c8 <getrangebias_rsl+0x8f8>)
 800a314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if(rsl > bx) //region 1
 800a318:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a31c:	f7f6 f8f0 	bl	8000500 <__aeabi_f2d>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a328:	f7f6 fbd2 	bl	8000ad0 <__aeabi_dcmpgt>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d02f      	beq.n	800a392 <getrangebias_rsl+0x6c2>
			{
				bias = (rsl-bx)*m+by;
 800a332:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a336:	f7f6 f8e3 	bl	8000500 <__aeabi_f2d>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a342:	f7f5 ff7d 	bl	8000240 <__aeabi_dsub>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4614      	mov	r4, r2
 800a34c:	461d      	mov	r5, r3
 800a34e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a352:	f7f6 f8d5 	bl	8000500 <__aeabi_f2d>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4620      	mov	r0, r4
 800a35c:	4629      	mov	r1, r5
 800a35e:	f7f6 f927 	bl	80005b0 <__aeabi_dmul>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	4614      	mov	r4, r2
 800a368:	461d      	mov	r5, r3
 800a36a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800a36e:	f7f6 f8c7 	bl	8000500 <__aeabi_f2d>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4620      	mov	r0, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	f7f5 ff63 	bl	8000244 <__adddf3>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4610      	mov	r0, r2
 800a384:	4619      	mov	r1, r3
 800a386:	f7f6 fc0b 	bl	8000ba0 <__aeabi_d2f>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a390:	e1f5      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > cx) //region 2
 800a392:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800a396:	f7f6 f8b3 	bl	8000500 <__aeabi_f2d>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3a2:	f7f6 fb95 	bl	8000ad0 <__aeabi_dcmpgt>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d049      	beq.n	800a440 <getrangebias_rsl+0x770>
			{
				bias = (rsl-cx)/(bx-cx)*(by-cy)+cy;
 800a3ac:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800a3b0:	f7f6 f8a6 	bl	8000500 <__aeabi_f2d>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3bc:	f7f5 ff40 	bl	8000240 <__aeabi_dsub>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	461d      	mov	r5, r3
 800a3c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800a3cc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a3d0:	f7f6 fc3a 	bl	8000c48 <__aeabi_fsub>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7f6 f892 	bl	8000500 <__aeabi_f2d>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f6 fa0e 	bl	8000804 <__aeabi_ddiv>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a3f4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800a3f8:	f7f6 fc26 	bl	8000c48 <__aeabi_fsub>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f6 f87e 	bl	8000500 <__aeabi_f2d>
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	4620      	mov	r0, r4
 800a40a:	4629      	mov	r1, r5
 800a40c:	f7f6 f8d0 	bl	80005b0 <__aeabi_dmul>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	4614      	mov	r4, r2
 800a416:	461d      	mov	r5, r3
 800a418:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a41c:	f7f6 f870 	bl	8000500 <__aeabi_f2d>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	4620      	mov	r0, r4
 800a426:	4629      	mov	r1, r5
 800a428:	f7f5 ff0c 	bl	8000244 <__adddf3>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4610      	mov	r0, r2
 800a432:	4619      	mov	r1, r3
 800a434:	f7f6 fbb4 	bl	8000ba0 <__aeabi_d2f>
 800a438:	4603      	mov	r3, r0
 800a43a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a43e:	e19e      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if( rsl > dx) //region 3
 800a440:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a444:	f7f6 f85c 	bl	8000500 <__aeabi_f2d>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a450:	f7f6 fb3e 	bl	8000ad0 <__aeabi_dcmpgt>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d049      	beq.n	800a4ee <getrangebias_rsl+0x81e>
			{
				bias = (rsl-dx)/(cx-dx)*(cy-dy)+dy;
 800a45a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a45e:	f7f6 f84f 	bl	8000500 <__aeabi_f2d>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a46a:	f7f5 fee9 	bl	8000240 <__aeabi_dsub>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4614      	mov	r4, r2
 800a474:	461d      	mov	r5, r3
 800a476:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800a47a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800a47e:	f7f6 fbe3 	bl	8000c48 <__aeabi_fsub>
 800a482:	4603      	mov	r3, r0
 800a484:	4618      	mov	r0, r3
 800a486:	f7f6 f83b 	bl	8000500 <__aeabi_f2d>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4620      	mov	r0, r4
 800a490:	4629      	mov	r1, r5
 800a492:	f7f6 f9b7 	bl	8000804 <__aeabi_ddiv>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4614      	mov	r4, r2
 800a49c:	461d      	mov	r5, r3
 800a49e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a4a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a4a6:	f7f6 fbcf 	bl	8000c48 <__aeabi_fsub>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7f6 f827 	bl	8000500 <__aeabi_f2d>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 f879 	bl	80005b0 <__aeabi_dmul>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800a4ca:	f7f6 f819 	bl	8000500 <__aeabi_f2d>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f5 feb5 	bl	8000244 <__adddf3>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4610      	mov	r0, r2
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f7f6 fb5d 	bl	8000ba0 <__aeabi_d2f>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4ec:	e147      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > ex) //region 4
 800a4ee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a4f2:	f7f6 f805 	bl	8000500 <__aeabi_f2d>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4fe:	f7f6 fae7 	bl	8000ad0 <__aeabi_dcmpgt>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d049      	beq.n	800a59c <getrangebias_rsl+0x8cc>
			{
				bias = (rsl-ex)/(dx-ex)*(dy-ey)+ey;
 800a508:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a50c:	f7f5 fff8 	bl	8000500 <__aeabi_f2d>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a518:	f7f5 fe92 	bl	8000240 <__aeabi_dsub>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4614      	mov	r4, r2
 800a522:	461d      	mov	r5, r3
 800a524:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a528:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a52c:	f7f6 fb8c 	bl	8000c48 <__aeabi_fsub>
 800a530:	4603      	mov	r3, r0
 800a532:	4618      	mov	r0, r3
 800a534:	f7f5 ffe4 	bl	8000500 <__aeabi_f2d>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f6 f960 	bl	8000804 <__aeabi_ddiv>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4614      	mov	r4, r2
 800a54a:	461d      	mov	r5, r3
 800a54c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a550:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800a554:	f7f6 fb78 	bl	8000c48 <__aeabi_fsub>
 800a558:	4603      	mov	r3, r0
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7f5 ffd0 	bl	8000500 <__aeabi_f2d>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4620      	mov	r0, r4
 800a566:	4629      	mov	r1, r5
 800a568:	f7f6 f822 	bl	80005b0 <__aeabi_dmul>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4614      	mov	r4, r2
 800a572:	461d      	mov	r5, r3
 800a574:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a578:	f7f5 ffc2 	bl	8000500 <__aeabi_f2d>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f5 fe5e 	bl	8000244 <__adddf3>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4610      	mov	r0, r2
 800a58e:	4619      	mov	r1, r3
 800a590:	f7f6 fb06 	bl	8000ba0 <__aeabi_d2f>
 800a594:	4603      	mov	r3, r0
 800a596:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a59a:	e0f0      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else //region 5
			{
				bias = ey;
 800a59c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5a4:	e0eb      	b.n	800a77e <getrangebias_rsl+0xaae>
 800a5a6:	bf00      	nop
 800a5a8:	c273164d 	.word	0xc273164d
 800a5ac:	c2a95e96 	.word	0xc2a95e96
 800a5b0:	c275b4d4 	.word	0xc275b4d4
 800a5b4:	c2b0d105 	.word	0xc2b0d105
 800a5b8:	425ddb0d 	.word	0x425ddb0d
 800a5bc:	c2b5301b 	.word	0xc2b5301b
 800a5c0:	3fbe348f 	.word	0x3fbe348f
 800a5c4:	c2bed904 	.word	0xc2bed904
 800a5c8:	c251ea24 	.word	0xc251ea24
			}
		}
		else if(prf == DWT_PRF_64M) //11
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	f040 80d5 	bne.w	800a77e <getrangebias_rsl+0xaae>
		{
			double m = -54.53010908;
 800a5d4:	a372      	add	r3, pc, #456	; (adr r3, 800a7a0 <getrangebias_rsl+0xad0>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			double bx = -81.65862959;
 800a5de:	a372      	add	r3, pc, #456	; (adr r3, 800a7a8 <getrangebias_rsl+0xad8>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
			double by = -4.6428097;
 800a5e8:	a371      	add	r3, pc, #452	; (adr r3, 800a7b0 <getrangebias_rsl+0xae0>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			double cx = -85.18994963;
 800a5f2:	a371      	add	r3, pc, #452	; (adr r3, 800a7b8 <getrangebias_rsl+0xae8>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
			double cy = 12.25860862;
 800a5fc:	a370      	add	r3, pc, #448	; (adr r3, 800a7c0 <getrangebias_rsl+0xaf0>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
			double dx = -88.01254788;
 800a606:	a370      	add	r3, pc, #448	; (adr r3, 800a7c8 <getrangebias_rsl+0xaf8>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			double dy = -27.64410538;
 800a610:	a36f      	add	r3, pc, #444	; (adr r3, 800a7d0 <getrangebias_rsl+0xb00>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

			if(rsl > bx) //region 1
 800a61a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a61e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a622:	f7f6 fa55 	bl	8000ad0 <__aeabi_dcmpgt>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01f      	beq.n	800a66c <getrangebias_rsl+0x99c>
			{
				bias = (rsl-bx)*m+by;
 800a62c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a630:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a634:	f7f5 fe04 	bl	8000240 <__aeabi_dsub>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4610      	mov	r0, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a644:	f7f5 ffb4 	bl	80005b0 <__aeabi_dmul>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4610      	mov	r0, r2
 800a64e:	4619      	mov	r1, r3
 800a650:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a654:	f7f5 fdf6 	bl	8000244 <__adddf3>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4610      	mov	r0, r2
 800a65e:	4619      	mov	r1, r3
 800a660:	f7f6 fa9e 	bl	8000ba0 <__aeabi_d2f>
 800a664:	4603      	mov	r3, r0
 800a666:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a66a:	e088      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > cx) //region 2
 800a66c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a670:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a674:	f7f6 fa2c 	bl	8000ad0 <__aeabi_dcmpgt>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d037      	beq.n	800a6ee <getrangebias_rsl+0xa1e>
			{
				bias = (rsl-bx)/(cx-bx)*(cy-by)+by;
 800a67e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a682:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a686:	f7f5 fddb 	bl	8000240 <__aeabi_dsub>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4614      	mov	r4, r2
 800a690:	461d      	mov	r5, r3
 800a692:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a696:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800a69a:	f7f5 fdd1 	bl	8000240 <__aeabi_dsub>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f6 f8ad 	bl	8000804 <__aeabi_ddiv>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4614      	mov	r4, r2
 800a6b0:	461d      	mov	r5, r3
 800a6b2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a6b6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800a6ba:	f7f5 fdc1 	bl	8000240 <__aeabi_dsub>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7f5 ff73 	bl	80005b0 <__aeabi_dmul>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a6d6:	f7f5 fdb5 	bl	8000244 <__adddf3>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4610      	mov	r0, r2
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f7f6 fa5d 	bl	8000ba0 <__aeabi_d2f>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6ec:	e047      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else if(rsl > dx) //region 3
 800a6ee:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a6f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6f6:	f7f6 f9eb 	bl	8000ad0 <__aeabi_dcmpgt>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d037      	beq.n	800a770 <getrangebias_rsl+0xaa0>
			{
				bias = (rsl-cx)/(dx-cx)*(dy-cy)+cy;
 800a700:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a704:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a708:	f7f5 fd9a 	bl	8000240 <__aeabi_dsub>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4614      	mov	r4, r2
 800a712:	461d      	mov	r5, r3
 800a714:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a718:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a71c:	f7f5 fd90 	bl	8000240 <__aeabi_dsub>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f7f6 f86c 	bl	8000804 <__aeabi_ddiv>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4614      	mov	r4, r2
 800a732:	461d      	mov	r5, r3
 800a734:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800a738:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a73c:	f7f5 fd80 	bl	8000240 <__aeabi_dsub>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f5 ff32 	bl	80005b0 <__aeabi_dmul>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4610      	mov	r0, r2
 800a752:	4619      	mov	r1, r3
 800a754:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800a758:	f7f5 fd74 	bl	8000244 <__adddf3>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4610      	mov	r0, r2
 800a762:	4619      	mov	r1, r3
 800a764:	f7f6 fa1c 	bl	8000ba0 <__aeabi_d2f>
 800a768:	4603      	mov	r3, r0
 800a76a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a76e:	e006      	b.n	800a77e <getrangebias_rsl+0xaae>
			}
			else //region 4
			{
				bias = dy;
 800a770:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800a774:	f7f6 fa14 	bl	8000ba0 <__aeabi_d2f>
 800a778:	4603      	mov	r3, r0
 800a77a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			}
		}
	}

	return bias/1000.0; //convert to meters
 800a77e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800a782:	f7f5 febd 	bl	8000500 <__aeabi_f2d>
 800a786:	f04f 0200 	mov.w	r2, #0
 800a78a:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <getrangebias_rsl+0xb08>)
 800a78c:	f7f6 f83a 	bl	8000804 <__aeabi_ddiv>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
}
 800a794:	4610      	mov	r0, r2
 800a796:	4619      	mov	r1, r3
 800a798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a0:	9d44f4d2 	.word	0x9d44f4d2
 800a7a4:	c04b43da 	.word	0xc04b43da
 800a7a8:	fcb94e96 	.word	0xfcb94e96
 800a7ac:	c0546a26 	.word	0xc0546a26
 800a7b0:	b4bc34cf 	.word	0xb4bc34cf
 800a7b4:	c012923c 	.word	0xc012923c
 800a7b8:	227e2f30 	.word	0x227e2f30
 800a7bc:	c0554c28 	.word	0xc0554c28
 800a7c0:	595aba36 	.word	0x595aba36
 800a7c4:	40288468 	.word	0x40288468
 800a7c8:	959f8efc 	.word	0x959f8efc
 800a7cc:	c05600cd 	.word	0xc05600cd
 800a7d0:	17164714 	.word	0x17164714
 800a7d4:	c03ba4e4 	.word	0xc03ba4e4
 800a7d8:	408f4000 	.word	0x408f4000
 800a7dc:	00000000 	.word	0x00000000

0800a7e0 <reportTOF>:

int reportTOF(instance_data_t *inst, uint8 uwb_index, double rsl)
{
 800a7e0:	b5b0      	push	{r4, r5, r7, lr}
 800a7e2:	b090      	sub	sp, #64	; 0x40
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	e9c7 2300 	strd	r2, r3, [r7]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	72fb      	strb	r3, [r7, #11]
	//no TOF to report if not from a uwb that we are tracking
	if(uwb_index > UWB_LIST_SIZE)
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	2b0a      	cmp	r3, #10
 800a7f4:	d902      	bls.n	800a7fc <reportTOF+0x1c>
	{
		return -1;
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	e0d0      	b.n	800a99e <reportTOF+0x1be>
	}

	double distance_raw = 0;
 800a7fc:	f04f 0200 	mov.w	r2, #0
 800a800:	f04f 0300 	mov.w	r3, #0
 800a804:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double distance_rsl = 0;
 800a808:	f04f 0200 	mov.w	r2, #0
 800a80c:	f04f 0300 	mov.w	r3, #0
 800a810:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double distance_rng = 0;
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double tof ;
	int64 tofi ;

	// check for negative results and accept them making them proper negative integers
	tofi = inst->tof[uwb_index] ;                      // make it signed
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	4413      	add	r3, r2
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (tofi > 0x007FFFFFFFFF)                         // MP counter is 40 bits,  close up TOF may be negative
 800a834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a838:	2a00      	cmp	r2, #0
 800a83a:	f173 0380 	sbcs.w	r3, r3, #128	; 0x80
 800a83e:	db06      	blt.n	800a84e <reportTOF+0x6e>
	{
		tofi -= 0x010000000000 ;                       // subtract fill 40 bit range to make it negative
 800a840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a844:	1c14      	adds	r4, r2, #0
 800a846:	f163 05ff 	sbc.w	r5, r3, #255	; 0xff
 800a84a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	}

	// convert to seconds (as floating point)
	tof = convertdevicetimetosec(tofi);
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fe81 	bl	8009558 <convertdevicetimetosec>
 800a856:	e9c7 0104 	strd	r0, r1, [r7, #16]
	inst->idistanceraw[uwb_index] = distance_raw = tof * SPEED_OF_LIGHT;
 800a85a:	a353      	add	r3, pc, #332	; (adr r3, 800a9a8 <reportTOF+0x1c8>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a864:	f7f5 fea4 	bl	80005b0 <__aeabi_dmul>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	18d1      	adds	r1, r2, r3
 800a87c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a880:	e9c1 2300 	strd	r2, r3, [r1]

#if (CORRECT_RANGE_BIAS == 1)

	distance_rng = distance_raw - getrangebias_rng(inst->configData.chan, inst->configData.prf, distance_raw);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	7918      	ldrb	r0, [r3, #4]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	7959      	ldrb	r1, [r3, #5]
 800a88c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a890:	f7fe fe86 	bl	80095a0 <getrangebias_rng>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a89c:	f7f5 fcd0 	bl	8000240 <__aeabi_dsub>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	distance_rsl = distance_raw - getrangebias_rsl(inst->configData.chan, inst->configData.prf, rsl);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	7918      	ldrb	r0, [r3, #4]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	7959      	ldrb	r1, [r3, #5]
 800a8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8b4:	f7ff fa0c 	bl	8009cd0 <getrangebias_rsl>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a8c0:	f7f5 fcbe 	bl	8000240 <__aeabi_dsub>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

#endif

	int retval = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	627b      	str	r3, [r7, #36]	; 0x24

	if (distance_rng > 20000.000)    // discount any items with error
 800a8d0:	a337      	add	r3, pc, #220	; (adr r3, 800a9b0 <reportTOF+0x1d0>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a8da:	f7f6 f8f9 	bl	8000ad0 <__aeabi_dcmpgt>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d008      	beq.n	800a8f6 <reportTOF+0x116>
	{
		distance_rng = 0;
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	f04f 0300 	mov.w	r3, #0
 800a8ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		retval = -1;
 800a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (distance_rsl > 20000.000)    // discount any items with error
 800a8f6:	a32e      	add	r3, pc, #184	; (adr r3, 800a9b0 <reportTOF+0x1d0>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a900:	f7f6 f8e6 	bl	8000ad0 <__aeabi_dcmpgt>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d008      	beq.n	800a91c <reportTOF+0x13c>
	{
		distance_rsl = 0;
 800a90a:	f04f 0200 	mov.w	r2, #0
 800a90e:	f04f 0300 	mov.w	r3, #0
 800a912:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		retval = -1;
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
	}


	if(distance_rng < 0){
 800a91c:	f04f 0200 	mov.w	r2, #0
 800a920:	f04f 0300 	mov.w	r3, #0
 800a924:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a928:	f7f6 f8b4 	bl	8000a94 <__aeabi_dcmplt>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d005      	beq.n	800a93e <reportTOF+0x15e>
		distance_rng = 0;
 800a932:	f04f 0200 	mov.w	r2, #0
 800a936:	f04f 0300 	mov.w	r3, #0
 800a93a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	if(distance_rsl < 0){
 800a93e:	f04f 0200 	mov.w	r2, #0
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a94a:	f7f6 f8a3 	bl	8000a94 <__aeabi_dcmplt>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <reportTOF+0x180>
		distance_rsl = 0;
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 0300 	mov.w	r3, #0
 800a95c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	inst->idistance[uwb_index] = distance_rng;
 800a960:	7afb      	ldrb	r3, [r7, #11]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	18d1      	adds	r1, r2, r3
 800a96c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a970:	e9c1 2300 	strd	r2, r3, [r1]
	inst->idistancersl[uwb_index] = distance_rsl;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	18d1      	adds	r1, r2, r3
 800a980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a984:	e9c1 2300 	strd	r2, r3, [r1]
	inst->iRSL[uwb_index] = rsl;
 800a988:	7afb      	ldrb	r3, [r7, #11]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	f203 2392 	addw	r3, r3, #658	; 0x292
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	18d1      	adds	r1, r2, r3
 800a994:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a998:	e9c1 2300 	strd	r2, r3, [r1]

    return retval;
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}// end of reportTOF
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3740      	adds	r7, #64	; 0x40
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	13000000 	.word	0x13000000
 800a9ac:	41b1dd19 	.word	0x41b1dd19
 800a9b0:	00000000 	.word	0x00000000
 800a9b4:	40d38800 	.word	0x40d38800

0800a9b8 <instgetuwblistindex>:
// function to get the list index of a UWB. UWBs not already in the list are added
//
// -------------------------------------------------------------------------------------------------------------------
// return index of UWB
int instgetuwblistindex(instance_data_t *inst, uint8 *uwbAddr, uint8 addrByteSize)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]
    uint8 blank[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800a9c6:	4a28      	ldr	r2, [pc, #160]	; (800aa68 <instgetuwblistindex+0xb0>)
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	b29b      	uxth	r3, r3

    char uwbChar[2];
    memcpy(&uwbChar[0], &uwbAddr[0], 2);
 800a9da:	823b      	strh	r3, [r7, #16]

    //add the new UWB to the list, if not already there and there is space
    for(uint8 i=0; i<UWB_LIST_SIZE; i++)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	77fb      	strb	r3, [r7, #31]
 800a9e0:	e039      	b.n	800aa56 <instgetuwblistindex+0x9e>
    {
        if(memcmp(&inst->uwbList[i][0], &uwbAddr[0], addrByteSize) != 0)
 800a9e2:	7ffb      	ldrb	r3, [r7, #31]
 800a9e4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	3302      	adds	r3, #2
 800a9f0:	79fa      	ldrb	r2, [r7, #7]
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f008 fb11 	bl	801301c <memcmp>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d025      	beq.n	800aa4c <instgetuwblistindex+0x94>
        {
            if(memcmp(&inst->uwbList[i][0], &blank[0], addrByteSize) == 0) //blank entry
 800aa00:	7ffb      	ldrb	r3, [r7, #31]
 800aa02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	3302      	adds	r3, #2
 800aa0e:	79fa      	ldrb	r2, [r7, #7]
 800aa10:	f107 0114 	add.w	r1, r7, #20
 800aa14:	4618      	mov	r0, r3
 800aa16:	f008 fb01 	bl	801301c <memcmp>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d117      	bne.n	800aa50 <instgetuwblistindex+0x98>
            {
                memcpy(&inst->uwbList[i][0], &uwbAddr[0], addrByteSize) ;
 800aa20:	7ffb      	ldrb	r3, [r7, #31]
 800aa22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	3302      	adds	r3, #2
 800aa2e:	79fa      	ldrb	r2, [r7, #7]
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f008 fb00 	bl	8013038 <memcpy>
                inst->uwbListLen = i + 1 ;
 800aa38:	7ffb      	ldrb	r3, [r7, #31]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800aa44:	3301      	adds	r3, #1
 800aa46:	701a      	strb	r2, [r3, #0]
				return i;
 800aa48:	7ffb      	ldrb	r3, [r7, #31]
 800aa4a:	e008      	b.n	800aa5e <instgetuwblistindex+0xa6>
            }
        }
        else
        {
        	return i;
 800aa4c:	7ffb      	ldrb	r3, [r7, #31]
 800aa4e:	e006      	b.n	800aa5e <instgetuwblistindex+0xa6>
    for(uint8 i=0; i<UWB_LIST_SIZE; i++)
 800aa50:	7ffb      	ldrb	r3, [r7, #31]
 800aa52:	3301      	adds	r3, #1
 800aa54:	77fb      	strb	r3, [r7, #31]
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	d9c2      	bls.n	800a9e2 <instgetuwblistindex+0x2a>
        }
    }

    return 255;
 800aa5c:	23ff      	movs	r3, #255	; 0xff
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3720      	adds	r7, #32
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	08017b70 	.word	0x08017b70

0800aa6c <instfindnumneighbors>:
//
// function to find the number of neighbor UWBs in our list that are not in a timeout status
//
// -------------------------------------------------------------------------------------------------------------------
int instfindnumneighbors(instance_data_t *inst)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
    uint8 num = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]

    for(int i=1; i<inst->uwbListLen; i++)// 0 reserved for self, cant be neighbor
 800aa78:	2301      	movs	r3, #1
 800aa7a:	60bb      	str	r3, [r7, #8]
 800aa7c:	e010      	b.n	800aaa0 <instfindnumneighbors+0x34>
    {
		if(tdma_handler.uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR)
 800aa7e:	4910      	ldr	r1, [pc, #64]	; (800aac0 <instfindnumneighbors+0x54>)
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	440b      	add	r3, r1
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d102      	bne.n	800aa9a <instfindnumneighbors+0x2e>
		{
			num++;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	3301      	adds	r3, #1
 800aa98:	73fb      	strb	r3, [r7, #15]
    for(int i=1; i<inst->uwbListLen; i++)// 0 reserved for self, cant be neighbor
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60bb      	str	r3, [r7, #8]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4293      	cmp	r3, r2
 800aab0:	dbe5      	blt.n	800aa7e <instfindnumneighbors+0x12>
		}
    }

    return num;
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	200039b8 	.word	0x200039b8

0800aac4 <instfindnumhidden>:
//
// function to find the number of hidden neighbor UWBs in our list that are not in a timeout status
//
// -------------------------------------------------------------------------------------------------------------------
int instfindnumhidden(instance_data_t *inst)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
    uint8 num = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]

    for(int i=1; i<inst->uwbListLen; i++)//0 reserved for self, cannot be hidden
 800aad0:	2301      	movs	r3, #1
 800aad2:	60bb      	str	r3, [r7, #8]
 800aad4:	e010      	b.n	800aaf8 <instfindnumhidden+0x34>
    {
		if(tdma_handler.uwbListTDMAInfo[i].connectionType == UWB_LIST_HIDDEN)
 800aad6:	4910      	ldr	r1, [pc, #64]	; (800ab18 <instfindnumhidden+0x54>)
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	440b      	add	r3, r1
 800aae4:	3308      	adds	r3, #8
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d102      	bne.n	800aaf2 <instfindnumhidden+0x2e>
		{
			num++;
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	73fb      	strb	r3, [r7, #15]
    for(int i=1; i<inst->uwbListLen; i++)//0 reserved for self, cannot be hidden
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60bb      	str	r3, [r7, #8]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800aafe:	3301      	adds	r3, #1
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4293      	cmp	r3, r2
 800ab08:	dbe5      	blt.n	800aad6 <instfindnumhidden+0x12>
		}
    }

    return num;
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bc80      	pop	{r7}
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	200039b8 	.word	0x200039b8

0800ab1c <instclearuwbList>:
#if (NUM_INST != 1)
#error These functions assume one instance only
#else

void instclearuwbList(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
    int instance = 0 ;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60bb      	str	r3, [r7, #8]
    uint8 blank[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800ab26:	4a1e      	ldr	r2, [pc, #120]	; (800aba0 <instclearuwbList+0x84>)
 800ab28:	463b      	mov	r3, r7
 800ab2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab2e:	e883 0003 	stmia.w	r3, {r0, r1}

    instance_data[instance].uwbListLen = 0 ;
 800ab32:	4a1c      	ldr	r2, [pc, #112]	; (800aba4 <instclearuwbList+0x88>)
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f243 6170 	movw	r1, #13936	; 0x3670
 800ab3a:	fb01 f303 	mul.w	r3, r1, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ab44:	3301      	adds	r3, #1
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
    instance_data[instance].uwbToRangeWith = 255;
 800ab4a:	4a16      	ldr	r2, [pc, #88]	; (800aba4 <instclearuwbList+0x88>)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f243 6170 	movw	r1, #13936	; 0x3670
 800ab52:	fb01 f303 	mul.w	r3, r1, r3
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	701a      	strb	r2, [r3, #0]
	
	for(int i=0; i<UWB_LIST_SIZE; i++)
 800ab60:	2300      	movs	r3, #0
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e014      	b.n	800ab90 <instclearuwbList+0x74>
	{
		memcpy(&instance_data[instance].uwbList[i][0], &blank[0], 8);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f240 62ce 	movw	r2, #1742	; 0x6ce
 800ab6c:	fb02 f203 	mul.w	r2, r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4413      	add	r3, r2
 800ab74:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ab78:	00db      	lsls	r3, r3, #3
 800ab7a:	4a0a      	ldr	r2, [pc, #40]	; (800aba4 <instclearuwbList+0x88>)
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3302      	adds	r3, #2
 800ab80:	4639      	mov	r1, r7
 800ab82:	2208      	movs	r2, #8
 800ab84:	4618      	mov	r0, r3
 800ab86:	f008 fa57 	bl	8013038 <memcpy>
	for(int i=0; i<UWB_LIST_SIZE; i++)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b09      	cmp	r3, #9
 800ab94:	dde7      	ble.n	800ab66 <instclearuwbList+0x4a>
	}
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	08017b70 	.word	0x08017b70
 800aba4:	20000348 	.word	0x20000348

0800aba8 <instancenewrange>:
{
    return instance_data[0].mode;
}

int instancenewrange(void)
{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
    if(instance_data[0].newRange)
 800abac:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <instancenewrange+0x2c>)
 800abae:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800abb2:	330c      	adds	r3, #12
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d007      	beq.n	800abca <instancenewrange+0x22>
    {
        instance_data[0].newRange = 0;
 800abba:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <instancenewrange+0x2c>)
 800abbc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800abc0:	330c      	adds	r3, #12
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
        return 1;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e000      	b.n	800abcc <instancenewrange+0x24>
    }

    return 0;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	bc80      	pop	{r7}
 800abd2:	4770      	bx	lr
 800abd4:	20000348 	.word	0x20000348

0800abd8 <instancenewrangeancadd>:

uint64 instancenewrangeancadd(void)
{
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
    return instance_data[0].newRangeAncAddress;
 800abdc:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <instancenewrangeancadd+0x1c>)
 800abde:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800abe2:	3310      	adds	r3, #16
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800abe8:	4610      	mov	r0, r2
 800abea:	4619      	mov	r1, r3
 800abec:	46bd      	mov	sp, r7
 800abee:	bc80      	pop	{r7}
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20000348 	.word	0x20000348

0800abf8 <instancenewrangetagadd>:

uint64 instancenewrangetagadd(void)
{
 800abf8:	b480      	push	{r7}
 800abfa:	af00      	add	r7, sp, #0
    return instance_data[0].newRangeTagAddress;
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <instancenewrangetagadd+0x1c>)
 800abfe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac02:	3318      	adds	r3, #24
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bc80      	pop	{r7}
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20000348 	.word	0x20000348

0800ac18 <instanceclearcounts>:

// -------------------------------------------------------------------------------------------------------------------
// function to clear counts/averages/range values
//
void instanceclearcounts(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
    int instance = 0 ;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]

    instance_data[instance].frameSN = 0;
 800ac22:	4a28      	ldr	r2, [pc, #160]	; (800acc4 <instanceclearcounts+0xac>)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f243 6170 	movw	r1, #13936	; 0x3670
 800ac2a:	fb01 f303 	mul.w	r3, r1, r3
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800ac34:	3302      	adds	r3, #2
 800ac36:	2200      	movs	r2, #0
 800ac38:	701a      	strb	r2, [r3, #0]

    dwt_configeventcounters(1); //enable and clear - NOTE: the counters are not preserved when in DEEP SLEEP
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	f006 fe17 	bl	801186e <dwt_configeventcounters>

    instance_data[instance].frameSN = 0;
 800ac40:	4a20      	ldr	r2, [pc, #128]	; (800acc4 <instanceclearcounts+0xac>)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f243 6170 	movw	r1, #13936	; 0x3670
 800ac48:	fb01 f303 	mul.w	r3, r1, r3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800ac52:	3302      	adds	r3, #2
 800ac54:	2200      	movs	r2, #0
 800ac56:	701a      	strb	r2, [r3, #0]
    instance_data[instance].txmsgcount = 0;
 800ac58:	4a1a      	ldr	r2, [pc, #104]	; (800acc4 <instanceclearcounts+0xac>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f243 6170 	movw	r1, #13936	; 0x3670
 800ac60:	fb01 f303 	mul.w	r3, r1, r3
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800ac6a:	3318      	adds	r3, #24
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
    instance_data[instance].rxmsgcount = 0;
 800ac70:	4a14      	ldr	r2, [pc, #80]	; (800acc4 <instanceclearcounts+0xac>)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f243 6170 	movw	r1, #13936	; 0x3670
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800ac82:	331c      	adds	r3, #28
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]
    instance_data[instance].lateTX = 0;
 800ac88:	4a0e      	ldr	r2, [pc, #56]	; (800acc4 <instanceclearcounts+0xac>)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f243 6170 	movw	r1, #13936	; 0x3670
 800ac90:	fb01 f303 	mul.w	r3, r1, r3
 800ac94:	4413      	add	r3, r2
 800ac96:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	601a      	str	r2, [r3, #0]
    instance_data[instance].lateRX = 0;
 800ac9e:	4a09      	ldr	r2, [pc, #36]	; (800acc4 <instanceclearcounts+0xac>)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f243 6170 	movw	r1, #13936	; 0x3670
 800aca6:	fb01 f303 	mul.w	r3, r1, r3
 800acaa:	4413      	add	r3, r2
 800acac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acb0:	3304      	adds	r3, #4
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]

    instclearuwbList();
 800acb6:	f7ff ff31 	bl	800ab1c <instclearuwbList>


} // end instanceclearcounts()
 800acba:	bf00      	nop
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20000348 	.word	0x20000348

0800acc8 <instance_init>:
// -------------------------------------------------------------------------------------------------------------------
// function to initialise instance structures
//
// Returns 0 on success and -1 on error
int instance_init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
    int instance = 0 ;
 800acce:	2300      	movs	r3, #0
 800acd0:	60bb      	str	r3, [r7, #8]
    int result;

    for(uint8 i=0; i<UWB_LIST_SIZE; i++)
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	e038      	b.n	800ad4a <instance_init+0x82>
	{
		instance_data[instance].tof[i] = 0;
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	496e      	ldr	r1, [pc, #440]	; (800ae94 <instance_init+0x1cc>)
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	f240 60ce 	movw	r0, #1742	; 0x6ce
 800ace2:	fb00 f202 	mul.w	r2, r0, r2
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	4419      	add	r1, r3
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	f04f 0300 	mov.w	r3, #0
 800acf8:	e9c1 2300 	strd	r2, r3, [r1]
		instance_data[instance].idistance[i] = 0;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	4965      	ldr	r1, [pc, #404]	; (800ae94 <instance_init+0x1cc>)
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	f240 60ce 	movw	r0, #1742	; 0x6ce
 800ad06:	fb00 f202 	mul.w	r2, r0, r2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4419      	add	r1, r3
 800ad14:	f04f 0200 	mov.w	r2, #0
 800ad18:	f04f 0300 	mov.w	r3, #0
 800ad1c:	e9c1 2300 	strd	r2, r3, [r1]
		instance_data[instance].idistanceraw[i] = 0;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	495c      	ldr	r1, [pc, #368]	; (800ae94 <instance_init+0x1cc>)
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	f240 60ce 	movw	r0, #1742	; 0x6ce
 800ad2a:	fb00 f202 	mul.w	r2, r0, r2
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	4419      	add	r1, r3
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	f04f 0300 	mov.w	r3, #0
 800ad40:	e9c1 2300 	strd	r2, r3, [r1]
    for(uint8 i=0; i<UWB_LIST_SIZE; i++)
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	3301      	adds	r3, #1
 800ad48:	73fb      	strb	r3, [r7, #15]
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d9c3      	bls.n	800acd8 <instance_init+0x10>
	}
	instance_data[instance].newRangeUWBIndex = 0;
 800ad50:	4a50      	ldr	r2, [pc, #320]	; (800ae94 <instance_init+0x1cc>)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f243 6170 	movw	r1, #13936	; 0x3670
 800ad58:	fb01 f303 	mul.w	r3, r1, r3
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ad62:	3308      	adds	r3, #8
 800ad64:	2200      	movs	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]

	instance_data[instance].rslCnt = 0;
 800ad68:	4a4a      	ldr	r2, [pc, #296]	; (800ae94 <instance_init+0x1cc>)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f243 6170 	movw	r1, #13936	; 0x3670
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800ad7a:	3318      	adds	r3, #24
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	701a      	strb	r2, [r3, #0]
	instance_data[instance].idxRSL = 0;
 800ad80:	4a44      	ldr	r2, [pc, #272]	; (800ae94 <instance_init+0x1cc>)
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f243 6170 	movw	r1, #13936	; 0x3670
 800ad88:	fb01 f303 	mul.w	r3, r1, r3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800ad92:	3319      	adds	r3, #25
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
	instance_data[instance].avgRSL = 0;
 800ad98:	4a3e      	ldr	r2, [pc, #248]	; (800ae94 <instance_init+0x1cc>)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f243 6170 	movw	r1, #13936	; 0x3670
 800ada0:	fb01 f303 	mul.w	r3, r1, r3
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800adaa:	3310      	adds	r3, #16
 800adac:	f04f 0000 	mov.w	r0, #0
 800adb0:	f04f 0100 	mov.w	r1, #0
 800adb4:	e9c3 0100 	strd	r0, r1, [r3]
	for(uint8 i=0; i<NUM_RSL_AVG; i++)
 800adb8:	2300      	movs	r3, #0
 800adba:	73bb      	strb	r3, [r7, #14]
 800adbc:	e014      	b.n	800ade8 <instance_init+0x120>
	{
		instance_data[instance].RSL[i] = 0;
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	4934      	ldr	r1, [pc, #208]	; (800ae94 <instance_init+0x1cc>)
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	f240 60ce 	movw	r0, #1742	; 0x6ce
 800adc8:	fb00 f202 	mul.w	r2, r0, r2
 800adcc:	4413      	add	r3, r2
 800adce:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	4419      	add	r1, r3
 800add6:	f04f 0200 	mov.w	r2, #0
 800adda:	f04f 0300 	mov.w	r3, #0
 800adde:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8 i=0; i<NUM_RSL_AVG; i++)
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	3301      	adds	r3, #1
 800ade6:	73bb      	strb	r3, [r7, #14]
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	2b31      	cmp	r3, #49	; 0x31
 800adec:	d9e7      	bls.n	800adbe <instance_init+0xf6>
	}


    // Reset the IC (might be needed if not getting here from POWER ON)
    dwt_softreset();
 800adee:	f006 fd61 	bl	80118b4 <dwt_softreset>

	//we can enable any configuration loading from OTP/ROM on initialization
    result = dwt_initialise(DWT_LOADUCODE) ;
 800adf2:	2001      	movs	r0, #1
 800adf4:	f005 fbfe 	bl	80105f4 <dwt_initialise>
 800adf8:	6078      	str	r0, [r7, #4]

    //this is platform dependent - only program if DW EVK/EVB
    dwt_setleds(3) ; //configure the GPIOs which control the leds on EVBs
 800adfa:	2003      	movs	r0, #3
 800adfc:	f006 fae0 	bl	80113c0 <dwt_setleds>

    if (DWT_SUCCESS != result)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <instance_init+0x144>
    {
        return (-1) ;   // device initialize has failed
 800ae06:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0a:	e03f      	b.n	800ae8c <instance_init+0x1c4>
    }

    //enable TX, RX states on GPIOs 6 and 5
    dwt_setlnapamode(1,1);
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	2001      	movs	r0, #1
 800ae10:	f005 fca0 	bl	8010754 <dwt_setlnapamode>

    instanceclearcounts() ;
 800ae14:	f7ff ff00 	bl	800ac18 <instanceclearcounts>

    instance_data[instance].panID = 0xdeca ;
 800ae18:	4a1e      	ldr	r2, [pc, #120]	; (800ae94 <instance_init+0x1cc>)
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f243 6170 	movw	r1, #13936	; 0x3670
 800ae20:	fb01 f303 	mul.w	r3, r1, r3
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	f64d 62ca 	movw	r2, #57034	; 0xdeca
 800ae30:	801a      	strh	r2, [r3, #0]
    instance_data[instance].wait4ack = 0;
 800ae32:	4a18      	ldr	r2, [pc, #96]	; (800ae94 <instance_init+0x1cc>)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f243 6170 	movw	r1, #13936	; 0x3670
 800ae3a:	fb01 f303 	mul.w	r3, r1, r3
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800ae44:	3318      	adds	r3, #24
 800ae46:	2200      	movs	r2, #0
 800ae48:	701a      	strb	r2, [r3, #0]

    instance_clearevents();
 800ae4a:	f001 fded 	bl	800ca28 <instance_clearevents>

    dwt_geteui(instance_data[instance].eui64);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f243 6270 	movw	r2, #13936	; 0x3670
 800ae54:	fb02 f303 	mul.w	r3, r2, r3
 800ae58:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800ae5c:	3310      	adds	r3, #16
 800ae5e:	4a0d      	ldr	r2, [pc, #52]	; (800ae94 <instance_init+0x1cc>)
 800ae60:	4413      	add	r3, r2
 800ae62:	3307      	adds	r3, #7
 800ae64:	4618      	mov	r0, r3
 800ae66:	f006 f901 	bl	801106c <dwt_geteui>

    instance_data[instance].clockOffset = 0;
 800ae6a:	4a0a      	ldr	r2, [pc, #40]	; (800ae94 <instance_init+0x1cc>)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	f243 6170 	movw	r1, #13936	; 0x3670
 800ae72:	fb01 f303 	mul.w	r3, r1, r3
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 800ae7c:	3310      	adds	r3, #16
 800ae7e:	f04f 0000 	mov.w	r0, #0
 800ae82:	f04f 0100 	mov.w	r1, #0
 800ae86:	e9c3 0100 	strd	r0, r1, [r3]
 //   if(port_is_switch_on(TA_SW1_4) == S1_SWITCH_ON)
	//{
	//	instance_data[instance].lcdEnabled = TRUE;
	//}

    return 0 ;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20000348 	.word	0x20000348

0800ae98 <instancereaddeviceid>:
// -------------------------------------------------------------------------------------------------------------------
//
// Return the Device ID register value, enables higher level validation of physical device presence
//
uint32 instancereaddeviceid(void)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
    return dwt_readdevid() ;
 800ae9c:	f005 fc94 	bl	80107c8 <dwt_readdevid>
 800aea0:	4603      	mov	r3, r0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <instance_config>:
// -------------------------------------------------------------------------------------------------------------------
//
// function to allow application configuration be passed into instance and affect underlying device opetation
//
void instance_config(instanceConfig_t *config)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b092      	sub	sp, #72	; 0x48
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
    int instance = 0 ;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	643b      	str	r3, [r7, #64]	; 0x40
    uint32 power = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	647b      	str	r3, [r7, #68]	; 0x44

    instance_data[instance].txAntennaDelay = 0;
 800aeb8:	4ac1      	ldr	r2, [pc, #772]	; (800b1c0 <instance_config+0x318>)
 800aeba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aebc:	f243 6170 	movw	r1, #13936	; 0x3670
 800aec0:	fb01 f303 	mul.w	r3, r1, r3
 800aec4:	4413      	add	r3, r2
 800aec6:	3318      	adds	r3, #24
 800aec8:	2200      	movs	r2, #0
 800aeca:	801a      	strh	r2, [r3, #0]
    instance_data[instance].rxAntennaDelay = 0;
 800aecc:	4abc      	ldr	r2, [pc, #752]	; (800b1c0 <instance_config+0x318>)
 800aece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed0:	f243 6170 	movw	r1, #13936	; 0x3670
 800aed4:	fb01 f303 	mul.w	r3, r1, r3
 800aed8:	4413      	add	r3, r2
 800aeda:	331a      	adds	r3, #26
 800aedc:	2200      	movs	r2, #0
 800aede:	801a      	strh	r2, [r3, #0]

    instance_data[instance].configData.chan = config->channelNumber ;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7818      	ldrb	r0, [r3, #0]
 800aee4:	4ab6      	ldr	r2, [pc, #728]	; (800b1c0 <instance_config+0x318>)
 800aee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee8:	f243 6170 	movw	r1, #13936	; 0x3670
 800aeec:	fb01 f303 	mul.w	r3, r1, r3
 800aef0:	4413      	add	r3, r2
 800aef2:	3304      	adds	r3, #4
 800aef4:	4602      	mov	r2, r0
 800aef6:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.rxCode =  config->preambleCode ;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	7858      	ldrb	r0, [r3, #1]
 800aefc:	4ab0      	ldr	r2, [pc, #704]	; (800b1c0 <instance_config+0x318>)
 800aefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af00:	f243 6170 	movw	r1, #13936	; 0x3670
 800af04:	fb01 f303 	mul.w	r3, r1, r3
 800af08:	4413      	add	r3, r2
 800af0a:	3309      	adds	r3, #9
 800af0c:	4602      	mov	r2, r0
 800af0e:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.txCode = config->preambleCode ;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	7858      	ldrb	r0, [r3, #1]
 800af14:	4aaa      	ldr	r2, [pc, #680]	; (800b1c0 <instance_config+0x318>)
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	f243 6170 	movw	r1, #13936	; 0x3670
 800af1c:	fb01 f303 	mul.w	r3, r1, r3
 800af20:	4413      	add	r3, r2
 800af22:	3308      	adds	r3, #8
 800af24:	4602      	mov	r2, r0
 800af26:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.prf = config->pulseRepFreq ;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	7898      	ldrb	r0, [r3, #2]
 800af2c:	4aa4      	ldr	r2, [pc, #656]	; (800b1c0 <instance_config+0x318>)
 800af2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af30:	f243 6170 	movw	r1, #13936	; 0x3670
 800af34:	fb01 f303 	mul.w	r3, r1, r3
 800af38:	4413      	add	r3, r2
 800af3a:	3305      	adds	r3, #5
 800af3c:	4602      	mov	r2, r0
 800af3e:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.dataRate = config->dataRate ;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	78d8      	ldrb	r0, [r3, #3]
 800af44:	4a9e      	ldr	r2, [pc, #632]	; (800b1c0 <instance_config+0x318>)
 800af46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af48:	f243 6170 	movw	r1, #13936	; 0x3670
 800af4c:	fb01 f303 	mul.w	r3, r1, r3
 800af50:	4413      	add	r3, r2
 800af52:	330b      	adds	r3, #11
 800af54:	4602      	mov	r2, r0
 800af56:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.txPreambLength = config->preambleLen ;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7918      	ldrb	r0, [r3, #4]
 800af5c:	4a98      	ldr	r2, [pc, #608]	; (800b1c0 <instance_config+0x318>)
 800af5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af60:	f243 6170 	movw	r1, #13936	; 0x3670
 800af64:	fb01 f303 	mul.w	r3, r1, r3
 800af68:	4413      	add	r3, r2
 800af6a:	3306      	adds	r3, #6
 800af6c:	4602      	mov	r2, r0
 800af6e:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.rxPAC = config->pacSize ;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	7958      	ldrb	r0, [r3, #5]
 800af74:	4a92      	ldr	r2, [pc, #584]	; (800b1c0 <instance_config+0x318>)
 800af76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af78:	f243 6170 	movw	r1, #13936	; 0x3670
 800af7c:	fb01 f303 	mul.w	r3, r1, r3
 800af80:	4413      	add	r3, r2
 800af82:	3307      	adds	r3, #7
 800af84:	4602      	mov	r2, r0
 800af86:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.nsSFD = config->nsSFD ;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	7998      	ldrb	r0, [r3, #6]
 800af8c:	4a8c      	ldr	r2, [pc, #560]	; (800b1c0 <instance_config+0x318>)
 800af8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af90:	f243 6170 	movw	r1, #13936	; 0x3670
 800af94:	fb01 f303 	mul.w	r3, r1, r3
 800af98:	4413      	add	r3, r2
 800af9a:	330a      	adds	r3, #10
 800af9c:	4602      	mov	r2, r0
 800af9e:	701a      	strb	r2, [r3, #0]
    instance_data[instance].configData.phrMode = DWT_PHRMODE_EXT ;
 800afa0:	4a87      	ldr	r2, [pc, #540]	; (800b1c0 <instance_config+0x318>)
 800afa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa4:	f243 6170 	movw	r1, #13936	; 0x3670
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	4413      	add	r3, r2
 800afae:	330c      	adds	r3, #12
 800afb0:	2203      	movs	r2, #3
 800afb2:	701a      	strb	r2, [r3, #0]
	instance_data[instance].configData.sfdTO = config->sfdTO;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	8918      	ldrh	r0, [r3, #8]
 800afb8:	4a81      	ldr	r2, [pc, #516]	; (800b1c0 <instance_config+0x318>)
 800afba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbc:	f243 6170 	movw	r1, #13936	; 0x3670
 800afc0:	fb01 f303 	mul.w	r3, r1, r3
 800afc4:	4413      	add	r3, r2
 800afc6:	330e      	adds	r3, #14
 800afc8:	4602      	mov	r2, r0
 800afca:	801a      	strh	r2, [r3, #0]

    //configure the channel parameters
    dwt_configure(&instance_data[instance].configData) ;
 800afcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afce:	f243 6270 	movw	r2, #13936	; 0x3670
 800afd2:	fb02 f303 	mul.w	r3, r2, r3
 800afd6:	4a7a      	ldr	r2, [pc, #488]	; (800b1c0 <instance_config+0x318>)
 800afd8:	4413      	add	r3, r2
 800afda:	3304      	adds	r3, #4
 800afdc:	4618      	mov	r0, r3
 800afde:	f005 fc13 	bl	8010808 <dwt_configure>

    //check if to use the antenna delay calibration values as read from the OTP
    if(dwt_otprevision() <= 1) //in revision 0, 1 of EVB1000/EVK1000
 800afe2:	f005 fbad 	bl	8010740 <dwt_otprevision>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d852      	bhi.n	800b092 <instance_config+0x1ea>
    {
    	uint32 antennaDelay;
    	uint32 otpPower[12];

    	//MUST change the SPI to < 3MHz as the dwt_otpread will change to XTAL clock
    	port_set_dw1000_slowrate(); //reduce SPI to < 3MHz
 800afec:	f007 fa66 	bl	80124bc <port_set_dw1000_slowrate>

    	dwt_otpread(ANTDLY_ADDRESS, &antennaDelay, 1);
 800aff0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aff4:	2201      	movs	r2, #1
 800aff6:	4619      	mov	r1, r3
 800aff8:	201c      	movs	r0, #28
 800affa:	f006 f845 	bl	8011088 <dwt_otpread>

    	instance_data[instance].txAntennaDelay = ((antennaDelay >> (16*(config->pulseRepFreq - DWT_PRF_16M))) & 0xFFFF) >> 1;
 800affe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	789b      	ldrb	r3, [r3, #2]
 800b004:	3b01      	subs	r3, #1
 800b006:	011b      	lsls	r3, r3, #4
 800b008:	fa22 f303 	lsr.w	r3, r2, r3
 800b00c:	085b      	lsrs	r3, r3, #1
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b014:	b298      	uxth	r0, r3
 800b016:	4a6a      	ldr	r2, [pc, #424]	; (800b1c0 <instance_config+0x318>)
 800b018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01a:	f243 6170 	movw	r1, #13936	; 0x3670
 800b01e:	fb01 f303 	mul.w	r3, r1, r3
 800b022:	4413      	add	r3, r2
 800b024:	3318      	adds	r3, #24
 800b026:	4602      	mov	r2, r0
 800b028:	801a      	strh	r2, [r3, #0]
    	instance_data[instance].rxAntennaDelay = instance_data[instance].txAntennaDelay ;
 800b02a:	4a65      	ldr	r2, [pc, #404]	; (800b1c0 <instance_config+0x318>)
 800b02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02e:	f243 6170 	movw	r1, #13936	; 0x3670
 800b032:	fb01 f303 	mul.w	r3, r1, r3
 800b036:	4413      	add	r3, r2
 800b038:	3318      	adds	r3, #24
 800b03a:	8818      	ldrh	r0, [r3, #0]
 800b03c:	4a60      	ldr	r2, [pc, #384]	; (800b1c0 <instance_config+0x318>)
 800b03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b040:	f243 6170 	movw	r1, #13936	; 0x3670
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	4413      	add	r3, r2
 800b04a:	331a      	adds	r3, #26
 800b04c:	4602      	mov	r2, r0
 800b04e:	801a      	strh	r2, [r3, #0]

    	//read any data from the OTP for the TX power
    	dwt_otpread(TXCFG_ADDRESS, otpPower, 12);
 800b050:	f107 030c 	add.w	r3, r7, #12
 800b054:	220c      	movs	r2, #12
 800b056:	4619      	mov	r1, r3
 800b058:	2010      	movs	r0, #16
 800b05a:	f006 f815 	bl	8011088 <dwt_otpread>

    	port_set_dw1000_fastrate(); //increase SPI to max
 800b05e:	f007 fa34 	bl	80124ca <port_set_dw1000_fastrate>

        power = otpPower[(config->pulseRepFreq - DWT_PRF_16M) + (chan_idx[instance_data[instance].configData.chan] * 2)];
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	789b      	ldrb	r3, [r3, #2]
 800b066:	1e5a      	subs	r2, r3, #1
 800b068:	4955      	ldr	r1, [pc, #340]	; (800b1c0 <instance_config+0x318>)
 800b06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06c:	f243 6070 	movw	r0, #13936	; 0x3670
 800b070:	fb00 f303 	mul.w	r3, r0, r3
 800b074:	440b      	add	r3, r1
 800b076:	3304      	adds	r3, #4
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4b51      	ldr	r3, [pc, #324]	; (800b1c4 <instance_config+0x31c>)
 800b07e:	5c5b      	ldrb	r3, [r3, r1]
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b08a:	4413      	add	r3, r2
 800b08c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b090:	647b      	str	r3, [r7, #68]	; 0x44
    }

    instance_data[instance].defaultAntennaDelay = rfDelays[config->pulseRepFreq - DWT_PRF_16M];
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	789b      	ldrb	r3, [r3, #2]
 800b096:	3b01      	subs	r3, #1
 800b098:	4a4b      	ldr	r2, [pc, #300]	; (800b1c8 <instance_config+0x320>)
 800b09a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800b09e:	4a48      	ldr	r2, [pc, #288]	; (800b1c0 <instance_config+0x318>)
 800b0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a2:	f243 6170 	movw	r1, #13936	; 0x3670
 800b0a6:	fb01 f303 	mul.w	r3, r1, r3
 800b0aa:	4413      	add	r3, r2
 800b0ac:	331c      	adds	r3, #28
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	801a      	strh	r2, [r3, #0]

#if (SET_TXRX_DELAY == 0)
    // if nothing was actually programmed then set a reasonable value anyway
    if(instance_data[instance].txAntennaDelay == 0)//otherwise a default values should be used
 800b0b2:	4a43      	ldr	r2, [pc, #268]	; (800b1c0 <instance_config+0x318>)
 800b0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b6:	f243 6170 	movw	r1, #13936	; 0x3670
 800b0ba:	fb01 f303 	mul.w	r3, r1, r3
 800b0be:	4413      	add	r3, r2
 800b0c0:	3318      	adds	r3, #24
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d125      	bne.n	800b114 <instance_config+0x26c>
    {
    	instance_data[instance].rxAntennaDelay = instance_data[instance].txAntennaDelay = instance_data[instance].defaultAntennaDelay;
 800b0c8:	4a3d      	ldr	r2, [pc, #244]	; (800b1c0 <instance_config+0x318>)
 800b0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0cc:	f243 6170 	movw	r1, #13936	; 0x3670
 800b0d0:	fb01 f303 	mul.w	r3, r1, r3
 800b0d4:	4413      	add	r3, r2
 800b0d6:	331c      	adds	r3, #28
 800b0d8:	8818      	ldrh	r0, [r3, #0]
 800b0da:	4a39      	ldr	r2, [pc, #228]	; (800b1c0 <instance_config+0x318>)
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0de:	f243 6170 	movw	r1, #13936	; 0x3670
 800b0e2:	fb01 f303 	mul.w	r3, r1, r3
 800b0e6:	4413      	add	r3, r2
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	801a      	strh	r2, [r3, #0]
 800b0ee:	4a34      	ldr	r2, [pc, #208]	; (800b1c0 <instance_config+0x318>)
 800b0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f2:	f243 6170 	movw	r1, #13936	; 0x3670
 800b0f6:	fb01 f303 	mul.w	r3, r1, r3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	3318      	adds	r3, #24
 800b0fe:	8818      	ldrh	r0, [r3, #0]
 800b100:	4a2f      	ldr	r2, [pc, #188]	; (800b1c0 <instance_config+0x318>)
 800b102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b104:	f243 6170 	movw	r1, #13936	; 0x3670
 800b108:	fb01 f303 	mul.w	r3, r1, r3
 800b10c:	4413      	add	r3, r2
 800b10e:	331a      	adds	r3, #26
 800b110:	4602      	mov	r2, r0
 800b112:	801a      	strh	r2, [r3, #0]



    // -------------------------------------------------------------------------------------------------------------------
    // set the antenna delay, we assume that the RX is the same as TX.
    dwt_setrxantennadelay(instance_data[instance].rxAntennaDelay);
 800b114:	4a2a      	ldr	r2, [pc, #168]	; (800b1c0 <instance_config+0x318>)
 800b116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b118:	f243 6170 	movw	r1, #13936	; 0x3670
 800b11c:	fb01 f303 	mul.w	r3, r1, r3
 800b120:	4413      	add	r3, r2
 800b122:	331a      	adds	r3, #26
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f005 fccc 	bl	8010ac4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(instance_data[instance].txAntennaDelay);
 800b12c:	4a24      	ldr	r2, [pc, #144]	; (800b1c0 <instance_config+0x318>)
 800b12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b130:	f243 6170 	movw	r1, #13936	; 0x3670
 800b134:	fb01 f303 	mul.w	r3, r1, r3
 800b138:	4413      	add	r3, r2
 800b13a:	3318      	adds	r3, #24
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f005 fcd0 	bl	8010ae4 <dwt_settxantennadelay>

    if((power == 0x0) || (power == 0xFFFFFFFF)) //if there are no calibrated values... need to use defaults
 800b144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <instance_config+0x2aa>
 800b14a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b150:	d10e      	bne.n	800b170 <instance_config+0x2c8>
    {
        power = txSpectrumConfig[config->channelNumber].txPwr[config->pulseRepFreq- DWT_PRF_16M];
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	789b      	ldrb	r3, [r3, #2]
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	491b      	ldr	r1, [pc, #108]	; (800b1cc <instance_config+0x324>)
 800b160:	4603      	mov	r3, r0
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	4403      	add	r3, r0
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	440b      	add	r3, r1
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	647b      	str	r3, [r7, #68]	; 0x44
    }

    instance_data[instance].configTX.power = power;
 800b170:	4a13      	ldr	r2, [pc, #76]	; (800b1c0 <instance_config+0x318>)
 800b172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b174:	f243 6170 	movw	r1, #13936	; 0x3670
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	3314      	adds	r3, #20
 800b180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b182:	601a      	str	r2, [r3, #0]
    instance_data[instance].configTX.PGdly = txSpectrumConfig[config->channelNumber].PGdelay ;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	4619      	mov	r1, r3
 800b18a:	4a10      	ldr	r2, [pc, #64]	; (800b1cc <instance_config+0x324>)
 800b18c:	460b      	mov	r3, r1
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	440b      	add	r3, r1
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	7818      	ldrb	r0, [r3, #0]
 800b198:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <instance_config+0x318>)
 800b19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19c:	f243 6170 	movw	r1, #13936	; 0x3670
 800b1a0:	fb01 f303 	mul.w	r3, r1, r3
 800b1a4:	4413      	add	r3, r2
 800b1a6:	3310      	adds	r3, #16
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	701a      	strb	r2, [r3, #0]

    //configure the tx spectrum parameters (power and PG delay)
    dwt_configuretxrf(&instance_data[instance].configTX);
 800b1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ae:	f243 6270 	movw	r2, #13936	; 0x3670
 800b1b2:	fb02 f303 	mul.w	r3, r2, r3
 800b1b6:	3310      	adds	r3, #16
 800b1b8:	4a01      	ldr	r2, [pc, #4]	; (800b1c0 <instance_config+0x318>)
 800b1ba:	4413      	add	r3, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	e007      	b.n	800b1d0 <instance_config+0x328>
 800b1c0:	20000348 	.word	0x20000348
 800b1c4:	08017cb0 	.word	0x08017cb0
 800b1c8:	08017ca8 	.word	0x08017ca8
 800b1cc:	08017c48 	.word	0x08017c48
 800b1d0:	f005 fb03 	bl	80107da <dwt_configuretxrf>

    instance_data[instance].antennaDelayChanged = 0;
 800b1d4:	4a0c      	ldr	r2, [pc, #48]	; (800b208 <instance_config+0x360>)
 800b1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d8:	f243 6170 	movw	r1, #13936	; 0x3670
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	4413      	add	r3, r2
 800b1e2:	331e      	adds	r3, #30
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	701a      	strb	r2, [r3, #0]

    if(config->preambleLen == DWT_PLEN_64) //if preamble length is 64
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	791b      	ldrb	r3, [r3, #4]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d106      	bne.n	800b1fe <instance_config+0x356>
	{
    	port_set_dw1000_slowrate(); //reduce SPI to < 3MHz
 800b1f0:	f007 f964 	bl	80124bc <port_set_dw1000_slowrate>

		dwt_loadopsettabfromotp(0);
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	f005 ffce 	bl	8011196 <dwt_loadopsettabfromotp>

		port_set_dw1000_slowrate(); //increase SPI to max
 800b1fa:	f007 f95f 	bl	80124bc <port_set_dw1000_slowrate>
    }
}
 800b1fe:	bf00      	nop
 800b200:	3748      	adds	r7, #72	; 0x48
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000348 	.word	0x20000348

0800b20c <instance_get_idist>:


double instance_get_idist(uint8 uwb_index) //get instantaneous range corrected by distance
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
    double x = instance_data[0].idistance[uwb_index];
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <instance_get_idist+0x30>)
 800b21a:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	4413      	add	r3, r2
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return (x);
 800b22a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800b22e:	4610      	mov	r0, r2
 800b230:	4619      	mov	r1, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	20000348 	.word	0x20000348

0800b240 <instance_get_idistrsl>:

double instance_get_idistrsl(uint8 uwb_index) //get instantaneous range corrected by rsl
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	71fb      	strb	r3, [r7, #7]
    double x = instance_data[0].idistancersl[uwb_index];
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	4a08      	ldr	r2, [pc, #32]	; (800b270 <instance_get_idistrsl+0x30>)
 800b24e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	4413      	add	r3, r2
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return (x);
 800b25e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800b262:	4610      	mov	r0, r2
 800b264:	4619      	mov	r1, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	bc80      	pop	{r7}
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000348 	.word	0x20000348

0800b274 <instance_get_idistraw>:

double instance_get_idistraw(uint8 uwb_index) //get instantaneous range
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	71fb      	strb	r3, [r7, #7]
    double x = instance_data[0].idistanceraw[uwb_index];
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	4a08      	ldr	r2, [pc, #32]	; (800b2a4 <instance_get_idistraw+0x30>)
 800b282:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	4413      	add	r3, r2
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return (x);
 800b292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800b296:	4610      	mov	r0, r2
 800b298:	4619      	mov	r1, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bc80      	pop	{r7}
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	20000348 	.word	0x20000348

0800b2a8 <instance_get_irsl>:

double instance_get_irsl(uint8 uwb_index) //get instantaneous rsl
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	71fb      	strb	r3, [r7, #7]
    double x = instance_data[0].iRSL[uwb_index];
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	4a08      	ldr	r2, [pc, #32]	; (800b2d8 <instance_get_irsl+0x30>)
 800b2b6:	f203 2392 	addw	r3, r3, #658	; 0x292
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	4413      	add	r3, r2
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return (x);
 800b2c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bc80      	pop	{r7}
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	20000348 	.word	0x20000348

0800b2dc <inst_processtxrxtimeout>:

    return (x);
}

void inst_processtxrxtimeout(instance_data_t *inst)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
	if(inst->mode == DISCOVERY)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d12f      	bne.n	800b34c <inst_processtxrxtimeout+0x70>
	{
		inst->wait4ack = 0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800b2f2:	3318      	adds	r3, #24
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
		inst->uwbToRangeWith = 255;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800b2fe:	22ff      	movs	r2, #255	; 0xff
 800b300:	701a      	strb	r2, [r3, #0]

		if(tdma_handler.discovery_mode == WAIT_RNG_INIT || tdma_handler.discovery_mode == WAIT_INF_INIT)
 800b302:	4b27      	ldr	r3, [pc, #156]	; (800b3a0 <inst_processtxrxtimeout+0xc4>)
 800b304:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d004      	beq.n	800b316 <inst_processtxrxtimeout+0x3a>
 800b30c:	4b24      	ldr	r3, [pc, #144]	; (800b3a0 <inst_processtxrxtimeout+0xc4>)
 800b30e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800b312:	2b02      	cmp	r3, #2
 800b314:	d10a      	bne.n	800b32c <inst_processtxrxtimeout+0x50>
		{
			uint32 time_now = portGetTickCnt();
 800b316:	f006 fcdb 	bl	8011cd0 <portGetTickCnt>
 800b31a:	4603      	mov	r3, r0
 800b31c:	60fb      	str	r3, [r7, #12]
			tdma_handler.set_discovery_mode(&tdma_handler, WAIT_INF_REG, time_now);
 800b31e:	4b20      	ldr	r3, [pc, #128]	; (800b3a0 <inst_processtxrxtimeout+0xc4>)
 800b320:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	2100      	movs	r1, #0
 800b328:	481d      	ldr	r0, [pc, #116]	; (800b3a0 <inst_processtxrxtimeout+0xc4>)
 800b32a:	4798      	blx	r3
		}

		if(tdma_handler.check_blink(&tdma_handler) == TRUE)
 800b32c:	4b1c      	ldr	r3, [pc, #112]	; (800b3a0 <inst_processtxrxtimeout+0xc4>)
 800b32e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b332:	481b      	ldr	r0, [pc, #108]	; (800b3a0 <inst_processtxrxtimeout+0xc4>)
 800b334:	4798      	blx	r3
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <inst_processtxrxtimeout+0x68>
		{
			inst->testAppState = TA_TX_SELECT;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	220a      	movs	r2, #10
 800b340:	705a      	strb	r2, [r3, #1]
 800b342:	e019      	b.n	800b378 <inst_processtxrxtimeout+0x9c>
		}
		else
		{
			inst->testAppState = TA_RXE_WAIT;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2206      	movs	r2, #6
 800b348:	705a      	strb	r2, [r3, #1]
 800b34a:	e015      	b.n	800b378 <inst_processtxrxtimeout+0x9c>
		}
	}
	else if(inst->mode == ANCHOR) //we did not receive the final/ACK - wait for next poll
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d10e      	bne.n	800b372 <inst_processtxrxtimeout+0x96>
    {
    	inst->wait4ack = 0;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800b35a:	3318      	adds	r3, #24
 800b35c:	2200      	movs	r2, #0
 800b35e:	701a      	strb	r2, [r3, #0]
    	inst->uwbToRangeWith = 255;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800b366:	22ff      	movs	r2, #255	; 0xff
 800b368:	701a      	strb	r2, [r3, #0]
		inst->testAppState = TA_RXE_WAIT ;              // wait for next frame
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2206      	movs	r2, #6
 800b36e:	705a      	strb	r2, [r3, #1]
 800b370:	e002      	b.n	800b378 <inst_processtxrxtimeout+0x9c>
    }
	else //if(inst->mode == TAG)
    {
		inst->testAppState = TA_TX_SELECT ;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	220a      	movs	r2, #10
 800b376:	705a      	strb	r2, [r3, #1]
    }

	inst->canPrintUSB = TRUE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	inst->canPrintLCD = TRUE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    inst->previousState = TA_INIT;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	70da      	strb	r2, [r3, #3]
    dwt_setrxtimeout(0);	//units are 1.0256us
 800b38e:	2000      	movs	r0, #0
 800b390:	f006 fa0a 	bl	80117a8 <dwt_setrxtimeout>
    //timeout - disable the radio (if using SW timeout the rx will not be off)
    dwt_forcetrxoff() ;
 800b394:	f006 f97c 	bl	8011690 <dwt_forcetrxoff>
}
 800b398:	bf00      	nop
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	200039b8 	.word	0x200039b8

0800b3a4 <instance_irqstuckcallback>:

void instance_irqstuckcallback()
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af02      	add	r7, sp, #8
				| port_is_switch_on(TA_SW1_6) << 5
				| port_is_switch_on(TA_SW1_7) << 6
				| port_is_switch_on(TA_SW1_8) << 7;*/


	instance_data_t* inst = instance_get_local_structure_ptr(0);
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	f7fe f846 	bl	800943c <instance_get_local_structure_ptr>
 800b3b0:	6078      	str	r0, [r7, #4]

	port_DisableEXT_IRQ(); //disable IRQ until we configure the device
 800b3b2:	f007 f8dd 	bl	8012570 <port_DisableEXT_IRQ>
	port_set_dw1000_slowrate();  //max SPI before PLLs configured is ~4M
 800b3b6:	f007 f881 	bl	80124bc <port_set_dw1000_slowrate>

	dwt_softreset();
 800b3ba:	f006 fa7b 	bl	80118b4 <dwt_softreset>

	//reset the DW1000 by driving the RSTn line low
	reset_DW1000();
 800b3be:	f006 ff9f 	bl	8012300 <reset_DW1000>

	//we can enable any configuration loading from OTP/ROM
	dwt_initialise(DWT_LOADUCODE);
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	f005 f916 	bl	80105f4 <dwt_initialise>

	dwt_setleds(3) ; //configure the GPIOs which control the leds on EVBs
 800b3c8:	2003      	movs	r0, #3
 800b3ca:	f005 fff9 	bl	80113c0 <dwt_setleds>

	//enable TX, RX states on GPIOs 6 and 5
	dwt_setlnapamode(1,1);
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	f005 f9bf 	bl	8010754 <dwt_setlnapamode>

	port_set_dw1000_fastrate();
 800b3d6:	f007 f878 	bl	80124ca <port_set_dw1000_fastrate>

	dwt_setinterrupt(SYS_MASK_VAL, 1);
 800b3da:	2101      	movs	r1, #1
 800b3dc:	4809      	ldr	r0, [pc, #36]	; (800b404 <instance_irqstuckcallback+0x60>)
 800b3de:	f006 fa1f 	bl	8011820 <dwt_setinterrupt>
	dwt_setcallbacks(instance_txcallback, instance_rxgoodcallback, instance_rxtimeoutcallback, instance_rxerrorcallback, instance_irqstuckcallback);
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <instance_irqstuckcallback+0x64>)
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	4b09      	ldr	r3, [pc, #36]	; (800b40c <instance_irqstuckcallback+0x68>)
 800b3e8:	4a09      	ldr	r2, [pc, #36]	; (800b410 <instance_irqstuckcallback+0x6c>)
 800b3ea:	490a      	ldr	r1, [pc, #40]	; (800b414 <instance_irqstuckcallback+0x70>)
 800b3ec:	480a      	ldr	r0, [pc, #40]	; (800b418 <instance_irqstuckcallback+0x74>)
 800b3ee:	f005 fef1 	bl	80111d4 <dwt_setcallbacks>
	// change for PC application
	//int dr_mode = decarangingmode(s1switch);

	// change for PC application
	//instance_config(&inst->chConfig[dr_mode]) ;    // Set operating channel etc
	port_EnableEXT_IRQ(); //enable IRQ before starting
 800b3f2:	f007 f8c4 	bl	801257e <port_EnableEXT_IRQ>

	inst_processtxrxtimeout(inst);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff ff70 	bl	800b2dc <inst_processtxrxtimeout>
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	2403d080 	.word	0x2403d080
 800b408:	0800b3a5 	.word	0x0800b3a5
 800b40c:	0800b62d 	.word	0x0800b62d
 800b410:	0800b5b9 	.word	0x0800b5b9
 800b414:	0800b749 	.word	0x0800b749
 800b418:	0800b41d 	.word	0x0800b41d

0800b41c <instance_txcallback>:


void instance_txcallback(const dwt_cb_data_t *txd)
{
 800b41c:	b5b0      	push	{r4, r5, r7, lr}
 800b41e:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 800b422:	f44f 6781 	mov.w	r7, #1032	; 0x408
 800b426:	446f      	add	r7, sp
 800b428:	1d3b      	adds	r3, r7, #4
 800b42a:	6018      	str	r0, [r3, #0]

	uint8 txTimeStamp[5] = {0, 0, 0, 0, 0};
 800b42c:	4a5f      	ldr	r2, [pc, #380]	; (800b5ac <instance_txcallback+0x190>)
 800b42e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b432:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b436:	6018      	str	r0, [r3, #0]
 800b438:	3304      	adds	r3, #4
 800b43a:	7019      	strb	r1, [r3, #0]
	event_data_t dw_event;

	//NOTE: we can only get TX good (done) while here
	dwt_readtxtimestamp(txTimeStamp) ;
 800b43c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b440:	4618      	mov	r0, r3
 800b442:	f005 fbe0 	bl	8010c06 <dwt_readtxtimestamp>
	dw_event.timeStamp32l = (uint32)txTimeStamp[0] + ((uint32)txTimeStamp[1] << 8) + ((uint32)txTimeStamp[2] << 16) + ((uint32)txTimeStamp[3] << 24);
 800b446:	f897 3420 	ldrb.w	r3, [r7, #1056]	; 0x420
 800b44a:	461a      	mov	r2, r3
 800b44c:	f897 3421 	ldrb.w	r3, [r7, #1057]	; 0x421
 800b450:	021b      	lsls	r3, r3, #8
 800b452:	441a      	add	r2, r3
 800b454:	f897 3422 	ldrb.w	r3, [r7, #1058]	; 0x422
 800b458:	041b      	lsls	r3, r3, #16
 800b45a:	441a      	add	r2, r3
 800b45c:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 800b460:	061b      	lsls	r3, r3, #24
 800b462:	441a      	add	r2, r3
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	611a      	str	r2, [r3, #16]
	dw_event.timeStamp = txTimeStamp[4];
 800b46a:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	f04f 0300 	mov.w	r3, #0
 800b474:	f107 0108 	add.w	r1, r7, #8
 800b478:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dw_event.timeStamp <<= 32;
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b484:	f04f 0200 	mov.w	r2, #0
 800b488:	f04f 0300 	mov.w	r3, #0
 800b48c:	0003      	movs	r3, r0
 800b48e:	2200      	movs	r2, #0
 800b490:	f107 0108 	add.w	r1, r7, #8
 800b494:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dw_event.timeStamp += dw_event.timeStamp32l;
 800b498:	f107 0308 	add.w	r3, r7, #8
 800b49c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b4a0:	f107 0308 	add.w	r3, r7, #8
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f04f 0300 	mov.w	r3, #0
 800b4ac:	1884      	adds	r4, r0, r2
 800b4ae:	eb41 0503 	adc.w	r5, r1, r3
 800b4b2:	f107 0308 	add.w	r3, r7, #8
 800b4b6:	e9c3 4502 	strd	r4, r5, [r3, #8]
	dw_event.timeStamp32h = ((uint32)txTimeStamp[4] << 24) + (dw_event.timeStamp32l >> 8);
 800b4ba:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
 800b4be:	061a      	lsls	r2, r3, #24
 800b4c0:	f107 0308 	add.w	r3, r7, #8
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	0a1b      	lsrs	r3, r3, #8
 800b4c8:	441a      	add	r2, r3
 800b4ca:	f107 0308 	add.w	r3, r7, #8
 800b4ce:	615a      	str	r2, [r3, #20]

	dw_event.rxLength = 0;
 800b4d0:	f107 0308 	add.w	r3, r7, #8
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	809a      	strh	r2, [r3, #4]
	dw_event.typeSave = dw_event.type = DWT_SIG_TX_DONE ;
 800b4d8:	f107 0308 	add.w	r3, r7, #8
 800b4dc:	2201      	movs	r2, #1
 800b4de:	701a      	strb	r2, [r3, #0]
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	781a      	ldrb	r2, [r3, #0]
 800b4e6:	f107 0308 	add.w	r3, r7, #8
 800b4ea:	705a      	strb	r2, [r3, #1]


	//NOTE: to avoid timestamping issues reported in the forums, we aren't using the DW1000 RX auto re-enable function.
	//Rather, we turn it back on here after every TX. However, logic in TA_RXE_WAIT needs wait4ack to be set
	//to function correctly. We don't want it to try to start RX during reception.
	dwt_forcetrxoff();
 800b4ec:	f006 f8d0 	bl	8011690 <dwt_forcetrxoff>
	dwt_rxreset();
 800b4f0:	f006 f9d2 	bl	8011898 <dwt_rxreset>
	instance_data[0].wait4ack = DWT_RESPONSE_EXPECTED;
 800b4f4:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <instance_txcallback+0x194>)
 800b4f6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800b4fa:	3318      	adds	r3, #24
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	701a      	strb	r2, [r3, #0]
	instancerxon(&instance_data[0], 0, 0) ; // turn RX on, without delay
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	f04f 0300 	mov.w	r3, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	4829      	ldr	r0, [pc, #164]	; (800b5b0 <instance_txcallback+0x194>)
 800b50c:	f7fb f8d2 	bl	80066b4 <instancerxon>


	if(instance_data[0].tx_poll == TRUE)
 800b510:	4b27      	ldr	r3, [pc, #156]	; (800b5b0 <instance_txcallback+0x194>)
 800b512:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800b516:	3304      	adds	r3, #4
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00e      	beq.n	800b53c <instance_txcallback+0x120>
	{
		instance_data[0].tx_poll = FALSE;
 800b51e:	4b24      	ldr	r3, [pc, #144]	; (800b5b0 <instance_txcallback+0x194>)
 800b520:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800b524:	3304      	adds	r3, #4
 800b526:	2200      	movs	r2, #0
 800b528:	701a      	strb	r2, [r3, #0]

		// Write Poll TX time field of Final message
		memcpy(&(instance_data[0].msg.messageData[PTXT]), (uint8 *)&dw_event.timeStamp, 5);
 800b52a:	f107 0308 	add.w	r3, r7, #8
 800b52e:	3308      	adds	r3, #8
 800b530:	2205      	movs	r2, #5
 800b532:	4619      	mov	r1, r3
 800b534:	481f      	ldr	r0, [pc, #124]	; (800b5b4 <instance_txcallback+0x198>)
 800b536:	f007 fd7f 	bl	8013038 <memcpy>
 800b53a:	e024      	b.n	800b586 <instance_txcallback+0x16a>
	}
	else if(instance_data[0].tx_anch_resp == TRUE)
 800b53c:	4b1c      	ldr	r3, [pc, #112]	; (800b5b0 <instance_txcallback+0x194>)
 800b53e:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800b542:	3305      	adds	r3, #5
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d010      	beq.n	800b56c <instance_txcallback+0x150>
	{
		instance_data[0].tx_anch_resp = FALSE;
 800b54a:	4b19      	ldr	r3, [pc, #100]	; (800b5b0 <instance_txcallback+0x194>)
 800b54c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800b550:	3305      	adds	r3, #5
 800b552:	2200      	movs	r2, #0
 800b554:	701a      	strb	r2, [r3, #0]
		instance_data[0].anchorRespTxTime = dw_event.timeStamp;
 800b556:	f107 0308 	add.w	r3, r7, #8
 800b55a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b55e:	4b14      	ldr	r3, [pc, #80]	; (800b5b0 <instance_txcallback+0x194>)
 800b560:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800b564:	3318      	adds	r3, #24
 800b566:	e9c3 0100 	strd	r0, r1, [r3]
 800b56a:	e00c      	b.n	800b586 <instance_txcallback+0x16a>
	}
	else if(instance_data[0].tx_final == TRUE)
 800b56c:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <instance_txcallback+0x194>)
 800b56e:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800b572:	3306      	adds	r3, #6
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <instance_txcallback+0x16a>
	{
		instance_data[0].tx_final = FALSE;
 800b57a:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <instance_txcallback+0x194>)
 800b57c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800b580:	3306      	adds	r3, #6
 800b582:	2200      	movs	r2, #0
 800b584:	701a      	strb	r2, [r3, #0]
	}

	instance_putevent(dw_event);
 800b586:	f107 0408 	add.w	r4, r7, #8
 800b58a:	4668      	mov	r0, sp
 800b58c:	f104 0310 	add.w	r3, r4, #16
 800b590:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b594:	4619      	mov	r1, r3
 800b596:	f007 fd4f 	bl	8013038 <memcpy>
 800b59a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b59e:	f001 f889 	bl	800c6b4 <instance_putevent>
}
 800b5a2:	bf00      	nop
 800b5a4:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ac:	08017b78 	.word	0x08017b78
 800b5b0:	20000348 	.word	0x20000348
 800b5b4:	20000481 	.word	0x20000481

0800b5b8 <instance_rxtimeoutcallback>:

void instance_rxtimeoutcallback(const dwt_cb_data_t *rxd)
{
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 800b5be:	f44f 6781 	mov.w	r7, #1032	; 0x408
 800b5c2:	446f      	add	r7, sp
 800b5c4:	1d3b      	adds	r3, r7, #4
 800b5c6:	6018      	str	r0, [r3, #0]
	event_data_t dw_event;

	dw_event.typeSave = dw_event.type = DWT_SIG_RX_TIMEOUT;
 800b5c8:	f107 0308 	add.w	r3, r7, #8
 800b5cc:	2204      	movs	r2, #4
 800b5ce:	701a      	strb	r2, [r3, #0]
 800b5d0:	f107 0308 	add.w	r3, r7, #8
 800b5d4:	781a      	ldrb	r2, [r3, #0]
 800b5d6:	f107 0308 	add.w	r3, r7, #8
 800b5da:	705a      	strb	r2, [r3, #1]
	dw_event.rxLength = 0;
 800b5dc:	f107 0308 	add.w	r3, r7, #8
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	809a      	strh	r2, [r3, #4]
	dw_event.timeStamp = 0;
 800b5e4:	f107 0108 	add.w	r1, r7, #8
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dw_event.timeStamp32l = 0;
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	611a      	str	r2, [r3, #16]
	dw_event.timeStamp32h = 0;
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	2200      	movs	r2, #0
 800b602:	615a      	str	r2, [r3, #20]

	instance_putevent(dw_event);
 800b604:	f107 0408 	add.w	r4, r7, #8
 800b608:	4668      	mov	r0, sp
 800b60a:	f104 0310 	add.w	r3, r4, #16
 800b60e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b612:	4619      	mov	r1, r3
 800b614:	f007 fd10 	bl	8013038 <memcpy>
 800b618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b61c:	f001 f84a 	bl	800c6b4 <instance_putevent>
}
 800b620:	bf00      	nop
 800b622:	f207 4724 	addw	r7, r7, #1060	; 0x424
 800b626:	46bd      	mov	sp, r7
 800b628:	bd90      	pop	{r4, r7, pc}
	...

0800b62c <instance_rxerrorcallback>:

void instance_rxerrorcallback(const dwt_cb_data_t *rxd)
{
 800b62c:	b590      	push	{r4, r7, lr}
 800b62e:	f6ad 0d34 	subw	sp, sp, #2100	; 0x834
 800b632:	f44f 6781 	mov.w	r7, #1032	; 0x408
 800b636:	446f      	add	r7, sp
 800b638:	1d3b      	adds	r3, r7, #4
 800b63a:	6018      	str	r0, [r3, #0]
	int instance = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

	//error caused by automatic frame filtering, ignore it and immediately turn rx back on
	if(rxd->status & SYS_STATUS_AFFREJ)
 800b642:	1d3b      	adds	r3, r7, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00f      	beq.n	800b670 <instance_rxerrorcallback+0x44>
	{
		instancerxon(&instance_data[instance], 0, 0);
 800b650:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b654:	f243 6270 	movw	r2, #13936	; 0x3670
 800b658:	fb02 f303 	mul.w	r3, r2, r3
 800b65c:	4a38      	ldr	r2, [pc, #224]	; (800b740 <instance_rxerrorcallback+0x114>)
 800b65e:	1898      	adds	r0, r3, r2
 800b660:	f04f 0200 	mov.w	r2, #0
 800b664:	f04f 0300 	mov.w	r3, #0
 800b668:	2100      	movs	r1, #0
 800b66a:	f7fb f823 	bl	80066b4 <instancerxon>
 800b66e:	e062      	b.n	800b736 <instance_rxerrorcallback+0x10a>
		return;
	}

	if(tdma_handler.discovery_mode == WAIT_RNG_INIT || tdma_handler.discovery_mode == WAIT_INF_INIT)
 800b670:	4b34      	ldr	r3, [pc, #208]	; (800b744 <instance_rxerrorcallback+0x118>)
 800b672:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800b676:	2b03      	cmp	r3, #3
 800b678:	d004      	beq.n	800b684 <instance_rxerrorcallback+0x58>
 800b67a:	4b32      	ldr	r3, [pc, #200]	; (800b744 <instance_rxerrorcallback+0x118>)
 800b67c:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800b680:	2b02      	cmp	r3, #2
 800b682:	d10c      	bne.n	800b69e <instance_rxerrorcallback+0x72>
	{
		uint32 time_now = portGetTickCnt();
 800b684:	f006 fb24 	bl	8011cd0 <portGetTickCnt>
 800b688:	4603      	mov	r3, r0
 800b68a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
		tdma_handler.set_discovery_mode(&tdma_handler, WAIT_INF_REG, time_now);
 800b68e:	4b2d      	ldr	r3, [pc, #180]	; (800b744 <instance_rxerrorcallback+0x118>)
 800b690:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b694:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800b698:	2100      	movs	r1, #0
 800b69a:	482a      	ldr	r0, [pc, #168]	; (800b744 <instance_rxerrorcallback+0x118>)
 800b69c:	4798      	blx	r3


	event_data_t dw_event;
	//re-enable the receiver
	//for ranging application rx error frame is same as TO - as we are not going to get the expected frame
	if(instance_data[instance].mode == TAG || instance_data[instance].mode == DISCOVERY)
 800b69e:	4a28      	ldr	r2, [pc, #160]	; (800b740 <instance_rxerrorcallback+0x114>)
 800b6a0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b6a4:	f243 6170 	movw	r1, #13936	; 0x3670
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d00a      	beq.n	800b6ca <instance_rxerrorcallback+0x9e>
 800b6b4:	4a22      	ldr	r2, [pc, #136]	; (800b740 <instance_rxerrorcallback+0x114>)
 800b6b6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b6ba:	f243 6170 	movw	r1, #13936	; 0x3670
 800b6be:	fb01 f303 	mul.w	r3, r1, r3
 800b6c2:	4413      	add	r3, r2
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d11a      	bne.n	800b700 <instance_rxerrorcallback+0xd4>
	{
		dw_event.type = DWT_SIG_RX_TIMEOUT;
 800b6ca:	f107 0308 	add.w	r3, r7, #8
 800b6ce:	2204      	movs	r2, #4
 800b6d0:	701a      	strb	r2, [r3, #0]
		dw_event.typeSave = 0x40 | DWT_SIG_RX_TIMEOUT;
 800b6d2:	f107 0308 	add.w	r3, r7, #8
 800b6d6:	2244      	movs	r2, #68	; 0x44
 800b6d8:	705a      	strb	r2, [r3, #1]
		dw_event.rxLength = 0;
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	2200      	movs	r2, #0
 800b6e0:	809a      	strh	r2, [r3, #4]

		instance_putevent(dw_event);
 800b6e2:	f107 0408 	add.w	r4, r7, #8
 800b6e6:	4668      	mov	r0, sp
 800b6e8:	f104 0310 	add.w	r3, r4, #16
 800b6ec:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	f007 fca1 	bl	8013038 <memcpy>
 800b6f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b6fa:	f000 ffdb 	bl	800c6b4 <instance_putevent>
 800b6fe:	e01a      	b.n	800b736 <instance_rxerrorcallback+0x10a>
	}
	else
	{
		instance_data[instance].uwbToRangeWith = 255;
 800b700:	4a0f      	ldr	r2, [pc, #60]	; (800b740 <instance_rxerrorcallback+0x114>)
 800b702:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b706:	f243 6170 	movw	r1, #13936	; 0x3670
 800b70a:	fb01 f303 	mul.w	r3, r1, r3
 800b70e:	4413      	add	r3, r2
 800b710:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800b714:	22ff      	movs	r2, #255	; 0xff
 800b716:	701a      	strb	r2, [r3, #0]

		instancerxon(&instance_data[instance], 0, 0); //immediate enable if anchor
 800b718:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800b71c:	f243 6270 	movw	r2, #13936	; 0x3670
 800b720:	fb02 f303 	mul.w	r3, r2, r3
 800b724:	4a06      	ldr	r2, [pc, #24]	; (800b740 <instance_rxerrorcallback+0x114>)
 800b726:	1898      	adds	r0, r3, r2
 800b728:	f04f 0200 	mov.w	r2, #0
 800b72c:	f04f 0300 	mov.w	r3, #0
 800b730:	2100      	movs	r1, #0
 800b732:	f7fa ffbf 	bl	80066b4 <instancerxon>
	}

}
 800b736:	f207 472c 	addw	r7, r7, #1068	; 0x42c
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd90      	pop	{r4, r7, pc}
 800b73e:	bf00      	nop
 800b740:	20000348 	.word	0x20000348
 800b744:	200039b8 	.word	0x200039b8

0800b748 <instance_rxgoodcallback>:


void instance_rxgoodcallback(const dwt_cb_data_t *rxd)
{
 800b748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b74c:	f6ad 0db8 	subw	sp, sp, #2232	; 0x8b8
 800b750:	f44f 6781 	mov.w	r7, #1032	; 0x408
 800b754:	446f      	add	r7, sp
 800b756:	f107 031c 	add.w	r3, r7, #28
 800b75a:	6018      	str	r0, [r3, #0]
	int instance = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
	uint8 rxTimeStamp[5]  = {0, 0, 0, 0, 0};
 800b762:	4ab6      	ldr	r2, [pc, #728]	; (800ba3c <instance_rxgoodcallback+0x2f4>)
 800b764:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800b768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b76c:	6018      	str	r0, [r3, #0]
 800b76e:	3304      	adds	r3, #4
 800b770:	7019      	strb	r1, [r3, #0]
	uint8 srcAddr_index = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
    uint8 rxd_event = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
	uint8 fcode_index  = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
	event_data_t dw_event;

	uint32 time_now = portGetTickCnt();
 800b784:	f006 faa4 	bl	8011cd0 <portGetTickCnt>
 800b788:	4603      	mov	r3, r0
 800b78a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

	//if we got a frame with a good CRC - RX OK
	rxd_event = DWT_SIG_RX_OKAY;
 800b78e:	2302      	movs	r3, #2
 800b790:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae

	dw_event.rxLength = rxd->datalength;
 800b794:	f107 031c 	add.w	r3, r7, #28
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	889b      	ldrh	r3, [r3, #4]
 800b79c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b7a0:	8093      	strh	r3, [r2, #4]

	//need to process the frame control bytes to figure out what type of frame we have received
	switch(rxd->fctrl[0])
 800b7a2:	f107 031c 	add.w	r3, r7, #28
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	799b      	ldrb	r3, [r3, #6]
 800b7aa:	2bc5      	cmp	r3, #197	; 0xc5
 800b7ac:	d00a      	beq.n	800b7c4 <instance_rxgoodcallback+0x7c>
 800b7ae:	2bc5      	cmp	r3, #197	; 0xc5
 800b7b0:	dc55      	bgt.n	800b85e <instance_rxgoodcallback+0x116>
 800b7b2:	2b61      	cmp	r3, #97	; 0x61
 800b7b4:	d018      	beq.n	800b7e8 <instance_rxgoodcallback+0xa0>
 800b7b6:	2b61      	cmp	r3, #97	; 0x61
 800b7b8:	dc51      	bgt.n	800b85e <instance_rxgoodcallback+0x116>
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d010      	beq.n	800b7e0 <instance_rxgoodcallback+0x98>
 800b7be:	2b41      	cmp	r3, #65	; 0x41
 800b7c0:	d012      	beq.n	800b7e8 <instance_rxgoodcallback+0xa0>
 800b7c2:	e04c      	b.n	800b85e <instance_rxgoodcallback+0x116>
	{
		//blink type frame
		case 0xC5:
			if(rxd->datalength == 12)
 800b7c4:	f107 031c 	add.w	r3, r7, #28
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	889b      	ldrh	r3, [r3, #4]
 800b7cc:	2b0c      	cmp	r3, #12
 800b7ce:	d103      	bne.n	800b7d8 <instance_rxgoodcallback+0x90>
			{
				rxd_event = DWT_SIG_RX_BLINK;
 800b7d0:	2307      	movs	r3, #7
 800b7d2:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
			else
			{
				rxd_event = SIG_RX_UNKNOWN;
			}

			break;
 800b7d6:	e046      	b.n	800b866 <instance_rxgoodcallback+0x11e>
				rxd_event = SIG_RX_UNKNOWN;
 800b7d8:	2363      	movs	r3, #99	; 0x63
 800b7da:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
			break;
 800b7de:	e042      	b.n	800b866 <instance_rxgoodcallback+0x11e>

		//ACK type frame - not supported in this SW - set as unknown (re-enable RX)
		case 0x02:
			rxd_event = SIG_RX_UNKNOWN;
 800b7e0:	2363      	movs	r3, #99	; 0x63
 800b7e2:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
			break;
 800b7e6:	e03e      	b.n	800b866 <instance_rxgoodcallback+0x11e>

		//data type frames (with/without ACK request) - assume PIDC is on.
		case 0x41:
		case 0x61:
			//read the frame
			if(rxd->datalength > EXTENDED_FRAME_SIZE)
 800b7e8:	f107 031c 	add.w	r3, r7, #28
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	889b      	ldrh	r3, [r3, #4]
 800b7f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7f4:	d302      	bcc.n	800b7fc <instance_rxgoodcallback+0xb4>
				rxd_event = SIG_RX_UNKNOWN;
 800b7f6:	2363      	movs	r3, #99	; 0x63
 800b7f8:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
			
			//need to check the destination/source address mode
			if((rxd->fctrl[1] & 0xCC) == 0x88) //dest & src short (16 bits)
 800b7fc:	f107 031c 	add.w	r3, r7, #28
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	79db      	ldrb	r3, [r3, #7]
 800b804:	f003 03cc 	and.w	r3, r3, #204	; 0xcc
 800b808:	2b88      	cmp	r3, #136	; 0x88
 800b80a:	d106      	bne.n	800b81a <instance_rxgoodcallback+0xd2>
			{
				fcode_index = FRAME_CRTL_AND_ADDRESS_S; //function code is in first byte after source address
 800b80c:	2309      	movs	r3, #9
 800b80e:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
				srcAddr_index = FRAME_CTRLP + ADDR_BYTE_SIZE_S;
 800b812:	2307      	movs	r3, #7
 800b814:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
				{
					srcAddr_index = FRAME_CTRLP + ADDR_BYTE_SIZE_S;
				}
			}

			break;
 800b818:	e025      	b.n	800b866 <instance_rxgoodcallback+0x11e>
			else if((rxd->fctrl[1] & 0xCC) == 0xCC) //dest & src long (64 bits)
 800b81a:	f107 031c 	add.w	r3, r7, #28
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	79db      	ldrb	r3, [r3, #7]
 800b822:	f003 03cc 	and.w	r3, r3, #204	; 0xcc
 800b826:	2bcc      	cmp	r3, #204	; 0xcc
 800b828:	d106      	bne.n	800b838 <instance_rxgoodcallback+0xf0>
				fcode_index = FRAME_CRTL_AND_ADDRESS_L; //function code is in first byte after source address
 800b82a:	2315      	movs	r3, #21
 800b82c:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
				srcAddr_index = FRAME_CTRLP + ADDR_BYTE_SIZE_L;
 800b830:	230d      	movs	r3, #13
 800b832:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
			break;
 800b836:	e016      	b.n	800b866 <instance_rxgoodcallback+0x11e>
				fcode_index = FRAME_CRTL_AND_ADDRESS_LS; //function code is in first byte after source address
 800b838:	230f      	movs	r3, #15
 800b83a:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
				if(((rxd->fctrl[1] & 0xCC) == 0x8C)) //source short
 800b83e:	f107 031c 	add.w	r3, r7, #28
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	79db      	ldrb	r3, [r3, #7]
 800b846:	f003 03cc 	and.w	r3, r3, #204	; 0xcc
 800b84a:	2b8c      	cmp	r3, #140	; 0x8c
 800b84c:	d103      	bne.n	800b856 <instance_rxgoodcallback+0x10e>
					srcAddr_index = FRAME_CTRLP + ADDR_BYTE_SIZE_L;
 800b84e:	230d      	movs	r3, #13
 800b850:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
			break;
 800b854:	e007      	b.n	800b866 <instance_rxgoodcallback+0x11e>
					srcAddr_index = FRAME_CTRLP + ADDR_BYTE_SIZE_S;
 800b856:	2307      	movs	r3, #7
 800b858:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
			break;
 800b85c:	e003      	b.n	800b866 <instance_rxgoodcallback+0x11e>

		//any other frame types are not supported by this application
		default:
			rxd_event = SIG_RX_UNKNOWN;
 800b85e:	2363      	movs	r3, #99	; 0x63
 800b860:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
			break;
 800b864:	bf00      	nop
	}

	//read rx timestamp
	if((rxd_event == DWT_SIG_RX_BLINK) || (rxd_event == DWT_SIG_RX_OKAY))
 800b866:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800b86a:	2b07      	cmp	r3, #7
 800b86c:	d003      	beq.n	800b876 <instance_rxgoodcallback+0x12e>
 800b86e:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800b872:	2b02      	cmp	r3, #2
 800b874:	d154      	bne.n	800b920 <instance_rxgoodcallback+0x1d8>
	{
		dwt_readrxtimestamp(rxTimeStamp) ;
 800b876:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800b87a:	4618      	mov	r0, r3
 800b87c:	f005 f9d1 	bl	8010c22 <dwt_readrxtimestamp>
		dw_event.timeStamp32l =  (uint32)rxTimeStamp[0] + ((uint32)rxTimeStamp[1] << 8) + ((uint32)rxTimeStamp[2] << 16) + ((uint32)rxTimeStamp[3] << 24);
 800b880:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 800b884:	461a      	mov	r2, r3
 800b886:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	441a      	add	r2, r3
 800b88e:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 800b892:	041b      	lsls	r3, r3, #16
 800b894:	441a      	add	r2, r3
 800b896:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800b89a:	061b      	lsls	r3, r3, #24
 800b89c:	441a      	add	r2, r3
 800b89e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8a2:	611a      	str	r2, [r3, #16]
		dw_event.timeStamp = rxTimeStamp[4];
 800b8a4:	f897 3460 	ldrb.w	r3, [r7, #1120]	; 0x460
 800b8a8:	b2d8      	uxtb	r0, r3
 800b8aa:	f04f 0100 	mov.w	r1, #0
 800b8ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
		dw_event.timeStamp <<= 32;
 800b8b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b8be:	f04f 0000 	mov.w	r0, #0
 800b8c2:	f04f 0100 	mov.w	r1, #0
 800b8c6:	0011      	movs	r1, r2
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8ce:	e9c3 0102 	strd	r0, r1, [r3, #8]
		dw_event.timeStamp += dw_event.timeStamp32l;
 800b8d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b8da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	f04f 0300 	mov.w	r3, #0
 800b8e6:	1884      	adds	r4, r0, r2
 800b8e8:	eb41 0503 	adc.w	r5, r1, r3
 800b8ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8f0:	e9c3 4502 	strd	r4, r5, [r3, #8]
		dw_event.timeStamp32h = ((uint32)rxTimeStamp[4] << 24) + (dw_event.timeStamp32l >> 8);
 800b8f4:	f897 3460 	ldrb.w	r3, [r7, #1120]	; 0x460
 800b8f8:	061a      	lsls	r2, r3, #24
 800b8fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	0a1b      	lsrs	r3, r3, #8
 800b902:	441a      	add	r2, r3
 800b904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b908:	615a      	str	r2, [r3, #20]

		dwt_readrxdata((uint8 *)&dw_event.msgu.frame[0], rxd->datalength, 0);  // Read Data Frame
 800b90a:	f107 031c 	add.w	r3, r7, #28
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	8899      	ldrh	r1, [r3, #4]
 800b912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b916:	3318      	adds	r3, #24
 800b918:	2200      	movs	r2, #0
 800b91a:	4618      	mov	r0, r3
 800b91c:	f005 f92e 	bl	8010b7c <dwt_readrxdata>
	}

	dw_event.typeSave = dw_event.type = rxd_event;
 800b920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b924:	f897 24ae 	ldrb.w	r2, [r7, #1198]	; 0x4ae
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b92e:	781a      	ldrb	r2, [r3, #0]
 800b930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b934:	705a      	strb	r2, [r3, #1]
	//----------------------------------------------------------------------------------------------
	//TWR - here we check if we need to respond to a TWR Poll or Response Messages
	//----------------------------------------------------------------------------------------------

	//don't process unknown signals or non-broadcast messages that aren't addressed to this UWB
	if(rxd_event == DWT_SIG_RX_OKAY)
 800b936:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	f040 8083 	bne.w	800ba46 <instance_rxgoodcallback+0x2fe>
	{
		if((dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_RNG_INIT ) || 
 800b940:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b944:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b948:	4413      	add	r3, r2
 800b94a:	7e1b      	ldrb	r3, [r3, #24]
 800b94c:	2b20      	cmp	r3, #32
 800b94e:	d017      	beq.n	800b980 <instance_rxgoodcallback+0x238>
		   (dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_TAG_POLL ) ||
 800b950:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b954:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b958:	4413      	add	r3, r2
 800b95a:	7e1b      	ldrb	r3, [r3, #24]
		if((dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_RNG_INIT ) || 
 800b95c:	2b21      	cmp	r3, #33	; 0x21
 800b95e:	d00f      	beq.n	800b980 <instance_rxgoodcallback+0x238>
		   (dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_ANCH_RESP) ||
 800b960:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b964:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b968:	4413      	add	r3, r2
 800b96a:	7e1b      	ldrb	r3, [r3, #24]
		   (dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_TAG_POLL ) ||
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	d007      	beq.n	800b980 <instance_rxgoodcallback+0x238>
		   (dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_TAG_FINAL))
 800b970:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b974:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b978:	4413      	add	r3, r2
 800b97a:	7e1b      	ldrb	r3, [r3, #24]
		   (dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_ANCH_RESP) ||
 800b97c:	2b29      	cmp	r3, #41	; 0x29
 800b97e:	d129      	bne.n	800b9d4 <instance_rxgoodcallback+0x28c>
		{
			uint8 destAddr_index = FRAME_CTRLP;
 800b980:	2305      	movs	r3, #5
 800b982:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f

			if(memcmp(&instance_data[instance].uwbList[0][0], &dw_event.msgu.frame[destAddr_index], instance_data[instance].addrByteSize) != 0)
 800b986:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800b98a:	f243 6270 	movw	r2, #13936	; 0x3670
 800b98e:	fb02 f303 	mul.w	r3, r2, r3
 800b992:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800b996:	4a2a      	ldr	r2, [pc, #168]	; (800ba40 <instance_rxgoodcallback+0x2f8>)
 800b998:	4413      	add	r3, r2
 800b99a:	1c98      	adds	r0, r3, #2
 800b99c:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 800b9a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b9a4:	3318      	adds	r3, #24
 800b9a6:	18d1      	adds	r1, r2, r3
 800b9a8:	4c25      	ldr	r4, [pc, #148]	; (800ba40 <instance_rxgoodcallback+0x2f8>)
 800b9aa:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 800b9ae:	f243 6370 	movw	r3, #13936	; 0x3670
 800b9b2:	fb03 f302 	mul.w	r3, r3, r2
 800b9b6:	4423      	add	r3, r4
 800b9b8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800b9bc:	3306      	adds	r3, #6
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	f007 fb2b 	bl	801301c <memcmp>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d03b      	beq.n	800ba44 <instance_rxgoodcallback+0x2fc>
    		{
				rxd_event = SIG_RX_UNKNOWN;
 800b9cc:	2363      	movs	r3, #99	; 0x63
 800b9ce:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
		{
 800b9d2:	e037      	b.n	800ba44 <instance_rxgoodcallback+0x2fc>
			}
		}
		else if(dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_REG &&
 800b9d4:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b9d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b9dc:	4413      	add	r3, r2
 800b9de:	7e1b      	ldrb	r3, [r3, #24]
 800b9e0:	2b13      	cmp	r3, #19
 800b9e2:	d030      	beq.n	800ba46 <instance_rxgoodcallback+0x2fe>
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_INIT &&
 800b9e4:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b9e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b9ec:	4413      	add	r3, r2
 800b9ee:	7e1b      	ldrb	r3, [r3, #24]
		else if(dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_REG &&
 800b9f0:	2b14      	cmp	r3, #20
 800b9f2:	d028      	beq.n	800ba46 <instance_rxgoodcallback+0x2fe>
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_SUG &&
 800b9f4:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800b9f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b9fc:	4413      	add	r3, r2
 800b9fe:	7e1b      	ldrb	r3, [r3, #24]
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_INIT &&
 800ba00:	2b15      	cmp	r3, #21
 800ba02:	d020      	beq.n	800ba46 <instance_rxgoodcallback+0x2fe>
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_UPDATE &&
 800ba04:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800ba08:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ba0c:	4413      	add	r3, r2
 800ba0e:	7e1b      	ldrb	r3, [r3, #24]
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_SUG &&
 800ba10:	2b16      	cmp	r3, #22
 800ba12:	d018      	beq.n	800ba46 <instance_rxgoodcallback+0x2fe>
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_RNG_REPORT &&
 800ba14:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800ba18:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ba1c:	4413      	add	r3, r2
 800ba1e:	7e1b      	ldrb	r3, [r3, #24]
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_INF_UPDATE &&
 800ba20:	2b11      	cmp	r3, #17
 800ba22:	d010      	beq.n	800ba46 <instance_rxgoodcallback+0x2fe>
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_SYNC)
 800ba24:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800ba28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ba2c:	4413      	add	r3, r2
 800ba2e:	7e1b      	ldrb	r3, [r3, #24]
				dw_event.msgu.frame[fcode_index] != RTLS_DEMO_MSG_RNG_REPORT &&
 800ba30:	2b22      	cmp	r3, #34	; 0x22
 800ba32:	d008      	beq.n	800ba46 <instance_rxgoodcallback+0x2fe>
		{
			rxd_event = SIG_RX_UNKNOWN;
 800ba34:	2363      	movs	r3, #99	; 0x63
 800ba36:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
 800ba3a:	e004      	b.n	800ba46 <instance_rxgoodcallback+0x2fe>
 800ba3c:	08017b78 	.word	0x08017b78
 800ba40:	20000348 	.word	0x20000348
		{
 800ba44:	bf00      	nop
	}

	//first check if the address is already tracked.
	//if not, add it.
	//then get the index for that address
	uint8 uwb_index = 255;
 800ba46:	23ff      	movs	r3, #255	; 0xff
 800ba48:	f887 34ac 	strb.w	r3, [r7, #1196]	; 0x4ac
	if(rxd_event == DWT_SIG_RX_BLINK)
 800ba4c:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800ba50:	2b07      	cmp	r3, #7
 800ba52:	d158      	bne.n	800bb06 <instance_rxgoodcallback+0x3be>
	{
		uint8 blink_address[8] = {0,0,0,0,0,0,0,0};
 800ba54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba58:	4ad5      	ldr	r2, [pc, #852]	; (800bdb0 <instance_rxgoodcallback+0x668>)
 800ba5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba5e:	e883 0003 	stmia.w	r3, {r0, r1}
#if (USING_64BIT_ADDR==0)
		memcpy(&blink_address, &dw_event.msgu.rxblinkmsg.tagID[0], instance_data[instance].addrByteSize);
 800ba62:	4ad4      	ldr	r2, [pc, #848]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800ba64:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800ba68:	f243 6170 	movw	r1, #13936	; 0x3670
 800ba6c:	fb01 f303 	mul.w	r3, r1, r3
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800ba76:	3306      	adds	r3, #6
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba80:	f103 011a 	add.w	r1, r3, #26
 800ba84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f007 fad5 	bl	8013038 <memcpy>
#else
		memcpy(&blink_address, &dw_event.msgu.rxblinkmsg.tagID[0], instance_data[instance].addrByteSize);
#endif

		//must be a neighbor
		uwb_index = instgetuwblistindex(&instance_data[instance], &blink_address[0], instance_data[instance].addrByteSize);
 800ba8e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800ba92:	f243 6270 	movw	r2, #13936	; 0x3670
 800ba96:	fb02 f303 	mul.w	r3, r2, r3
 800ba9a:	4ac6      	ldr	r2, [pc, #792]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800ba9c:	1898      	adds	r0, r3, r2
 800ba9e:	4ac5      	ldr	r2, [pc, #788]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800baa0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800baa4:	f243 6170 	movw	r1, #13936	; 0x3670
 800baa8:	fb01 f303 	mul.w	r3, r1, r3
 800baac:	4413      	add	r3, r2
 800baae:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800bab2:	3306      	adds	r3, #6
 800bab4:	781a      	ldrb	r2, [r3, #0]
 800bab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800baba:	4619      	mov	r1, r3
 800babc:	f7fe ff7c 	bl	800a9b8 <instgetuwblistindex>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f887 34ac 	strb.w	r3, [r7, #1196]	; 0x4ac

		if(uwb_index > 0 && uwb_index < UWB_LIST_SIZE)
 800bac6:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d05e      	beq.n	800bb8c <instance_rxgoodcallback+0x444>
 800bace:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 800bad2:	2b09      	cmp	r3, #9
 800bad4:	d85a      	bhi.n	800bb8c <instance_rxgoodcallback+0x444>
		{
			tdma_handler.uwbListTDMAInfo[uwb_index].connectionType = UWB_LIST_NEIGHBOR;
 800bad6:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bada:	49b7      	ldr	r1, [pc, #732]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800badc:	4613      	mov	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	440b      	add	r3, r1
 800bae6:	3308      	adds	r3, #8
 800bae8:	2201      	movs	r2, #1
 800baea:	701a      	strb	r2, [r3, #0]
			tdma_handler.uwbListTDMAInfo[uwb_index].lastCommNeighbor = time_now;
 800baec:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800baf0:	49b1      	ldr	r1, [pc, #708]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	440b      	add	r3, r1
 800bafc:	330c      	adds	r3, #12
 800bafe:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e042      	b.n	800bb8c <instance_rxgoodcallback+0x444>
		}
	}
	else if(rxd_event == DWT_SIG_RX_OKAY)
 800bb06:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d13e      	bne.n	800bb8c <instance_rxgoodcallback+0x444>
	{
		//must be a neighbor
		uwb_index = instgetuwblistindex(&instance_data[instance], &dw_event.msgu.frame[srcAddr_index], instance_data[instance].addrByteSize);
 800bb0e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bb12:	f243 6270 	movw	r2, #13936	; 0x3670
 800bb16:	fb02 f303 	mul.w	r3, r2, r3
 800bb1a:	4aa6      	ldr	r2, [pc, #664]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bb1c:	1898      	adds	r0, r3, r2
 800bb1e:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 800bb22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bb26:	3318      	adds	r3, #24
 800bb28:	18d1      	adds	r1, r2, r3
 800bb2a:	4ca2      	ldr	r4, [pc, #648]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bb2c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 800bb30:	f243 6370 	movw	r3, #13936	; 0x3670
 800bb34:	fb03 f302 	mul.w	r3, r3, r2
 800bb38:	4423      	add	r3, r4
 800bb3a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800bb3e:	3306      	adds	r3, #6
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f7fe ff38 	bl	800a9b8 <instgetuwblistindex>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 34ac 	strb.w	r3, [r7, #1196]	; 0x4ac

		if(uwb_index > 0 && uwb_index < UWB_LIST_SIZE)
 800bb4e:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d01a      	beq.n	800bb8c <instance_rxgoodcallback+0x444>
 800bb56:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d816      	bhi.n	800bb8c <instance_rxgoodcallback+0x444>
		{
			tdma_handler.uwbListTDMAInfo[uwb_index].connectionType = UWB_LIST_NEIGHBOR;
 800bb5e:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bb62:	4995      	ldr	r1, [pc, #596]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bb64:	4613      	mov	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4413      	add	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	440b      	add	r3, r1
 800bb6e:	3308      	adds	r3, #8
 800bb70:	2201      	movs	r2, #1
 800bb72:	701a      	strb	r2, [r3, #0]
			tdma_handler.uwbListTDMAInfo[uwb_index].lastCommNeighbor = time_now;
 800bb74:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bb78:	498f      	ldr	r1, [pc, #572]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	440b      	add	r3, r1
 800bb84:	330c      	adds	r3, #12
 800bb86:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800bb8a:	601a      	str	r2, [r3, #0]
		}
	}

	bool accept_inf = FALSE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f887 34ab 	strb.w	r3, [r7, #1195]	; 0x4ab
	//check if the incoming message indicates that we should range with the source UWB or just accept and process the message
	if(rxd_event != SIG_RX_UNKNOWN)
 800bb92:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800bb96:	2b63      	cmp	r3, #99	; 0x63
 800bb98:	f000 80e2 	beq.w	800bd60 <instance_rxgoodcallback+0x618>
	{
		if(instance_data[instance].uwbToRangeWith == 255)
 800bb9c:	4a85      	ldr	r2, [pc, #532]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bb9e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bba2:	f243 6170 	movw	r1, #13936	; 0x3670
 800bba6:	fb01 f303 	mul.w	r3, r1, r3
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2bff      	cmp	r3, #255	; 0xff
 800bbb4:	f040 80d4 	bne.w	800bd60 <instance_rxgoodcallback+0x618>
		{
			if(rxd_event == DWT_SIG_RX_OKAY)
 800bbb8:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	f040 80ae 	bne.w	800bd1e <instance_rxgoodcallback+0x5d6>
			{
				if(instance_data[instance].mode == ANCHOR)
 800bbc2:	4a7c      	ldr	r2, [pc, #496]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bbc4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bbc8:	f243 6170 	movw	r1, #13936	; 0x3670
 800bbcc:	fb01 f303 	mul.w	r3, r1, r3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d132      	bne.n	800bc3e <instance_rxgoodcallback+0x4f6>
				{
					if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_TAG_POLL)
 800bbd8:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bbdc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bbe0:	4413      	add	r3, r2
 800bbe2:	7e1b      	ldrb	r3, [r3, #24]
 800bbe4:	2b21      	cmp	r3, #33	; 0x21
 800bbe6:	d10d      	bne.n	800bc04 <instance_rxgoodcallback+0x4bc>
					{
						instance_data[instance].uwbToRangeWith = uwb_index;
 800bbe8:	4a72      	ldr	r2, [pc, #456]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bbea:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bbee:	f243 6170 	movw	r1, #13936	; 0x3670
 800bbf2:	fb01 f303 	mul.w	r3, r1, r3
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800bbfc:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	e0ad      	b.n	800bd60 <instance_rxgoodcallback+0x618>
					}
					else if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_REG || dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_SUG || dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_UPDATE)//only anchor if already received INF_INIT or collected regular INF messages and joined with SUG message
 800bc04:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bc08:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc0c:	4413      	add	r3, r2
 800bc0e:	7e1b      	ldrb	r3, [r3, #24]
 800bc10:	2b13      	cmp	r3, #19
 800bc12:	d010      	beq.n	800bc36 <instance_rxgoodcallback+0x4ee>
 800bc14:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bc18:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc1c:	4413      	add	r3, r2
 800bc1e:	7e1b      	ldrb	r3, [r3, #24]
 800bc20:	2b15      	cmp	r3, #21
 800bc22:	d008      	beq.n	800bc36 <instance_rxgoodcallback+0x4ee>
 800bc24:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bc28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc2c:	4413      	add	r3, r2
 800bc2e:	7e1b      	ldrb	r3, [r3, #24]
 800bc30:	2b16      	cmp	r3, #22
 800bc32:	f040 8095 	bne.w	800bd60 <instance_rxgoodcallback+0x618>
					{
						accept_inf = TRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	f887 34ab 	strb.w	r3, [r7, #1195]	; 0x4ab
 800bc3c:	e090      	b.n	800bd60 <instance_rxgoodcallback+0x618>
					}
				}
				else if (instance_data[instance].mode == DISCOVERY)
 800bc3e:	4a5d      	ldr	r2, [pc, #372]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bc40:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bc44:	f243 6170 	movw	r1, #13936	; 0x3670
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f040 8085 	bne.w	800bd60 <instance_rxgoodcallback+0x618>
				{
					if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_RNG_INIT)
 800bc56:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bc5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc5e:	4413      	add	r3, r2
 800bc60:	7e1b      	ldrb	r3, [r3, #24]
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	d112      	bne.n	800bc8c <instance_rxgoodcallback+0x544>
					{
						if(tdma_handler.discovery_mode == WAIT_RNG_INIT)
 800bc66:	4b54      	ldr	r3, [pc, #336]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bc68:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d177      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
						{
							instance_data[instance].uwbToRangeWith = uwb_index;
 800bc70:	4a50      	ldr	r2, [pc, #320]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bc72:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bc76:	f243 6170 	movw	r1, #13936	; 0x3670
 800bc7a:	fb01 f303 	mul.w	r3, r1, r3
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800bc84:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	e069      	b.n	800bd60 <instance_rxgoodcallback+0x618>
						}
					}
					else if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_INIT)
 800bc8c:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bc90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc94:	4413      	add	r3, r2
 800bc96:	7e1b      	ldrb	r3, [r3, #24]
 800bc98:	2b14      	cmp	r3, #20
 800bc9a:	d115      	bne.n	800bcc8 <instance_rxgoodcallback+0x580>
					{
						//only accept if we are waiting for INF_INIT
						if(tdma_handler.discovery_mode == WAIT_INF_INIT)
 800bc9c:	4b46      	ldr	r3, [pc, #280]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bc9e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d15c      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
						{
							instance_data[instance].uwbToRangeWith = uwb_index;
 800bca6:	4a43      	ldr	r2, [pc, #268]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bca8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bcac:	f243 6170 	movw	r1, #13936	; 0x3670
 800bcb0:	fb01 f303 	mul.w	r3, r1, r3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800bcba:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bcbe:	701a      	strb	r2, [r3, #0]
							accept_inf = TRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	f887 34ab 	strb.w	r3, [r7, #1195]	; 0x4ab
 800bcc6:	e04b      	b.n	800bd60 <instance_rxgoodcallback+0x618>
						}
					}
					else if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_REG ||
 800bcc8:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bccc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bcd0:	4413      	add	r3, r2
 800bcd2:	7e1b      	ldrb	r3, [r3, #24]
 800bcd4:	2b13      	cmp	r3, #19
 800bcd6:	d00f      	beq.n	800bcf8 <instance_rxgoodcallback+0x5b0>
							dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_UPDATE ||
 800bcd8:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bcdc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bce0:	4413      	add	r3, r2
 800bce2:	7e1b      	ldrb	r3, [r3, #24]
					else if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_REG ||
 800bce4:	2b16      	cmp	r3, #22
 800bce6:	d007      	beq.n	800bcf8 <instance_rxgoodcallback+0x5b0>
							dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_SUG)
 800bce8:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bcec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bcf0:	4413      	add	r3, r2
 800bcf2:	7e1b      	ldrb	r3, [r3, #24]
							dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_INF_UPDATE ||
 800bcf4:	2b15      	cmp	r3, #21
 800bcf6:	d133      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
					{
						if(tdma_handler.discovery_mode == WAIT_INF_REG || tdma_handler.discovery_mode == COLLECT_INF_REG || tdma_handler.discovery_mode == WAIT_INF_INIT)
 800bcf8:	4b2f      	ldr	r3, [pc, #188]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bcfa:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d009      	beq.n	800bd16 <instance_rxgoodcallback+0x5ce>
 800bd02:	4b2d      	ldr	r3, [pc, #180]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bd04:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d004      	beq.n	800bd16 <instance_rxgoodcallback+0x5ce>
 800bd0c:	4b2a      	ldr	r3, [pc, #168]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bd0e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d124      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
						{
							accept_inf = TRUE;
 800bd16:	2301      	movs	r3, #1
 800bd18:	f887 34ab 	strb.w	r3, [r7, #1195]	; 0x4ab
 800bd1c:	e020      	b.n	800bd60 <instance_rxgoodcallback+0x618>
						}
					}
				}
			}
			else if(rxd_event == DWT_SIG_RX_BLINK)
 800bd1e:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800bd22:	2b07      	cmp	r3, #7
 800bd24:	d11c      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
			{
				//only accept BLINK if in DISCOVERY mode and waiting for INF_REG
				if(instance_data[instance].mode == DISCOVERY)
 800bd26:	4a23      	ldr	r2, [pc, #140]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bd28:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bd2c:	f243 6170 	movw	r1, #13936	; 0x3670
 800bd30:	fb01 f303 	mul.w	r3, r1, r3
 800bd34:	4413      	add	r3, r2
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d111      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
				{
					if(tdma_handler.discovery_mode == WAIT_INF_REG)
 800bd3c:	4b1e      	ldr	r3, [pc, #120]	; (800bdb8 <instance_rxgoodcallback+0x670>)
 800bd3e:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10c      	bne.n	800bd60 <instance_rxgoodcallback+0x618>
					{
						instance_data[instance].uwbToRangeWith = uwb_index;
 800bd46:	4a1b      	ldr	r2, [pc, #108]	; (800bdb4 <instance_rxgoodcallback+0x66c>)
 800bd48:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bd4c:	f243 6170 	movw	r1, #13936	; 0x3670
 800bd50:	fb01 f303 	mul.w	r3, r1, r3
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800bd5a:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bd5e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	int place_event = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4

	if(rxd_event == DWT_SIG_RX_OKAY && uwb_index != 255)
 800bd66:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d116      	bne.n	800bd9c <instance_rxgoodcallback+0x654>
 800bd6e:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 800bd72:	2bff      	cmp	r3, #255	; 0xff
 800bd74:	d012      	beq.n	800bd9c <instance_rxgoodcallback+0x654>
	{
		//always accept.
		if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_RNG_REPORT || dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_SYNC)
 800bd76:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bd7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bd7e:	4413      	add	r3, r2
 800bd80:	7e1b      	ldrb	r3, [r3, #24]
 800bd82:	2b11      	cmp	r3, #17
 800bd84:	d007      	beq.n	800bd96 <instance_rxgoodcallback+0x64e>
 800bd86:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bd8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bd8e:	4413      	add	r3, r2
 800bd90:	7e1b      	ldrb	r3, [r3, #24]
 800bd92:	2b22      	cmp	r3, #34	; 0x22
 800bd94:	d102      	bne.n	800bd9c <instance_rxgoodcallback+0x654>
		{
			place_event = 1;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
		}
	}

	if(accept_inf == TRUE)
 800bd9c:	f897 34ab 	ldrb.w	r3, [r7, #1195]	; 0x4ab
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00b      	beq.n	800bdbc <instance_rxgoodcallback+0x674>
	{
		place_event = 1;
 800bda4:	2301      	movs	r3, #1
 800bda6:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800bdaa:	f000 bc24 	b.w	800c5f6 <instance_rxgoodcallback+0xeae>
 800bdae:	bf00      	nop
 800bdb0:	08017b70 	.word	0x08017b70
 800bdb4:	20000348 	.word	0x20000348
 800bdb8:	200039b8 	.word	0x200039b8
	}
	else if(uwb_index != 255 && instance_data[instance].uwbToRangeWith == uwb_index)
 800bdbc:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 800bdc0:	2bff      	cmp	r3, #255	; 0xff
 800bdc2:	f000 8418 	beq.w	800c5f6 <instance_rxgoodcallback+0xeae>
 800bdc6:	4aa9      	ldr	r2, [pc, #676]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bdc8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bdcc:	f243 6170 	movw	r1, #13936	; 0x3670
 800bdd0:	fb01 f303 	mul.w	r3, r1, r3
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	f897 24ac 	ldrb.w	r2, [r7, #1196]	; 0x4ac
 800bde0:	429a      	cmp	r2, r3
 800bde2:	f040 8408 	bne.w	800c5f6 <instance_rxgoodcallback+0xeae>
	{
		if(rxd_event == DWT_SIG_RX_OKAY)
 800bde6:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	f040 83fc 	bne.w	800c5e8 <instance_rxgoodcallback+0xea0>
		{
			if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_TAG_POLL)
 800bdf0:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800bdf4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bdf8:	4413      	add	r3, r2
 800bdfa:	7e1b      	ldrb	r3, [r3, #24]
 800bdfc:	2b21      	cmp	r3, #33	; 0x21
 800bdfe:	f040 8137 	bne.w	800c070 <instance_rxgoodcallback+0x928>
			{
				int psduLength = RESP_FRAME_LEN_BYTES;
 800be02:	230c      	movs	r3, #12
 800be04:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

				instance_data[instance].tagPollRxTime = dw_event.timeStamp ; //Poll's Rx time
 800be08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800be0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800be10:	4a96      	ldr	r2, [pc, #600]	; (800c06c <instance_rxgoodcallback+0x924>)
 800be12:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800be16:	f243 6470 	movw	r4, #13936	; 0x3670
 800be1a:	fb04 f303 	mul.w	r3, r4, r3
 800be1e:	4413      	add	r3, r2
 800be20:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800be24:	3308      	adds	r3, #8
 800be26:	e9c3 0100 	strd	r0, r1, [r3]
				instance_data[instance].msg.messageData[FCODE] = RTLS_DEMO_MSG_ANCH_RESP; //message function code (specifies if message is a poll, response or other...)
 800be2a:	4a90      	ldr	r2, [pc, #576]	; (800c06c <instance_rxgoodcallback+0x924>)
 800be2c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800be30:	f243 6170 	movw	r1, #13936	; 0x3670
 800be34:	fb01 f303 	mul.w	r3, r1, r3
 800be38:	4413      	add	r3, r2
 800be3a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800be3e:	2210      	movs	r2, #16
 800be40:	701a      	strb	r2, [r3, #0]
				memcpy(&instance_data[instance].msg.destAddr[0], &dw_event.msgu.frame[srcAddr_index], instance_data[instance].addrByteSize); //remember who to send the reply to (set destination address)
 800be42:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800be46:	f243 6270 	movw	r2, #13936	; 0x3670
 800be4a:	fb02 f303 	mul.w	r3, r2, r3
 800be4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800be52:	4a86      	ldr	r2, [pc, #536]	; (800c06c <instance_rxgoodcallback+0x924>)
 800be54:	4413      	add	r3, r2
 800be56:	f103 000c 	add.w	r0, r3, #12
 800be5a:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 800be5e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800be62:	3318      	adds	r3, #24
 800be64:	18d1      	adds	r1, r2, r3
 800be66:	4a81      	ldr	r2, [pc, #516]	; (800c06c <instance_rxgoodcallback+0x924>)
 800be68:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800be6c:	f243 6470 	movw	r4, #13936	; 0x3670
 800be70:	fb04 f303 	mul.w	r3, r4, r3
 800be74:	4413      	add	r3, r2
 800be76:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800be7a:	3306      	adds	r3, #6
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f007 f8da 	bl	8013038 <memcpy>
				instance_data[instance].msg.seqNum = instance_data[instance].frameSN++;
 800be84:	4a79      	ldr	r2, [pc, #484]	; (800c06c <instance_rxgoodcallback+0x924>)
 800be86:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800be8a:	f243 6170 	movw	r1, #13936	; 0x3670
 800be8e:	fb01 f303 	mul.w	r3, r1, r3
 800be92:	4413      	add	r3, r2
 800be94:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800be98:	3302      	adds	r3, #2
 800be9a:	781a      	ldrb	r2, [r3, #0]
 800be9c:	1c53      	adds	r3, r2, #1
 800be9e:	b2dc      	uxtb	r4, r3
 800bea0:	4972      	ldr	r1, [pc, #456]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bea2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bea6:	f243 6070 	movw	r0, #13936	; 0x3670
 800beaa:	fb00 f303 	mul.w	r3, r0, r3
 800beae:	440b      	add	r3, r1
 800beb0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800beb4:	3302      	adds	r3, #2
 800beb6:	4621      	mov	r1, r4
 800beb8:	7019      	strb	r1, [r3, #0]
 800beba:	496c      	ldr	r1, [pc, #432]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bebc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bec0:	f243 6070 	movw	r0, #13936	; 0x3670
 800bec4:	fb00 f303 	mul.w	r3, r0, r3
 800bec8:	440b      	add	r3, r1
 800beca:	f203 1331 	addw	r3, r3, #305	; 0x131
 800bece:	701a      	strb	r2, [r3, #0]

				instance_data[0].wait4ack = 0;
 800bed0:	4b66      	ldr	r3, [pc, #408]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bed2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800bed6:	3318      	adds	r3, #24
 800bed8:	2200      	movs	r2, #0
 800beda:	701a      	strb	r2, [r3, #0]
				dwt_writetxdata(psduLength, (uint8 *)  &instance_data[instance].msg, 0) ;	// write the frame data
 800bedc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800bee0:	b298      	uxth	r0, r3
 800bee2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bee6:	f243 6270 	movw	r2, #13936	; 0x3670
 800beea:	fb02 f303 	mul.w	r3, r2, r3
 800beee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800bef2:	4a5e      	ldr	r2, [pc, #376]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bef4:	4413      	add	r3, r2
 800bef6:	3307      	adds	r3, #7
 800bef8:	2200      	movs	r2, #0
 800befa:	4619      	mov	r1, r3
 800befc:	f004 fe01 	bl	8010b02 <dwt_writetxdata>

				uint32 reply_time = ((dw_event.timeStamp + instance_data[instance].respReplyDelay) & MASK_TXDTS) >> 8;
 800bf00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf04:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bf08:	4a58      	ldr	r2, [pc, #352]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bf0a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bf0e:	f243 6470 	movw	r4, #13936	; 0x3670
 800bf12:	fb04 f303 	mul.w	r3, r4, r3
 800bf16:	4413      	add	r3, r2
 800bf18:	3340      	adds	r3, #64	; 0x40
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	eb10 0802 	adds.w	r8, r0, r2
 800bf22:	eb41 0903 	adc.w	r9, r1, r3
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	f04f 0300 	mov.w	r3, #0
 800bf2e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800bf32:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 800bf36:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464

				if(instancesendpacket(psduLength, DWT_START_TX_DELAYED | instance_data[instance].wait4ack, reply_time))
 800bf44:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800bf48:	b298      	uxth	r0, r3
 800bf4a:	4a48      	ldr	r2, [pc, #288]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bf4c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bf50:	f243 6170 	movw	r1, #13936	; 0x3670
 800bf54:	fb01 f303 	mul.w	r3, r1, r3
 800bf58:	4413      	add	r3, r2
 800bf5a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800bf5e:	3318      	adds	r3, #24
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	f043 0301 	orr.w	r3, r3, #1
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	f8d7 2464 	ldr.w	r2, [r7, #1124]	; 0x464
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	f7fa fbce 	bl	800670e <instancesendpacket>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d034      	beq.n	800bfe2 <instance_rxgoodcallback+0x89a>
				{
					instance_data[0].tx_anch_resp = FALSE;
 800bf78:	4b3c      	ldr	r3, [pc, #240]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bf7a:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800bf7e:	3305      	adds	r3, #5
 800bf80:	2200      	movs	r2, #0
 800bf82:	701a      	strb	r2, [r3, #0]
					instance_data[instance].previousState = TA_INIT;
 800bf84:	4a39      	ldr	r2, [pc, #228]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bf86:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bf8a:	f243 6170 	movw	r1, #13936	; 0x3670
 800bf8e:	fb01 f303 	mul.w	r3, r1, r3
 800bf92:	4413      	add	r3, r2
 800bf94:	3303      	adds	r3, #3
 800bf96:	2200      	movs	r2, #0
 800bf98:	701a      	strb	r2, [r3, #0]
					instance_data[instance].nextState = TA_INIT;
 800bf9a:	4a34      	ldr	r2, [pc, #208]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bf9c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bfa0:	f243 6170 	movw	r1, #13936	; 0x3670
 800bfa4:	fb01 f303 	mul.w	r3, r1, r3
 800bfa8:	4413      	add	r3, r2
 800bfaa:	3302      	adds	r3, #2
 800bfac:	2200      	movs	r2, #0
 800bfae:	701a      	strb	r2, [r3, #0]
					instance_data[instance].testAppState = TA_RXE_WAIT;
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bfb2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bfb6:	f243 6170 	movw	r1, #13936	; 0x3670
 800bfba:	fb01 f303 	mul.w	r3, r1, r3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	2206      	movs	r2, #6
 800bfc4:	701a      	strb	r2, [r3, #0]
					instance_data[instance].wait4ack = 0;
 800bfc6:	4a29      	ldr	r2, [pc, #164]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bfc8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bfcc:	f243 6170 	movw	r1, #13936	; 0x3670
 800bfd0:	fb01 f303 	mul.w	r3, r1, r3
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800bfda:	3318      	adds	r3, #24
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	e2fe      	b.n	800c5e0 <instance_rxgoodcallback+0xe98>
				}
				else
				{
					instance_data[0].tx_anch_resp = TRUE;
 800bfe2:	4b22      	ldr	r3, [pc, #136]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bfe4:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800bfe8:	3305      	adds	r3, #5
 800bfea:	2201      	movs	r2, #1
 800bfec:	701a      	strb	r2, [r3, #0]
					dw_event.typePend = DWT_SIG_TX_PENDING ; // exit this interrupt and notify the application/instance that TX is in progress.
 800bfee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bff2:	220c      	movs	r2, #12
 800bff4:	709a      	strb	r2, [r3, #2]
					instance_data[instance].timeofTx = time_now;
 800bff6:	4a1d      	ldr	r2, [pc, #116]	; (800c06c <instance_rxgoodcallback+0x924>)
 800bff8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800bffc:	f243 6170 	movw	r1, #13936	; 0x3670
 800c000:	fb01 f303 	mul.w	r3, r1, r3
 800c004:	4413      	add	r3, r2
 800c006:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800c00a:	3314      	adds	r3, #20
 800c00c:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800c010:	601a      	str	r2, [r3, #0]

					instance_data[instance].txDoneTimeoutDuration = instance_data[instance].durationRespTxDoneTimeout_ms;
 800c012:	4a16      	ldr	r2, [pc, #88]	; (800c06c <instance_rxgoodcallback+0x924>)
 800c014:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c018:	f243 6170 	movw	r1, #13936	; 0x3670
 800c01c:	fb01 f303 	mul.w	r3, r1, r3
 800c020:	4413      	add	r3, r2
 800c022:	335c      	adds	r3, #92	; 0x5c
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	4911      	ldr	r1, [pc, #68]	; (800c06c <instance_rxgoodcallback+0x924>)
 800c028:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c02c:	f243 6070 	movw	r0, #13936	; 0x3670
 800c030:	fb00 f303 	mul.w	r3, r0, r3
 800c034:	440b      	add	r3, r1
 800c036:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c03a:	601a      	str	r2, [r3, #0]
					instance_data[instance].canPrintUSB = FALSE;
 800c03c:	4a0b      	ldr	r2, [pc, #44]	; (800c06c <instance_rxgoodcallback+0x924>)
 800c03e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c042:	f243 6170 	movw	r1, #13936	; 0x3670
 800c046:	fb01 f303 	mul.w	r3, r1, r3
 800c04a:	4413      	add	r3, r2
 800c04c:	3323      	adds	r3, #35	; 0x23
 800c04e:	2200      	movs	r2, #0
 800c050:	701a      	strb	r2, [r3, #0]
					instance_data[instance].canPrintLCD = FALSE;
 800c052:	4a06      	ldr	r2, [pc, #24]	; (800c06c <instance_rxgoodcallback+0x924>)
 800c054:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c058:	f243 6170 	movw	r1, #13936	; 0x3670
 800c05c:	fb01 f303 	mul.w	r3, r1, r3
 800c060:	4413      	add	r3, r2
 800c062:	3322      	adds	r3, #34	; 0x22
 800c064:	2200      	movs	r2, #0
 800c066:	701a      	strb	r2, [r3, #0]
 800c068:	e2ba      	b.n	800c5e0 <instance_rxgoodcallback+0xe98>
 800c06a:	bf00      	nop
 800c06c:	20000348 	.word	0x20000348
				}



			}
			else if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_ANCH_RESP)
 800c070:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800c074:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c078:	4413      	add	r3, r2
 800c07a:	7e1b      	ldrb	r3, [r3, #24]
 800c07c:	2b10      	cmp	r3, #16
 800c07e:	f040 8169 	bne.w	800c354 <instance_rxgoodcallback+0xc0c>
			{
				//if we have received a response, it's too late in the slot to try and poll with someone else in case we dont finish the exchange
				//however, if the full exchange doesn't complete, we still want to broadcast an INF message
				//set a flag here to indicate that we are past the point of no return
				tdma_handler.firstPollResponse = TRUE;
 800c082:	4bb0      	ldr	r3, [pc, #704]	; (800c344 <instance_rxgoodcallback+0xbfc>)
 800c084:	2201      	movs	r2, #1
 800c086:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

				// Embed into Final message: 40-bit pollTXTime,  40-bit respRxTime,  40-bit finalTxTime
				uint64 tagCalculatedFinalTxTime; // time we should send the response
				uint64 finalReplyDelay = instance_data[0].respReplyDelay;
 800c08a:	4baf      	ldr	r3, [pc, #700]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c08c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800c090:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800c094:	e9c1 2300 	strd	r2, r3, [r1]
				tagCalculatedFinalTxTime = (dw_event.timeStamp + finalReplyDelay) & MASK_TXDTS;
 800c098:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c09c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c0a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	eb10 0a02 	adds.w	sl, r0, r2
 800c0ac:	eb41 0b03 	adc.w	fp, r1, r3
 800c0b0:	4aa6      	ldr	r2, [pc, #664]	; (800c34c <instance_rxgoodcallback+0xc04>)
 800c0b2:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800c0b6:	ea0a 0102 	and.w	r1, sl, r2
 800c0ba:	6139      	str	r1, [r7, #16]
 800c0bc:	ea0b 0303 	and.w	r3, fp, r3
 800c0c0:	617b      	str	r3, [r7, #20]
 800c0c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c0ca:	e9c3 1200 	strd	r1, r2, [r3]
				instance_data[0].delayedReplyTime = tagCalculatedFinalTxTime >> 8;
 800c0ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0d6:	f04f 0200 	mov.w	r2, #0
 800c0da:	f04f 0300 	mov.w	r3, #0
 800c0de:	0a02      	lsrs	r2, r0, #8
 800c0e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c0e4:	0a0b      	lsrs	r3, r1, #8
 800c0e6:	4b98      	ldr	r3, [pc, #608]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c0e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				// Calculate Time Final message will be sent and write this field of Final message
				// Sending time will be delayedReplyTime, snapped to ~125MHz or ~250MHz boundary by
				// zeroing its low 9 bits, and then having the TX antenna delay added
				// getting antenna delay from the device and add it to the Calculated TX Time
				tagCalculatedFinalTxTime = tagCalculatedFinalTxTime + instance_data[0].txAntennaDelay;
 800c0ec:	4b96      	ldr	r3, [pc, #600]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c0ee:	8b1b      	ldrh	r3, [r3, #24]
 800c0f0:	b298      	uxth	r0, r3
 800c0f2:	f04f 0100 	mov.w	r1, #0
 800c0f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	1884      	adds	r4, r0, r2
 800c100:	60bc      	str	r4, [r7, #8]
 800c102:	eb41 0303 	adc.w	r3, r1, r3
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c10c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c110:	e9c3 1200 	strd	r1, r2, [r3]
				tagCalculatedFinalTxTime &= MASK_40BIT;
 800c114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800c124:	ea02 0400 	and.w	r4, r2, r0
 800c128:	603c      	str	r4, [r7, #0]
 800c12a:	400b      	ands	r3, r1
 800c12c:	607b      	str	r3, [r7, #4]
 800c12e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c132:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c136:	e9c3 1200 	strd	r1, r2, [r3]

				// Write Calculated TX time field of Final message
				memcpy(&(instance_data[0].msg.messageData[FTXT]), (uint8 *)&tagCalculatedFinalTxTime, 5);
 800c13a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c13e:	2205      	movs	r2, #5
 800c140:	4619      	mov	r1, r3
 800c142:	4883      	ldr	r0, [pc, #524]	; (800c350 <instance_rxgoodcallback+0xc08>)
 800c144:	f006 ff78 	bl	8013038 <memcpy>


				//process RTLS_DEMO_MSG_ANCH_RESP immediately.
				int psduLength = FINAL_FRAME_LEN_BYTES;
 800c148:	231b      	movs	r3, #27
 800c14a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c

				instance_data[instance].anchorRespRxTime = dw_event.timeStamp ; //Response's Rx time
 800c14e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c152:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c156:	487c      	ldr	r0, [pc, #496]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c158:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800c15c:	f243 6470 	movw	r4, #13936	; 0x3670
 800c160:	fb04 f101 	mul.w	r1, r4, r1
 800c164:	4401      	add	r1, r0
 800c166:	f501 518b 	add.w	r1, r1, #4448	; 0x1160
 800c16a:	e9c1 2300 	strd	r2, r3, [r1]
				// Embbed into Final message:40-bit respRxTime
				// Write Response RX time field of Final message
				memcpy(&(instance_data[instance].msg.messageData[RRXT]), (uint8 *)&instance_data[instance].anchorRespRxTime, 5);
 800c16e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c172:	f243 6270 	movw	r2, #13936	; 0x3670
 800c176:	fb02 f303 	mul.w	r3, r2, r3
 800c17a:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800c17e:	4a72      	ldr	r2, [pc, #456]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c180:	4413      	add	r3, r2
 800c182:	f103 0008 	add.w	r0, r3, #8
 800c186:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c18a:	f243 6270 	movw	r2, #13936	; 0x3670
 800c18e:	fb02 f303 	mul.w	r3, r2, r3
 800c192:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800c196:	4a6c      	ldr	r2, [pc, #432]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c198:	4413      	add	r3, r2
 800c19a:	2205      	movs	r2, #5
 800c19c:	4619      	mov	r1, r3
 800c19e:	f006 ff4b 	bl	8013038 <memcpy>
				instance_data[instance].msg.messageData[FCODE] = RTLS_DEMO_MSG_TAG_FINAL; //message function code (specifies if message is a poll, response or other...)
 800c1a2:	4a69      	ldr	r2, [pc, #420]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c1a4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c1a8:	f243 6170 	movw	r1, #13936	; 0x3670
 800c1ac:	fb01 f303 	mul.w	r3, r1, r3
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c1b6:	2229      	movs	r2, #41	; 0x29
 800c1b8:	701a      	strb	r2, [r3, #0]

				instance_data[0].wait4ack = 0;
 800c1ba:	4b63      	ldr	r3, [pc, #396]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c1bc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800c1c0:	3318      	adds	r3, #24
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	701a      	strb	r2, [r3, #0]

				dwt_writetxdata(psduLength, (uint8 *)&instance_data[instance].msg, 0) ; // write the frame data
 800c1c6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c1ca:	b298      	uxth	r0, r3
 800c1cc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c1d0:	f243 6270 	movw	r2, #13936	; 0x3670
 800c1d4:	fb02 f303 	mul.w	r3, r2, r3
 800c1d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800c1dc:	4a5a      	ldr	r2, [pc, #360]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c1de:	4413      	add	r3, r2
 800c1e0:	3307      	adds	r3, #7
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f004 fc8c 	bl	8010b02 <dwt_writetxdata>

				if(instancesendpacket(psduLength, DWT_START_TX_DELAYED | instance_data[instance].wait4ack, instance_data[instance].delayedReplyTime))
 800c1ea:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c1ee:	b298      	uxth	r0, r3
 800c1f0:	4a55      	ldr	r2, [pc, #340]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c1f2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c1f6:	f243 6170 	movw	r1, #13936	; 0x3670
 800c1fa:	fb01 f303 	mul.w	r3, r1, r3
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800c204:	3318      	adds	r3, #24
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	f043 0301 	orr.w	r3, r3, #1
 800c20c:	b2d9      	uxtb	r1, r3
 800c20e:	4a4e      	ldr	r2, [pc, #312]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c210:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c214:	f243 6470 	movw	r4, #13936	; 0x3670
 800c218:	fb04 f303 	mul.w	r3, r4, r3
 800c21c:	4413      	add	r3, r2
 800c21e:	3380      	adds	r3, #128	; 0x80
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f7fa fa73 	bl	800670e <instancesendpacket>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d04b      	beq.n	800c2c6 <instance_rxgoodcallback+0xb7e>
				{
					instance_data[0].tx_final = FALSE;
 800c22e:	4b46      	ldr	r3, [pc, #280]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c230:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c234:	3306      	adds	r3, #6
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
					instance_data[instance].previousState = TA_INIT;
 800c23a:	4a43      	ldr	r2, [pc, #268]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c23c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c240:	f243 6170 	movw	r1, #13936	; 0x3670
 800c244:	fb01 f303 	mul.w	r3, r1, r3
 800c248:	4413      	add	r3, r2
 800c24a:	3303      	adds	r3, #3
 800c24c:	2200      	movs	r2, #0
 800c24e:	701a      	strb	r2, [r3, #0]
					instance_data[instance].nextState = TA_INIT;
 800c250:	4a3d      	ldr	r2, [pc, #244]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c252:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c256:	f243 6170 	movw	r1, #13936	; 0x3670
 800c25a:	fb01 f303 	mul.w	r3, r1, r3
 800c25e:	4413      	add	r3, r2
 800c260:	3302      	adds	r3, #2
 800c262:	2200      	movs	r2, #0
 800c264:	701a      	strb	r2, [r3, #0]
					instance_data[instance].testAppState = TA_RXE_WAIT;
 800c266:	4a38      	ldr	r2, [pc, #224]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c268:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c26c:	f243 6170 	movw	r1, #13936	; 0x3670
 800c270:	fb01 f303 	mul.w	r3, r1, r3
 800c274:	4413      	add	r3, r2
 800c276:	3301      	adds	r3, #1
 800c278:	2206      	movs	r2, #6
 800c27a:	701a      	strb	r2, [r3, #0]

					instance_data[instance].wait4ack = 0; //clear the flag as the TX has failed the TRX is off
 800c27c:	4a32      	ldr	r2, [pc, #200]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c27e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c282:	f243 6170 	movw	r1, #13936	; 0x3670
 800c286:	fb01 f303 	mul.w	r3, r1, r3
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800c290:	3318      	adds	r3, #24
 800c292:	2200      	movs	r2, #0
 800c294:	701a      	strb	r2, [r3, #0]
					instance_data[instance].lateTX++;
 800c296:	4a2c      	ldr	r2, [pc, #176]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c298:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c29c:	f243 6170 	movw	r1, #13936	; 0x3670
 800c2a0:	fb01 f303 	mul.w	r3, r1, r3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	4926      	ldr	r1, [pc, #152]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c2b0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c2b4:	f243 6070 	movw	r0, #13936	; 0x3670
 800c2b8:	fb00 f303 	mul.w	r3, r0, r3
 800c2bc:	440b      	add	r3, r1
 800c2be:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	e18c      	b.n	800c5e0 <instance_rxgoodcallback+0xe98>
				}
				else
				{
					instance_data[0].tx_final = TRUE;
 800c2c6:	4b20      	ldr	r3, [pc, #128]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c2c8:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c2cc:	3306      	adds	r3, #6
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	701a      	strb	r2, [r3, #0]
					dw_event.typePend = DWT_SIG_TX_PENDING ; // exit this interrupt and notify the application/instance that TX is in progress.
 800c2d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c2d6:	220c      	movs	r2, #12
 800c2d8:	709a      	strb	r2, [r3, #2]
					instance_data[instance].timeofTx = time_now;
 800c2da:	4a1b      	ldr	r2, [pc, #108]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c2dc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c2e0:	f243 6170 	movw	r1, #13936	; 0x3670
 800c2e4:	fb01 f303 	mul.w	r3, r1, r3
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800c2ee:	3314      	adds	r3, #20
 800c2f0:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800c2f4:	601a      	str	r2, [r3, #0]
					instance_data[instance].timeofTxFinal = portGetTickCnt();
 800c2f6:	f005 fceb 	bl	8011cd0 <portGetTickCnt>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	4a12      	ldr	r2, [pc, #72]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c300:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c304:	f243 6170 	movw	r1, #13936	; 0x3670
 800c308:	fb01 f303 	mul.w	r3, r1, r3
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800c312:	331c      	adds	r3, #28
 800c314:	6018      	str	r0, [r3, #0]
					instance_data[instance].txDoneTimeoutDuration = instance_data[instance].durationFinalTxDoneTimeout_ms;
 800c316:	4a0c      	ldr	r2, [pc, #48]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c318:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c31c:	f243 6170 	movw	r1, #13936	; 0x3670
 800c320:	fb01 f303 	mul.w	r3, r1, r3
 800c324:	4413      	add	r3, r2
 800c326:	3360      	adds	r3, #96	; 0x60
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	4907      	ldr	r1, [pc, #28]	; (800c348 <instance_rxgoodcallback+0xc00>)
 800c32c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c330:	f243 6070 	movw	r0, #13936	; 0x3670
 800c334:	fb00 f303 	mul.w	r3, r0, r3
 800c338:	440b      	add	r3, r1
 800c33a:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	e14e      	b.n	800c5e0 <instance_rxgoodcallback+0xe98>
 800c342:	bf00      	nop
 800c344:	200039b8 	.word	0x200039b8
 800c348:	20000348 	.word	0x20000348
 800c34c:	fffffe00 	.word	0xfffffe00
 800c350:	2000048b 	.word	0x2000048b
				}
			}
			else if(dw_event.msgu.frame[fcode_index] == RTLS_DEMO_MSG_TAG_FINAL)
 800c354:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 800c358:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c35c:	4413      	add	r3, r2
 800c35e:	7e1b      	ldrb	r3, [r3, #24]
 800c360:	2b29      	cmp	r3, #41	; 0x29
 800c362:	f040 813d 	bne.w	800c5e0 <instance_rxgoodcallback+0xe98>
			{
				dwt_rxdiag_t dwt_diag;
				dwt_readdiagnostics(&dwt_diag);
 800c366:	f107 0320 	add.w	r3, r7, #32
 800c36a:	4618      	mov	r0, r3
 800c36c:	f004 fc18 	bl	8010ba0 <dwt_readdiagnostics>

				uint8 RXPACC_NOSAT_OFFSET = 0x2C;
 800c370:	232c      	movs	r3, #44	; 0x2c
 800c372:	f887 347e 	strb.w	r3, [r7, #1150]	; 0x47e
				uint16 RXPACC_NOSAT = dwt_read16bitoffsetreg(DRX_CONF_ID, RXPACC_NOSAT_OFFSET);
 800c376:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800c37a:	4619      	mov	r1, r3
 800c37c:	2027      	movs	r0, #39	; 0x27
 800c37e:	f004 fd90 	bl	8010ea2 <dwt_read16bitoffsetreg>
 800c382:	4603      	mov	r3, r0
 800c384:	f8a7 347c 	strh.w	r3, [r7, #1148]	; 0x47c

				//following adjustment from function Adjust_RXPACC in following link
				//https://github.com/damaki/DW1000/blob/00da81fce9c11c2632c5776add0629971b1d5ba6/src/dw1000-reception_quality.adb
				if(RXPACC_NOSAT == dwt_diag.rxPreamCount)
 800c388:	f107 0320 	add.w	r3, r7, #32
 800c38c:	899b      	ldrh	r3, [r3, #12]
 800c38e:	f8b7 247c 	ldrh.w	r2, [r7, #1148]	; 0x47c
 800c392:	429a      	cmp	r2, r3
 800c394:	d165      	bne.n	800c462 <instance_rxgoodcallback+0xd1a>
				{
					uint8 rxpacc_adj = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	f887 34a3 	strb.w	r3, [r7, #1187]	; 0x4a3
					instance_data[instance].acc_adj = 1;
 800c39c:	4aae      	ldr	r2, [pc, #696]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c39e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c3a2:	f243 6170 	movw	r1, #13936	; 0x3670
 800c3a6:	fb01 f303 	mul.w	r3, r1, r3
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c3b0:	3318      	adds	r3, #24
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	701a      	strb	r2, [r3, #0]

					if(instance_data[instance].configData.nsSFD == TRUE)
 800c3b6:	4aa8      	ldr	r2, [pc, #672]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c3b8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c3bc:	f243 6170 	movw	r1, #13936	; 0x3670
 800c3c0:	fb01 f303 	mul.w	r3, r1, r3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	330a      	adds	r3, #10
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d122      	bne.n	800c414 <instance_rxgoodcallback+0xccc>
					{
						if(instance_data[instance].configData.dataRate == DWT_BR_110K)
 800c3ce:	4aa2      	ldr	r2, [pc, #648]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c3d0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c3d4:	f243 6170 	movw	r1, #13936	; 0x3670
 800c3d8:	fb01 f303 	mul.w	r3, r1, r3
 800c3dc:	4413      	add	r3, r2
 800c3de:	330b      	adds	r3, #11
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d102      	bne.n	800c3ec <instance_rxgoodcallback+0xca4>
						{
							rxpacc_adj = 82;
 800c3e6:	2352      	movs	r3, #82	; 0x52
 800c3e8:	f887 34a3 	strb.w	r3, [r7, #1187]	; 0x4a3
						}
						if(instance_data[instance].configData.dataRate == DWT_BR_850K)
 800c3ec:	4a9a      	ldr	r2, [pc, #616]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c3ee:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c3f2:	f243 6170 	movw	r1, #13936	; 0x3670
 800c3f6:	fb01 f303 	mul.w	r3, r1, r3
 800c3fa:	4413      	add	r3, r2
 800c3fc:	330b      	adds	r3, #11
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d103      	bne.n	800c40c <instance_rxgoodcallback+0xcc4>
						{
							rxpacc_adj = 18;
 800c404:	2312      	movs	r3, #18
 800c406:	f887 34a3 	strb.w	r3, [r7, #1187]	; 0x4a3
 800c40a:	e016      	b.n	800c43a <instance_rxgoodcallback+0xcf2>
						}
						else //DWT_BR_6M8
						{
							rxpacc_adj = 10;
 800c40c:	230a      	movs	r3, #10
 800c40e:	f887 34a3 	strb.w	r3, [r7, #1187]	; 0x4a3
 800c412:	e012      	b.n	800c43a <instance_rxgoodcallback+0xcf2>
						}
					}
					else
					{
						if(instance_data[instance].configData.dataRate == DWT_BR_110K){
 800c414:	4a90      	ldr	r2, [pc, #576]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c416:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c41a:	f243 6170 	movw	r1, #13936	; 0x3670
 800c41e:	fb01 f303 	mul.w	r3, r1, r3
 800c422:	4413      	add	r3, r2
 800c424:	330b      	adds	r3, #11
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <instance_rxgoodcallback+0xcec>
							rxpacc_adj = 64;
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	f887 34a3 	strb.w	r3, [r7, #1187]	; 0x4a3
 800c432:	e002      	b.n	800c43a <instance_rxgoodcallback+0xcf2>
						}
						else //DWT_BR_850K or DWT_BR_6M8
						{
							rxpacc_adj = 5;
 800c434:	2305      	movs	r3, #5
 800c436:	f887 34a3 	strb.w	r3, [r7, #1187]	; 0x4a3
						}
					}

					if (rxpacc_adj <= dwt_diag.rxPreamCount)
 800c43a:	f897 34a3 	ldrb.w	r3, [r7, #1187]	; 0x4a3
 800c43e:	b29a      	uxth	r2, r3
 800c440:	f107 0320 	add.w	r3, r7, #32
 800c444:	899b      	ldrh	r3, [r3, #12]
 800c446:	429a      	cmp	r2, r3
 800c448:	d818      	bhi.n	800c47c <instance_rxgoodcallback+0xd34>
					{
						dwt_diag.rxPreamCount -= rxpacc_adj;
 800c44a:	f107 0320 	add.w	r3, r7, #32
 800c44e:	899a      	ldrh	r2, [r3, #12]
 800c450:	f897 34a3 	ldrb.w	r3, [r7, #1187]	; 0x4a3
 800c454:	b29b      	uxth	r3, r3
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	b29a      	uxth	r2, r3
 800c45a:	f107 0320 	add.w	r3, r7, #32
 800c45e:	819a      	strh	r2, [r3, #12]
 800c460:	e00c      	b.n	800c47c <instance_rxgoodcallback+0xd34>
					}

				}
				else
				{
					instance_data[instance].acc_adj = 0;
 800c462:	4a7d      	ldr	r2, [pc, #500]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c464:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c468:	f243 6170 	movw	r1, #13936	; 0x3670
 800c46c:	fb01 f303 	mul.w	r3, r1, r3
 800c470:	4413      	add	r3, r2
 800c472:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c476:	3318      	adds	r3, #24
 800c478:	2200      	movs	r2, #0
 800c47a:	701a      	strb	r2, [r3, #0]
				}


				//10 log (C * 2^17 / N^2) - A
				double C =(double)dwt_diag.maxGrowthCIR;
 800c47c:	f107 0320 	add.w	r3, r7, #32
 800c480:	895b      	ldrh	r3, [r3, #10]
 800c482:	4618      	mov	r0, r3
 800c484:	f7f4 f81a 	bl	80004bc <__aeabi_ui2d>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 800c490:	e9c1 2300 	strd	r2, r3, [r1]
				if (C <= 0.0)
 800c494:	f04f 0200 	mov.w	r2, #0
 800c498:	f04f 0300 	mov.w	r3, #0
 800c49c:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 800c4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a4:	f7f4 fb00 	bl	8000aa8 <__aeabi_dcmple>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d006      	beq.n	800c4bc <instance_rxgoodcallback+0xd74>
				{
					C = 1;
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	4b6a      	ldr	r3, [pc, #424]	; (800c65c <instance_rxgoodcallback+0xf14>)
 800c4b4:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 800c4b8:	e9c1 2300 	strd	r2, r3, [r1]
				}

				double Nsquared = pow(dwt_diag.rxPreamCount,2);
 800c4bc:	f107 0320 	add.w	r3, r7, #32
 800c4c0:	899b      	ldrh	r3, [r3, #12]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f3 fffa 	bl	80004bc <__aeabi_ui2d>
 800c4c8:	f04f 0200 	mov.w	r2, #0
 800c4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4d0:	f009 fd34 	bl	8015f3c <pow>
 800c4d4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c4d8:	e9c3 0100 	strd	r0, r1, [r3]
				if (Nsquared <= 0.0)
 800c4dc:	f04f 0200 	mov.w	r2, #0
 800c4e0:	f04f 0300 	mov.w	r3, #0
 800c4e4:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 800c4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ec:	f7f4 fadc 	bl	8000aa8 <__aeabi_dcmple>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d006      	beq.n	800c504 <instance_rxgoodcallback+0xdbc>
				{
					Nsquared = 1;
 800c4f6:	f04f 0200 	mov.w	r2, #0
 800c4fa:	4b58      	ldr	r3, [pc, #352]	; (800c65c <instance_rxgoodcallback+0xf14>)
 800c4fc:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 800c500:	e9c1 2300 	strd	r2, r3, [r1]
				}

				double A = 0;
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 800c510:	e9c1 2300 	strd	r2, r3, [r1]
				if (instance_data[instance].configData.prf == DWT_PRF_16M)
 800c514:	4a50      	ldr	r2, [pc, #320]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c516:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c51a:	f243 6170 	movw	r1, #13936	; 0x3670
 800c51e:	fb01 f303 	mul.w	r3, r1, r3
 800c522:	4413      	add	r3, r2
 800c524:	3305      	adds	r3, #5
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d107      	bne.n	800c53c <instance_rxgoodcallback+0xdf4>
				{
					A = 113.77;
 800c52c:	a346      	add	r3, pc, #280	; (adr r3, 800c648 <instance_rxgoodcallback+0xf00>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 800c536:	e9c1 2300 	strd	r2, r3, [r1]
 800c53a:	e006      	b.n	800c54a <instance_rxgoodcallback+0xe02>
				}
				else //DWT_PRF_64M
				{
					A = 121.74;
 800c53c:	a344      	add	r3, pc, #272	; (adr r3, 800c650 <instance_rxgoodcallback+0xf08>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 800c546:	e9c1 2300 	strd	r2, r3, [r1]
				}

				instance_data[instance].rxPWR = (double)(10.0*log10(C*pow(2,17)/Nsquared)) - A;
 800c54a:	f04f 0200 	mov.w	r2, #0
 800c54e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800c552:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 800c556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c55a:	f7f4 f829 	bl	80005b0 <__aeabi_dmul>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4610      	mov	r0, r2
 800c564:	4619      	mov	r1, r3
 800c566:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56e:	f7f4 f949 	bl	8000804 <__aeabi_ddiv>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4610      	mov	r0, r2
 800c578:	4619      	mov	r1, r3
 800c57a:	f009 fca5 	bl	8015ec8 <log10>
 800c57e:	f04f 0200 	mov.w	r2, #0
 800c582:	4b37      	ldr	r3, [pc, #220]	; (800c660 <instance_rxgoodcallback+0xf18>)
 800c584:	f7f4 f814 	bl	80005b0 <__aeabi_dmul>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4610      	mov	r0, r2
 800c58e:	4619      	mov	r1, r3
 800c590:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f3 fe52 	bl	8000240 <__aeabi_dsub>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4a2c      	ldr	r2, [pc, #176]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c5a6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c5aa:	f243 6470 	movw	r4, #13936	; 0x3670
 800c5ae:	fb04 f303 	mul.w	r3, r4, r3
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c5b8:	3310      	adds	r3, #16
 800c5ba:	e9c3 0100 	strd	r0, r1, [r3]

				instance_data[instance].dwt_final_rx = dw_event.timeStamp;
 800c5be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800c5c6:	4a24      	ldr	r2, [pc, #144]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c5c8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c5cc:	f243 6470 	movw	r4, #13936	; 0x3670
 800c5d0:	fb04 f303 	mul.w	r3, r4, r3
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800c5da:	3310      	adds	r3, #16
 800c5dc:	e9c3 0100 	strd	r0, r1, [r3]
			}

			place_event = 1;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800c5e6:	e006      	b.n	800c5f6 <instance_rxgoodcallback+0xeae>
		}
		else if (rxd_event == DWT_SIG_RX_BLINK)
 800c5e8:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 800c5ec:	2b07      	cmp	r3, #7
 800c5ee:	d102      	bne.n	800c5f6 <instance_rxgoodcallback+0xeae>
		{
			place_event = 1;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
		}
	}

	if(place_event)
 800c5f6:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00e      	beq.n	800c61c <instance_rxgoodcallback+0xed4>
	{
		instance_putevent(dw_event);
 800c5fe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c602:	4668      	mov	r0, sp
 800c604:	f104 0310 	add.w	r3, r4, #16
 800c608:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c60c:	4619      	mov	r1, r3
 800c60e:	f006 fd13 	bl	8013038 <memcpy>
 800c612:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c616:	f000 f84d 	bl	800c6b4 <instance_putevent>
	}
	else
	{
		instancerxon(&instance_data[instance], 0, 0); //immediately reenable RX
	}
}
 800c61a:	e00e      	b.n	800c63a <instance_rxgoodcallback+0xef2>
		instancerxon(&instance_data[instance], 0, 0); //immediately reenable RX
 800c61c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800c620:	f243 6270 	movw	r2, #13936	; 0x3670
 800c624:	fb02 f303 	mul.w	r3, r2, r3
 800c628:	4a0b      	ldr	r2, [pc, #44]	; (800c658 <instance_rxgoodcallback+0xf10>)
 800c62a:	1898      	adds	r0, r3, r2
 800c62c:	f04f 0200 	mov.w	r2, #0
 800c630:	f04f 0300 	mov.w	r3, #0
 800c634:	2100      	movs	r1, #0
 800c636:	f7fa f83d 	bl	80066b4 <instancerxon>
}
 800c63a:	bf00      	nop
 800c63c:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 800c640:	46bd      	mov	sp, r7
 800c642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c646:	bf00      	nop
 800c648:	ae147ae1 	.word	0xae147ae1
 800c64c:	405c7147 	.word	0x405c7147
 800c650:	28f5c28f 	.word	0x28f5c28f
 800c654:	405e6f5c 	.word	0x405e6f5c
 800c658:	20000348 	.word	0x20000348
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	40240000 	.word	0x40240000

0800c664 <instance_peekevent>:

int instance_peekevent(void)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
	int instance = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	607b      	str	r3, [r7, #4]
    return instance_data[instance].dwevent[instance_data[instance].dweventPeek].type; //return the type of event that is in front of the queue
 800c66e:	4a10      	ldr	r2, [pc, #64]	; (800c6b0 <instance_peekevent+0x4c>)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f243 6170 	movw	r1, #13936	; 0x3670
 800c676:	fb01 f303 	mul.w	r3, r1, r3
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c680:	330a      	adds	r3, #10
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	490a      	ldr	r1, [pc, #40]	; (800c6b0 <instance_peekevent+0x4c>)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800c68e:	fb02 f200 	mul.w	r2, r2, r0
 800c692:	f243 6070 	movw	r0, #13936	; 0x3670
 800c696:	fb00 f303 	mul.w	r3, r0, r3
 800c69a:	4413      	add	r3, r2
 800c69c:	440b      	add	r3, r1
 800c69e:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	781b      	ldrb	r3, [r3, #0]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bc80      	pop	{r7}
 800c6ae:	4770      	bx	lr
 800c6b0:	20000348 	.word	0x20000348

0800c6b4 <instance_putevent>:

void instance_putevent(event_data_t newevent)
{
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	f107 0c10 	add.w	ip, r7, #16
 800c6c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int instance = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	607b      	str	r3, [r7, #4]
	uint8 etype = newevent.type;
 800c6c8:	7c3b      	ldrb	r3, [r7, #16]
 800c6ca:	70fb      	strb	r3, [r7, #3]

	newevent.type = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	743b      	strb	r3, [r7, #16]

	//copy event
	instance_data[instance].dwevent[instance_data[instance].dweventIdxIn] = newevent;
 800c6d0:	4a3c      	ldr	r2, [pc, #240]	; (800c7c4 <instance_putevent+0x110>)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f243 6170 	movw	r1, #13936	; 0x3670
 800c6d8:	fb01 f303 	mul.w	r3, r1, r3
 800c6dc:	4413      	add	r3, r2
 800c6de:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c6e2:	3309      	adds	r3, #9
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	4936      	ldr	r1, [pc, #216]	; (800c7c4 <instance_putevent+0x110>)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800c6f0:	fb02 f200 	mul.w	r2, r2, r0
 800c6f4:	f243 6070 	movw	r0, #13936	; 0x3670
 800c6f8:	fb00 f303 	mul.w	r3, r0, r3
 800c6fc:	4413      	add	r3, r2
 800c6fe:	440b      	add	r3, r1
 800c700:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c704:	3308      	adds	r3, #8
 800c706:	4618      	mov	r0, r3
 800c708:	f107 0310 	add.w	r3, r7, #16
 800c70c:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800c710:	4619      	mov	r1, r3
 800c712:	f006 fc91 	bl	8013038 <memcpy>

	//set type - this makes it a new event (making sure the event data is copied before event is set as new)
	//to make sure that the get event function does not get an incomplete event
	instance_data[instance].dwevent[instance_data[instance].dweventIdxIn].type = etype;
 800c716:	4a2b      	ldr	r2, [pc, #172]	; (800c7c4 <instance_putevent+0x110>)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f243 6170 	movw	r1, #13936	; 0x3670
 800c71e:	fb01 f303 	mul.w	r3, r1, r3
 800c722:	4413      	add	r3, r2
 800c724:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c728:	3309      	adds	r3, #9
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	4618      	mov	r0, r3
 800c72e:	4925      	ldr	r1, [pc, #148]	; (800c7c4 <instance_putevent+0x110>)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800c736:	fb02 f200 	mul.w	r2, r2, r0
 800c73a:	f243 6070 	movw	r0, #13936	; 0x3670
 800c73e:	fb00 f303 	mul.w	r3, r0, r3
 800c742:	4413      	add	r3, r2
 800c744:	440b      	add	r3, r1
 800c746:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c74a:	3308      	adds	r3, #8
 800c74c:	78fa      	ldrb	r2, [r7, #3]
 800c74e:	701a      	strb	r2, [r3, #0]

	instance_data[instance].dweventIdxIn++;
 800c750:	4a1c      	ldr	r2, [pc, #112]	; (800c7c4 <instance_putevent+0x110>)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f243 6170 	movw	r1, #13936	; 0x3670
 800c758:	fb01 f303 	mul.w	r3, r1, r3
 800c75c:	4413      	add	r3, r2
 800c75e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c762:	3309      	adds	r3, #9
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	3301      	adds	r3, #1
 800c768:	b2d8      	uxtb	r0, r3
 800c76a:	4a16      	ldr	r2, [pc, #88]	; (800c7c4 <instance_putevent+0x110>)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f243 6170 	movw	r1, #13936	; 0x3670
 800c772:	fb01 f303 	mul.w	r3, r1, r3
 800c776:	4413      	add	r3, r2
 800c778:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c77c:	3309      	adds	r3, #9
 800c77e:	4602      	mov	r2, r0
 800c780:	701a      	strb	r2, [r3, #0]

	if(MAX_EVENT_NUMBER == instance_data[instance].dweventIdxIn)
 800c782:	4a10      	ldr	r2, [pc, #64]	; (800c7c4 <instance_putevent+0x110>)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f243 6170 	movw	r1, #13936	; 0x3670
 800c78a:	fb01 f303 	mul.w	r3, r1, r3
 800c78e:	4413      	add	r3, r2
 800c790:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c794:	3309      	adds	r3, #9
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d10b      	bne.n	800c7b4 <instance_putevent+0x100>
		instance_data[instance].dweventIdxIn = 0;
 800c79c:	4a09      	ldr	r2, [pc, #36]	; (800c7c4 <instance_putevent+0x110>)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f243 6170 	movw	r1, #13936	; 0x3670
 800c7a4:	fb01 f303 	mul.w	r3, r1, r3
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c7ae:	3309      	adds	r3, #9
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	701a      	strb	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7be:	b004      	add	sp, #16
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	20000348 	.word	0x20000348

0800c7c8 <instance_getevent>:

event_data_t dw_event_g;

event_data_t* instance_getevent(int x)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
	int instance = 0;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]
	int indexOut = instance_data[instance].dweventIdxOut;
 800c7d4:	4a92      	ldr	r2, [pc, #584]	; (800ca20 <instance_getevent+0x258>)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f243 6170 	movw	r1, #13936	; 0x3670
 800c7dc:	fb01 f303 	mul.w	r3, r1, r3
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c7e6:	3308      	adds	r3, #8
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	60bb      	str	r3, [r7, #8]

	if(instance_data[instance].dwevent[indexOut].type == 0) //exit with "no event"
 800c7ec:	498c      	ldr	r1, [pc, #560]	; (800ca20 <instance_getevent+0x258>)
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c7f6:	fb00 f202 	mul.w	r2, r0, r2
 800c7fa:	f243 6070 	movw	r0, #13936	; 0x3670
 800c7fe:	fb00 f303 	mul.w	r3, r0, r3
 800c802:	4413      	add	r3, r2
 800c804:	440b      	add	r3, r1
 800c806:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c80a:	3308      	adds	r3, #8
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d107      	bne.n	800c822 <instance_getevent+0x5a>
	{
		dw_event_g.type = 0;
 800c812:	4b84      	ldr	r3, [pc, #528]	; (800ca24 <instance_getevent+0x25c>)
 800c814:	2200      	movs	r2, #0
 800c816:	701a      	strb	r2, [r3, #0]
		dw_event_g.typeSave = 0;
 800c818:	4b82      	ldr	r3, [pc, #520]	; (800ca24 <instance_getevent+0x25c>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	705a      	strb	r2, [r3, #1]
		return &dw_event_g;
 800c81e:	4b81      	ldr	r3, [pc, #516]	; (800ca24 <instance_getevent+0x25c>)
 800c820:	e0f9      	b.n	800ca16 <instance_getevent+0x24e>
	}

	//copy the event
	dw_event_g.typeSave = instance_data[instance].dwevent[indexOut].typeSave ;
 800c822:	497f      	ldr	r1, [pc, #508]	; (800ca20 <instance_getevent+0x258>)
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c82c:	fb00 f202 	mul.w	r2, r0, r2
 800c830:	f243 6070 	movw	r0, #13936	; 0x3670
 800c834:	fb00 f303 	mul.w	r3, r0, r3
 800c838:	4413      	add	r3, r2
 800c83a:	440b      	add	r3, r1
 800c83c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c840:	3309      	adds	r3, #9
 800c842:	781a      	ldrb	r2, [r3, #0]
 800c844:	4b77      	ldr	r3, [pc, #476]	; (800ca24 <instance_getevent+0x25c>)
 800c846:	705a      	strb	r2, [r3, #1]
	dw_event_g.typePend = instance_data[instance].dwevent[indexOut].typePend ;
 800c848:	4975      	ldr	r1, [pc, #468]	; (800ca20 <instance_getevent+0x258>)
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c852:	fb00 f202 	mul.w	r2, r0, r2
 800c856:	f243 6070 	movw	r0, #13936	; 0x3670
 800c85a:	fb00 f303 	mul.w	r3, r0, r3
 800c85e:	4413      	add	r3, r2
 800c860:	440b      	add	r3, r1
 800c862:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c866:	330a      	adds	r3, #10
 800c868:	781a      	ldrb	r2, [r3, #0]
 800c86a:	4b6e      	ldr	r3, [pc, #440]	; (800ca24 <instance_getevent+0x25c>)
 800c86c:	709a      	strb	r2, [r3, #2]
	dw_event_g.rxLength = instance_data[instance].dwevent[indexOut].rxLength ;
 800c86e:	496c      	ldr	r1, [pc, #432]	; (800ca20 <instance_getevent+0x258>)
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c878:	fb00 f202 	mul.w	r2, r0, r2
 800c87c:	f243 6070 	movw	r0, #13936	; 0x3670
 800c880:	fb00 f303 	mul.w	r3, r0, r3
 800c884:	4413      	add	r3, r2
 800c886:	440b      	add	r3, r1
 800c888:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c88c:	330c      	adds	r3, #12
 800c88e:	881a      	ldrh	r2, [r3, #0]
 800c890:	4b64      	ldr	r3, [pc, #400]	; (800ca24 <instance_getevent+0x25c>)
 800c892:	809a      	strh	r2, [r3, #4]
	dw_event_g.timeStamp = instance_data[instance].dwevent[indexOut].timeStamp ;
 800c894:	4962      	ldr	r1, [pc, #392]	; (800ca20 <instance_getevent+0x258>)
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c89e:	fb00 f202 	mul.w	r2, r0, r2
 800c8a2:	f243 6070 	movw	r0, #13936	; 0x3670
 800c8a6:	fb00 f303 	mul.w	r3, r0, r3
 800c8aa:	4413      	add	r3, r2
 800c8ac:	440b      	add	r3, r1
 800c8ae:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c8b2:	3310      	adds	r3, #16
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	495a      	ldr	r1, [pc, #360]	; (800ca24 <instance_getevent+0x25c>)
 800c8ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dw_event_g.timeStamp32l = instance_data[instance].dwevent[indexOut].timeStamp32l ;
 800c8be:	4958      	ldr	r1, [pc, #352]	; (800ca20 <instance_getevent+0x258>)
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c8c8:	fb00 f202 	mul.w	r2, r0, r2
 800c8cc:	f243 6070 	movw	r0, #13936	; 0x3670
 800c8d0:	fb00 f303 	mul.w	r3, r0, r3
 800c8d4:	4413      	add	r3, r2
 800c8d6:	440b      	add	r3, r1
 800c8d8:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c8dc:	3318      	adds	r3, #24
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a50      	ldr	r2, [pc, #320]	; (800ca24 <instance_getevent+0x25c>)
 800c8e2:	6113      	str	r3, [r2, #16]
	dw_event_g.timeStamp32h = instance_data[instance].dwevent[indexOut].timeStamp32h ;
 800c8e4:	494e      	ldr	r1, [pc, #312]	; (800ca20 <instance_getevent+0x258>)
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c8ee:	fb00 f202 	mul.w	r2, r0, r2
 800c8f2:	f243 6070 	movw	r0, #13936	; 0x3670
 800c8f6:	fb00 f303 	mul.w	r3, r0, r3
 800c8fa:	4413      	add	r3, r2
 800c8fc:	440b      	add	r3, r1
 800c8fe:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c902:	331c      	adds	r3, #28
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a47      	ldr	r2, [pc, #284]	; (800ca24 <instance_getevent+0x25c>)
 800c908:	6153      	str	r3, [r2, #20]

	memcpy(&dw_event_g.msgu, &instance_data[instance].dwevent[indexOut].msgu, sizeof(instance_data[instance].dwevent[indexOut].msgu));
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800c910:	fb02 f203 	mul.w	r2, r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f243 6170 	movw	r1, #13936	; 0x3670
 800c91a:	fb01 f303 	mul.w	r3, r1, r3
 800c91e:	4413      	add	r3, r2
 800c920:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 800c924:	4a3e      	ldr	r2, [pc, #248]	; (800ca20 <instance_getevent+0x258>)
 800c926:	441a      	add	r2, r3
 800c928:	4b3e      	ldr	r3, [pc, #248]	; (800ca24 <instance_getevent+0x25c>)
 800c92a:	3318      	adds	r3, #24
 800c92c:	4611      	mov	r1, r2
 800c92e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c932:	4618      	mov	r0, r3
 800c934:	f006 fb80 	bl	8013038 <memcpy>

	dw_event_g.type = instance_data[instance].dwevent[indexOut].type ;
 800c938:	4939      	ldr	r1, [pc, #228]	; (800ca20 <instance_getevent+0x258>)
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c942:	fb00 f202 	mul.w	r2, r0, r2
 800c946:	f243 6070 	movw	r0, #13936	; 0x3670
 800c94a:	fb00 f303 	mul.w	r3, r0, r3
 800c94e:	4413      	add	r3, r2
 800c950:	440b      	add	r3, r1
 800c952:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c956:	3308      	adds	r3, #8
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	4b32      	ldr	r3, [pc, #200]	; (800ca24 <instance_getevent+0x25c>)
 800c95c:	701a      	strb	r2, [r3, #0]

	instance_data[instance].dwevent[indexOut].type = 0; //clear the event
 800c95e:	4930      	ldr	r1, [pc, #192]	; (800ca20 <instance_getevent+0x258>)
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f44f 6083 	mov.w	r0, #1048	; 0x418
 800c968:	fb00 f202 	mul.w	r2, r0, r2
 800c96c:	f243 6070 	movw	r0, #13936	; 0x3670
 800c970:	fb00 f303 	mul.w	r3, r0, r3
 800c974:	4413      	add	r3, r2
 800c976:	440b      	add	r3, r1
 800c978:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800c97c:	3308      	adds	r3, #8
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]

	instance_data[instance].dweventIdxOut++;
 800c982:	4a27      	ldr	r2, [pc, #156]	; (800ca20 <instance_getevent+0x258>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f243 6170 	movw	r1, #13936	; 0x3670
 800c98a:	fb01 f303 	mul.w	r3, r1, r3
 800c98e:	4413      	add	r3, r2
 800c990:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c994:	3308      	adds	r3, #8
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	3301      	adds	r3, #1
 800c99a:	b2d8      	uxtb	r0, r3
 800c99c:	4a20      	ldr	r2, [pc, #128]	; (800ca20 <instance_getevent+0x258>)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f243 6170 	movw	r1, #13936	; 0x3670
 800c9a4:	fb01 f303 	mul.w	r3, r1, r3
 800c9a8:	4413      	add	r3, r2
 800c9aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	701a      	strb	r2, [r3, #0]
	if(MAX_EVENT_NUMBER == instance_data[instance].dweventIdxOut) //wrap the counter
 800c9b4:	4a1a      	ldr	r2, [pc, #104]	; (800ca20 <instance_getevent+0x258>)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f243 6170 	movw	r1, #13936	; 0x3670
 800c9bc:	fb01 f303 	mul.w	r3, r1, r3
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c9c6:	3308      	adds	r3, #8
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b08      	cmp	r3, #8
 800c9cc:	d10b      	bne.n	800c9e6 <instance_getevent+0x21e>
	{
		instance_data[instance].dweventIdxOut = 0;
 800c9ce:	4a14      	ldr	r2, [pc, #80]	; (800ca20 <instance_getevent+0x258>)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f243 6170 	movw	r1, #13936	; 0x3670
 800c9d6:	fb01 f303 	mul.w	r3, r1, r3
 800c9da:	4413      	add	r3, r2
 800c9dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	701a      	strb	r2, [r3, #0]
	}

	instance_data[instance].dweventPeek = instance_data[instance].dweventIdxOut; //set the new peek value
 800c9e6:	4a0e      	ldr	r2, [pc, #56]	; (800ca20 <instance_getevent+0x258>)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f243 6170 	movw	r1, #13936	; 0x3670
 800c9ee:	fb01 f303 	mul.w	r3, r1, r3
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	7818      	ldrb	r0, [r3, #0]
 800c9fc:	4a08      	ldr	r2, [pc, #32]	; (800ca20 <instance_getevent+0x258>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f243 6170 	movw	r1, #13936	; 0x3670
 800ca04:	fb01 f303 	mul.w	r3, r1, r3
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800ca0e:	330a      	adds	r3, #10
 800ca10:	4602      	mov	r2, r0
 800ca12:	701a      	strb	r2, [r3, #0]


	return &dw_event_g;
 800ca14:	4b03      	ldr	r3, [pc, #12]	; (800ca24 <instance_getevent+0x25c>)
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000348 	.word	0x20000348
 800ca24:	20004ee0 	.word	0x20004ee0

0800ca28 <instance_clearevents>:

void instance_clearevents(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
	int i = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	607b      	str	r3, [r7, #4]
	int instance = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	603b      	str	r3, [r7, #0]

	for(i=0; i<MAX_EVENT_NUMBER; i++)
 800ca36:	2300      	movs	r3, #0
 800ca38:	607b      	str	r3, [r7, #4]
 800ca3a:	e018      	b.n	800ca6e <instance_clearevents+0x46>
	{
        memset(&instance_data[instance].dwevent[i], 0, sizeof(event_data_t));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800ca42:	fb02 f203 	mul.w	r2, r2, r3
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	f243 6170 	movw	r1, #13936	; 0x3670
 800ca4c:	fb01 f303 	mul.w	r3, r1, r3
 800ca50:	4413      	add	r3, r2
 800ca52:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800ca56:	3308      	adds	r3, #8
 800ca58:	4a1a      	ldr	r2, [pc, #104]	; (800cac4 <instance_clearevents+0x9c>)
 800ca5a:	4413      	add	r3, r2
 800ca5c:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800ca60:	2100      	movs	r1, #0
 800ca62:	4618      	mov	r0, r3
 800ca64:	f006 faf6 	bl	8013054 <memset>
	for(i=0; i<MAX_EVENT_NUMBER; i++)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	607b      	str	r3, [r7, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b07      	cmp	r3, #7
 800ca72:	dde3      	ble.n	800ca3c <instance_clearevents+0x14>
	}

	instance_data[instance].dweventIdxIn = 0;
 800ca74:	4a13      	ldr	r2, [pc, #76]	; (800cac4 <instance_clearevents+0x9c>)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	f243 6170 	movw	r1, #13936	; 0x3670
 800ca7c:	fb01 f303 	mul.w	r3, r1, r3
 800ca80:	4413      	add	r3, r2
 800ca82:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800ca86:	3309      	adds	r3, #9
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
	instance_data[instance].dweventIdxOut = 0;
 800ca8c:	4a0d      	ldr	r2, [pc, #52]	; (800cac4 <instance_clearevents+0x9c>)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	f243 6170 	movw	r1, #13936	; 0x3670
 800ca94:	fb01 f303 	mul.w	r3, r1, r3
 800ca98:	4413      	add	r3, r2
 800ca9a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800ca9e:	3308      	adds	r3, #8
 800caa0:	2200      	movs	r2, #0
 800caa2:	701a      	strb	r2, [r3, #0]
	instance_data[instance].dweventPeek = 0;
 800caa4:	4a07      	ldr	r2, [pc, #28]	; (800cac4 <instance_clearevents+0x9c>)
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	f243 6170 	movw	r1, #13936	; 0x3670
 800caac:	fb01 f303 	mul.w	r3, r1, r3
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 800cab6:	330a      	adds	r3, #10
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]

}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20000348 	.word	0x20000348

0800cac8 <instance_run>:


// -------------------------------------------------------------------------------------------------------------------
int instance_run(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
    int instance = 0 ;
 800cace:	2300      	movs	r3, #0
 800cad0:	607b      	str	r3, [r7, #4]
    int done = INST_NOT_DONE_YET;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60fb      	str	r3, [r7, #12]
    int message = instance_peekevent(); //get any of the received events from ISR
 800cad6:	f7ff fdc5 	bl	800c664 <instance_peekevent>
 800cada:	60b8      	str	r0, [r7, #8]

	while(done == INST_NOT_DONE_YET)
 800cadc:	e00e      	b.n	800cafc <instance_run+0x34>
	{

		done = testapprun(&instance_data[instance], &tdma_handler, message) ; // run the communications application
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f243 6270 	movw	r2, #13936	; 0x3670
 800cae4:	fb02 f303 	mul.w	r3, r2, r3
 800cae8:	4a20      	ldr	r2, [pc, #128]	; (800cb6c <instance_run+0xa4>)
 800caea:	4413      	add	r3, r2
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	4920      	ldr	r1, [pc, #128]	; (800cb70 <instance_run+0xa8>)
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f9 fe33 	bl	800675c <testapprun>
 800caf6:	60f8      	str	r0, [r7, #12]

		message = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	60bb      	str	r3, [r7, #8]
	while(done == INST_NOT_DONE_YET)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d0ed      	beq.n	800cade <instance_run+0x16>
	}

	//only check timeouts if we aren't in the middle of ranging messages
	if(instance_data[instance].canPrintLCD == TRUE)
 800cb02:	4a1a      	ldr	r2, [pc, #104]	; (800cb6c <instance_run+0xa4>)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f243 6170 	movw	r1, #13936	; 0x3670
 800cb0a:	fb01 f303 	mul.w	r3, r1, r3
 800cb0e:	4413      	add	r3, r2
 800cb10:	3322      	adds	r3, #34	; 0x22
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d01f      	beq.n	800cb58 <instance_run+0x90>
	{
		//check timeouts.
		if(tdma_handler.check_timeouts(&tdma_handler))
 800cb18:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <instance_run+0xa8>)
 800cb1a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800cb1e:	4814      	ldr	r0, [pc, #80]	; (800cb70 <instance_run+0xa8>)
 800cb20:	4798      	blx	r3
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d017      	beq.n	800cb58 <instance_run+0x90>
		{
			//handle case where we timeout and no longer have any neighbors
			instance_data[instance].mode = DISCOVERY;
 800cb28:	4a10      	ldr	r2, [pc, #64]	; (800cb6c <instance_run+0xa4>)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f243 6170 	movw	r1, #13936	; 0x3670
 800cb30:	fb01 f303 	mul.w	r3, r1, r3
 800cb34:	4413      	add	r3, r2
 800cb36:	2200      	movs	r2, #0
 800cb38:	701a      	strb	r2, [r3, #0]
			tdma_handler.enter_discovery_mode(&tdma_handler);
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <instance_run+0xa8>)
 800cb3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb40:	480b      	ldr	r0, [pc, #44]	; (800cb70 <instance_run+0xa8>)
 800cb42:	4798      	blx	r3
			inst_processtxrxtimeout(&instance_data[instance]);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f243 6270 	movw	r2, #13936	; 0x3670
 800cb4a:	fb02 f303 	mul.w	r3, r2, r3
 800cb4e:	4a07      	ldr	r2, [pc, #28]	; (800cb6c <instance_run+0xa4>)
 800cb50:	4413      	add	r3, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe fbc2 	bl	800b2dc <inst_processtxrxtimeout>
		}
	}

    return ((done != INST_NOT_DONE_YET) ? 1 : 0);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	bf14      	ite	ne
 800cb5e:	2301      	movne	r3, #1
 800cb60:	2300      	moveq	r3, #0
 800cb62:	b2db      	uxtb	r3, r3
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000348 	.word	0x20000348
 800cb70:	200039b8 	.word	0x200039b8

0800cb74 <instanceconfigantennadelays>:

void instanceconfigantennadelays(uint16 tx, uint16 rx)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	80fb      	strh	r3, [r7, #6]
 800cb80:	4613      	mov	r3, r2
 800cb82:	80bb      	strh	r3, [r7, #4]
	instance_data[0].txAntennaDelay = tx ;
 800cb84:	4a06      	ldr	r2, [pc, #24]	; (800cba0 <instanceconfigantennadelays+0x2c>)
 800cb86:	88fb      	ldrh	r3, [r7, #6]
 800cb88:	8313      	strh	r3, [r2, #24]
	instance_data[0].rxAntennaDelay = rx ;
 800cb8a:	4a05      	ldr	r2, [pc, #20]	; (800cba0 <instanceconfigantennadelays+0x2c>)
 800cb8c:	88bb      	ldrh	r3, [r7, #4]
 800cb8e:	8353      	strh	r3, [r2, #26]

	instance_data[0].antennaDelayChanged = 1;
 800cb90:	4b03      	ldr	r3, [pc, #12]	; (800cba0 <instanceconfigantennadelays+0x2c>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	779a      	strb	r2, [r3, #30]
}
 800cb96:	bf00      	nop
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bc80      	pop	{r7}
 800cb9e:	4770      	bx	lr
 800cba0:	20000348 	.word	0x20000348

0800cba4 <slot_transition>:
extern void usb_run(void);
extern void send_usbmessage(uint8*, int);

//class methods
static bool slot_transition(struct TDMAHandler *this)
{
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	b091      	sub	sp, #68	; 0x44
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
	bool transition = FALSE;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	f7fc fc41 	bl	800943c <instance_get_local_structure_ptr>
 800cbba:	62f8      	str	r0, [r7, #44]	; 0x2c

	if(inst->mode == TAG ||
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d013      	beq.n	800cbec <slot_transition+0x48>
	   inst->mode == ANCHOR ||
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	781b      	ldrb	r3, [r3, #0]
	if(inst->mode == TAG ||
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d00f      	beq.n	800cbec <slot_transition+0x48>
	   (inst->mode == DISCOVERY && (this->discovery_mode == WAIT_SEND_SUG || this->discovery_mode == COLLECT_INF_REG)))
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	781b      	ldrb	r3, [r3, #0]
	   inst->mode == ANCHOR ||
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f040 80e9 	bne.w	800cda8 <slot_transition+0x204>
	   (inst->mode == DISCOVERY && (this->discovery_mode == WAIT_SEND_SUG || this->discovery_mode == COLLECT_INF_REG)))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800cbdc:	2b04      	cmp	r3, #4
 800cbde:	d005      	beq.n	800cbec <slot_transition+0x48>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	f040 80de 	bne.w	800cda8 <slot_transition+0x204>
	{
		uint64 time_now_us = portGetTickCntMicro();
 800cbec:	f005 f87a 	bl	8011ce4 <portGetTickCntMicro>
 800cbf0:	e9c7 0108 	strd	r0, r1, [r7, #32]
		uint64 timeSinceSlotStart64 = get_dt64(this->lastSlotStartTime64, time_now_us);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	; 0x198
 800cbfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbfe:	f7fc fb5e 	bl	80092be <get_dt64>
 800cc02:	e9c7 0106 	strd	r0, r1, [r7, #24]

		if(timeSinceSlotStart64 >= this->slotDuration_us)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	f04f 0300 	mov.w	r3, #0
 800cc12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cc16:	4299      	cmp	r1, r3
 800cc18:	bf08      	it	eq
 800cc1a:	4290      	cmpeq	r0, r2
 800cc1c:	f0c0 80dd 	bcc.w	800cdda <slot_transition+0x236>
		{
			transition = TRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			this->firstPollSentThisSlot = FALSE;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
			this->firstPollResponse = FALSE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
			this->firstPollComplete = FALSE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
			this->secondPollSentThisSlot = FALSE;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
			this->infSentThisSlot = FALSE;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
			inst->canPrintUSB = TRUE;
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			inst->canPrintLCD = TRUE;
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	2201      	movs	r2, #1
 800cc5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			//we have transitioned into the next slot.
			//get the slot number and set the start time appropriately

			uint64 timeSinceFrameStart64 = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cc64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc68:	f7fc fb29 	bl	80092be <get_dt64>
 800cc6c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			uint64 frameDuration64 = this->slotDuration_us*this->uwbListTDMAInfo[0].framelength;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800cc7c:	fb02 f303 	mul.w	r3, r2, r3
 800cc80:	461a      	mov	r2, r3
 800cc82:	f04f 0300 	mov.w	r3, #0
 800cc86:	e9c7 2304 	strd	r2, r3, [r7, #16]
			if(timeSinceFrameStart64 >= frameDuration64)
 800cc8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cc8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc92:	4299      	cmp	r1, r3
 800cc94:	bf08      	it	eq
 800cc96:	4290      	cmpeq	r0, r2
 800cc98:	d33d      	bcc.n	800cd16 <slot_transition+0x172>
			{
				int div = timeSinceFrameStart64/frameDuration64;
 800cc9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cca2:	f7f4 f8db 	bl	8000e5c <__aeabi_uldivmod>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4613      	mov	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]
				this->uwbListTDMAInfo[0].frameStartTime = timestamp_add64(this->uwbListTDMAInfo[0].frameStartTime, frameDuration64*div);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ccbc:	693e      	ldr	r6, [r7, #16]
 800ccbe:	fb03 fc06 	mul.w	ip, r3, r6
 800ccc2:	697e      	ldr	r6, [r7, #20]
 800ccc4:	fb02 f606 	mul.w	r6, r2, r6
 800ccc8:	4466      	add	r6, ip
 800ccca:	6939      	ldr	r1, [r7, #16]
 800cccc:	fba1 2302 	umull	r2, r3, r1, r2
 800ccd0:	441e      	add	r6, r3
 800ccd2:	4633      	mov	r3, r6
 800ccd4:	4650      	mov	r0, sl
 800ccd6:	4659      	mov	r1, fp
 800ccd8:	f7fc fb22 	bl	8009320 <timestamp_add64>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	e9c1 2308 	strd	r2, r3, [r1, #32]
				timeSinceFrameStart64 -= frameDuration64*div;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	461a      	mov	r2, r3
 800ccea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ccee:	6939      	ldr	r1, [r7, #16]
 800ccf0:	fb03 f001 	mul.w	r0, r3, r1
 800ccf4:	6979      	ldr	r1, [r7, #20]
 800ccf6:	fb02 f101 	mul.w	r1, r2, r1
 800ccfa:	4401      	add	r1, r0
 800ccfc:	6938      	ldr	r0, [r7, #16]
 800ccfe:	fba0 2302 	umull	r2, r3, r0, r2
 800cd02:	4419      	add	r1, r3
 800cd04:	460b      	mov	r3, r1
 800cd06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cd0a:	ebb0 0802 	subs.w	r8, r0, r2
 800cd0e:	eb61 0903 	sbc.w	r9, r1, r3
 800cd12:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
			}

			uint8 slot = timeSinceFrameStart64/(this->slotDuration_us); //integer division rounded down
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	f04f 0300 	mov.w	r3, #0
 800cd22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cd26:	f7f4 f899 	bl	8000e5c <__aeabi_uldivmod>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4613      	mov	r3, r2
 800cd30:	72fb      	strb	r3, [r7, #11]
			this->lastSlotStartTime64 = this->uwbListTDMAInfo[0].frameStartTime + (uint64)(this->slotDuration_us*slot);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800cd3e:	7afa      	ldrb	r2, [r7, #11]
 800cd40:	fb02 f303 	mul.w	r3, r2, r3
 800cd44:	461a      	mov	r2, r3
 800cd46:	f04f 0300 	mov.w	r3, #0
 800cd4a:	1884      	adds	r4, r0, r2
 800cd4c:	eb41 0503 	adc.w	r5, r1, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	e9c3 4566 	strd	r4, r5, [r3, #408]	; 0x198

			if(inst->mode != DISCOVERY)
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d01d      	beq.n	800cd9a <slot_transition+0x1f6>
			{
				if(this->slot_assigned(&this->uwbListTDMAInfo[0], slot) == TRUE)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	3208      	adds	r2, #8
 800cd68:	7af9      	ldrb	r1, [r7, #11]
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d006      	beq.n	800cd82 <slot_transition+0x1de>
				{
					inst->mode = TAG;
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	2201      	movs	r2, #1
 800cd78:	701a      	strb	r2, [r3, #0]
					inst->testAppState = TA_TX_SELECT;
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	220a      	movs	r2, #10
 800cd7e:	705a      	strb	r2, [r3, #1]
 800cd80:	e00b      	b.n	800cd9a <slot_transition+0x1f6>
					//go to TX select, select the oldest uwb, send INF, then send POLL
				}
				else
				{
					//go to RX
					inst->mode = ANCHOR;
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	2202      	movs	r2, #2
 800cd86:	701a      	strb	r2, [r3, #0]
					inst->wait4ack = 0;
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800cd8e:	3318      	adds	r3, #24
 800cd90:	2200      	movs	r2, #0
 800cd92:	701a      	strb	r2, [r3, #0]
					inst->testAppState = TA_RXE_WAIT;
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	2206      	movs	r2, #6
 800cd98:	705a      	strb	r2, [r3, #1]
				}
			}

			instance_getevent(17); //get and clear this event
 800cd9a:	2011      	movs	r0, #17
 800cd9c:	f7ff fd14 	bl	800c7c8 <instance_getevent>
			inst_processtxrxtimeout(inst);
 800cda0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda2:	f7fe fa9b 	bl	800b2dc <inst_processtxrxtimeout>
	{
 800cda6:	e018      	b.n	800cdda <slot_transition+0x236>
		}
	}
	else if(inst->mode == DISCOVERY)
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d115      	bne.n	800cddc <slot_transition+0x238>
	{
		this->infSentThisSlot = FALSE;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
		this->firstPollSentThisSlot = FALSE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
		this->firstPollResponse = FALSE;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		this->firstPollComplete = FALSE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
		this->secondPollSentThisSlot = FALSE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 800cdd8:	e000      	b.n	800cddc <slot_transition+0x238>
	{
 800cdda:	bf00      	nop
	}

	return transition;
 800cddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3744      	adds	r7, #68	; 0x44
 800cde4:	46bd      	mov	sp, r7
 800cde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdea:	0000      	movs	r0, r0
 800cdec:	0000      	movs	r0, r0
	...

0800cdf0 <update_frame_start>:

static uint64 update_frame_start(struct TDMAHandler *this){
 800cdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	b08f      	sub	sp, #60	; 0x3c
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]

	uint64 time_now_us = portGetTickCntMicro();
 800cdfa:	f004 ff73 	bl	8011ce4 <portGetTickCntMicro>
 800cdfe:	e9c7 0108 	strd	r0, r1, [r7, #32]
	uint64 frameDuration_us = this->slotDuration_us*this->uwbListTDMAInfo[0].framelength;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ce0e:	fb02 f303 	mul.w	r3, r2, r3
 800ce12:	461a      	mov	r2, r3
 800ce14:	f04f 0300 	mov.w	r3, #0
 800ce18:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64 timeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800ce22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce26:	f7fc fa4a 	bl	80092be <get_dt64>
 800ce2a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

	if(timeSinceFrameStart_us > 1000000000) //if very large number, assume frame start time accidentally moved ahead of time now
 800ce2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ce32:	a14d      	add	r1, pc, #308	; (adr r1, 800cf68 <update_frame_start+0x178>)
 800ce34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce38:	4299      	cmp	r1, r3
 800ce3a:	bf08      	it	eq
 800ce3c:	4290      	cmpeq	r0, r2
 800ce3e:	d241      	bcs.n	800cec4 <update_frame_start+0xd4>
	{
		uint64 diff_us = get_dt64(time_now_us, this->uwbListTDMAInfo[0].frameStartTime);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ce4a:	f7fc fa38 	bl	80092be <get_dt64>
 800ce4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
		int div = diff_us/frameDuration_us;
 800ce52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce5a:	f7f3 ffff 	bl	8000e5c <__aeabi_uldivmod>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4613      	mov	r3, r2
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(diff_us%frameDuration_us != 0)
 800ce66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce6e:	f7f3 fff5 	bl	8000e5c <__aeabi_uldivmod>
 800ce72:	4313      	orrs	r3, r2
 800ce74:	d002      	beq.n	800ce7c <update_frame_start+0x8c>
		{
			div += 1;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	3301      	adds	r3, #1
 800ce7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		this->uwbListTDMAInfo[0].frameStartTime = timestamp_subtract64(this->uwbListTDMAInfo[0].frameStartTime, frameDuration_us*div);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	461a      	mov	r2, r3
 800ce86:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ce8a:	69bc      	ldr	r4, [r7, #24]
 800ce8c:	fb03 f504 	mul.w	r5, r3, r4
 800ce90:	69fc      	ldr	r4, [r7, #28]
 800ce92:	fb02 f404 	mul.w	r4, r2, r4
 800ce96:	442c      	add	r4, r5
 800ce98:	69bd      	ldr	r5, [r7, #24]
 800ce9a:	fba5 2302 	umull	r2, r3, r5, r2
 800ce9e:	441c      	add	r4, r3
 800cea0:	4623      	mov	r3, r4
 800cea2:	f7fc fa71 	bl	8009388 <timestamp_subtract64>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	e9c1 2308 	strd	r2, r3, [r1, #32]
		timeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800ceb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ceba:	f7fc fa00 	bl	80092be <get_dt64>
 800cebe:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800cec2:	e048      	b.n	800cf56 <update_frame_start+0x166>
	}
	else if(timeSinceFrameStart_us >= frameDuration_us)
 800cec4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cecc:	4299      	cmp	r1, r3
 800cece:	bf08      	it	eq
 800ced0:	4290      	cmpeq	r0, r2
 800ced2:	d340      	bcc.n	800cf56 <update_frame_start+0x166>
	{
		int div = timeSinceFrameStart_us/frameDuration_us;
 800ced4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ced8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cedc:	f7f3 ffbe 	bl	8000e5c <__aeabi_uldivmod>
 800cee0:	4602      	mov	r2, r0
 800cee2:	460b      	mov	r3, r1
 800cee4:	4613      	mov	r3, r2
 800cee6:	617b      	str	r3, [r7, #20]
		this->uwbListTDMAInfo[0].frameStartTime = timestamp_add64(this->uwbListTDMAInfo[0].frameStartTime, frameDuration_us*div);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	461a      	mov	r2, r3
 800cef2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cef6:	69be      	ldr	r6, [r7, #24]
 800cef8:	fb03 fc06 	mul.w	ip, r3, r6
 800cefc:	69fe      	ldr	r6, [r7, #28]
 800cefe:	fb02 f606 	mul.w	r6, r2, r6
 800cf02:	4466      	add	r6, ip
 800cf04:	69b9      	ldr	r1, [r7, #24]
 800cf06:	fba1 2302 	umull	r2, r3, r1, r2
 800cf0a:	441e      	add	r6, r3
 800cf0c:	4633      	mov	r3, r6
 800cf0e:	4640      	mov	r0, r8
 800cf10:	4649      	mov	r1, r9
 800cf12:	f7fc fa05 	bl	8009320 <timestamp_add64>
 800cf16:	4602      	mov	r2, r0
 800cf18:	460b      	mov	r3, r1
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		timeSinceFrameStart_us -= timeSinceFrameStart_us*div;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	461a      	mov	r2, r3
 800cf24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800cf28:	f04f 0001 	mov.w	r0, #1
 800cf2c:	f04f 0100 	mov.w	r1, #0
 800cf30:	1a84      	subs	r4, r0, r2
 800cf32:	eb61 0503 	sbc.w	r5, r1, r3
 800cf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf38:	fb04 f203 	mul.w	r2, r4, r3
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	fb05 f303 	mul.w	r3, r5, r3
 800cf42:	18d1      	adds	r1, r2, r3
 800cf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf46:	fba3 2304 	umull	r2, r3, r3, r4
 800cf4a:	4419      	add	r1, r3
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800cf52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return timeSinceFrameStart_us;
 800cf56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	373c      	adds	r7, #60	; 0x3c
 800cf60:	46bd      	mov	sp, r7
 800cf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf66:	bf00      	nop
 800cf68:	3b9aca00 	.word	0x3b9aca00
 800cf6c:	00000000 	.word	0x00000000

0800cf70 <frame_sync>:

static void frame_sync(struct TDMAHandler *this, event_data_t *dw_event, uint8 framelength, uint64 timeSinceFrameStart_us, uint8 srcIndex, FRAME_SYNC_MODE mode)
{
 800cf70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf74:	b0c0      	sub	sp, #256	; 0x100
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	66f8      	str	r0, [r7, #108]	; 0x6c
 800cf7a:	66b9      	str	r1, [r7, #104]	; 0x68
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800cf82:	2000      	movs	r0, #0
 800cf84:	f7fc fa5a 	bl	800943c <instance_get_local_structure_ptr>
 800cf88:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	//do not process erroneous tsfs
	//can happen if frame start time is shifted ahead of time_now_us in transmitting UWB
	if(timeSinceFrameStart_us > 1000000000 || timeSinceFrameStart_us == 0)
 800cf8c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800cf90:	a3bb      	add	r3, pc, #748	; (adr r3, 800d280 <frame_sync+0x310>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	428b      	cmp	r3, r1
 800cf98:	bf08      	it	eq
 800cf9a:	4282      	cmpeq	r2, r0
 800cf9c:	f0c0 82be 	bcc.w	800d51c <frame_sync+0x5ac>
 800cfa0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	f000 82b9 	beq.w	800d51c <frame_sync+0x5ac>
	{
		return;
	}

	uint8 sys_time_arr[5] = {0, 0, 0, 0, 0};
 800cfaa:	4ab3      	ldr	r2, [pc, #716]	; (800d278 <frame_sync+0x308>)
 800cfac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cfb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfb4:	6018      	str	r0, [r3, #0]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	7019      	strb	r1, [r3, #0]
	dwt_readsystime(sys_time_arr);
 800cfba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f003 fe3d 	bl	8010c3e <dwt_readsystime>
	uint64 dwt_time_now = 0;
 800cfc4:	f04f 0200 	mov.w	r2, #0
 800cfc8:	f04f 0300 	mov.w	r3, #0
 800cfcc:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	dwt_time_now = (uint64)sys_time_arr[0] + ((uint64)sys_time_arr[1] << 8) + ((uint64)sys_time_arr[2] << 16) + ((uint64)sys_time_arr[3] << 24) + ((uint64)sys_time_arr[4] << 32);
 800cfd0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cfd4:	b2dc      	uxtb	r4, r3
 800cfd6:	f04f 0500 	mov.w	r5, #0
 800cfda:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	f04f 0300 	mov.w	r3, #0
 800cfe4:	f04f 0000 	mov.w	r0, #0
 800cfe8:	f04f 0100 	mov.w	r1, #0
 800cfec:	0219      	lsls	r1, r3, #8
 800cfee:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cff2:	0210      	lsls	r0, r2, #8
 800cff4:	eb14 0a00 	adds.w	sl, r4, r0
 800cff8:	eb45 0b01 	adc.w	fp, r5, r1
 800cffc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800d000:	b2da      	uxtb	r2, r3
 800d002:	f04f 0300 	mov.w	r3, #0
 800d006:	f04f 0000 	mov.w	r0, #0
 800d00a:	f04f 0100 	mov.w	r1, #0
 800d00e:	0419      	lsls	r1, r3, #16
 800d010:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800d014:	0410      	lsls	r0, r2, #16
 800d016:	eb1a 0300 	adds.w	r3, sl, r0
 800d01a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d01c:	eb4b 0301 	adc.w	r3, fp, r1
 800d020:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d022:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d026:	b2da      	uxtb	r2, r3
 800d028:	f04f 0300 	mov.w	r3, #0
 800d02c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800d030:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800d034:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d038:	460b      	mov	r3, r1
 800d03a:	eb13 0308 	adds.w	r3, r3, r8
 800d03e:	653b      	str	r3, [r7, #80]	; 0x50
 800d040:	4613      	mov	r3, r2
 800d042:	eb43 0309 	adc.w	r3, r3, r9
 800d046:	657b      	str	r3, [r7, #84]	; 0x54
 800d048:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	f04f 0300 	mov.w	r3, #0
 800d052:	f04f 0000 	mov.w	r0, #0
 800d056:	f04f 0100 	mov.w	r1, #0
 800d05a:	0011      	movs	r1, r2
 800d05c:	2000      	movs	r0, #0
 800d05e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d062:	4623      	mov	r3, r4
 800d064:	181b      	adds	r3, r3, r0
 800d066:	643b      	str	r3, [r7, #64]	; 0x40
 800d068:	462b      	mov	r3, r5
 800d06a:	eb41 0303 	adc.w	r3, r1, r3
 800d06e:	647b      	str	r3, [r7, #68]	; 0x44
 800d070:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d074:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	uint64 time_now_us = portGetTickCntMicro();
 800d078:	f004 fe34 	bl	8011ce4 <portGetTickCntMicro>
 800d07c:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8

	//time from command tx to tx timestamp
	uint64 infCmdToTsDelay_us = TX_CMD_TO_TX_CB_DLY_US + inst->storedPreLen_us;
 800d080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d084:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800d088:	f112 015a 	adds.w	r1, r2, #90	; 0x5a
 800d08c:	63b9      	str	r1, [r7, #56]	; 0x38
 800d08e:	f143 0300 	adc.w	r3, r3, #0
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d094:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d098:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

	//tx antenna delay
	uint64 tx_antenna_delay = (uint64)inst->defaultAntennaDelay;
 800d09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0a0:	8b9b      	ldrh	r3, [r3, #28]
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	f04f 0300 	mov.w	r3, #0
 800d0a8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

	//rx antenna delay
	//NOTE: antenna delay is captured by the RX timestamp

	//time from rx timestamp to now
	uint64 rxfs_process_delay = dwt_getdt(dw_event->timeStamp, dwt_time_now);
 800d0ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d0b2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d0b6:	f003 fdd0 	bl	8010c5a <dwt_getdt>
 800d0ba:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0

	uint64 txrx_delay =  (uint64)(convertdevicetimetosec(tx_antenna_delay + rxfs_process_delay)*1000000.0) + infCmdToTsDelay_us;
 800d0be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d0c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d0c6:	4413      	add	r3, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fc fa45 	bl	8009558 <convertdevicetimetosec>
 800d0ce:	a368      	add	r3, pc, #416	; (adr r3, 800d270 <frame_sync+0x300>)
 800d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d4:	f7f3 fa6c 	bl	80005b0 <__aeabi_dmul>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4619      	mov	r1, r3
 800d0e0:	f7f3 feee 	bl	8000ec0 <__aeabi_d2ulz>
 800d0e4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800d0e8:	1814      	adds	r4, r2, r0
 800d0ea:	633c      	str	r4, [r7, #48]	; 0x30
 800d0ec:	414b      	adcs	r3, r1
 800d0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800d0f4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8

	uint64 hisTimeSinceFrameStart_us = timeSinceFrameStart_us + txrx_delay;
 800d0f8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800d0fc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800d100:	1884      	adds	r4, r0, r2
 800d102:	62bc      	str	r4, [r7, #40]	; 0x28
 800d104:	eb41 0303 	adc.w	r3, r1, r3
 800d108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d10a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d10e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	this->uwbListTDMAInfo[srcIndex].frameStartTime = timestamp_subtract64(time_now_us, hisTimeSinceFrameStart_us);
 800d112:	f897 4128 	ldrb.w	r4, [r7, #296]	; 0x128
 800d116:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800d11a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d11e:	f7fc f933 	bl	8009388 <timestamp_subtract64>
 800d122:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d124:	4623      	mov	r3, r4
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4423      	add	r3, r4
 800d12a:	00db      	lsls	r3, r3, #3
 800d12c:	4413      	add	r3, r2
 800d12e:	3320      	adds	r3, #32
 800d130:	e9c3 0100 	strd	r0, r1, [r3]
	uint64 myFrameDuration = this->slotDuration_us*this->uwbListTDMAInfo[0].framelength;
 800d134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d136:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800d13a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d140:	fb03 f302 	mul.w	r3, r3, r2
 800d144:	461a      	mov	r2, r3
 800d146:	f04f 0300 	mov.w	r3, #0
 800d14a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	if(mode == FS_COLLECT)
 800d14e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800d152:	2b02      	cmp	r3, #2
 800d154:	f000 81e4 	beq.w	800d520 <frame_sync+0x5b0>
	{
		return;
	}
	else if(mode == FS_ADOPT)
 800d158:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10e      	bne.n	800d17e <frame_sync+0x20e>
	{
		this->uwbListTDMAInfo[0].frameStartTime = this->uwbListTDMAInfo[srcIndex].frameStartTime;//NOTE gets processed further at end of function
 800d160:	f897 2128 	ldrb.w	r2, [r7, #296]	; 0x128
 800d164:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d166:	4613      	mov	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	440b      	add	r3, r1
 800d170:	3320      	adds	r3, #32
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d178:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800d17c:	e157      	b.n	800d42e <frame_sync+0x4be>
	}
	else// if(mode == FS_AVERAGE || mode == FS_EVAL)
	{
		uint64 myTimeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800d17e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d180:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d184:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d188:	f7fc f899 	bl	80092be <get_dt64>
 800d18c:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90

		//SELF VS INCOMING

		uint8 min_fl = this->uwbListTDMAInfo[0].framelength;
 800d190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d196:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		if(framelength < min_fl)
 800d19a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800d19e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d203      	bcs.n	800d1ae <frame_sync+0x23e>
		{
			min_fl = framelength;
 800d1a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1aa:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		}

		uint64 min_framelengthDuration = min_fl*this->slotDuration_us;
 800d1ae:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800d1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d1b8:	fb03 f302 	mul.w	r3, r3, r2
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f04f 0300 	mov.w	r3, #0
 800d1c2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		uint64 diff_tsfs = 0;
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		uint64 diff_tsfs_mod = 0;
 800d1d2:	f04f 0200 	mov.w	r2, #0
 800d1d6:	f04f 0300 	mov.w	r3, #0
 800d1da:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		uint64 diff_us = 0;
 800d1de:	f04f 0200 	mov.w	r2, #0
 800d1e2:	f04f 0300 	mov.w	r3, #0
 800d1e6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

		bool diff_add = FALSE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if(hisTimeSinceFrameStart_us <= myTimeSinceFrameStart_us)
 800d1f0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800d1f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d1f8:	428b      	cmp	r3, r1
 800d1fa:	bf08      	it	eq
 800d1fc:	4282      	cmpeq	r2, r0
 800d1fe:	d351      	bcc.n	800d2a4 <frame_sync+0x334>
		{
			diff_tsfs = myTimeSinceFrameStart_us - hisTimeSinceFrameStart_us;
 800d200:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800d204:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800d208:	1a84      	subs	r4, r0, r2
 800d20a:	623c      	str	r4, [r7, #32]
 800d20c:	eb61 0303 	sbc.w	r3, r1, r3
 800d210:	627b      	str	r3, [r7, #36]	; 0x24
 800d212:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d216:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			diff_tsfs_mod = diff_tsfs%min_framelengthDuration;
 800d21a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d21e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d222:	f7f3 fe1b 	bl	8000e5c <__aeabi_uldivmod>
 800d226:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

			if(diff_tsfs_mod <= 0.5*min_framelengthDuration)
 800d22a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d22e:	f7f3 f989 	bl	8000544 <__aeabi_ul2d>
 800d232:	4604      	mov	r4, r0
 800d234:	460d      	mov	r5, r1
 800d236:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d23a:	f7f3 f983 	bl	8000544 <__aeabi_ul2d>
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <frame_sync+0x30c>)
 800d244:	f7f3 f9b4 	bl	80005b0 <__aeabi_dmul>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 fc2a 	bl	8000aa8 <__aeabi_dcmple>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d016      	beq.n	800d288 <frame_sync+0x318>
			{
				diff_us = diff_tsfs_mod;
 800d25a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d25e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
				diff_add = TRUE;
 800d262:	2301      	movs	r3, #1
 800d264:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800d268:	e05e      	b.n	800d328 <frame_sync+0x3b8>
 800d26a:	bf00      	nop
 800d26c:	f3af 8000 	nop.w
 800d270:	00000000 	.word	0x00000000
 800d274:	412e8480 	.word	0x412e8480
 800d278:	08017b80 	.word	0x08017b80
 800d27c:	3fe00000 	.word	0x3fe00000
 800d280:	3b9aca00 	.word	0x3b9aca00
 800d284:	00000000 	.word	0x00000000
			}
			else
			{
				diff_us = min_framelengthDuration - diff_tsfs_mod;
 800d288:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d28c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d290:	1a84      	subs	r4, r0, r2
 800d292:	61bc      	str	r4, [r7, #24]
 800d294:	eb61 0303 	sbc.w	r3, r1, r3
 800d298:	61fb      	str	r3, [r7, #28]
 800d29a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d29e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
 800d2a2:	e041      	b.n	800d328 <frame_sync+0x3b8>
			}
		}
		else
		{
			diff_tsfs = hisTimeSinceFrameStart_us - myTimeSinceFrameStart_us;
 800d2a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800d2a8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d2ac:	1a84      	subs	r4, r0, r2
 800d2ae:	613c      	str	r4, [r7, #16]
 800d2b0:	eb61 0303 	sbc.w	r3, r1, r3
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d2ba:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			diff_tsfs_mod = diff_tsfs%min_framelengthDuration;
 800d2be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d2c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800d2c6:	f7f3 fdc9 	bl	8000e5c <__aeabi_uldivmod>
 800d2ca:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

			if(diff_tsfs_mod <= 0.5*min_framelengthDuration)
 800d2ce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d2d2:	f7f3 f937 	bl	8000544 <__aeabi_ul2d>
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	460d      	mov	r5, r1
 800d2da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d2de:	f7f3 f931 	bl	8000544 <__aeabi_ul2d>
 800d2e2:	f04f 0200 	mov.w	r2, #0
 800d2e6:	4b94      	ldr	r3, [pc, #592]	; (800d538 <frame_sync+0x5c8>)
 800d2e8:	f7f3 f962 	bl	80005b0 <__aeabi_dmul>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	f7f3 fbd8 	bl	8000aa8 <__aeabi_dcmple>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d004      	beq.n	800d308 <frame_sync+0x398>
			{
				diff_us = diff_tsfs_mod;
 800d2fe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d302:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800d306:	e00f      	b.n	800d328 <frame_sync+0x3b8>
			}
			else
			{
				diff_us = min_framelengthDuration - diff_tsfs_mod;
 800d308:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800d30c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d310:	1a84      	subs	r4, r0, r2
 800d312:	60bc      	str	r4, [r7, #8]
 800d314:	eb61 0303 	sbc.w	r3, r1, r3
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d31e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
				diff_add = TRUE;
 800d322:	2301      	movs	r3, #1
 800d324:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}


		//check if frame sync out of tolerance (don't xmit sync message in case of 0th slot misalignment)
		if(diff_us%(MIN_FRAMELENGTH*this->slotDuration_us) > this->frameSyncThreshold_us){
 800d328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d32a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	461a      	mov	r2, r3
 800d332:	f04f 0300 	mov.w	r3, #0
 800d336:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800d33a:	f7f3 fd8f 	bl	8000e5c <__aeabi_uldivmod>
 800d33e:	4610      	mov	r0, r2
 800d340:	4619      	mov	r1, r3
 800d342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d344:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 800d348:	428b      	cmp	r3, r1
 800d34a:	bf08      	it	eq
 800d34c:	4282      	cmpeq	r2, r0
 800d34e:	d225      	bcs.n	800d39c <frame_sync+0x42c>
			if(MIN_FRAMELENGTH*this->slotDuration_us - diff_us%(MIN_FRAMELENGTH*this->slotDuration_us) > this->frameSyncThreshold_us){
 800d350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d352:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	461c      	mov	r4, r3
 800d35a:	f04f 0500 	mov.w	r5, #0
 800d35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d360:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	461a      	mov	r2, r3
 800d368:	f04f 0300 	mov.w	r3, #0
 800d36c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800d370:	f7f3 fd74 	bl	8000e5c <__aeabi_uldivmod>
 800d374:	1aa1      	subs	r1, r4, r2
 800d376:	64b9      	str	r1, [r7, #72]	; 0x48
 800d378:	eb65 0303 	sbc.w	r3, r5, r3
 800d37c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d380:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 800d384:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d388:	428b      	cmp	r3, r1
 800d38a:	bf08      	it	eq
 800d38c:	4282      	cmpeq	r2, r0
 800d38e:	d20a      	bcs.n	800d3a6 <frame_sync+0x436>
				this->tx_sync_msg(this);
 800d390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d392:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800d396:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d398:	4798      	blx	r3
 800d39a:	e004      	b.n	800d3a6 <frame_sync+0x436>
			}
		}
		else if(mode == FS_EVAL)
 800d39c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	f000 80bf 	beq.w	800d524 <frame_sync+0x5b4>
		{
			return;
		}

		uint8 div = 2;
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
		if(mode == FS_EVAL || diff_us > this->frameSyncThreshold_us) //if diff_us > threshold, there is 0th slot misalignment
 800d3ac:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	d008      	beq.n	800d3c6 <frame_sync+0x456>
 800d3b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b6:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 800d3ba:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800d3be:	4299      	cmp	r1, r3
 800d3c0:	bf08      	it	eq
 800d3c2:	4290      	cmpeq	r0, r2
 800d3c4:	d202      	bcs.n	800d3cc <frame_sync+0x45c>
		{
			div = 1;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
		}

		if(diff_add == TRUE)
 800d3cc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d016      	beq.n	800d402 <frame_sync+0x492>
		{
			this->uwbListTDMAInfo[0].frameStartTime = timestamp_add64(this->uwbListTDMAInfo[0].frameStartTime, diff_us/div);
 800d3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800d3da:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 800d3de:	f04f 0300 	mov.w	r3, #0
 800d3e2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800d3e6:	f7f3 fd39 	bl	8000e5c <__aeabi_uldivmod>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	f7fb ff95 	bl	8009320 <timestamp_add64>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d3fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800d400:	e015      	b.n	800d42e <frame_sync+0x4be>
		}
		else
		{
			this->uwbListTDMAInfo[0].frameStartTime = timestamp_subtract64(this->uwbListTDMAInfo[0].frameStartTime, diff_us/div);
 800d402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d404:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800d408:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 800d40c:	f04f 0300 	mov.w	r3, #0
 800d410:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800d414:	f7f3 fd22 	bl	8000e5c <__aeabi_uldivmod>
 800d418:	4602      	mov	r2, r0
 800d41a:	460b      	mov	r3, r1
 800d41c:	4620      	mov	r0, r4
 800d41e:	4629      	mov	r1, r5
 800d420:	f7fb ffb2 	bl	8009388 <timestamp_subtract64>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d42a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		}
	}

	uint64 myTimeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800d42e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d430:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d434:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d438:	f7fb ff41 	bl	80092be <get_dt64>
 800d43c:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
	if(myTimeSinceFrameStart_us > 100000000)
 800d440:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800d444:	a13a      	add	r1, pc, #232	; (adr r1, 800d530 <frame_sync+0x5c0>)
 800d446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d44a:	4299      	cmp	r1, r3
 800d44c:	bf08      	it	eq
 800d44e:	4290      	cmpeq	r0, r2
 800d450:	d238      	bcs.n	800d4c4 <frame_sync+0x554>
	{
		//if this is a very large number, then the frame start time was likely moved ahead of time_now_us.
		while(this->uwbListTDMAInfo[0].frameStartTime > time_now_us)
 800d452:	e00b      	b.n	800d46c <frame_sync+0x4fc>
		{
			this->uwbListTDMAInfo[0].frameStartTime = timestamp_subtract64(this->uwbListTDMAInfo[0].frameStartTime, myFrameDuration);
 800d454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d456:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d45a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d45e:	f7fb ff93 	bl	8009388 <timestamp_subtract64>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d468:	e9c1 2308 	strd	r2, r3, [r1, #32]
		while(this->uwbListTDMAInfo[0].frameStartTime > time_now_us)
 800d46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d476:	4299      	cmp	r1, r3
 800d478:	bf08      	it	eq
 800d47a:	4290      	cmpeq	r0, r2
 800d47c:	d3ea      	bcc.n	800d454 <frame_sync+0x4e4>
		}

		myTimeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800d47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d480:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d484:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800d488:	f7fb ff19 	bl	80092be <get_dt64>
 800d48c:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 800d490:	e020      	b.n	800d4d4 <frame_sync+0x564>
	}
	else
	{
		while(myTimeSinceFrameStart_us >= myFrameDuration)
		{
			this->uwbListTDMAInfo[0].frameStartTime = timestamp_add64(this->uwbListTDMAInfo[0].frameStartTime, myFrameDuration);
 800d492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d494:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d498:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d49c:	f7fb ff40 	bl	8009320 <timestamp_add64>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d4a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
			myTimeSinceFrameStart_us -= myFrameDuration;
 800d4aa:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d4ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d4b2:	1a84      	subs	r4, r0, r2
 800d4b4:	603c      	str	r4, [r7, #0]
 800d4b6:	eb61 0303 	sbc.w	r3, r1, r3
 800d4ba:	607b      	str	r3, [r7, #4]
 800d4bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d4c0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		while(myTimeSinceFrameStart_us >= myFrameDuration)
 800d4c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d4c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800d4cc:	4299      	cmp	r1, r3
 800d4ce:	bf08      	it	eq
 800d4d0:	4290      	cmpeq	r0, r2
 800d4d2:	d2de      	bcs.n	800d492 <frame_sync+0x522>
		}
	}

	uint8 slot = myTimeSinceFrameStart_us/this->slotDuration_us; //integer division rounded down
 800d4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d4da:	461a      	mov	r2, r3
 800d4dc:	f04f 0300 	mov.w	r3, #0
 800d4e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d4e4:	f7f3 fcba 	bl	8000e5c <__aeabi_uldivmod>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	this->lastSlotStartTime64 = timestamp_add64(this->uwbListTDMAInfo[0].frameStartTime, (uint64)(this->slotDuration_us*slot));
 800d4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4f4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d4fe:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800d502:	fb02 f303 	mul.w	r3, r2, r3
 800d506:	461a      	mov	r2, r3
 800d508:	f04f 0300 	mov.w	r3, #0
 800d50c:	f7fb ff08 	bl	8009320 <timestamp_add64>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d516:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 800d51a:	e004      	b.n	800d526 <frame_sync+0x5b6>
		return;
 800d51c:	bf00      	nop
 800d51e:	e002      	b.n	800d526 <frame_sync+0x5b6>
		return;
 800d520:	bf00      	nop
 800d522:	e000      	b.n	800d526 <frame_sync+0x5b6>
			return;
 800d524:	bf00      	nop
}
 800d526:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d52a:	46bd      	mov	sp, r7
 800d52c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d530:	05f5e100 	.word	0x05f5e100
 800d534:	00000000 	.word	0x00000000
 800d538:	3fe00000 	.word	0x3fe00000

0800d53c <tx_sync_msg>:


static bool tx_sync_msg(struct TDMAHandler *this)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	int psduLength = SYNC_FRAME_LEN_BYTES;
 800d544:	2313      	movs	r3, #19
 800d546:	61fb      	str	r3, [r7, #28]

	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800d548:	2000      	movs	r0, #0
 800d54a:	f7fb ff77 	bl	800943c <instance_get_local_structure_ptr>
 800d54e:	61b8      	str	r0, [r7, #24]
	uint64 time_now_us = portGetTickCntMicro();
 800d550:	f004 fbc8 	bl	8011ce4 <portGetTickCntMicro>
 800d554:	e9c7 0104 	strd	r0, r1, [r7, #16]

	uint64 myTimeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800d55e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d562:	f7fb feac 	bl	80092be <get_dt64>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	memcpy(&inst->sync_msg.messageData[SYNC_FRAMELENGTH], &this->uwbListTDMAInfo[0].framelength, sizeof(uint8));
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	f603 5336 	addw	r3, r3, #3382	; 0xd36
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	3228      	adds	r2, #40	; 0x28
 800d578:	7812      	ldrb	r2, [r2, #0]
 800d57a:	701a      	strb	r2, [r3, #0]
	memcpy(&inst->sync_msg.messageData[SYNC_TSFS], &myTimeSinceFrameStart_us, 6);
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	f603 5337 	addw	r3, r3, #3383	; 0xd37
 800d582:	f107 0108 	add.w	r1, r7, #8
 800d586:	2206      	movs	r2, #6
 800d588:	4618      	mov	r0, r3
 800d58a:	f005 fd55 	bl	8013038 <memcpy>
	inst->sync_msg.seqNum = inst->frameSN++;
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800d594:	3302      	adds	r3, #2
 800d596:	781a      	ldrb	r2, [r3, #0]
 800d598:	1c53      	adds	r3, r2, #1
 800d59a:	b2d9      	uxtb	r1, r3
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800d5a2:	3302      	adds	r3, #2
 800d5a4:	7019      	strb	r1, [r3, #0]
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e

	inst->wait4ack = 0;
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800d5b2:	3318      	adds	r3, #24
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	701a      	strb	r2, [r3, #0]

	dwt_writetxdata(psduLength, (uint8 *)&inst->sync_msg, 0) ; // write the frame data
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	b298      	uxth	r0, r3
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	f603 532c 	addw	r3, r3, #3372	; 0xd2c
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	f003 fa9c 	bl	8010b02 <dwt_writetxdata>
	if(instancesendpacket(psduLength, DWT_START_RX_IMMEDIATE | inst->wait4ack, 0))
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	b298      	uxth	r0, r3
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800d5d4:	3318      	adds	r3, #24
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f7f9 f897 	bl	800670e <instancesendpacket>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d010      	beq.n	800d608 <tx_sync_msg+0xcc>
	{
		inst->previousState = TA_INIT;
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	70da      	strb	r2, [r3, #3]
		inst->nextState = TA_INIT;
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	709a      	strb	r2, [r3, #2]
		inst->testAppState = TA_RXE_WAIT;
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2206      	movs	r2, #6
 800d5f6:	705a      	strb	r2, [r3, #1]
		inst->wait4ack = 0;
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800d5fe:	3318      	adds	r3, #24
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
		return FALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	e015      	b.n	800d634 <tx_sync_msg+0xf8>
	}
	else
	{
		inst->previousState = inst->testAppState;
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	785a      	ldrb	r2, [r3, #1]
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	70da      	strb	r2, [r3, #3]
		inst->testAppState = TA_TX_WAIT_CONF;	// wait confirmation
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	2205      	movs	r2, #5
 800d614:	705a      	strb	r2, [r3, #1]

		inst->timeofTx = portGetTickCnt();
 800d616:	f004 fb5b 	bl	8011cd0 <portGetTickCnt>
 800d61a:	4602      	mov	r2, r0
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800d622:	3314      	adds	r3, #20
 800d624:	601a      	str	r2, [r3, #0]
		inst->txDoneTimeoutDuration = inst->durationSyncTxDoneTimeout_ms; //NOTE timeout duration found experimentally
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800d630:	601a      	str	r2, [r3, #0]
		return TRUE;
 800d632:	2301      	movs	r3, #1
	}
}
 800d634:	4618      	mov	r0, r3
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <tx_select>:

static bool tx_select(struct TDMAHandler *this)
{
 800d63c:	b590      	push	{r4, r7, lr}
 800d63e:	b09f      	sub	sp, #124	; 0x7c
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800d644:	2000      	movs	r0, #0
 800d646:	f7fb fef9 	bl	800943c <instance_get_local_structure_ptr>
 800d64a:	65f8      	str	r0, [r7, #92]	; 0x5c

	uint64 time_now_us = portGetTickCntMicro();
 800d64c:	f004 fb4a 	bl	8011ce4 <portGetTickCntMicro>
 800d650:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50

	int uwb_index = 255;
 800d654:	23ff      	movs	r3, #255	; 0xff
 800d656:	677b      	str	r3, [r7, #116]	; 0x74

	if(inst->mode == DISCOVERY)
 800d658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d151      	bne.n	800d704 <tx_select+0xc8>
	{
		if(this->discovery_mode == WAIT_INF_REG)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d11f      	bne.n	800d6aa <tx_select+0x6e>
		{
			if(this->check_blink(this))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	4798      	blx	r3
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00c      	beq.n	800d694 <tx_select+0x58>
			{
				//time to blink
				uwb_index = 255;
 800d67a:	23ff      	movs	r3, #255	; 0xff
 800d67c:	677b      	str	r3, [r7, #116]	; 0x74
				this->set_discovery_mode(this, WAIT_RNG_INIT, portGetTickCnt());
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
 800d684:	f004 fb24 	bl	8011cd0 <portGetTickCnt>
 800d688:	4603      	mov	r3, r0
 800d68a:	461a      	mov	r2, r3
 800d68c:	2103      	movs	r1, #3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	47a0      	blx	r4
 800d692:	e108      	b.n	800d8a6 <tx_select+0x26a>
			}
			else
			{
				//not time to blink yet, keep waiting for RNG_INIT
				inst->wait4ack = 0;
 800d694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d696:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800d69a:	3318      	adds	r3, #24
 800d69c:	2200      	movs	r2, #0
 800d69e:	701a      	strb	r2, [r3, #0]
				inst->testAppState = TA_RXE_WAIT;
 800d6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a2:	2206      	movs	r2, #6
 800d6a4:	705a      	strb	r2, [r3, #1]
				return TRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e16b      	b.n	800d982 <tx_select+0x346>
			}
		}
		else if(this->discovery_mode == SEND_SUG)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800d6b0:	2b05      	cmp	r3, #5
 800d6b2:	d125      	bne.n	800d700 <tx_select+0xc4>
		{
			//get time since slot start and make sure that's greater than delay
			uint64 timeSinceSlotStart = get_dt64(this->lastSlotStartTime64, time_now_us);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	; 0x198
 800d6ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d6be:	f7fb fdfe 	bl	80092be <get_dt64>
 800d6c2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

			if(timeSinceSlotStart <= this->slotStartDelay_us)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 800d6cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d6d0:	4299      	cmp	r1, r3
 800d6d2:	bf08      	it	eq
 800d6d4:	4290      	cmpeq	r0, r2
 800d6d6:	d303      	bcc.n	800d6e0 <tx_select+0xa4>
			{
				uwb_index = -1;
 800d6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6dc:	677b      	str	r3, [r7, #116]	; 0x74
 800d6de:	e0e2      	b.n	800d8a6 <tx_select+0x26a>
			}
			else
			{
				inst->wait4ack = 0;
 800d6e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800d6e6:	3318      	adds	r3, #24
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	701a      	strb	r2, [r3, #0]
				inst->testAppState = TA_TXINF_WAIT_SEND;
 800d6ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	705a      	strb	r2, [r3, #1]
				inst->uwbToRangeWith = (uint8)255;
 800d6f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6f4:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d6f8:	22ff      	movs	r2, #255	; 0xff
 800d6fa:	701a      	strb	r2, [r3, #0]
				return TRUE;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e140      	b.n	800d982 <tx_select+0x346>
			}
		}
		else
		{
			return FALSE;
 800d700:	2300      	movs	r3, #0
 800d702:	e13e      	b.n	800d982 <tx_select+0x346>
		}
	}
	else if(inst->mode == TAG)
 800d704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	f040 80c7 	bne.w	800d89c <tx_select+0x260>
	{
		//get time since slot start and make sure that's greater than delay
		uint64 timeSinceSlotStart = get_dt64(this->lastSlotStartTime64, time_now_us);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	; 0x198
 800d714:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d718:	f7fb fdd1 	bl	80092be <get_dt64>
 800d71c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

		//TAG pauses for INF_POLL_DELAY <-added at beginning of slot
		if(timeSinceSlotStart <= this->slotStartDelay_us)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 800d726:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d72a:	4299      	cmp	r1, r3
 800d72c:	bf08      	it	eq
 800d72e:	4290      	cmpeq	r0, r2
 800d730:	d303      	bcc.n	800d73a <tx_select+0xfe>
		{
			uwb_index = -1;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
 800d736:	677b      	str	r3, [r7, #116]	; 0x74
 800d738:	e0b5      	b.n	800d8a6 <tx_select+0x26a>
		}
		else
		{

			uint32 timeSinceRange[UWB_LIST_SIZE] = {0}; //0th entry unused
 800d73a:	f107 030c 	add.w	r3, r7, #12
 800d73e:	2228      	movs	r2, #40	; 0x28
 800d740:	2100      	movs	r1, #0
 800d742:	4618      	mov	r0, r3
 800d744:	f005 fc86 	bl	8013054 <memset>
			uint32 numNeighbors = 0;
 800d748:	2300      	movs	r3, #0
 800d74a:	673b      	str	r3, [r7, #112]	; 0x70
			uint32 time_now = portGetTickCnt();
 800d74c:	f004 fac0 	bl	8011cd0 <portGetTickCnt>
 800d750:	6478      	str	r0, [r7, #68]	; 0x44

			//get time since range for each neighbor
			for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800d752:	2301      	movs	r3, #1
 800d754:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d756:	e025      	b.n	800d7a4 <tx_select+0x168>
			{
				if(this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR)
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d75c:	4613      	mov	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	4413      	add	r3, r2
 800d762:	00db      	lsls	r3, r3, #3
 800d764:	440b      	add	r3, r1
 800d766:	3308      	adds	r3, #8
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d117      	bne.n	800d79e <tx_select+0x162>
				{
					numNeighbors++;
 800d76e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d770:	3301      	adds	r3, #1
 800d772:	673b      	str	r3, [r7, #112]	; 0x70
					timeSinceRange[i] = get_dt32(this->uwbListTDMAInfo[i].lastRange, time_now);
 800d774:	6879      	ldr	r1, [r7, #4]
 800d776:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d778:	4613      	mov	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	00db      	lsls	r3, r3, #3
 800d780:	440b      	add	r3, r1
 800d782:	3318      	adds	r3, #24
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fb fd82 	bl	8009292 <get_dt32>
 800d78e:	4602      	mov	r2, r0
 800d790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d798:	440b      	add	r3, r1
 800d79a:	f843 2c6c 	str.w	r2, [r3, #-108]
			for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800d79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7a6:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	dbd0      	blt.n	800d758 <tx_select+0x11c>
				}
			}

			if(this->nthOldest > numNeighbors)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800d7bc:	461a      	mov	r2, r3
 800d7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d203      	bcs.n	800d7cc <tx_select+0x190>
			{
				this->nthOldest = 1;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}

			//get the nth oldest
			for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800d7d0:	e04e      	b.n	800d870 <tx_select+0x234>
			{
				if(this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR)
 800d7d2:	6879      	ldr	r1, [r7, #4]
 800d7d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	00db      	lsls	r3, r3, #3
 800d7de:	440b      	add	r3, r1
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d140      	bne.n	800d86a <tx_select+0x22e>
				{
					uint8 numOlder = 0;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					for(int j = 1; j < inst->uwbListLen; j++)//0 reserved for self
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	663b      	str	r3, [r7, #96]	; 0x60
 800d7f2:	e026      	b.n	800d842 <tx_select+0x206>
					{
						if(i != j)
 800d7f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d01f      	beq.n	800d83c <tx_select+0x200>
						{
							if(this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR)
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d800:	4613      	mov	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	440b      	add	r3, r1
 800d80a:	3308      	adds	r3, #8
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d114      	bne.n	800d83c <tx_select+0x200>
							{
								if(timeSinceRange[i] < timeSinceRange[j])
 800d812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d81a:	4413      	add	r3, r2
 800d81c:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 800d820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d828:	440b      	add	r3, r1
 800d82a:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d204      	bcs.n	800d83c <tx_select+0x200>
								{
									numOlder++;
 800d832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d836:	3301      	adds	r3, #1
 800d838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					for(int j = 1; j < inst->uwbListLen; j++)//0 reserved for self
 800d83c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d83e:	3301      	adds	r3, #1
 800d840:	663b      	str	r3, [r7, #96]	; 0x60
 800d842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d844:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d848:	3301      	adds	r3, #1
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	461a      	mov	r2, r3
 800d84e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d850:	4293      	cmp	r3, r2
 800d852:	dbcf      	blt.n	800d7f4 <tx_select+0x1b8>
								}
							}
						}
					}

					if(numOlder + 1 == this->nthOldest)
 800d854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d858:	3301      	adds	r3, #1
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	f892 21ad 	ldrb.w	r2, [r2, #429]	; 0x1ad
 800d860:	4293      	cmp	r3, r2
 800d862:	d102      	bne.n	800d86a <tx_select+0x22e>
					{
						uwb_index = i;
 800d864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d866:	677b      	str	r3, [r7, #116]	; 0x74
						break;
 800d868:	e00b      	b.n	800d882 <tx_select+0x246>
			for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800d86a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d86c:	3301      	adds	r3, #1
 800d86e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d872:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d876:	3301      	adds	r3, #1
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	461a      	mov	r2, r3
 800d87c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d87e:	4293      	cmp	r3, r2
 800d880:	dba7      	blt.n	800d7d2 <tx_select+0x196>
					}
				}
			}

			if(uwb_index == 255 && inst->uwbListLen > 1)
 800d882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d884:	2bff      	cmp	r3, #255	; 0xff
 800d886:	d10e      	bne.n	800d8a6 <tx_select+0x26a>
 800d888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d88a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d88e:	3301      	adds	r3, #1
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d907      	bls.n	800d8a6 <tx_select+0x26a>
			{
				uwb_index = 1;
 800d896:	2301      	movs	r3, #1
 800d898:	677b      	str	r3, [r7, #116]	; 0x74
 800d89a:	e004      	b.n	800d8a6 <tx_select+0x26a>
		}
	}
	else
	{
		//ANCHOR shouldn't be in this mode, should be listening for INF and POLL
		inst->testAppState = TA_RXE_WAIT;
 800d89c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d89e:	2206      	movs	r2, #6
 800d8a0:	705a      	strb	r2, [r3, #1]
		return TRUE;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e06d      	b.n	800d982 <tx_select+0x346>
	}

	if(uwb_index < 1) //set to -1 when waiting for the slotStartDelay to pass
 800d8a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	dc01      	bgt.n	800d8b0 <tx_select+0x274>
	{
		//do nothing
		return FALSE;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e068      	b.n	800d982 <tx_select+0x346>
	}
	else if(uwb_index > 254)
 800d8b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8b2:	2bfe      	cmp	r3, #254	; 0xfe
 800d8b4:	dd08      	ble.n	800d8c8 <tx_select+0x28c>
	{
		inst->testAppState = TA_TXBLINK_WAIT_SEND;
 800d8b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8b8:	2208      	movs	r2, #8
 800d8ba:	705a      	strb	r2, [r3, #1]
		inst->uwbToRangeWith = (uint8)255;
 800d8bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8be:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d8c2:	22ff      	movs	r2, #255	; 0xff
 800d8c4:	701a      	strb	r2, [r3, #0]
 800d8c6:	e05b      	b.n	800d980 <tx_select+0x344>
	}
	else
	{
		uint8 fcode = RTLS_DEMO_MSG_INF_INIT;
 800d8c8:	2314      	movs	r3, #20
 800d8ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(memcmp(&inst->inf_msg.messageData[FCODE], &fcode, sizeof(uint8)) == 0)
 800d8ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8d0:	f203 5337 	addw	r3, r3, #1335	; 0x537
 800d8d4:	781a      	ldrb	r2, [r3, #0]
 800d8d6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d107      	bne.n	800d8f0 <tx_select+0x2b4>
		{
			this->infSentThisSlot = TRUE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
			inst->testAppState = TA_TXINF_WAIT_SEND;
 800d8e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	705a      	strb	r2, [r3, #1]
 800d8ee:	e041      	b.n	800d974 <tx_select+0x338>
		}
		else if(this->firstPollSentThisSlot == FALSE)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 800d8f6:	f083 0301 	eor.w	r3, r3, #1
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d007      	beq.n	800d910 <tx_select+0x2d4>
		{
			this->firstPollSentThisSlot = TRUE;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
			inst->testAppState = TA_TXPOLL_WAIT_SEND;
 800d908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d90a:	2202      	movs	r2, #2
 800d90c:	705a      	strb	r2, [r3, #1]
 800d90e:	e031      	b.n	800d974 <tx_select+0x338>
		}
		else if(this->secondPollSentThisSlot == FALSE && this->firstPollComplete == FALSE && this->firstPollResponse == FALSE)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 800d916:	f083 0301 	eor.w	r3, r3, #1
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d017      	beq.n	800d950 <tx_select+0x314>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 800d926:	f083 0301 	eor.w	r3, r3, #1
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00f      	beq.n	800d950 <tx_select+0x314>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800d936:	f083 0301 	eor.w	r3, r3, #1
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d007      	beq.n	800d950 <tx_select+0x314>
		{
			this->secondPollSentThisSlot = TRUE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
			inst->testAppState = TA_TXPOLL_WAIT_SEND;
 800d948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d94a:	2202      	movs	r2, #2
 800d94c:	705a      	strb	r2, [r3, #1]
 800d94e:	e011      	b.n	800d974 <tx_select+0x338>
		}
		else if(this->infSentThisSlot == FALSE)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800d956:	f083 0301 	eor.w	r3, r3, #1
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <tx_select+0x334>
		{
			this->infSentThisSlot = TRUE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
			inst->testAppState = TA_TXINF_WAIT_SEND;
 800d968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d96a:	2201      	movs	r2, #1
 800d96c:	705a      	strb	r2, [r3, #1]
 800d96e:	e001      	b.n	800d974 <tx_select+0x338>
		}
		else
		{
			return TRUE;
 800d970:	2301      	movs	r3, #1
 800d972:	e006      	b.n	800d982 <tx_select+0x346>
		}

		inst->uwbToRangeWith = (uint8)uwb_index;
 800d974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d976:	b2da      	uxtb	r2, r3
 800d978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d97a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800d97e:	701a      	strb	r2, [r3, #0]
	}

	return TRUE;
 800d980:	2301      	movs	r3, #1
}
 800d982:	4618      	mov	r0, r3
 800d984:	377c      	adds	r7, #124	; 0x7c
 800d986:	46bd      	mov	sp, r7
 800d988:	bd90      	pop	{r4, r7, pc}

0800d98a <check_blink>:


static bool check_blink(struct TDMAHandler *this)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b088      	sub	sp, #32
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800d992:	2000      	movs	r0, #0
 800d994:	f7fb fd52 	bl	800943c <instance_get_local_structure_ptr>
 800d998:	61b8      	str	r0, [r7, #24]
	bool retval = FALSE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	77fb      	strb	r3, [r7, #31]

	if(inst->mode == DISCOVERY && this->discovery_mode == WAIT_INF_REG)
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d127      	bne.n	800d9f6 <check_blink+0x6c>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d122      	bne.n	800d9f6 <check_blink+0x6c>
	{
		uint32 time_now = portGetTickCnt();
 800d9b0:	f004 f98e 	bl	8011cd0 <portGetTickCnt>
 800d9b4:	6178      	str	r0, [r7, #20]
		uint32 timeSinceDiscoveryStart = get_dt32(this->discoveryStartTime, time_now);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d9bc:	6979      	ldr	r1, [r7, #20]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fb fc67 	bl	8009292 <get_dt32>
 800d9c4:	6138      	str	r0, [r7, #16]
		if(timeSinceDiscoveryStart > this->waitInfDuration )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800d9cc:	693a      	ldr	r2, [r7, #16]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d911      	bls.n	800d9f6 <check_blink+0x6c>
		{
			uint32 timeSinceBlink = get_dt32(this->last_blink_time, time_now);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800d9d8:	6979      	ldr	r1, [r7, #20]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fb fc59 	bl	8009292 <get_dt32>
 800d9e0:	60f8      	str	r0, [r7, #12]
			if(timeSinceBlink > (uint32)BLINK_PERIOD_MS + this->blinkPeriodRand)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d9e8:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d901      	bls.n	800d9f6 <check_blink+0x6c>
			{
				retval = TRUE;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	77fb      	strb	r3, [r7, #31]
			}
		}
	}

	return retval;
 800d9f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3720      	adds	r7, #32
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <populate_inf_msg>:

static void populate_inf_msg(struct TDMAHandler *this, uint8 inf_msg_type)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08e      	sub	sp, #56	; 0x38
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	460b      	mov	r3, r1
 800da0a:	70fb      	strb	r3, [r7, #3]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800da0c:	2000      	movs	r0, #0
 800da0e:	f7fb fd15 	bl	800943c <instance_get_local_structure_ptr>
 800da12:	61f8      	str	r0, [r7, #28]

	int num_neighbors = instfindnumneighbors(inst);
 800da14:	69f8      	ldr	r0, [r7, #28]
 800da16:	f7fd f829 	bl	800aa6c <instfindnumneighbors>
 800da1a:	4603      	mov	r3, r0
 800da1c:	613b      	str	r3, [r7, #16]
	int num_hidden = instfindnumhidden(inst);
 800da1e:	69f8      	ldr	r0, [r7, #28]
 800da20:	f7fd f850 	bl	800aac4 <instfindnumhidden>
 800da24:	4603      	mov	r3, r0
 800da26:	60fb      	str	r3, [r7, #12]

	//fcode
	int msgDataIndex = FCODE;
 800da28:	2300      	movs	r3, #0
 800da2a:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&inst->inf_msg.messageData[msgDataIndex], &inf_msg_type, sizeof(uint8));
 800da2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da2e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800da32:	69fa      	ldr	r2, [r7, #28]
 800da34:	4413      	add	r3, r2
 800da36:	3307      	adds	r3, #7
 800da38:	78fa      	ldrb	r2, [r7, #3]
 800da3a:	701a      	strb	r2, [r3, #0]

	//time since frame start
	//populated immediately before being sent

	//number of neighbors
	msgDataIndex = TDMA_NUMN;
 800da3c:	2307      	movs	r3, #7
 800da3e:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&inst->inf_msg.messageData[msgDataIndex], &num_neighbors, sizeof(uint8));
 800da40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da42:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800da46:	69fa      	ldr	r2, [r7, #28]
 800da48:	4413      	add	r3, r2
 800da4a:	3307      	adds	r3, #7
 800da4c:	7c3a      	ldrb	r2, [r7, #16]
 800da4e:	701a      	strb	r2, [r3, #0]

	//number of hidden neighbors
	msgDataIndex = TDMA_NUMH;
 800da50:	2308      	movs	r3, #8
 800da52:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&inst->inf_msg.messageData[msgDataIndex], &num_hidden, sizeof(uint8));
 800da54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da56:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800da5a:	69fa      	ldr	r2, [r7, #28]
 800da5c:	4413      	add	r3, r2
 800da5e:	3307      	adds	r3, #7
 800da60:	7b3a      	ldrb	r2, [r7, #12]
 800da62:	701a      	strb	r2, [r3, #0]

	//self framelength
	msgDataIndex = TDMA_FRAMELENGTH;
 800da64:	2309      	movs	r3, #9
 800da66:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&inst->inf_msg.messageData[msgDataIndex], &this->uwbListTDMAInfo[0].framelength, sizeof(uint8));
 800da68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6a:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800da6e:	69fa      	ldr	r2, [r7, #28]
 800da70:	4413      	add	r3, r2
 800da72:	3307      	adds	r3, #7
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	3228      	adds	r2, #40	; 0x28
 800da78:	7812      	ldrb	r2, [r2, #0]
 800da7a:	701a      	strb	r2, [r3, #0]

	//self number of slots
	msgDataIndex = TDMA_NUMS;
 800da7c:	230a      	movs	r3, #10
 800da7e:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&inst->inf_msg.messageData[msgDataIndex], &this->uwbListTDMAInfo[0].slotsLength, sizeof(uint8));
 800da80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da82:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800da86:	69fa      	ldr	r2, [r7, #28]
 800da88:	4413      	add	r3, r2
 800da8a:	3307      	adds	r3, #7
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	3229      	adds	r2, #41	; 0x29
 800da90:	7812      	ldrb	r2, [r2, #0]
 800da92:	701a      	strb	r2, [r3, #0]
	msgDataIndex++;
 800da94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da96:	3301      	adds	r3, #1
 800da98:	637b      	str	r3, [r7, #52]	; 0x34

	//self slot assignments
	for(int s = 0; s < this->uwbListTDMAInfo[0].slotsLength; s++)
 800da9a:	2300      	movs	r3, #0
 800da9c:	633b      	str	r3, [r7, #48]	; 0x30
 800da9e:	e011      	b.n	800dac4 <populate_inf_msg+0xc4>
	{
		memcpy(&inst->inf_msg.messageData[msgDataIndex], &this->uwbListTDMAInfo[0].slots[s], sizeof(uint8));
 800daa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa2:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800daa6:	69fa      	ldr	r2, [r7, #28]
 800daa8:	4413      	add	r3, r2
 800daaa:	3307      	adds	r3, #7
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800dab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab2:	440a      	add	r2, r1
 800dab4:	7812      	ldrb	r2, [r2, #0]
 800dab6:	701a      	strb	r2, [r3, #0]
		msgDataIndex++;
 800dab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daba:	3301      	adds	r3, #1
 800dabc:	637b      	str	r3, [r7, #52]	; 0x34
	for(int s = 0; s < this->uwbListTDMAInfo[0].slotsLength; s++)
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	3301      	adds	r3, #1
 800dac2:	633b      	str	r3, [r7, #48]	; 0x30
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800daca:	461a      	mov	r2, r3
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	4293      	cmp	r3, r2
 800dad0:	dbe6      	blt.n	800daa0 <populate_inf_msg+0xa0>
	}

	//neighbor address, framelength, number of slots, and slot assignments
	for(int i = 1; i < inst->uwbListLen; i++) //slot 0 reserved for self
 800dad2:	2301      	movs	r3, #1
 800dad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dad6:	e06a      	b.n	800dbae <populate_inf_msg+0x1ae>
	{
		if(this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR)
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dadc:	4613      	mov	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	4413      	add	r3, r2
 800dae2:	00db      	lsls	r3, r3, #3
 800dae4:	440b      	add	r3, r1
 800dae6:	3308      	adds	r3, #8
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b01      	cmp	r3, #1
 800daec:	d15c      	bne.n	800dba8 <populate_inf_msg+0x1a8>
		{
			struct TDMAInfo *info = &this->uwbListTDMAInfo[i];
 800daee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daf0:	4613      	mov	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	3308      	adds	r3, #8
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	4413      	add	r3, r2
 800dafe:	617b      	str	r3, [r7, #20]

			//address
			memcpy(&inst->inf_msg.messageData[msgDataIndex], &inst->uwbList[i][0], inst->addrByteSize);
 800db00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db02:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800db06:	69fa      	ldr	r2, [r7, #28]
 800db08:	4413      	add	r3, r2
 800db0a:	1dd8      	adds	r0, r3, #7
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	69fa      	ldr	r2, [r7, #28]
 800db16:	4413      	add	r3, r2
 800db18:	1c99      	adds	r1, r3, #2
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800db20:	3306      	adds	r3, #6
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	f005 fa87 	bl	8013038 <memcpy>
			msgDataIndex += inst->addrByteSize;
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800db30:	3306      	adds	r3, #6
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db38:	4413      	add	r3, r2
 800db3a:	637b      	str	r3, [r7, #52]	; 0x34

			//framelength
			memcpy(&inst->inf_msg.messageData[msgDataIndex], &info->framelength, sizeof(uint8));
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800db42:	69fa      	ldr	r2, [r7, #28]
 800db44:	4413      	add	r3, r2
 800db46:	3307      	adds	r3, #7
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	3220      	adds	r2, #32
 800db4c:	7812      	ldrb	r2, [r2, #0]
 800db4e:	701a      	strb	r2, [r3, #0]
			msgDataIndex++;
 800db50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db52:	3301      	adds	r3, #1
 800db54:	637b      	str	r3, [r7, #52]	; 0x34

			//number of slots
			memcpy(&inst->inf_msg.messageData[msgDataIndex], &info->slotsLength, sizeof(uint8));
 800db56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db58:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800db5c:	69fa      	ldr	r2, [r7, #28]
 800db5e:	4413      	add	r3, r2
 800db60:	3307      	adds	r3, #7
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	3221      	adds	r2, #33	; 0x21
 800db66:	7812      	ldrb	r2, [r2, #0]
 800db68:	701a      	strb	r2, [r3, #0]
			msgDataIndex++;
 800db6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6c:	3301      	adds	r3, #1
 800db6e:	637b      	str	r3, [r7, #52]	; 0x34

			//slot assignments
			for(int s = 0; s < info->slotsLength; s++)
 800db70:	2300      	movs	r3, #0
 800db72:	62bb      	str	r3, [r7, #40]	; 0x28
 800db74:	e011      	b.n	800db9a <populate_inf_msg+0x19a>
			{
				memcpy(&inst->inf_msg.messageData[msgDataIndex], &info->slots[s], sizeof(uint8));
 800db76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db78:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800db7c:	69fa      	ldr	r2, [r7, #28]
 800db7e:	4413      	add	r3, r2
 800db80:	3307      	adds	r3, #7
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800db86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db88:	440a      	add	r2, r1
 800db8a:	7812      	ldrb	r2, [r2, #0]
 800db8c:	701a      	strb	r2, [r3, #0]
				msgDataIndex++;
 800db8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db90:	3301      	adds	r3, #1
 800db92:	637b      	str	r3, [r7, #52]	; 0x34
			for(int s = 0; s < info->slotsLength; s++)
 800db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db96:	3301      	adds	r3, #1
 800db98:	62bb      	str	r3, [r7, #40]	; 0x28
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dba0:	461a      	mov	r2, r3
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	4293      	cmp	r3, r2
 800dba6:	dbe6      	blt.n	800db76 <populate_inf_msg+0x176>
	for(int i = 1; i < inst->uwbListLen; i++) //slot 0 reserved for self
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	3301      	adds	r3, #1
 800dbac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	db8b      	blt.n	800dad8 <populate_inf_msg+0xd8>
			}
		}
	}

	//hidden address, framelength, number of slots, and slot assignments
	for(int i = 1; i < inst->uwbListLen; i++) //slot 0 reserved for self
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
 800dbc4:	e06a      	b.n	800dc9c <populate_inf_msg+0x29c>
	{
		if(this->uwbListTDMAInfo[i].connectionType == UWB_LIST_HIDDEN)
 800dbc6:	6879      	ldr	r1, [r7, #4]
 800dbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbca:	4613      	mov	r3, r2
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	440b      	add	r3, r1
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d15c      	bne.n	800dc96 <populate_inf_msg+0x296>
		{
			struct TDMAInfo *info = &this->uwbListTDMAInfo[i];
 800dbdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbde:	4613      	mov	r3, r2
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	4413      	add	r3, r2
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	4413      	add	r3, r2
 800dbec:	61bb      	str	r3, [r7, #24]

			//address
			memcpy(&inst->inf_msg.messageData[msgDataIndex], &inst->uwbList[i][0], inst->addrByteSize);
 800dbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbf0:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800dbf4:	69fa      	ldr	r2, [r7, #28]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	1dd8      	adds	r0, r3, #7
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	4413      	add	r3, r2
 800dc06:	1c99      	adds	r1, r3, #2
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800dc0e:	3306      	adds	r3, #6
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	f005 fa10 	bl	8013038 <memcpy>
			msgDataIndex += inst->addrByteSize;
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800dc1e:	3306      	adds	r3, #6
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	461a      	mov	r2, r3
 800dc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc26:	4413      	add	r3, r2
 800dc28:	637b      	str	r3, [r7, #52]	; 0x34

			//framelength
			memcpy(&inst->inf_msg.messageData[msgDataIndex], &info->framelength, sizeof(uint8));
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2c:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	4413      	add	r3, r2
 800dc34:	3307      	adds	r3, #7
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	3220      	adds	r2, #32
 800dc3a:	7812      	ldrb	r2, [r2, #0]
 800dc3c:	701a      	strb	r2, [r3, #0]
			msgDataIndex++;
 800dc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc40:	3301      	adds	r3, #1
 800dc42:	637b      	str	r3, [r7, #52]	; 0x34

			//number of slots
			memcpy(&inst->inf_msg.messageData[msgDataIndex], &info->slotsLength, sizeof(uint8));
 800dc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc46:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800dc4a:	69fa      	ldr	r2, [r7, #28]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	3307      	adds	r3, #7
 800dc50:	69ba      	ldr	r2, [r7, #24]
 800dc52:	3221      	adds	r2, #33	; 0x21
 800dc54:	7812      	ldrb	r2, [r2, #0]
 800dc56:	701a      	strb	r2, [r3, #0]
			msgDataIndex++;
 800dc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	637b      	str	r3, [r7, #52]	; 0x34

			//slot assignments
			for(int s = 0; s < info->slotsLength; s++)
 800dc5e:	2300      	movs	r3, #0
 800dc60:	623b      	str	r3, [r7, #32]
 800dc62:	e011      	b.n	800dc88 <populate_inf_msg+0x288>
			{
				memcpy(&inst->inf_msg.messageData[msgDataIndex], &info->slots[s], sizeof(uint8));
 800dc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc66:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	3307      	adds	r3, #7
 800dc70:	69ba      	ldr	r2, [r7, #24]
 800dc72:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800dc74:	6a3a      	ldr	r2, [r7, #32]
 800dc76:	440a      	add	r2, r1
 800dc78:	7812      	ldrb	r2, [r2, #0]
 800dc7a:	701a      	strb	r2, [r3, #0]
				msgDataIndex++;
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7e:	3301      	adds	r3, #1
 800dc80:	637b      	str	r3, [r7, #52]	; 0x34
			for(int s = 0; s < info->slotsLength; s++)
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	3301      	adds	r3, #1
 800dc86:	623b      	str	r3, [r7, #32]
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6a3b      	ldr	r3, [r7, #32]
 800dc92:	4293      	cmp	r3, r2
 800dc94:	dbe6      	blt.n	800dc64 <populate_inf_msg+0x264>
	for(int i = 1; i < inst->uwbListLen; i++) //slot 0 reserved for self
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	3301      	adds	r3, #1
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800dca2:	3301      	adds	r3, #1
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	db8b      	blt.n	800dbc6 <populate_inf_msg+0x1c6>


#if (USING_64BIT_ADDR==1)
			this->infMessageLength = msgDataIndex + FRAME_CRTL_AND_ADDRESS_L + FRAME_CRC;
#else
			this->infMessageLength = msgDataIndex + FRAME_CRTL_AND_ADDRESS_S + FRAME_CRC;
 800dcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	330b      	adds	r3, #11
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
#endif

}
 800dcbc:	bf00      	nop
 800dcbe:	3738      	adds	r7, #56	; 0x38
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <update_inf_tsfs>:


static void update_inf_tsfs(struct TDMAHandler *this)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800dccc:	2000      	movs	r0, #0
 800dcce:	f7fb fbb5 	bl	800943c <instance_get_local_structure_ptr>
 800dcd2:	61f8      	str	r0, [r7, #28]
	uint64 time_now_us = portGetTickCntMicro();
 800dcd4:	f004 f806 	bl	8011ce4 <portGetTickCntMicro>
 800dcd8:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint64 timeSinceFrameStart64 = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now_us);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800dce2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dce6:	f7fb faea 	bl	80092be <get_dt64>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if(timeSinceFrameStart64 > 10000000)
 800dcf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dcf6:	480d      	ldr	r0, [pc, #52]	; (800dd2c <update_inf_tsfs+0x68>)
 800dcf8:	f04f 0100 	mov.w	r1, #0
 800dcfc:	4299      	cmp	r1, r3
 800dcfe:	bf08      	it	eq
 800dd00:	4290      	cmpeq	r0, r2
 800dd02:	d205      	bcs.n	800dd10 <update_inf_tsfs+0x4c>
	{
		timeSinceFrameStart64 = 0;
 800dd04:	f04f 0200 	mov.w	r2, #0
 800dd08:	f04f 0300 	mov.w	r3, #0
 800dd0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	memcpy(&inst->inf_msg.messageData[TDMA_TSFS], &timeSinceFrameStart64, 6);
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800dd16:	f107 0108 	add.w	r1, r7, #8
 800dd1a:	2206      	movs	r2, #6
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f005 f98b 	bl	8013038 <memcpy>
}
 800dd22:	bf00      	nop
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	00989680 	.word	0x00989680

0800dd30 <process_inf_msg>:
//4. Check for conflicts between nodes in the INF message and nodes not in the INF message (excluding self) and deconflict using PDS
//5. Release self slot assignments and follow PSA
//6. Send INF message at beginning of allocated slot (handled elsewhere)
//returns TRUE if a change was made to the TDMA assingments, FALSE if invalid message FCODE or process mode or if no TDMA changes made
static bool process_inf_msg(struct TDMAHandler *this, uint8 *messageData, uint8 srcIndex, INF_PROCESS_MODE mode)
{
 800dd30:	b590      	push	{r4, r7, lr}
 800dd32:	b0a3      	sub	sp, #140	; 0x8c
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	460b      	mov	r3, r1
 800dd40:	71fb      	strb	r3, [r7, #7]
 800dd42:	4613      	mov	r3, r2
 800dd44:	71bb      	strb	r3, [r7, #6]
	//NOTE: this function does not handle TDMA deconflict

	bool tdma_modified = FALSE;
 800dd46:	2300      	movs	r3, #0
 800dd48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint32 time_now = portGetTickCnt();
 800dd4c:	f003 ffc0 	bl	8011cd0 <portGetTickCnt>
 800dd50:	6538      	str	r0, [r7, #80]	; 0x50

	if((mode != CLEAR_ALL_COPY)     && //happens when we creat a new network
 800dd52:	79bb      	ldrb	r3, [r7, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d007      	beq.n	800dd68 <process_inf_msg+0x38>
 800dd58:	79bb      	ldrb	r3, [r7, #6]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d004      	beq.n	800dd68 <process_inf_msg+0x38>
	   (mode != CLEAR_LISTED_COPY)	&& //happens most of the time while processing
 800dd5e:	79bb      	ldrb	r3, [r7, #6]
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d001      	beq.n	800dd68 <process_inf_msg+0x38>
	   (mode != COPY))				   //happens when collecting inf messages
	{
		//only process if valid mode supplied
		return FALSE;
 800dd64:	2300      	movs	r3, #0
 800dd66:	e3ff      	b.n	800e568 <process_inf_msg+0x838>
	}

	bool safeAssign = FALSE;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	if(mode == COPY)
 800dd6e:	79bb      	ldrb	r3, [r7, #6]
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d102      	bne.n	800dd7a <process_inf_msg+0x4a>
	{
		safeAssign = TRUE;
 800dd74:	2301      	movs	r3, #1
 800dd76:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
	}

	uint8 inf_msg_type;
	memcpy(&inf_msg_type, &messageData[FCODE], sizeof(uint8));
 800dd7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	if((inf_msg_type != RTLS_DEMO_MSG_INF_REG)	  &&
 800dd82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800dd86:	2b13      	cmp	r3, #19
 800dd88:	d00d      	beq.n	800dda6 <process_inf_msg+0x76>
	   (inf_msg_type != RTLS_DEMO_MSG_INF_UPDATE) &&
 800dd8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
	if((inf_msg_type != RTLS_DEMO_MSG_INF_REG)	  &&
 800dd8e:	2b16      	cmp	r3, #22
 800dd90:	d009      	beq.n	800dda6 <process_inf_msg+0x76>
	   (inf_msg_type != RTLS_DEMO_MSG_INF_INIT)   &&
 800dd92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
	   (inf_msg_type != RTLS_DEMO_MSG_INF_UPDATE) &&
 800dd96:	2b14      	cmp	r3, #20
 800dd98:	d005      	beq.n	800dda6 <process_inf_msg+0x76>
	   (inf_msg_type != RTLS_DEMO_MSG_INF_SUG))
 800dd9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
	   (inf_msg_type != RTLS_DEMO_MSG_INF_INIT)   &&
 800dd9e:	2b15      	cmp	r3, #21
 800dda0:	d001      	beq.n	800dda6 <process_inf_msg+0x76>
	{
		//only process INF messages
		return FALSE;
 800dda2:	2300      	movs	r3, #0
 800dda4:	e3e0      	b.n	800e568 <process_inf_msg+0x838>
	}

	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800dda6:	2000      	movs	r0, #0
 800dda8:	f7fb fb48 	bl	800943c <instance_get_local_structure_ptr>
 800ddac:	64f8      	str	r0, [r7, #76]	; 0x4c
	this->uwbListTDMAInfo[srcIndex].connectionType = UWB_LIST_NEIGHBOR;
 800ddae:	79fa      	ldrb	r2, [r7, #7]
 800ddb0:	68f9      	ldr	r1, [r7, #12]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	4413      	add	r3, r2
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	440b      	add	r3, r1
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	701a      	strb	r2, [r3, #0]
	uint8 framelength;
	uint8 numSlots;
	uint8 slot;
	struct TDMAInfo *info;

	memcpy(&numNeighbors, &messageData[TDMA_NUMN], sizeof(uint8));
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	3307      	adds	r3, #7
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	memcpy(&numHidden, &messageData[TDMA_NUMH], sizeof(uint8));
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	memcpy(&framelength, &messageData[TDMA_FRAMELENGTH], sizeof(uint8));
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	3309      	adds	r3, #9
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	memcpy(&numSlots, &messageData[TDMA_NUMS], sizeof(uint8));
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	330a      	adds	r3, #10
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	int msgDataIndex = TDMA_NUMS + 1;
 800ddea:	230b      	movs	r3, #11
 800ddec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	bool uwbListInMsg[UWB_LIST_SIZE];
	for(int i = 0; i < inst->uwbListLen; i++)
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddf4:	e008      	b.n	800de08 <process_inf_msg+0xd8>
	{
		uwbListInMsg[i] = FALSE;
 800ddf6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ddfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddfc:	4413      	add	r3, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < inst->uwbListLen; i++)
 800de02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de04:	3301      	adds	r3, #1
 800de06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800de0e:	3301      	adds	r3, #1
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de16:	4293      	cmp	r3, r2
 800de18:	dbed      	blt.n	800ddf6 <process_inf_msg+0xc6>
	}
	uwbListInMsg[srcIndex] = TRUE;
 800de1a:	79fb      	ldrb	r3, [r7, #7]
 800de1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800de20:	4413      	add	r3, r2
 800de22:	2201      	movs	r2, #1
 800de24:	f803 2c64 	strb.w	r2, [r3, #-100]

	if(mode == CLEAR_ALL_COPY)
 800de28:	79bb      	ldrb	r3, [r7, #6]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d107      	bne.n	800de3e <process_inf_msg+0x10e>
	{
		//clear all TDMA assignments and reset framelength to MIN
		this->tdma_free_all_slots(this);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	4798      	blx	r3
		tdma_modified = TRUE;
 800de38:	2301      	movs	r3, #1
 800de3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}

	//copy slot assignments for source UWB
	info = &this->uwbListTDMAInfo[srcIndex];
 800de3e:	79fa      	ldrb	r2, [r7, #7]
 800de40:	4613      	mov	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4413      	add	r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	3308      	adds	r3, #8
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	4413      	add	r3, r2
 800de4e:	64bb      	str	r3, [r7, #72]	; 0x48
	if(framelength != info->framelength)
 800de50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de52:	f893 2020 	ldrb.w	r2, [r3, #32]
 800de56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d002      	beq.n	800de64 <process_inf_msg+0x134>
	{
		tdma_modified = TRUE;
 800de5e:	2301      	movs	r3, #1
 800de60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}

	//check if the tdma has been modified
	if(tdma_modified == FALSE) //dont look for any more differences if we already know one exists
 800de64:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800de68:	f083 0301 	eor.w	r3, r3, #1
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d034      	beq.n	800dedc <process_inf_msg+0x1ac>
	{
		//frist check if same number of slots
		if(numSlots == info->slotsLength)
 800de72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de74:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800de78:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d12a      	bne.n	800ded6 <process_inf_msg+0x1a6>
		{
			//then check if each incoming slot is already assigned
			for(int i = 0; i < numSlots; i++)
 800de80:	2300      	movs	r3, #0
 800de82:	67bb      	str	r3, [r7, #120]	; 0x78
 800de84:	e020      	b.n	800dec8 <process_inf_msg+0x198>
			{
				memcpy(&slot, &messageData[msgDataIndex], sizeof(uint8));
 800de86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	4413      	add	r3, r2
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				msgDataIndex++;
 800de94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de98:	3301      	adds	r3, #1
 800de9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				if(this->slot_assigned(info, slot) == FALSE)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800dea4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800dea8:	4611      	mov	r1, r2
 800deaa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800deac:	4798      	blx	r3
 800deae:	4603      	mov	r3, r0
 800deb0:	f083 0301 	eor.w	r3, r3, #1
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <process_inf_msg+0x192>
				{
					tdma_modified = TRUE;
 800deba:	2301      	movs	r3, #1
 800debc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					break;
 800dec0:	e00c      	b.n	800dedc <process_inf_msg+0x1ac>
			for(int i = 0; i < numSlots; i++)
 800dec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dec4:	3301      	adds	r3, #1
 800dec6:	67bb      	str	r3, [r7, #120]	; 0x78
 800dec8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800decc:	461a      	mov	r2, r3
 800dece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ded0:	4293      	cmp	r3, r2
 800ded2:	dbd8      	blt.n	800de86 <process_inf_msg+0x156>
 800ded4:	e002      	b.n	800dedc <process_inf_msg+0x1ac>
				}
			}
		}
		else
		{
			tdma_modified = TRUE;
 800ded6:	2301      	movs	r3, #1
 800ded8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
	}

	if(mode == CLEAR_LISTED_COPY)
 800dedc:	79bb      	ldrb	r3, [r7, #6]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d104      	bne.n	800deec <process_inf_msg+0x1bc>
	{
		//do after cheking framelength because framelength will be reset
		this->free_slots(info);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800dee8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800deea:	4798      	blx	r3
	}

	info->framelength = MAX(framelength, info->framelength);
 800deec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800def0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800def4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800defa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800defe:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800df02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800df06:	4293      	cmp	r3, r2
 800df08:	bf38      	it	cc
 800df0a:	4613      	movcc	r3, r2
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df12:	f883 2020 	strb.w	r2, [r3, #32]

	msgDataIndex = TDMA_NUMS + 1;
 800df16:	230b      	movs	r3, #11
 800df18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	for(int s = 0; s < numSlots; s++)
 800df1c:	2300      	movs	r3, #0
 800df1e:	677b      	str	r3, [r7, #116]	; 0x74
 800df20:	e017      	b.n	800df52 <process_inf_msg+0x222>
	{
		memcpy(&slot, &messageData[msgDataIndex], sizeof(uint8));
 800df22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	4413      	add	r3, r2
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		msgDataIndex++;
 800df30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df34:	3301      	adds	r3, #1
 800df36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		this->assign_slot(info, slot, safeAssign);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800df40:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800df44:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800df48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df4a:	4798      	blx	r3
	for(int s = 0; s < numSlots; s++)
 800df4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df4e:	3301      	adds	r3, #1
 800df50:	677b      	str	r3, [r7, #116]	; 0x74
 800df52:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800df56:	461a      	mov	r2, r3
 800df58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df5a:	4293      	cmp	r3, r2
 800df5c:	dbe1      	blt.n	800df22 <process_inf_msg+0x1f2>
	}

	for(int i = 0; i < numNeighbors; i++)
 800df5e:	2300      	movs	r3, #0
 800df60:	673b      	str	r3, [r7, #112]	; 0x70
 800df62:	e115      	b.n	800e190 <process_inf_msg+0x460>
	{
		uint8 address[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800df64:	4a8f      	ldr	r2, [pc, #572]	; (800e1a4 <process_inf_msg+0x474>)
 800df66:	f107 031c 	add.w	r3, r7, #28
 800df6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df6e:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&address[0], &messageData[msgDataIndex], inst->addrByteSize);
 800df72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	18d1      	adds	r1, r2, r3
 800df7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df7c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800df80:	3306      	adds	r3, #6
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	461a      	mov	r2, r3
 800df86:	f107 031c 	add.w	r3, r7, #28
 800df8a:	4618      	mov	r0, r3
 800df8c:	f005 f854 	bl	8013038 <memcpy>
		msgDataIndex += inst->addrByteSize;
 800df90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df92:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800df96:	3306      	adds	r3, #6
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfa0:	4413      	add	r3, r2
 800dfa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		uint8 uwb_index = instgetuwblistindex(inst, &address[0], inst->addrByteSize);
 800dfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfa8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800dfac:	3306      	adds	r3, #6
 800dfae:	781a      	ldrb	r2, [r3, #0]
 800dfb0:	f107 031c 	add.w	r3, r7, #28
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dfb8:	f7fc fcfe 	bl	800a9b8 <instgetuwblistindex>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if(uwb_index != 0)
 800dfc2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d02d      	beq.n	800e026 <process_inf_msg+0x2f6>
		{
			if(this->uwbListTDMAInfo[uwb_index].connectionType == UWB_LIST_INACTIVE || this->uwbListTDMAInfo[uwb_index].connectionType == UWB_LIST_TWICE_HIDDEN)
 800dfca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800dfce:	68f9      	ldr	r1, [r7, #12]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	440b      	add	r3, r1
 800dfda:	3308      	adds	r3, #8
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b04      	cmp	r3, #4
 800dfe0:	d00b      	beq.n	800dffa <process_inf_msg+0x2ca>
 800dfe2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800dfe6:	68f9      	ldr	r1, [r7, #12]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	4413      	add	r3, r2
 800dfee:	00db      	lsls	r3, r3, #3
 800dff0:	440b      	add	r3, r1
 800dff2:	3308      	adds	r3, #8
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d10a      	bne.n	800e010 <process_inf_msg+0x2e0>
			{
				this->uwbListTDMAInfo[uwb_index].connectionType = UWB_LIST_HIDDEN;
 800dffa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800dffe:	68f9      	ldr	r1, [r7, #12]
 800e000:	4613      	mov	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	440b      	add	r3, r1
 800e00a:	3308      	adds	r3, #8
 800e00c:	2202      	movs	r2, #2
 800e00e:	701a      	strb	r2, [r3, #0]
			}

			this->uwbListTDMAInfo[uwb_index].lastCommHidden = time_now;
 800e010:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800e014:	68f9      	ldr	r1, [r7, #12]
 800e016:	4613      	mov	r3, r2
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	4413      	add	r3, r2
 800e01c:	00db      	lsls	r3, r3, #3
 800e01e:	440b      	add	r3, r1
 800e020:	3310      	adds	r3, #16
 800e022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e024:	601a      	str	r2, [r3, #0]
		}

		info = &this->uwbListTDMAInfo[uwb_index];
 800e026:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800e02a:	4613      	mov	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	3308      	adds	r3, #8
 800e034:	68fa      	ldr	r2, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	64bb      	str	r3, [r7, #72]	; 0x48
		uwbListInMsg[uwb_index] = TRUE;
 800e03a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e03e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800e042:	4413      	add	r3, r2
 800e044:	2201      	movs	r2, #1
 800e046:	f803 2c64 	strb.w	r2, [r3, #-100]

		memcpy(&framelength, &messageData[msgDataIndex], sizeof(uint8));
 800e04a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	4413      	add	r3, r2
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		msgDataIndex++;
 800e058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e05c:	3301      	adds	r3, #1
 800e05e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		memcpy(&numSlots, &messageData[msgDataIndex], sizeof(uint8));
 800e062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	4413      	add	r3, r2
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		msgDataIndex++;
 800e070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e074:	3301      	adds	r3, #1
 800e076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int msgDataIndexSave = msgDataIndex;
 800e07a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e07e:	63bb      	str	r3, [r7, #56]	; 0x38

		//check if the tdma has been modified
		if(tdma_modified == FALSE) //dont look for any more differences if we already know one exists
 800e080:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e084:	f083 0301 	eor.w	r3, r3, #1
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d03c      	beq.n	800e108 <process_inf_msg+0x3d8>
		{
			//frist check if same framelength and number of slots
			if(framelength == info->framelength && numSlots == info->slotsLength)
 800e08e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e090:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e094:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e098:	429a      	cmp	r2, r3
 800e09a:	d132      	bne.n	800e102 <process_inf_msg+0x3d2>
 800e09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e09e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e0a2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d12b      	bne.n	800e102 <process_inf_msg+0x3d2>
			{
				//then check if each incoming slot is already assigned
				for(int s = 0; s < numSlots; s++)
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0ae:	e021      	b.n	800e0f4 <process_inf_msg+0x3c4>
				{
					memcpy(&slot, &messageData[msgDataIndex], sizeof(uint8));
 800e0b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					msgDataIndex++;
 800e0be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

					if(this->slot_assigned(info, slot) == FALSE)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800e0ce:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e0d2:	4611      	mov	r1, r2
 800e0d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e0d6:	4798      	blx	r3
 800e0d8:	4603      	mov	r3, r0
 800e0da:	f083 0301 	eor.w	r3, r3, #1
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d004      	beq.n	800e0ee <process_inf_msg+0x3be>
					{
						tdma_modified = TRUE;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						break;
 800e0ea:	bf00      	nop
				for(int s = 0; s < numSlots; s++)
 800e0ec:	e00c      	b.n	800e108 <process_inf_msg+0x3d8>
 800e0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	dbd7      	blt.n	800e0b0 <process_inf_msg+0x380>
 800e100:	e002      	b.n	800e108 <process_inf_msg+0x3d8>
					}
				}
			}
			else
			{
				tdma_modified = TRUE;
 800e102:	2301      	movs	r3, #1
 800e104:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}

		if(mode == CLEAR_LISTED_COPY)
 800e108:	79bb      	ldrb	r3, [r7, #6]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d104      	bne.n	800e118 <process_inf_msg+0x3e8>
		{
			//do after checking framelength because framelength reset
			this->free_slots(info);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800e114:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e116:	4798      	blx	r3
		}
		info->framelength = MAX(framelength, info->framelength);
 800e118:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e122:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e126:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e12a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e12e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e132:	4293      	cmp	r3, r2
 800e134:	bf38      	it	cc
 800e136:	4613      	movcc	r3, r2
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e13e:	f883 2020 	strb.w	r2, [r3, #32]


		msgDataIndex = msgDataIndexSave;
 800e142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int s = 0; s < numSlots; s++)
 800e148:	2300      	movs	r3, #0
 800e14a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e14c:	e017      	b.n	800e17e <process_inf_msg+0x44e>
		{
			memcpy(&slot, &messageData[msgDataIndex], sizeof(uint8));
 800e14e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	4413      	add	r3, r2
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			msgDataIndex++;
 800e15c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e160:	3301      	adds	r3, #1
 800e162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			this->assign_slot(info, slot, safeAssign);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e16c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800e170:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e174:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e176:	4798      	blx	r3
		for(int s = 0; s < numSlots; s++)
 800e178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e17a:	3301      	adds	r3, #1
 800e17c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e17e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e182:	461a      	mov	r2, r3
 800e184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e186:	4293      	cmp	r3, r2
 800e188:	dbe1      	blt.n	800e14e <process_inf_msg+0x41e>
	for(int i = 0; i < numNeighbors; i++)
 800e18a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e18c:	3301      	adds	r3, #1
 800e18e:	673b      	str	r3, [r7, #112]	; 0x70
 800e190:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e194:	461a      	mov	r2, r3
 800e196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e198:	4293      	cmp	r3, r2
 800e19a:	f6ff aee3 	blt.w	800df64 <process_inf_msg+0x234>
		}
	}

	for(int i = 0; i < numHidden; i++)
 800e19e:	2300      	movs	r3, #0
 800e1a0:	667b      	str	r3, [r7, #100]	; 0x64
 800e1a2:	e10b      	b.n	800e3bc <process_inf_msg+0x68c>
 800e1a4:	08017b88 	.word	0x08017b88
	{
		uint8 address[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800e1a8:	4a8d      	ldr	r2, [pc, #564]	; (800e3e0 <process_inf_msg+0x6b0>)
 800e1aa:	f107 0314 	add.w	r3, r7, #20
 800e1ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e1b2:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&address[0], &messageData[msgDataIndex], inst->addrByteSize);
 800e1b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	18d1      	adds	r1, r2, r3
 800e1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800e1c4:	3306      	adds	r3, #6
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	f107 0314 	add.w	r3, r7, #20
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f004 ff32 	bl	8013038 <memcpy>
		msgDataIndex += inst->addrByteSize;
 800e1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800e1da:	3306      	adds	r3, #6
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1e4:	4413      	add	r3, r2
 800e1e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		uint8 uwb_index = instgetuwblistindex(inst, &address[0], inst->addrByteSize);
 800e1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800e1f0:	3306      	adds	r3, #6
 800e1f2:	781a      	ldrb	r2, [r3, #0]
 800e1f4:	f107 0314 	add.w	r3, r7, #20
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e1fc:	f7fc fbdc 	bl	800a9b8 <instgetuwblistindex>
 800e200:	4603      	mov	r3, r0
 800e202:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		if(uwb_index != 0)//0 reserved for self
 800e206:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d021      	beq.n	800e252 <process_inf_msg+0x522>
		{
			if(this->uwbListTDMAInfo[uwb_index].connectionType == UWB_LIST_INACTIVE)
 800e20e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800e212:	68f9      	ldr	r1, [r7, #12]
 800e214:	4613      	mov	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	440b      	add	r3, r1
 800e21e:	3308      	adds	r3, #8
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	2b04      	cmp	r3, #4
 800e224:	d10a      	bne.n	800e23c <process_inf_msg+0x50c>
			{
				this->uwbListTDMAInfo[uwb_index].connectionType = UWB_LIST_TWICE_HIDDEN;
 800e226:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800e22a:	68f9      	ldr	r1, [r7, #12]
 800e22c:	4613      	mov	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	4413      	add	r3, r2
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	440b      	add	r3, r1
 800e236:	3308      	adds	r3, #8
 800e238:	2203      	movs	r2, #3
 800e23a:	701a      	strb	r2, [r3, #0]
			}

			this->uwbListTDMAInfo[uwb_index].lastCommTwiceHidden = time_now;
 800e23c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800e240:	68f9      	ldr	r1, [r7, #12]
 800e242:	4613      	mov	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	440b      	add	r3, r1
 800e24c:	3314      	adds	r3, #20
 800e24e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e250:	601a      	str	r2, [r3, #0]
		}

		uwbListInMsg[uwb_index] = TRUE;
 800e252:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e256:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800e25a:	4413      	add	r3, r2
 800e25c:	2201      	movs	r2, #1
 800e25e:	f803 2c64 	strb.w	r2, [r3, #-100]
		info = &this->uwbListTDMAInfo[uwb_index];
 800e262:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	3308      	adds	r3, #8
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	4413      	add	r3, r2
 800e274:	64bb      	str	r3, [r7, #72]	; 0x48

		memcpy(&framelength, &messageData[msgDataIndex], sizeof(uint8));
 800e276:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	4413      	add	r3, r2
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		msgDataIndex++;
 800e284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e288:	3301      	adds	r3, #1
 800e28a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		memcpy(&numSlots, &messageData[msgDataIndex], sizeof(uint8));
 800e28e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	4413      	add	r3, r2
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		msgDataIndex++;
 800e29c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int msgDataIndexSave = msgDataIndex;
 800e2a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2aa:	643b      	str	r3, [r7, #64]	; 0x40

		//check if the tdma has been modified
		if(tdma_modified == FALSE) //don't look for any more differences if we already know one exists
 800e2ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e2b0:	f083 0301 	eor.w	r3, r3, #1
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d03c      	beq.n	800e334 <process_inf_msg+0x604>
		{
			//frist check if same framelength and number of slots
			if(framelength == info->framelength && numSlots == info->slotsLength)
 800e2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e2c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d132      	bne.n	800e32e <process_inf_msg+0x5fe>
 800e2c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2ca:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e2ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d12b      	bne.n	800e32e <process_inf_msg+0x5fe>
			{
				//then check if each incoming slot is already assigned
				for(int s = 0; s < numSlots; s++)
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	663b      	str	r3, [r7, #96]	; 0x60
 800e2da:	e021      	b.n	800e320 <process_inf_msg+0x5f0>
				{
					memcpy(&slot, &messageData[msgDataIndex], sizeof(uint8));
 800e2dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					msgDataIndex++;
 800e2ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

					if(this->slot_assigned(info, slot) == FALSE)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800e2fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e2fe:	4611      	mov	r1, r2
 800e300:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e302:	4798      	blx	r3
 800e304:	4603      	mov	r3, r0
 800e306:	f083 0301 	eor.w	r3, r3, #1
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d004      	beq.n	800e31a <process_inf_msg+0x5ea>
					{
						tdma_modified = TRUE;
 800e310:	2301      	movs	r3, #1
 800e312:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						break;
 800e316:	bf00      	nop
				for(int s = 0; s < numSlots; s++)
 800e318:	e00c      	b.n	800e334 <process_inf_msg+0x604>
 800e31a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e31c:	3301      	adds	r3, #1
 800e31e:	663b      	str	r3, [r7, #96]	; 0x60
 800e320:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e324:	461a      	mov	r2, r3
 800e326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e328:	4293      	cmp	r3, r2
 800e32a:	dbd7      	blt.n	800e2dc <process_inf_msg+0x5ac>
 800e32c:	e002      	b.n	800e334 <process_inf_msg+0x604>
					}
				}
			}
			else
			{
				tdma_modified = TRUE;
 800e32e:	2301      	movs	r3, #1
 800e330:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
		}

		if(mode == CLEAR_LISTED_COPY)
 800e334:	79bb      	ldrb	r3, [r7, #6]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d104      	bne.n	800e344 <process_inf_msg+0x614>
		{
			//do after checking for difference because will reset framelength as well
			this->free_slots(info);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800e340:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e342:	4798      	blx	r3
		}
		info->framelength = MAX(framelength, info->framelength);
 800e344:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e34c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e34e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e352:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e356:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e35a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e35e:	4293      	cmp	r3, r2
 800e360:	bf38      	it	cc
 800e362:	4613      	movcc	r3, r2
 800e364:	b2db      	uxtb	r3, r3
 800e366:	b2da      	uxtb	r2, r3
 800e368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36a:	f883 2020 	strb.w	r2, [r3, #32]

		msgDataIndex = msgDataIndexSave;
 800e36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		for(int s = 0; s < numSlots; s++)
 800e374:	2300      	movs	r3, #0
 800e376:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e378:	e017      	b.n	800e3aa <process_inf_msg+0x67a>
		{
			memcpy(&slot, &messageData[msgDataIndex], sizeof(uint8));
 800e37a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	4413      	add	r3, r2
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			msgDataIndex++;
 800e388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e38c:	3301      	adds	r3, #1
 800e38e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			this->assign_slot(info, slot, safeAssign);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e398:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800e39c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e3a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e3a2:	4798      	blx	r3
		for(int s = 0; s < numSlots; s++)
 800e3a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3aa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	dbe1      	blt.n	800e37a <process_inf_msg+0x64a>
	for(int i = 0; i < numHidden; i++)
 800e3b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	667b      	str	r3, [r7, #100]	; 0x64
 800e3bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	f6ff aeef 	blt.w	800e1a8 <process_inf_msg+0x478>
		}
	}

	if(mode == CLEAR_LISTED_COPY)
 800e3ca:	79bb      	ldrb	r3, [r7, #6]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	f040 80c9 	bne.w	800e564 <process_inf_msg+0x834>
	{
		//deconflict uncopied against copied. (excluding self)
		for(int i = 1; i < inst->uwbListLen; i++)
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3d6:	e0ab      	b.n	800e530 <process_inf_msg+0x800>
		{
			for(int j = i + 1; j < inst->uwbListLen; j++)
 800e3d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3da:	3301      	adds	r3, #1
 800e3dc:	657b      	str	r3, [r7, #84]	; 0x54
 800e3de:	e09a      	b.n	800e516 <process_inf_msg+0x7e6>
 800e3e0:	08017b88 	.word	0x08017b88
			{
				if((uwbListInMsg[i] == FALSE && uwbListInMsg[j] == TRUE) || (uwbListInMsg[i] == TRUE && uwbListInMsg[j] == FALSE))
 800e3e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e3e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3ea:	4413      	add	r3, r2
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	f083 0301 	eor.w	r3, r3, #1
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d006      	beq.n	800e406 <process_inf_msg+0x6d6>
 800e3f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3fe:	4413      	add	r3, r2
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d110      	bne.n	800e428 <process_inf_msg+0x6f8>
 800e406:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e40a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e40c:	4413      	add	r3, r2
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d07d      	beq.n	800e510 <process_inf_msg+0x7e0>
 800e414:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e41a:	4413      	add	r3, r2
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	f083 0301 	eor.w	r3, r3, #1
 800e422:	b2db      	uxtb	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d073      	beq.n	800e510 <process_inf_msg+0x7e0>
				{
					if((this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR) ||
 800e428:	68f9      	ldr	r1, [r7, #12]
 800e42a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e42c:	4613      	mov	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	4413      	add	r3, r2
 800e432:	00db      	lsls	r3, r3, #3
 800e434:	440b      	add	r3, r1
 800e436:	3308      	adds	r3, #8
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d10a      	bne.n	800e454 <process_inf_msg+0x724>
 800e43e:	68f9      	ldr	r1, [r7, #12]
 800e440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e442:	4613      	mov	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	00db      	lsls	r3, r3, #3
 800e44a:	440b      	add	r3, r1
 800e44c:	3308      	adds	r3, #8
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d041      	beq.n	800e4d8 <process_inf_msg+0x7a8>
					   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_HIDDEN)   ||
 800e454:	68f9      	ldr	r1, [r7, #12]
 800e456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e458:	4613      	mov	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	4413      	add	r3, r2
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	440b      	add	r3, r1
 800e462:	3308      	adds	r3, #8
 800e464:	781b      	ldrb	r3, [r3, #0]
					if((this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR) ||
 800e466:	2b01      	cmp	r3, #1
 800e468:	d10a      	bne.n	800e480 <process_inf_msg+0x750>
					   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_HIDDEN)   ||
 800e46a:	68f9      	ldr	r1, [r7, #12]
 800e46c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e46e:	4613      	mov	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	4413      	add	r3, r2
 800e474:	00db      	lsls	r3, r3, #3
 800e476:	440b      	add	r3, r1
 800e478:	3308      	adds	r3, #8
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d02b      	beq.n	800e4d8 <process_inf_msg+0x7a8>
					   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR) ||
 800e480:	68f9      	ldr	r1, [r7, #12]
 800e482:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e484:	4613      	mov	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	00db      	lsls	r3, r3, #3
 800e48c:	440b      	add	r3, r1
 800e48e:	3308      	adds	r3, #8
 800e490:	781b      	ldrb	r3, [r3, #0]
					   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_HIDDEN)   ||
 800e492:	2b01      	cmp	r3, #1
 800e494:	d10a      	bne.n	800e4ac <process_inf_msg+0x77c>
					   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR) ||
 800e496:	68f9      	ldr	r1, [r7, #12]
 800e498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	440b      	add	r3, r1
 800e4a4:	3308      	adds	r3, #8
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d015      	beq.n	800e4d8 <process_inf_msg+0x7a8>
					   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_HIDDEN))
 800e4ac:	68f9      	ldr	r1, [r7, #12]
 800e4ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4b0:	4613      	mov	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4413      	add	r3, r2
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	440b      	add	r3, r1
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	781b      	ldrb	r3, [r3, #0]
					   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR) ||
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d126      	bne.n	800e510 <process_inf_msg+0x7e0>
					   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_HIDDEN))
 800e4c2:	68f9      	ldr	r1, [r7, #12]
 800e4c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	00db      	lsls	r3, r3, #3
 800e4ce:	440b      	add	r3, r1
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d11b      	bne.n	800e510 <process_inf_msg+0x7e0>
					{
						if(this->deconflict_uwb_pair(this, &this->uwbListTDMAInfo[i], &this->uwbListTDMAInfo[j]) == TRUE)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
 800e4de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	3308      	adds	r3, #8
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	18d1      	adds	r1, r2, r3
 800e4ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	00db      	lsls	r3, r3, #3
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	461a      	mov	r2, r3
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	47a0      	blx	r4
 800e504:	4603      	mov	r3, r0
 800e506:	2b00      	cmp	r3, #0
 800e508:	d002      	beq.n	800e510 <process_inf_msg+0x7e0>
						{
							tdma_modified = TRUE;
 800e50a:	2301      	movs	r3, #1
 800e50c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			for(int j = i + 1; j < inst->uwbListLen; j++)
 800e510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e512:	3301      	adds	r3, #1
 800e514:	657b      	str	r3, [r7, #84]	; 0x54
 800e516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e518:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800e51c:	3301      	adds	r3, #1
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	461a      	mov	r2, r3
 800e522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e524:	4293      	cmp	r3, r2
 800e526:	f6ff af5d 	blt.w	800e3e4 <process_inf_msg+0x6b4>
		for(int i = 1; i < inst->uwbListLen; i++)
 800e52a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e52c:	3301      	adds	r3, #1
 800e52e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e532:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800e536:	3301      	adds	r3, #1
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e53e:	4293      	cmp	r3, r2
 800e540:	f6ff af4a 	blt.w	800e3d8 <process_inf_msg+0x6a8>
					}
				}
			}
		}

		if(tdma_modified == TRUE)
 800e544:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00b      	beq.n	800e564 <process_inf_msg+0x834>
		{

			//if so, release all assignments from self
			this->free_slots(&this->uwbListTDMAInfo[0]);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	3208      	adds	r2, #8
 800e556:	4610      	mov	r0, r2
 800e558:	4798      	blx	r3

			//find self a new slot assignment
			this->find_assign_slot(this);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	4798      	blx	r3
		}
	}

	return tdma_modified;
 800e564:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800e568:	4618      	mov	r0, r3
 800e56a:	378c      	adds	r7, #140	; 0x8c
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd90      	pop	{r4, r7, pc}

0800e570 <poll_delay>:

static bool poll_delay(struct TDMAHandler *this, uint32 time_now_offset, uint32 offset)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	; 0x28
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
	bool delay = FALSE;
 800e57c:	2300      	movs	r3, #0
 800e57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint64 time_now_us = portGetTickCntMicro();
 800e582:	f003 fbaf 	bl	8011ce4 <portGetTickCntMicro>
 800e586:	e9c7 0106 	strd	r0, r1, [r7, #24]
	uint64 timeSinceSlotStart = get_dt64(this->lastSlotStartTime64, time_now_us);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	; 0x198
 800e590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e594:	f7fa fe93 	bl	80092be <get_dt64>
 800e598:	e9c7 0104 	strd	r0, r1, [r7, #16]
	if(timeSinceSlotStart >= this->slotStartDelay_us)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 800e5a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e5a6:	4299      	cmp	r1, r3
 800e5a8:	bf08      	it	eq
 800e5aa:	4290      	cmpeq	r0, r2
 800e5ac:	d302      	bcc.n	800e5b4 <poll_delay+0x44>
	{
		delay = FALSE;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return delay;
 800e5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3728      	adds	r7, #40	; 0x28
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <slot_assigned>:

static bool slot_assigned(struct TDMAInfo *info, uint8 slot)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
	bool assigned = FALSE;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	73fb      	strb	r3, [r7, #15]
	if(info->slots != NULL && info->slotsLength != 0)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d01d      	beq.n	800e614 <slot_assigned+0x54>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d018      	beq.n	800e614 <slot_assigned+0x54>
	{
		for(int i = 0; i < info->slotsLength; i++)
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	60bb      	str	r3, [r7, #8]
 800e5e6:	e00e      	b.n	800e606 <slot_assigned+0x46>
		{
			if(memcmp(&info->slots[i], &slot, 1) == 0)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	781a      	ldrb	r2, [r3, #0]
 800e5f2:	1cfb      	adds	r3, r7, #3
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d102      	bne.n	800e600 <slot_assigned+0x40>
			{
				assigned = TRUE;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	73fb      	strb	r3, [r7, #15]
				break;
 800e5fe:	e009      	b.n	800e614 <slot_assigned+0x54>
		for(int i = 0; i < info->slotsLength; i++)
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	3301      	adds	r3, #1
 800e604:	60bb      	str	r3, [r7, #8]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e60c:	461a      	mov	r2, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	4293      	cmp	r3, r2
 800e612:	dbe9      	blt.n	800e5e8 <slot_assigned+0x28>
			}
		}
	}

	return assigned;
 800e614:	7bfb      	ldrb	r3, [r7, #15]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bc80      	pop	{r7}
 800e61e:	4770      	bx	lr

0800e620 <assign_slot>:

static bool assign_slot(struct TDMAInfo *info, uint8 slot, bool safeAssign)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	70fb      	strb	r3, [r7, #3]
 800e62c:	4613      	mov	r3, r2
 800e62e:	70bb      	strb	r3, [r7, #2]
	//NOTE: deconflicting happens elsewhere
	bool retval = FALSE;
 800e630:	2300      	movs	r3, #0
 800e632:	75fb      	strb	r3, [r7, #23]

	if(safeAssign == TRUE)//when using safeAssign, first check if the slot is assigned
 800e634:	78bb      	ldrb	r3, [r7, #2]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d03a      	beq.n	800e6b0 <assign_slot+0x90>
	{
		//if not assigned, increase slots size and add slot index to end of array (array is unsorted)
		if(slot_assigned(info, slot) == FALSE)
 800e63a:	78fb      	ldrb	r3, [r7, #3]
 800e63c:	4619      	mov	r1, r3
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f7ff ffbe 	bl	800e5c0 <slot_assigned>
 800e644:	4603      	mov	r3, r0
 800e646:	f083 0301 	eor.w	r3, r3, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d05e      	beq.n	800e70e <assign_slot+0xee>
		{
			uint8 *newSlots = malloc(sizeof(uint8)*(info->slotsLength + 1));
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e656:	3301      	adds	r3, #1
 800e658:	4618      	mov	r0, r3
 800e65a:	f004 fccf 	bl	8012ffc <malloc>
 800e65e:	4603      	mov	r3, r0
 800e660:	60fb      	str	r3, [r7, #12]
			memcpy(&newSlots[0], &info->slots[0], sizeof(uint8)*info->slotsLength);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e66c:	461a      	mov	r2, r3
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f004 fce2 	bl	8013038 <memcpy>
			memcpy(&newSlots[info->slotsLength], &slot, 1);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e67a:	461a      	mov	r2, r3
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	4413      	add	r3, r2
 800e680:	78fa      	ldrb	r2, [r7, #3]
 800e682:	701a      	strb	r2, [r3, #0]

			free(info->slots);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e688:	4618      	mov	r0, r3
 800e68a:	f004 fcbf 	bl	801300c <free>
			info->slots = NULL;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	625a      	str	r2, [r3, #36]	; 0x24
			info->slots = newSlots;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	625a      	str	r2, [r3, #36]	; 0x24
			info->slotsLength += 1;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			retval = TRUE;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	75fb      	strb	r3, [r7, #23]
 800e6ae:	e02e      	b.n	800e70e <assign_slot+0xee>
		}
	}
	else
	{
		uint8 *newSlots = malloc(sizeof(uint8)*(info->slotsLength + 1));
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f004 fc9f 	bl	8012ffc <malloc>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	613b      	str	r3, [r7, #16]
		memcpy(&newSlots[0], &info->slots[0], sizeof(uint8)*info->slotsLength);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	6938      	ldr	r0, [r7, #16]
 800e6d0:	f004 fcb2 	bl	8013038 <memcpy>
		memcpy(&newSlots[info->slotsLength], &slot, 1);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e6da:	461a      	mov	r2, r3
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	4413      	add	r3, r2
 800e6e0:	78fa      	ldrb	r2, [r7, #3]
 800e6e2:	701a      	strb	r2, [r3, #0]

		free(info->slots);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f004 fc8f 	bl	801300c <free>
		info->slots = NULL;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	625a      	str	r2, [r3, #36]	; 0x24
		info->slots = newSlots;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	693a      	ldr	r2, [r7, #16]
 800e6f8:	625a      	str	r2, [r3, #36]	; 0x24
		info->slotsLength += 1;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e700:	3301      	adds	r3, #1
 800e702:	b2da      	uxtb	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		retval = TRUE;
 800e70a:	2301      	movs	r3, #1
 800e70c:	75fb      	strb	r3, [r7, #23]
	}


	return retval;
 800e70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3718      	adds	r7, #24
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <find_assign_slot>:
//		release one slot from node with greatest number of slot assignments and assign to self; exit
//4.) Double the Frame (DF)
//		applicable if 2.) and 3.) not applicable
//		double own framelength and go back to 2.)
static void find_assign_slot(struct TDMAHandler *this)
{
 800e718:	b590      	push	{r4, r7, lr}
 800e71a:	b08b      	sub	sp, #44	; 0x2c
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]

	//NOTE: this assumes that all other TDMAInfo stored in the TDMAHandler are not in conflict with each other
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800e720:	2000      	movs	r0, #0
 800e722:	f7fa fe8b 	bl	800943c <instance_get_local_structure_ptr>
 800e726:	61b8      	str	r0, [r7, #24]
	struct TDMAInfo *info = &this->uwbListTDMAInfo[0];
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	3308      	adds	r3, #8
 800e72c:	617b      	str	r3, [r7, #20]

	//if this UWB was somehow reset, recover its prior slot assignment info from the network traffic
	if(info->slotsLength > 0)
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e734:	2b00      	cmp	r3, #0
 800e736:	f040 8177 	bne.w	800ea28 <find_assign_slot+0x310>
	{
		return;
	}

	bool assignment_made = FALSE;
 800e73a:	2300      	movs	r3, #0
 800e73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//set framelength
	info->framelength = 4;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	2204      	movs	r2, #4
 800e744:	f883 2020 	strb.w	r2, [r3, #32]

	//come here after DF
	while(TRUE)
	{
		//GU
		uint8 slotsAssigned = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(uint8 i = 1; i < info->framelength; i++)//do not assign to 0th slot
 800e74e:	2301      	movs	r3, #1
 800e750:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e754:	e0bc      	b.n	800e8d0 <find_assign_slot+0x1b8>
		{
			bool assigned = FALSE;
 800e756:	2300      	movs	r3, #0
 800e758:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			for(uint8 u = 1; u < inst->uwbListLen; u++)//0 reserved for self
 800e75c:	2301      	movs	r3, #1
 800e75e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e762:	e089      	b.n	800e878 <find_assign_slot+0x160>
			{
				for(uint8 su = 0; su < this->uwbListTDMAInfo[u].slotsLength; su++)
 800e764:	2300      	movs	r3, #0
 800e766:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e76a:	e06b      	b.n	800e844 <find_assign_slot+0x12c>
				{
					uint8 slot_su;
					memcpy(&slot_su, &this->uwbListTDMAInfo[u].slots[su], sizeof(uint8));
 800e76c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	1c5a      	adds	r2, r3, #1
 800e774:	4613      	mov	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	440b      	add	r3, r1
 800e77e:	3304      	adds	r3, #4
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e786:	4413      	add	r3, r2
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	743b      	strb	r3, [r7, #16]

					if(info->framelength > this->uwbListTDMAInfo[u].framelength)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	4613      	mov	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	4413      	add	r3, r2
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	4403      	add	r3, r0
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	4299      	cmp	r1, r3
 800e7a8:	d919      	bls.n	800e7de <find_assign_slot+0xc6>
					{
						uint8 mod_i = i%this->uwbListTDMAInfo[u].framelength;
 800e7aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	4413      	add	r3, r2
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	440b      	add	r3, r1
 800e7bc:	781a      	ldrb	r2, [r3, #0]
 800e7be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e7c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7c6:	fb02 f201 	mul.w	r2, r2, r1
 800e7ca:	1a9b      	subs	r3, r3, r2
 800e7cc:	74bb      	strb	r3, [r7, #18]

						if(slot_su == mod_i)
 800e7ce:	7c3b      	ldrb	r3, [r7, #16]
 800e7d0:	7cba      	ldrb	r2, [r7, #18]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d12d      	bne.n	800e832 <find_assign_slot+0x11a>
						{
							//slot assigned to this uwb
							assigned = TRUE;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800e7dc:	e029      	b.n	800e832 <find_assign_slot+0x11a>
						}
					}
					else if(info->framelength < this->uwbListTDMAInfo[u].framelength)
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e7e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	1c5a      	adds	r2, r3, #1
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	4403      	add	r3, r0
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	4299      	cmp	r1, r3
 800e7fa:	d212      	bcs.n	800e822 <find_assign_slot+0x10a>
					{
						uint8 mod_slot_su = slot_su % info->framelength;
 800e7fc:	7c3b      	ldrb	r3, [r7, #16]
 800e7fe:	697a      	ldr	r2, [r7, #20]
 800e800:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e804:	fbb3 f1f2 	udiv	r1, r3, r2
 800e808:	fb02 f201 	mul.w	r2, r2, r1
 800e80c:	1a9b      	subs	r3, r3, r2
 800e80e:	74fb      	strb	r3, [r7, #19]

						if(mod_slot_su == i)
 800e810:	7cfa      	ldrb	r2, [r7, #19]
 800e812:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e816:	429a      	cmp	r2, r3
 800e818:	d10b      	bne.n	800e832 <find_assign_slot+0x11a>
						{
							//slot assigned to this uwb
							assigned = TRUE;
 800e81a:	2301      	movs	r3, #1
 800e81c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800e820:	e007      	b.n	800e832 <find_assign_slot+0x11a>
						}
					}
					else //same framelength
					{
						if(slot_su == i)
 800e822:	7c3b      	ldrb	r3, [r7, #16]
 800e824:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800e828:	429a      	cmp	r2, r3
 800e82a:	d102      	bne.n	800e832 <find_assign_slot+0x11a>
						{
							//slot assigned to this uwb
							assigned = TRUE;
 800e82c:	2301      	movs	r3, #1
 800e82e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						}
					}


					if(assigned == TRUE)
 800e832:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e836:	2b00      	cmp	r3, #0
 800e838:	d114      	bne.n	800e864 <find_assign_slot+0x14c>
				for(uint8 su = 0; su < this->uwbListTDMAInfo[u].slotsLength; su++)
 800e83a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e83e:	3301      	adds	r3, #1
 800e840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e848:	6879      	ldr	r1, [r7, #4]
 800e84a:	1c5a      	adds	r2, r3, #1
 800e84c:	4613      	mov	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	4413      	add	r3, r2
 800e852:	00db      	lsls	r3, r3, #3
 800e854:	440b      	add	r3, r1
 800e856:	3301      	adds	r3, #1
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e85e:	429a      	cmp	r2, r3
 800e860:	d384      	bcc.n	800e76c <find_assign_slot+0x54>
 800e862:	e000      	b.n	800e866 <find_assign_slot+0x14e>
					{
						break;
 800e864:	bf00      	nop
					}
				}

				if(assigned == TRUE)
 800e866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10f      	bne.n	800e88e <find_assign_slot+0x176>
			for(uint8 u = 1; u < inst->uwbListLen; u++)//0 reserved for self
 800e86e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e872:	3301      	adds	r3, #1
 800e874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800e87e:	3301      	adds	r3, #1
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800e886:	429a      	cmp	r2, r3
 800e888:	f4ff af6c 	bcc.w	800e764 <find_assign_slot+0x4c>
 800e88c:	e000      	b.n	800e890 <find_assign_slot+0x178>
				{
					break;
 800e88e:	bf00      	nop
				}
			}

			//slot not assigned, assign to self
			if(assigned == FALSE)
 800e890:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e894:	f083 0301 	eor.w	r3, r3, #1
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d013      	beq.n	800e8c6 <find_assign_slot+0x1ae>
			{
				this->assign_slot(info, i, FALSE);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e8a4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	6978      	ldr	r0, [r7, #20]
 800e8ac:	4798      	blx	r3
				assignment_made = TRUE;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				slotsAssigned++;
 800e8b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(slotsAssigned > 1) //assign self up to two empty slots
 800e8be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d80d      	bhi.n	800e8e2 <find_assign_slot+0x1ca>
		for(uint8 i = 1; i < info->framelength; i++)//do not assign to 0th slot
 800e8c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e8d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	f4ff af3b 	bcc.w	800e756 <find_assign_slot+0x3e>
 800e8e0:	e000      	b.n	800e8e4 <find_assign_slot+0x1cc>
				{
					break;
 800e8e2:	bf00      	nop
				}
			}
		}

		if(assignment_made == TRUE)
 800e8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f040 809f 	bne.w	800ea2c <find_assign_slot+0x314>
			break;
		}

		//RMA
		//find UWB with greatest number of slot assignments
		uint8 max_assignments = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		uint8 max_uwb_index = 255;
 800e8f4:	23ff      	movs	r3, #255	; 0xff
 800e8f6:	f887 3020 	strb.w	r3, [r7, #32]
		for(uint8 u = 1; u < inst->uwbListLen; u++)//0 reserved for self
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	77fb      	strb	r3, [r7, #31]
 800e8fe:	e045      	b.n	800e98c <find_assign_slot+0x274>
		{
			uint8 slotsLength = this->uwbListTDMAInfo[u].slotsLength;
 800e900:	7ffb      	ldrb	r3, [r7, #31]
 800e902:	6879      	ldr	r1, [r7, #4]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	4613      	mov	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	4413      	add	r3, r2
 800e90c:	00db      	lsls	r3, r3, #3
 800e90e:	440b      	add	r3, r1
 800e910:	3301      	adds	r3, #1
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	77bb      	strb	r3, [r7, #30]
			if(info->framelength > this->uwbListTDMAInfo[u].framelength && this->uwbListTDMAInfo[u].slotsLength != 0)
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e91c:	7ffb      	ldrb	r3, [r7, #31]
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	1c5a      	adds	r2, r3, #1
 800e922:	4613      	mov	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	4403      	add	r3, r0
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	4299      	cmp	r1, r3
 800e930:	d91e      	bls.n	800e970 <find_assign_slot+0x258>
 800e932:	7ffb      	ldrb	r3, [r7, #31]
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	1c5a      	adds	r2, r3, #1
 800e938:	4613      	mov	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	4413      	add	r3, r2
 800e93e:	00db      	lsls	r3, r3, #3
 800e940:	440b      	add	r3, r1
 800e942:	3301      	adds	r3, #1
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d012      	beq.n	800e970 <find_assign_slot+0x258>
			{
				slotsLength *= info->framelength/this->uwbListTDMAInfo[u].framelength;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e950:	7ffb      	ldrb	r3, [r7, #31]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	4613      	mov	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	4403      	add	r3, r0
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	fbb1 f3f3 	udiv	r3, r1, r3
 800e966:	b2db      	uxtb	r3, r3
 800e968:	7fba      	ldrb	r2, [r7, #30]
 800e96a:	fb02 f303 	mul.w	r3, r2, r3
 800e96e:	77bb      	strb	r3, [r7, #30]
			}

			if(slotsLength > max_assignments)
 800e970:	7fba      	ldrb	r2, [r7, #30]
 800e972:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e976:	429a      	cmp	r2, r3
 800e978:	d905      	bls.n	800e986 <find_assign_slot+0x26e>
			{
				max_assignments = slotsLength;
 800e97a:	7fbb      	ldrb	r3, [r7, #30]
 800e97c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				max_uwb_index = u;
 800e980:	7ffb      	ldrb	r3, [r7, #31]
 800e982:	f887 3020 	strb.w	r3, [r7, #32]
		for(uint8 u = 1; u < inst->uwbListLen; u++)//0 reserved for self
 800e986:	7ffb      	ldrb	r3, [r7, #31]
 800e988:	3301      	adds	r3, #1
 800e98a:	77fb      	strb	r3, [r7, #31]
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800e992:	3301      	adds	r3, #1
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	7ffa      	ldrb	r2, [r7, #31]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d3b1      	bcc.n	800e900 <find_assign_slot+0x1e8>
			}
		}

		if(max_uwb_index != 255 && max_assignments > 1)
 800e99c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9a0:	2bff      	cmp	r3, #255	; 0xff
 800e9a2:	d034      	beq.n	800ea0e <find_assign_slot+0x2f6>
 800e9a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d930      	bls.n	800ea0e <find_assign_slot+0x2f6>
		{
			uint8 slot;
			memcpy(&slot, &this->uwbListTDMAInfo[max_uwb_index].slots[0], sizeof(uint8));
 800e9ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9b0:	6879      	ldr	r1, [r7, #4]
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	4413      	add	r3, r2
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	440b      	add	r3, r1
 800e9be:	3304      	adds	r3, #4
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	73fb      	strb	r3, [r7, #15]
			uint8 mod_slot = slot % info->framelength;
 800e9c6:	7bfb      	ldrb	r3, [r7, #15]
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 800e9ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9d2:	fb02 f201 	mul.w	r2, r2, r1
 800e9d6:	1a9b      	subs	r3, r3, r2
 800e9d8:	747b      	strb	r3, [r7, #17]

			this->assign_slot(info, mod_slot, TRUE);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e9e0:	7c79      	ldrb	r1, [r7, #17]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	6978      	ldr	r0, [r7, #20]
 800e9e6:	4798      	blx	r3
			this->deconflict_uwb_pair(this, info, &this->uwbListTDMAInfo[max_uwb_index]);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
 800e9ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	3308      	adds	r3, #8
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	4413      	add	r3, r2
 800ea00:	461a      	mov	r2, r3
 800ea02:	6979      	ldr	r1, [r7, #20]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	47a0      	blx	r4
			assignment_made = TRUE;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if(assignment_made == TRUE)
 800ea0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d10c      	bne.n	800ea30 <find_assign_slot+0x318>
		{
			break;
		}

		//DF
		info->framelength *= 2;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	f883 2020 	strb.w	r2, [r3, #32]
	{
 800ea26:	e68f      	b.n	800e748 <find_assign_slot+0x30>
		return;
 800ea28:	bf00      	nop
 800ea2a:	e002      	b.n	800ea32 <find_assign_slot+0x31a>
			break;
 800ea2c:	bf00      	nop
 800ea2e:	e000      	b.n	800ea32 <find_assign_slot+0x31a>
			break;
 800ea30:	bf00      	nop
	}
}
 800ea32:	372c      	adds	r7, #44	; 0x2c
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd90      	pop	{r4, r7, pc}

0800ea38 <build_new_network>:

static void build_new_network(struct TDMAHandler *this)
{
 800ea38:	b590      	push	{r4, r7, lr}
 800ea3a:	b089      	sub	sp, #36	; 0x24
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800ea40:	2000      	movs	r0, #0
 800ea42:	f7fa fcfb 	bl	800943c <instance_get_local_structure_ptr>
 800ea46:	61f8      	str	r0, [r7, #28]
	uint64 time_now_us = portGetTickCntMicro();
 800ea48:	f003 f94c 	bl	8011ce4 <portGetTickCntMicro>
 800ea4c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	bool safeAssign = FALSE;
 800ea50:	2300      	movs	r3, #0
 800ea52:	73fb      	strb	r3, [r7, #15]

	//clear all tdma information
	this->tdma_free_all_slots(this);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	4798      	blx	r3

	//build the initial TDMA
	this->uwbListTDMAInfo[0].frameStartTime = timestamp_subtract64(time_now_us, this->slotDuration_us);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ea64:	461a      	mov	r2, r3
 800ea66:	f04f 0300 	mov.w	r3, #0
 800ea6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ea6e:	f7fa fc8b 	bl	8009388 <timestamp_subtract64>
 800ea72:	4602      	mov	r2, r0
 800ea74:	460b      	mov	r3, r1
 800ea76:	6879      	ldr	r1, [r7, #4]
 800ea78:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->lastSlotStartTime64 = time_now_us;
 800ea7c:	6879      	ldr	r1, [r7, #4]
 800ea7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea82:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198

	this->uwbListTDMAInfo[0].framelength = (uint8)MIN_FRAMELENGTH;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2204      	movs	r2, #4
 800ea8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	this->uwbListTDMAInfo[inst->uwbToRangeWith].framelength = (uint8)MIN_FRAMELENGTH;
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	6879      	ldr	r1, [r7, #4]
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	440b      	add	r3, r1
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	701a      	strb	r2, [r3, #0]

	this->assign_slot(&this->uwbListTDMAInfo[0], 1, safeAssign);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	f102 0008 	add.w	r0, r2, #8
 800eab4:	7bfa      	ldrb	r2, [r7, #15]
 800eab6:	2101      	movs	r1, #1
 800eab8:	4798      	blx	r3
	this->assign_slot(&this->uwbListTDMAInfo[inst->uwbToRangeWith],  2, safeAssign);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 422c 	ldr.w	r4, [r3, #556]	; 0x22c
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	461a      	mov	r2, r3
 800eaca:	4613      	mov	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	3308      	adds	r3, #8
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	4413      	add	r3, r2
 800ead8:	7bfa      	ldrb	r2, [r7, #15]
 800eada:	2102      	movs	r1, #2
 800eadc:	4618      	mov	r0, r3
 800eade:	47a0      	blx	r4
	this->assign_slot(&this->uwbListTDMAInfo[0], 3, safeAssign);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	f102 0008 	add.w	r0, r2, #8
 800eaec:	7bfa      	ldrb	r2, [r7, #15]
 800eaee:	2103      	movs	r1, #3
 800eaf0:	4798      	blx	r3
}
 800eaf2:	bf00      	nop
 800eaf4:	3724      	adds	r7, #36	; 0x24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd90      	pop	{r4, r7, pc}

0800eafa <deconflict_slot_assignments>:


static bool deconflict_slot_assignments(struct TDMAHandler *this)
{
 800eafa:	b590      	push	{r4, r7, lr}
 800eafc:	b089      	sub	sp, #36	; 0x24
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800eb02:	2000      	movs	r0, #0
 800eb04:	f7fa fc9a 	bl	800943c <instance_get_local_structure_ptr>
 800eb08:	60f8      	str	r0, [r7, #12]
	bool conflict = FALSE;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	77fb      	strb	r3, [r7, #31]

	while(TRUE)
	{
		bool conflict_this_iter = FALSE;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	77bb      	strb	r3, [r7, #30]
		//first deconflict slots in neighbor, hidden, and twice hidden
		for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800eb12:	2301      	movs	r3, #1
 800eb14:	61bb      	str	r3, [r7, #24]
 800eb16:	e0a8      	b.n	800ec6a <deconflict_slot_assignments+0x170>
		{
			if(this->uwbListTDMAInfo[i].connectionType != UWB_LIST_INACTIVE)
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	4413      	add	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	440b      	add	r3, r1
 800eb26:	3308      	adds	r3, #8
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	f000 8097 	beq.w	800ec5e <deconflict_slot_assignments+0x164>
			{
				for(int j = i+1; j < inst->uwbListLen; j++)
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	3301      	adds	r3, #1
 800eb34:	617b      	str	r3, [r7, #20]
 800eb36:	e088      	b.n	800ec4a <deconflict_slot_assignments+0x150>
				{
					if(this->uwbListTDMAInfo[j].connectionType != UWB_LIST_INACTIVE && j != i)
 800eb38:	6879      	ldr	r1, [r7, #4]
 800eb3a:	697a      	ldr	r2, [r7, #20]
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	440b      	add	r3, r1
 800eb46:	3308      	adds	r3, #8
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b04      	cmp	r3, #4
 800eb4c:	d07a      	beq.n	800ec44 <deconflict_slot_assignments+0x14a>
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d076      	beq.n	800ec44 <deconflict_slot_assignments+0x14a>
					{
						//first check if their list type requires deconflicting
						if((this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800eb56:	6879      	ldr	r1, [r7, #4]
 800eb58:	69ba      	ldr	r2, [r7, #24]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	440b      	add	r3, r1
 800eb64:	3308      	adds	r3, #8
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d10a      	bne.n	800eb82 <deconflict_slot_assignments+0x88>
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	4613      	mov	r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	4413      	add	r3, r2
 800eb76:	00db      	lsls	r3, r3, #3
 800eb78:	440b      	add	r3, r1
 800eb7a:	3308      	adds	r3, #8
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d05f      	beq.n	800ec42 <deconflict_slot_assignments+0x148>
						   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800eb82:	6879      	ldr	r1, [r7, #4]
 800eb84:	697a      	ldr	r2, [r7, #20]
 800eb86:	4613      	mov	r3, r2
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	4413      	add	r3, r2
 800eb8c:	00db      	lsls	r3, r3, #3
 800eb8e:	440b      	add	r3, r1
 800eb90:	3308      	adds	r3, #8
 800eb92:	781b      	ldrb	r3, [r3, #0]
						if((this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d10a      	bne.n	800ebae <deconflict_slot_assignments+0xb4>
						   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800eb98:	6879      	ldr	r1, [r7, #4]
 800eb9a:	69ba      	ldr	r2, [r7, #24]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	00db      	lsls	r3, r3, #3
 800eba4:	440b      	add	r3, r1
 800eba6:	3308      	adds	r3, #8
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	d049      	beq.n	800ec42 <deconflict_slot_assignments+0x148>
						   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_TWICE_HIDDEN && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800ebae:	6879      	ldr	r1, [r7, #4]
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4413      	add	r3, r2
 800ebb8:	00db      	lsls	r3, r3, #3
 800ebba:	440b      	add	r3, r1
 800ebbc:	3308      	adds	r3, #8
 800ebbe:	781b      	ldrb	r3, [r3, #0]
						   (this->uwbListTDMAInfo[j].connectionType == UWB_LIST_NEIGHBOR && this->uwbListTDMAInfo[i].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800ebc0:	2b03      	cmp	r3, #3
 800ebc2:	d10a      	bne.n	800ebda <deconflict_slot_assignments+0xe0>
						   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_TWICE_HIDDEN && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	697a      	ldr	r2, [r7, #20]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d033      	beq.n	800ec42 <deconflict_slot_assignments+0x148>
						   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_HIDDEN && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_HIDDEN))
 800ebda:	6879      	ldr	r1, [r7, #4]
 800ebdc:	69ba      	ldr	r2, [r7, #24]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	4413      	add	r3, r2
 800ebe4:	00db      	lsls	r3, r3, #3
 800ebe6:	440b      	add	r3, r1
 800ebe8:	3308      	adds	r3, #8
 800ebea:	781b      	ldrb	r3, [r3, #0]
						   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_TWICE_HIDDEN && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_TWICE_HIDDEN) ||
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d10a      	bne.n	800ec06 <deconflict_slot_assignments+0x10c>
						   (this->uwbListTDMAInfo[i].connectionType == UWB_LIST_HIDDEN && this->uwbListTDMAInfo[j].connectionType == UWB_LIST_HIDDEN))
 800ebf0:	6879      	ldr	r1, [r7, #4]
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	4413      	add	r3, r2
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	440b      	add	r3, r1
 800ebfe:	3308      	adds	r3, #8
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d01d      	beq.n	800ec42 <deconflict_slot_assignments+0x148>
						{
							continue;
						}

						if(this->deconflict_uwb_pair(this, &this->uwbListTDMAInfo[i],&this->uwbListTDMAInfo[j]))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
 800ec0c:	69ba      	ldr	r2, [r7, #24]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4413      	add	r3, r2
 800ec14:	00db      	lsls	r3, r3, #3
 800ec16:	3308      	adds	r3, #8
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	18d1      	adds	r1, r2, r3
 800ec1c:	697a      	ldr	r2, [r7, #20]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	00db      	lsls	r3, r3, #3
 800ec26:	3308      	adds	r3, #8
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	47a0      	blx	r4
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d005      	beq.n	800ec44 <deconflict_slot_assignments+0x14a>
						{
							conflict = TRUE;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	77fb      	strb	r3, [r7, #31]
							conflict_this_iter = TRUE;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	77bb      	strb	r3, [r7, #30]
							break;
 800ec40:	e00d      	b.n	800ec5e <deconflict_slot_assignments+0x164>
							continue;
 800ec42:	bf00      	nop
				for(int j = i+1; j < inst->uwbListLen; j++)
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	3301      	adds	r3, #1
 800ec48:	617b      	str	r3, [r7, #20]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ec50:	3301      	adds	r3, #1
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	f6ff af6d 	blt.w	800eb38 <deconflict_slot_assignments+0x3e>
						}
					}
				}
			}

			if(conflict_this_iter)
 800ec5e:	7fbb      	ldrb	r3, [r7, #30]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d10d      	bne.n	800ec80 <deconflict_slot_assignments+0x186>
		for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	3301      	adds	r3, #1
 800ec68:	61bb      	str	r3, [r7, #24]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ec70:	3301      	adds	r3, #1
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	f6ff af4d 	blt.w	800eb18 <deconflict_slot_assignments+0x1e>
 800ec7e:	e000      	b.n	800ec82 <deconflict_slot_assignments+0x188>
			{
				break;
 800ec80:	bf00      	nop
			}
		}

		if(conflict_this_iter)
 800ec82:	7fbb      	ldrb	r3, [r7, #30]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d13a      	bne.n	800ecfe <deconflict_slot_assignments+0x204>
		{
			continue;
		}

		//next deconflict slots between self and neighbor, hidden, and twice hidden
		for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800ec88:	2301      	movs	r3, #1
 800ec8a:	613b      	str	r3, [r7, #16]
 800ec8c:	e028      	b.n	800ece0 <deconflict_slot_assignments+0x1e6>
		{
			if(this->uwbListTDMAInfo[i].connectionType != UWB_LIST_INACTIVE)
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	4613      	mov	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	440b      	add	r3, r1
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	d017      	beq.n	800ecd4 <deconflict_slot_assignments+0x1da>
			{
				if(this->deconflict_uwb_pair(this, &this->uwbListTDMAInfo[0], &this->uwbListTDMAInfo[i]))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 424c 	ldr.w	r4, [r3, #588]	; 0x24c
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f103 0108 	add.w	r1, r3, #8
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	4413      	add	r3, r2
 800ecb8:	00db      	lsls	r3, r3, #3
 800ecba:	3308      	adds	r3, #8
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	47a0      	blx	r4
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d003      	beq.n	800ecd4 <deconflict_slot_assignments+0x1da>
				{
					conflict = TRUE;
 800eccc:	2301      	movs	r3, #1
 800ecce:	77fb      	strb	r3, [r7, #31]
					conflict_this_iter = TRUE;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	77bb      	strb	r3, [r7, #30]
				}
			}
			if(conflict_this_iter)
 800ecd4:	7fbb      	ldrb	r3, [r7, #30]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10c      	bne.n	800ecf4 <deconflict_slot_assignments+0x1fa>
		for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	613b      	str	r3, [r7, #16]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ece6:	3301      	adds	r3, #1
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	461a      	mov	r2, r3
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	dbcd      	blt.n	800ec8e <deconflict_slot_assignments+0x194>
 800ecf2:	e000      	b.n	800ecf6 <deconflict_slot_assignments+0x1fc>
			{
				break;
 800ecf4:	bf00      	nop
			}
		}

		if(conflict_this_iter)
 800ecf6:	7fbb      	ldrb	r3, [r7, #30]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <deconflict_slot_assignments+0x208>
		{
			continue;
 800ecfc:	e000      	b.n	800ed00 <deconflict_slot_assignments+0x206>
			continue;
 800ecfe:	bf00      	nop
	{
 800ed00:	e705      	b.n	800eb0e <deconflict_slot_assignments+0x14>
		}

		break; //no conflicts found this iteration, break out of while loop
 800ed02:	bf00      	nop
	}

	return conflict;
 800ed04:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3724      	adds	r7, #36	; 0x24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd90      	pop	{r4, r7, pc}

0800ed0e <deconflict_uwb_pair>:

//return true if a conflict was found
static bool deconflict_uwb_pair(struct TDMAHandler *this, struct TDMAInfo *info_a, struct TDMAInfo *info_b)
{
 800ed0e:	b590      	push	{r4, r7, lr}
 800ed10:	b08b      	sub	sp, #44	; 0x2c
 800ed12:	af02      	add	r7, sp, #8
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
	bool conflict = FALSE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	77fb      	strb	r3, [r7, #31]

	while(TRUE)
	{
		bool conflict_this_iter = false;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	77bb      	strb	r3, [r7, #30]

		for(int sa = 0; sa < info_a->slotsLength; sa++)
 800ed22:	2300      	movs	r3, #0
 800ed24:	61bb      	str	r3, [r7, #24]
 800ed26:	e080      	b.n	800ee2a <deconflict_uwb_pair+0x11c>
		{
			uint8 slot_sa;
			memcpy(&slot_sa, &info_a->slots[sa], 1);
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	4413      	add	r3, r2
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	747b      	strb	r3, [r7, #17]

			for(int sb = 0; sb < info_b->slotsLength; sb++)
 800ed34:	2300      	movs	r3, #0
 800ed36:	617b      	str	r3, [r7, #20]
 800ed38:	e06a      	b.n	800ee10 <deconflict_uwb_pair+0x102>
			{
				uint8 slot_sb;
				memcpy(&slot_sb, &info_b->slots[sb], 1);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	4413      	add	r3, r2
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	743b      	strb	r3, [r7, #16]

				//check if slot is taken
				if(slot_sa >= info_b->framelength)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ed4c:	7c7b      	ldrb	r3, [r7, #17]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d81f      	bhi.n	800ed92 <deconflict_uwb_pair+0x84>
				{
					uint8 mod_slot_sa = slot_sa%info_b->framelength;
 800ed52:	7c7b      	ldrb	r3, [r7, #17]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ed5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed5e:	fb02 f201 	mul.w	r2, r2, r1
 800ed62:	1a9b      	subs	r3, r3, r2
 800ed64:	74bb      	strb	r3, [r7, #18]

					if(mod_slot_sa == slot_sb)
 800ed66:	7c3b      	ldrb	r3, [r7, #16]
 800ed68:	7cba      	ldrb	r2, [r7, #18]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d14d      	bne.n	800ee0a <deconflict_uwb_pair+0xfc>
					{
						//slot already assigned, deconflict!
						this->deconflict_slot_pair(this, info_a, info_b, sa, sb);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	b2da      	uxtb	r2, r3
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	68b9      	ldr	r1, [r7, #8]
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	47a0      	blx	r4
						conflict = TRUE;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	77fb      	strb	r3, [r7, #31]
						conflict_this_iter = TRUE;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	77bb      	strb	r3, [r7, #30]
						break;
 800ed90:	e045      	b.n	800ee1e <deconflict_uwb_pair+0x110>
					}
				}
				else if(slot_sb >= info_a->framelength)
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ed98:	7c3b      	ldrb	r3, [r7, #16]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d81f      	bhi.n	800edde <deconflict_uwb_pair+0xd0>
				{
					uint8 mod_slot_sb = slot_sb%info_a->framelength;
 800ed9e:	7c3b      	ldrb	r3, [r7, #16]
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800eda6:	fbb3 f1f2 	udiv	r1, r3, r2
 800edaa:	fb02 f201 	mul.w	r2, r2, r1
 800edae:	1a9b      	subs	r3, r3, r2
 800edb0:	74fb      	strb	r3, [r7, #19]
					if(mod_slot_sb == slot_sa)
 800edb2:	7c7b      	ldrb	r3, [r7, #17]
 800edb4:	7cfa      	ldrb	r2, [r7, #19]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d127      	bne.n	800ee0a <deconflict_uwb_pair+0xfc>
					{
						//slot already assigned, deconflict!
						this->deconflict_slot_pair(this, info_a, info_b, sa, sb);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	4613      	mov	r3, r2
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	47a0      	blx	r4
						conflict = TRUE;
 800edd4:	2301      	movs	r3, #1
 800edd6:	77fb      	strb	r3, [r7, #31]
						conflict_this_iter = TRUE;
 800edd8:	2301      	movs	r3, #1
 800edda:	77bb      	strb	r3, [r7, #30]
						break;
 800eddc:	e01f      	b.n	800ee1e <deconflict_uwb_pair+0x110>
					}
				}
				else
				{
					if(slot_sa == slot_sb)
 800edde:	7c7a      	ldrb	r2, [r7, #17]
 800ede0:	7c3b      	ldrb	r3, [r7, #16]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d111      	bne.n	800ee0a <deconflict_uwb_pair+0xfc>
					{
						//slot already assigned, deconflict!
						this->deconflict_slot_pair(this, info_a, info_b, sa, sb);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 4250 	ldr.w	r4, [r3, #592]	; 0x250
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	4613      	mov	r3, r2
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	68b9      	ldr	r1, [r7, #8]
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	47a0      	blx	r4
						conflict = TRUE;
 800ee00:	2301      	movs	r3, #1
 800ee02:	77fb      	strb	r3, [r7, #31]
						conflict_this_iter = TRUE;
 800ee04:	2301      	movs	r3, #1
 800ee06:	77bb      	strb	r3, [r7, #30]
						break;
 800ee08:	e009      	b.n	800ee1e <deconflict_uwb_pair+0x110>
			for(int sb = 0; sb < info_b->slotsLength; sb++)
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ee16:	461a      	mov	r2, r3
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	db8d      	blt.n	800ed3a <deconflict_uwb_pair+0x2c>
					}
				}
			}

			if(conflict_this_iter)
 800ee1e:	7fbb      	ldrb	r3, [r7, #30]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10b      	bne.n	800ee3c <deconflict_uwb_pair+0x12e>
		for(int sa = 0; sa < info_a->slotsLength; sa++)
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	3301      	adds	r3, #1
 800ee28:	61bb      	str	r3, [r7, #24]
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ee30:	461a      	mov	r2, r3
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	f6ff af77 	blt.w	800ed28 <deconflict_uwb_pair+0x1a>
 800ee3a:	e000      	b.n	800ee3e <deconflict_uwb_pair+0x130>
			{
				break;
 800ee3c:	bf00      	nop
			}
		}

		if(conflict_this_iter)
 800ee3e:	7fbb      	ldrb	r3, [r7, #30]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d000      	beq.n	800ee46 <deconflict_uwb_pair+0x138>
	{
 800ee44:	e76b      	b.n	800ed1e <deconflict_uwb_pair+0x10>
		{
			continue;
		}

		break; //no conflicts found this iterations, break while loop
 800ee46:	bf00      	nop
	}

	return conflict;
 800ee48:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3724      	adds	r7, #36	; 0x24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd90      	pop	{r4, r7, pc}

0800ee52 <deconflict_slot_pair>:

static void deconflict_slot_pair(struct TDMAHandler *this, struct TDMAInfo *info_a, struct TDMAInfo *info_b, uint8 slot_idx_a, uint8 slot_idx_b)
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b088      	sub	sp, #32
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	60f8      	str	r0, [r7, #12]
 800ee5a:	60b9      	str	r1, [r7, #8]
 800ee5c:	607a      	str	r2, [r7, #4]
 800ee5e:	70fb      	strb	r3, [r7, #3]
	//		make the change
	//4.) if any of 1-3.) is applied, check for conflicts again, and start again at 1.)

	//logic for 1.) and 2.) not explicitly programmed.
	//Should be taken care of by repeatedly checking for conflicts and executing the code block below
	if(info_a->slotsLength > 1 || info_b->slotsLength > 1)
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d804      	bhi.n	800ee74 <deconflict_slot_pair+0x22>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d924      	bls.n	800eebe <deconflict_slot_pair+0x6c>
	{
		if(info_a->slotsLength >= info_b->slotsLength)
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d30d      	bcc.n	800eea0 <deconflict_slot_pair+0x4e>
		{
			//release slot from uwb_a
			uint8 slot_a;
			memcpy(&slot_a, &info_a->slots[slot_idx_a], sizeof(uint8));
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	777b      	strb	r3, [r7, #29]
			this->free_slot(info_a, slot_a);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800ee96:	7f7a      	ldrb	r2, [r7, #29]
 800ee98:	4611      	mov	r1, r2
 800ee9a:	68b8      	ldr	r0, [r7, #8]
 800ee9c:	4798      	blx	r3
 800ee9e:	e0b2      	b.n	800f006 <deconflict_slot_pair+0x1b4>
		}
		else
		{
			//release slot from uwb_b
			uint8 slot_b;
			memcpy(&slot_b, &info_b->slots[slot_idx_b], sizeof(uint8));
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eea8:	4413      	add	r3, r2
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	773b      	strb	r3, [r7, #28]
			this->free_slot(info_b, slot_b);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800eeb4:	7f3a      	ldrb	r2, [r7, #28]
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	4798      	blx	r3
 800eebc:	e0a3      	b.n	800f006 <deconflict_slot_pair+0x1b4>
			return;
		}
	}

	//double the frame and divide the assignment
	if(info_a->framelength == info_b->framelength)
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	f893 2020 	ldrb.w	r2, [r3, #32]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d125      	bne.n	800ef1a <deconflict_slot_pair+0xc8>
	{
		uint8 slot_b;
		memcpy(&slot_b, &info_b->slots[slot_idx_b], sizeof(uint8));
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eed2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eed6:	4413      	add	r3, r2
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	76fb      	strb	r3, [r7, #27]
		slot_b += info_b->framelength;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 2020 	ldrb.w	r2, [r3, #32]
 800eee2:	7efb      	ldrb	r3, [r7, #27]
 800eee4:	4413      	add	r3, r2
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	76fb      	strb	r3, [r7, #27]
		memcpy(&info_b->slots[slot_idx_b], &slot_b, sizeof(uint8));
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eeee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eef2:	4413      	add	r3, r2
 800eef4:	7efa      	ldrb	r2, [r7, #27]
 800eef6:	701a      	strb	r2, [r3, #0]
		info_a->framelength *= 2;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	b2da      	uxtb	r2, r3
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f883 2020 	strb.w	r2, [r3, #32]
		info_b->framelength *= 2;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f883 2020 	strb.w	r2, [r3, #32]
 800ef18:	e075      	b.n	800f006 <deconflict_slot_pair+0x1b4>
	}
	else if(info_a->framelength > info_b->framelength)
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d933      	bls.n	800ef92 <deconflict_slot_pair+0x140>
	{
		uint8 slot_a;
		memcpy(&slot_a, &info_a->slots[slot_idx_a], sizeof(uint8));
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef2e:	78fb      	ldrb	r3, [r7, #3]
 800ef30:	4413      	add	r3, r2
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	76bb      	strb	r3, [r7, #26]
		uint8 mod_a = slot_a % (2*info_b->framelength);
 800ef36:	7ebb      	ldrb	r3, [r7, #26]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef40:	005b      	lsls	r3, r3, #1
 800ef42:	fb92 f1f3 	sdiv	r1, r2, r3
 800ef46:	fb03 f301 	mul.w	r3, r3, r1
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	77bb      	strb	r3, [r7, #30]

		uint8 slot_b;
		memcpy(&slot_b, &info_b->slots[slot_idx_b], sizeof(uint8));
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef56:	4413      	add	r3, r2
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	767b      	strb	r3, [r7, #25]

		if(mod_a == slot_b)
 800ef5c:	7e7b      	ldrb	r3, [r7, #25]
 800ef5e:	7fba      	ldrb	r2, [r7, #30]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d10d      	bne.n	800ef80 <deconflict_slot_pair+0x12e>
		{
			slot_b += info_b->framelength;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ef6a:	7e7b      	ldrb	r3, [r7, #25]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	767b      	strb	r3, [r7, #25]
			memcpy(&info_b->slots[slot_idx_b], &slot_b, sizeof(uint8));
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef7a:	4413      	add	r3, r2
 800ef7c:	7e7a      	ldrb	r2, [r7, #25]
 800ef7e:	701a      	strb	r2, [r3, #0]
		}

		info_b->framelength *= 2;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef86:	005b      	lsls	r3, r3, #1
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f883 2020 	strb.w	r2, [r3, #32]
 800ef90:	e039      	b.n	800f006 <deconflict_slot_pair+0x1b4>
	}
	else if(info_a->framelength < info_b->framelength)
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d231      	bcs.n	800f006 <deconflict_slot_pair+0x1b4>
	{
		uint8 slot_b;
		memcpy(&slot_b, &info_b->slots[slot_idx_b], sizeof(uint8));
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800efaa:	4413      	add	r3, r2
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	763b      	strb	r3, [r7, #24]
		uint8 mod_b = slot_b % (2*info_a->framelength);
 800efb0:	7e3b      	ldrb	r3, [r7, #24]
 800efb2:	461a      	mov	r2, r3
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	fb92 f1f3 	sdiv	r1, r2, r3
 800efc0:	fb03 f301 	mul.w	r3, r3, r1
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	77fb      	strb	r3, [r7, #31]

		uint8 slot_a;
		memcpy(&slot_a, &info_a->slots[slot_idx_a], sizeof(uint8));
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efcc:	78fb      	ldrb	r3, [r7, #3]
 800efce:	4413      	add	r3, r2
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	75fb      	strb	r3, [r7, #23]

		if(mod_b == slot_a)
 800efd4:	7dfb      	ldrb	r3, [r7, #23]
 800efd6:	7ffa      	ldrb	r2, [r7, #31]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d10c      	bne.n	800eff6 <deconflict_slot_pair+0x1a4>
		{
			slot_a += info_a->framelength;
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f893 2020 	ldrb.w	r2, [r3, #32]
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	4413      	add	r3, r2
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	75fb      	strb	r3, [r7, #23]
			memcpy(&info_a->slots[slot_idx_a], &slot_a, sizeof(uint8));
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efee:	78fb      	ldrb	r3, [r7, #3]
 800eff0:	4413      	add	r3, r2
 800eff2:	7dfa      	ldrb	r2, [r7, #23]
 800eff4:	701a      	strb	r2, [r3, #0]
		}

		info_a->framelength *= 2;
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800effc:	005b      	lsls	r3, r3, #1
 800effe:	b2da      	uxtb	r2, r3
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	f883 2020 	strb.w	r2, [r3, #32]
	}

	//re-checking for conflicts handled in calling function
}
 800f006:	3720      	adds	r7, #32
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <self_conflict>:

//check if this uwb has any TDMA conflicts with others in the uwbList
static bool self_conflict(struct TDMAHandler *this)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b08a      	sub	sp, #40	; 0x28
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800f014:	2000      	movs	r0, #0
 800f016:	f7fa fa11 	bl	800943c <instance_get_local_structure_ptr>
 800f01a:	61b8      	str	r0, [r7, #24]
	struct TDMAInfo *info_a = &this->uwbListTDMAInfo[0];
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	3308      	adds	r3, #8
 800f020:	617b      	str	r3, [r7, #20]

	for(int b = 1; b < inst->uwbListLen; b++)
 800f022:	2301      	movs	r3, #1
 800f024:	627b      	str	r3, [r7, #36]	; 0x24
 800f026:	e084      	b.n	800f132 <self_conflict+0x126>
	{
		if(this->uwbListTDMAInfo[b].connectionType == UWB_LIST_NEIGHBOR ||
 800f028:	6879      	ldr	r1, [r7, #4]
 800f02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02c:	4613      	mov	r3, r2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	4413      	add	r3, r2
 800f032:	00db      	lsls	r3, r3, #3
 800f034:	440b      	add	r3, r1
 800f036:	3308      	adds	r3, #8
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d015      	beq.n	800f06a <self_conflict+0x5e>
			this->uwbListTDMAInfo[b].connectionType == UWB_LIST_HIDDEN   ||
 800f03e:	6879      	ldr	r1, [r7, #4]
 800f040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f042:	4613      	mov	r3, r2
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	00db      	lsls	r3, r3, #3
 800f04a:	440b      	add	r3, r1
 800f04c:	3308      	adds	r3, #8
 800f04e:	781b      	ldrb	r3, [r3, #0]
		if(this->uwbListTDMAInfo[b].connectionType == UWB_LIST_NEIGHBOR ||
 800f050:	2b02      	cmp	r3, #2
 800f052:	d00a      	beq.n	800f06a <self_conflict+0x5e>
			this->uwbListTDMAInfo[b].connectionType == UWB_LIST_TWICE_HIDDEN)
 800f054:	6879      	ldr	r1, [r7, #4]
 800f056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	00db      	lsls	r3, r3, #3
 800f060:	440b      	add	r3, r1
 800f062:	3308      	adds	r3, #8
 800f064:	781b      	ldrb	r3, [r3, #0]
			this->uwbListTDMAInfo[b].connectionType == UWB_LIST_HIDDEN   ||
 800f066:	2b03      	cmp	r3, #3
 800f068:	d160      	bne.n	800f12c <self_conflict+0x120>
		{
			struct TDMAInfo *info_b = &this->uwbListTDMAInfo[b];
 800f06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f06c:	4613      	mov	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4413      	add	r3, r2
 800f072:	00db      	lsls	r3, r3, #3
 800f074:	3308      	adds	r3, #8
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	4413      	add	r3, r2
 800f07a:	613b      	str	r3, [r7, #16]

			for(int sa = 0; sa < info_a->slotsLength; sa++)
 800f07c:	2300      	movs	r3, #0
 800f07e:	623b      	str	r3, [r7, #32]
 800f080:	e04d      	b.n	800f11e <self_conflict+0x112>
			{
				uint8 slot_sa;
				memcpy(&slot_sa, &info_a->slots[sa], sizeof(uint8));
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	4413      	add	r3, r2
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	737b      	strb	r3, [r7, #13]

				for(int sb = 0; sb < info_b->slotsLength; sb++)
 800f08e:	2300      	movs	r3, #0
 800f090:	61fb      	str	r3, [r7, #28]
 800f092:	e03a      	b.n	800f10a <self_conflict+0xfe>
				{
					uint8 slot_sb;
					memcpy(&slot_sb, &info_b->slots[sb], sizeof(uint8));
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	4413      	add	r3, r2
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	733b      	strb	r3, [r7, #12]


					//check if slot is taken
					if(slot_sa >= info_b->framelength)
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f0a6:	7b7b      	ldrb	r3, [r7, #13]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d80f      	bhi.n	800f0cc <self_conflict+0xc0>
					{
						uint8 mod_slot_sa = slot_sa%info_b->framelength;
 800f0ac:	7b7b      	ldrb	r3, [r7, #13]
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f0b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0b8:	fb02 f201 	mul.w	r2, r2, r1
 800f0bc:	1a9b      	subs	r3, r3, r2
 800f0be:	73bb      	strb	r3, [r7, #14]

						if(mod_slot_sa == slot_sb)
 800f0c0:	7b3b      	ldrb	r3, [r7, #12]
 800f0c2:	7bba      	ldrb	r2, [r7, #14]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d11d      	bne.n	800f104 <self_conflict+0xf8>
						{
							return TRUE;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e03d      	b.n	800f148 <self_conflict+0x13c>
						}
					}
					else if(slot_sb >= info_a->framelength)
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f0d2:	7b3b      	ldrb	r3, [r7, #12]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d80f      	bhi.n	800f0f8 <self_conflict+0xec>
					{
						uint8 mod_slot_sb = slot_sb%info_a->framelength;
 800f0d8:	7b3b      	ldrb	r3, [r7, #12]
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f0e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0e4:	fb02 f201 	mul.w	r2, r2, r1
 800f0e8:	1a9b      	subs	r3, r3, r2
 800f0ea:	73fb      	strb	r3, [r7, #15]
						if(mod_slot_sb == slot_sa)
 800f0ec:	7b7b      	ldrb	r3, [r7, #13]
 800f0ee:	7bfa      	ldrb	r2, [r7, #15]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d107      	bne.n	800f104 <self_conflict+0xf8>
						{
							return TRUE;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e027      	b.n	800f148 <self_conflict+0x13c>
						}
					}
					else
					{
						if(slot_sa == slot_sb)
 800f0f8:	7b7a      	ldrb	r2, [r7, #13]
 800f0fa:	7b3b      	ldrb	r3, [r7, #12]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d101      	bne.n	800f104 <self_conflict+0xf8>
						{
							return TRUE;
 800f100:	2301      	movs	r3, #1
 800f102:	e021      	b.n	800f148 <self_conflict+0x13c>
				for(int sb = 0; sb < info_b->slotsLength; sb++)
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	3301      	adds	r3, #1
 800f108:	61fb      	str	r3, [r7, #28]
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f110:	461a      	mov	r2, r3
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	4293      	cmp	r3, r2
 800f116:	dbbd      	blt.n	800f094 <self_conflict+0x88>
			for(int sa = 0; sa < info_a->slotsLength; sa++)
 800f118:	6a3b      	ldr	r3, [r7, #32]
 800f11a:	3301      	adds	r3, #1
 800f11c:	623b      	str	r3, [r7, #32]
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f124:	461a      	mov	r2, r3
 800f126:	6a3b      	ldr	r3, [r7, #32]
 800f128:	4293      	cmp	r3, r2
 800f12a:	dbaa      	blt.n	800f082 <self_conflict+0x76>
	for(int b = 1; b < inst->uwbListLen; b++)
 800f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12e:	3301      	adds	r3, #1
 800f130:	627b      	str	r3, [r7, #36]	; 0x24
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800f138:	3301      	adds	r3, #1
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	461a      	mov	r2, r3
 800f13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f140:	4293      	cmp	r3, r2
 800f142:	f6ff af71 	blt.w	800f028 <self_conflict+0x1c>
				}
			}
		}
	}

	return FALSE;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3728      	adds	r7, #40	; 0x28
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <free_slot>:

static void free_slot(struct TDMAInfo *info, uint8 slot)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	460b      	mov	r3, r1
 800f15a:	70fb      	strb	r3, [r7, #3]
	bool assigned = TRUE;
 800f15c:	2301      	movs	r3, #1
 800f15e:	73fb      	strb	r3, [r7, #15]

	while(assigned == TRUE) //duplicate assignments shouldn't exist, but will make sure to remove any just in case
 800f160:	e056      	b.n	800f210 <free_slot+0xc0>
	{
		uint8 slot_index = 255;
 800f162:	23ff      	movs	r3, #255	; 0xff
 800f164:	73bb      	strb	r3, [r7, #14]
		assigned = FALSE;
 800f166:	2300      	movs	r3, #0
 800f168:	73fb      	strb	r3, [r7, #15]
		if(info->slots != NULL && info->slotsLength != 0)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d01f      	beq.n	800f1b2 <free_slot+0x62>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d01a      	beq.n	800f1b2 <free_slot+0x62>
		{
			for(int i = 0; i < info->slotsLength; i++)
 800f17c:	2300      	movs	r3, #0
 800f17e:	60bb      	str	r3, [r7, #8]
 800f180:	e010      	b.n	800f1a4 <free_slot+0x54>
			{
				if(memcmp(&info->slots[i], &slot, sizeof(uint8)) == 0)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	4413      	add	r3, r2
 800f18a:	781a      	ldrb	r2, [r3, #0]
 800f18c:	1cfb      	adds	r3, r7, #3
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	429a      	cmp	r2, r3
 800f192:	d104      	bne.n	800f19e <free_slot+0x4e>
				{
					assigned = TRUE;
 800f194:	2301      	movs	r3, #1
 800f196:	73fb      	strb	r3, [r7, #15]
					slot_index = i;
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	73bb      	strb	r3, [r7, #14]
					break;
 800f19c:	e009      	b.n	800f1b2 <free_slot+0x62>
			for(int i = 0; i < info->slotsLength; i++)
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	60bb      	str	r3, [r7, #8]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	dbe7      	blt.n	800f182 <free_slot+0x32>
				}
			}
		}

		//if assigned, remove from array
		if(assigned == TRUE)
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d02b      	beq.n	800f210 <free_slot+0xc0>
		{
			memcpy(&info->slots[slot_index], &info->slots[slot_index + 1], sizeof(uint8)*(info->slotsLength - slot_index - 1));
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1bc:	7bbb      	ldrb	r3, [r7, #14]
 800f1be:	18d0      	adds	r0, r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	18d1      	adds	r1, r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	7bbb      	ldrb	r3, [r7, #14]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	461a      	mov	r2, r3
 800f1da:	f003 ff2d 	bl	8013038 <memcpy>
			info->slotsLength -= 1;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if(info->slotsLength <= 0)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d10b      	bne.n	800f210 <free_slot+0xc0>
			{
				info->slotsLength = 0;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				free(info->slots);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f204:	4618      	mov	r0, r3
 800f206:	f003 ff01 	bl	801300c <free>
				info->slots = NULL;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	625a      	str	r2, [r3, #36]	; 0x24
	while(assigned == TRUE) //duplicate assignments shouldn't exist, but will make sure to remove any just in case
 800f210:	7bfb      	ldrb	r3, [r7, #15]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1a5      	bne.n	800f162 <free_slot+0x12>
			}
		}
	}

	return;
 800f216:	bf00      	nop
}
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <free_slots>:

static void free_slots(struct TDMAInfo *info)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b082      	sub	sp, #8
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
	if(info->slots != NULL)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d007      	beq.n	800f23e <free_slots+0x20>
	{
		free(info->slots);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f232:	4618      	mov	r0, r3
 800f234:	f003 feea 	bl	801300c <free>
		info->slots = NULL;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	625a      	str	r2, [r3, #36]	; 0x24
	}

	info->slotsLength = 0;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	info->framelength = MIN_FRAMELENGTH;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2204      	movs	r2, #4
 800f24a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <uwblist_free_slots>:

static void uwblist_free_slots(struct TDMAHandler *this, uint8 uwb_index)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b084      	sub	sp, #16
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	460b      	mov	r3, r1
 800f260:	70fb      	strb	r3, [r7, #3]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800f262:	2000      	movs	r0, #0
 800f264:	f7fa f8ea 	bl	800943c <instance_get_local_structure_ptr>
 800f268:	60f8      	str	r0, [r7, #12]
	if(uwb_index >= inst->uwbListLen)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800f270:	3301      	adds	r3, #1
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	78fa      	ldrb	r2, [r7, #3]
 800f276:	429a      	cmp	r2, r3
 800f278:	d20d      	bcs.n	800f296 <uwblist_free_slots+0x40>
	{
		//out of bounds!
		return;
	}

	this->free_slots(&this->uwbListTDMAInfo[uwb_index]);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 1234 	ldr.w	r1, [r3, #564]	; 0x234
 800f280:	78fa      	ldrb	r2, [r7, #3]
 800f282:	4613      	mov	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4413      	add	r3, r2
 800f288:	00db      	lsls	r3, r3, #3
 800f28a:	3308      	adds	r3, #8
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	4413      	add	r3, r2
 800f290:	4618      	mov	r0, r3
 800f292:	4788      	blx	r1

	return;
 800f294:	e000      	b.n	800f298 <uwblist_free_slots+0x42>
		return;
 800f296:	bf00      	nop
}
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <tdma_free_all_slots>:

static void tdma_free_all_slots(struct TDMAHandler *this)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b084      	sub	sp, #16
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < (int)UWB_LIST_SIZE; i++)
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	e03b      	b.n	800f324 <tdma_free_all_slots+0x86>
	{
		if(this->uwbListTDMAInfo[i].slots != NULL)
 800f2ac:	6879      	ldr	r1, [r7, #4]
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	4413      	add	r3, r2
 800f2b8:	00db      	lsls	r3, r3, #3
 800f2ba:	440b      	add	r3, r1
 800f2bc:	3304      	adds	r3, #4
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d017      	beq.n	800f2f4 <tdma_free_all_slots+0x56>
		{
			free(this->uwbListTDMAInfo[i].slots);
 800f2c4:	6879      	ldr	r1, [r7, #4]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4413      	add	r3, r2
 800f2d0:	00db      	lsls	r3, r3, #3
 800f2d2:	440b      	add	r3, r1
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f003 fe97 	bl	801300c <free>
			this->uwbListTDMAInfo[i].slots = NULL;
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	00db      	lsls	r3, r3, #3
 800f2ec:	440b      	add	r3, r1
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	601a      	str	r2, [r3, #0]
		}

		this->uwbListTDMAInfo[i].slotsLength = 0;
 800f2f4:	6879      	ldr	r1, [r7, #4]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	4413      	add	r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	440b      	add	r3, r1
 800f304:	3301      	adds	r3, #1
 800f306:	2200      	movs	r2, #0
 800f308:	701a      	strb	r2, [r3, #0]
		this->uwbListTDMAInfo[i].framelength = MIN_FRAMELENGTH;
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	1c5a      	adds	r2, r3, #1
 800f310:	4613      	mov	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4413      	add	r3, r2
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	440b      	add	r3, r1
 800f31a:	2204      	movs	r2, #4
 800f31c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < (int)UWB_LIST_SIZE; i++)
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3301      	adds	r3, #1
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2b09      	cmp	r3, #9
 800f328:	ddc0      	ble.n	800f2ac <tdma_free_all_slots+0xe>
	}

	return;
 800f32a:	bf00      	nop
}
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <enter_discovery_mode>:


static void enter_discovery_mode(struct TDMAHandler *this)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b084      	sub	sp, #16
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
	uint32 time_now = portGetTickCnt();
 800f33a:	f002 fcc9 	bl	8011cd0 <portGetTickCnt>
 800f33e:	60f8      	str	r0, [r7, #12]
	this->discoveryStartTime = time_now;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	this->last_blink_time = time_now;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	this->set_discovery_mode(this, WAIT_INF_REG, time_now);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	2100      	movs	r1, #0
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	4798      	blx	r3
	this->collectInfStartTime = time_now;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800f366:	2000      	movs	r0, #0
 800f368:	f7fa f868 	bl	800943c <instance_get_local_structure_ptr>
 800f36c:	60b8      	str	r0, [r7, #8]
	inst->canPrintUSB = TRUE;
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	inst->canPrintLCD = TRUE;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	2201      	movs	r2, #1
 800f37a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	this->tdma_free_all_slots(this);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	4798      	blx	r3
}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <set_discovery_mode>:

static void set_discovery_mode(struct TDMAHandler *this, DISCOVERY_MODE discovery_mode, uint32 time_now)
{
 800f390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	b0e3      	sub	sp, #396	; 0x18c
 800f396:	af00      	add	r7, sp, #0
 800f398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f39c:	6018      	str	r0, [r3, #0]
 800f39e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f3a2:	601a      	str	r2, [r3, #0]
 800f3a4:	f107 0253 	add.w	r2, r7, #83	; 0x53
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	7013      	strb	r3, [r2, #0]
	this->discovery_mode_start_time = time_now;
 800f3ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
	this->discovery_mode = discovery_mode;
 800f3bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	f107 0353 	add.w	r3, r7, #83	; 0x53
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0

	switch (discovery_mode)
 800f3cc:	f107 0353 	add.w	r3, r7, #83	; 0x53
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	2b06      	cmp	r3, #6
 800f3d4:	f200 857c 	bhi.w	800fed0 <set_discovery_mode+0xb40>
 800f3d8:	a201      	add	r2, pc, #4	; (adr r2, 800f3e0 <set_discovery_mode+0x50>)
 800f3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3de:	bf00      	nop
 800f3e0:	0800f3fd 	.word	0x0800f3fd
 800f3e4:	0800f419 	.word	0x0800f419
 800f3e8:	0800f44d 	.word	0x0800f44d
 800f3ec:	0800f471 	.word	0x0800f471
 800f3f0:	0800f49b 	.word	0x0800f49b
 800f3f4:	0800fe91 	.word	0x0800fe91
 800f3f8:	0800feb7 	.word	0x0800feb7
	{
		case WAIT_INF_REG:
		{
			this->discovery_mode_duration = 0;
 800f3fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2200      	movs	r2, #0
 800f404:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = FALSE;
 800f408:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 800f414:	f000 bd5d 	b.w	800fed2 <set_discovery_mode+0xb42>
		}
		case COLLECT_INF_REG:
		{
			this->collectInfStartTime = time_now;
 800f418:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f422:	6812      	ldr	r2, [r2, #0]
 800f424:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
			this->discovery_mode_duration = this->collectInfDuration;
 800f428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800f432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = TRUE;
 800f43c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2201      	movs	r2, #1
 800f444:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 800f448:	f000 bd43 	b.w	800fed2 <set_discovery_mode+0xb42>
		}
		case WAIT_INF_INIT:
		{
			this->discovery_mode_duration = this->slotDuration_ms;
 800f44c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 800f456:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = TRUE;
 800f460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2201      	movs	r2, #1
 800f468:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 800f46c:	f000 bd31 	b.w	800fed2 <set_discovery_mode+0xb42>
		}
		case WAIT_RNG_INIT:
		{
			instance_data_t *inst = instance_get_local_structure_ptr(0);
 800f470:	2000      	movs	r0, #0
 800f472:	f7f9 ffe3 	bl	800943c <instance_get_local_structure_ptr>
 800f476:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
			this->discovery_mode_duration = inst->durationWaitRangeInit_ms;
 800f47a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f47e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = TRUE;
 800f48a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2201      	movs	r2, #1
 800f492:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 800f496:	f000 bd1c 	b.w	800fed2 <set_discovery_mode+0xb42>
		}
		case WAIT_SEND_SUG:
		{
			//find common frame start time among neighbors
			instance_data_t *inst = instance_get_local_structure_ptr(0);
 800f49a:	2000      	movs	r0, #0
 800f49c:	f7f9 ffce 	bl	800943c <instance_get_local_structure_ptr>
 800f4a0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			//select the subnetwork with the largest number of UWBs
			//find the common frame start time among the UWBs in that network

			//keep track of which number each UWB belongs to
			//then keep track of which was selected so we can iterate over it later in this function
			uint8 num_sub_networks = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
			uint8 sub_network_membership[UWB_LIST_SIZE] = {};
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f4b0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	6013      	str	r3, [r2, #0]
 800f4b8:	8093      	strh	r3, [r2, #4]
			uint8 sub_network_selected = 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			uint8 sub_network_members[UWB_LIST_SIZE-1] = {0}; //cannot be more subnetworks than other UWBs
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f4c6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	7113      	strb	r3, [r2, #4]
			uint64 sub_network_tsfs[UWB_LIST_SIZE-1] = {0};
 800f4d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	2348      	movs	r3, #72	; 0x48
 800f4d8:	461a      	mov	r2, r3
 800f4da:	2100      	movs	r1, #0
 800f4dc:	f003 fdba 	bl	8013054 <memset>
			uint8 sub_network_base_framelength[UWB_LIST_SIZE-1] = {0};
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f4e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	6013      	str	r3, [r2, #0]
 800f4ee:	7113      	strb	r3, [r2, #4]
			uint64 time_now_us = portGetTickCntMicro();
 800f4f0:	f002 fbf8 	bl	8011ce4 <portGetTickCntMicro>
 800f4f4:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120
			uint64 tcommon = 0;
 800f4f8:	f04f 0200 	mov.w	r2, #0
 800f4fc:	f04f 0300 	mov.w	r3, #0
 800f500:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
			uint64 shortestFrameDuration = this->maxFramelength*this->slotDuration_us;
 800f504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	461a      	mov	r2, r3
 800f50e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800f518:	fb03 f302 	mul.w	r3, r3, r2
 800f51c:	461a      	mov	r2, r3
 800f51e:	f04f 0300 	mov.w	r3, #0
 800f522:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180


			for(int i=1; i < inst->uwbListLen; i++) //zero reserved for self
 800f526:	2301      	movs	r3, #1
 800f528:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800f52c:	e191      	b.n	800f852 <set_discovery_mode+0x4c2>
			{
				if(this->uwbListTDMAInfo[i].connectionType != UWB_LIST_NEIGHBOR)
 800f52e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f532:	6819      	ldr	r1, [r3, #0]
 800f534:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800f538:	4613      	mov	r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4413      	add	r3, r2
 800f53e:	00db      	lsls	r3, r3, #3
 800f540:	440b      	add	r3, r1
 800f542:	3308      	adds	r3, #8
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	2b01      	cmp	r3, #1
 800f548:	f040 817d 	bne.w	800f846 <set_discovery_mode+0x4b6>
				{
					continue;
				}

				struct TDMAInfo *info_i = &this->uwbListTDMAInfo[i];
 800f54c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800f550:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800f554:	4613      	mov	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	4413      	add	r3, r2
 800f55a:	00db      	lsls	r3, r3, #3
 800f55c:	f103 0208 	add.w	r2, r3, #8
 800f560:	680b      	ldr	r3, [r1, #0]
 800f562:	4413      	add	r3, r2
 800f564:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				uint64 timeSinceFrameStart_us = get_dt64(this->uwbListTDMAInfo[i].frameStartTime, time_now_us);
 800f568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f56c:	6819      	ldr	r1, [r3, #0]
 800f56e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800f572:	4613      	mov	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	4413      	add	r3, r2
 800f578:	00db      	lsls	r3, r3, #3
 800f57a:	440b      	add	r3, r1
 800f57c:	3320      	adds	r3, #32
 800f57e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f582:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800f586:	f7f9 fe9a 	bl	80092be <get_dt64>
 800f58a:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8

				if(timeSinceFrameStart_us > 100000000)
 800f58e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800f592:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 800f596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59a:	428b      	cmp	r3, r1
 800f59c:	bf08      	it	eq
 800f59e:	4282      	cmpeq	r2, r0
 800f5a0:	d207      	bcs.n	800f5b2 <set_discovery_mode+0x222>
				{
					sub_network_membership[i] = 255; //disregard
 800f5a2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800f5a6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f5aa:	441a      	add	r2, r3
 800f5ac:	23ff      	movs	r3, #255	; 0xff
 800f5ae:	7013      	strb	r3, [r2, #0]
					continue;
 800f5b0:	e14a      	b.n	800f848 <set_discovery_mode+0x4b8>
				}

				//test the ith UWB against the jth subnetwork
				for(int j=0; j < num_sub_networks; j++)
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800f5b8:	e106      	b.n	800f7c8 <set_discovery_mode+0x438>
				{
					uint64 diff_us = 0;
 800f5ba:	f04f 0200 	mov.w	r2, #0
 800f5be:	f04f 0300 	mov.w	r3, #0
 800f5c2:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160

					uint8 min_fl = info_i->framelength;
 800f5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f5ce:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
					if(sub_network_base_framelength[j] < min_fl)
 800f5d2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f5d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f5da:	4413      	add	r3, r2
 800f5dc:	781a      	ldrb	r2, [r3, #0]
 800f5de:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d907      	bls.n	800f5f6 <set_discovery_mode+0x266>
					{
						min_fl = sub_network_base_framelength[j];
 800f5e6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800f5ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f5ee:	4413      	add	r3, r2
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
					}

					uint64 min_framelengthDuration = min_fl*this->slotDuration_us;
 800f5f6:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800f5fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800f604:	fb03 f302 	mul.w	r3, r3, r2
 800f608:	461a      	mov	r2, r3
 800f60a:	f04f 0300 	mov.w	r3, #0
 800f60e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
					uint64 diff_tsfs = 0;
 800f612:	f04f 0200 	mov.w	r2, #0
 800f616:	f04f 0300 	mov.w	r3, #0
 800f61a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150

					if(timeSinceFrameStart_us <= sub_network_tsfs[j])
 800f61e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f622:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f626:	00db      	lsls	r3, r3, #3
 800f628:	4413      	add	r3, r2
 800f62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f62e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800f632:	4299      	cmp	r1, r3
 800f634:	bf08      	it	eq
 800f636:	4290      	cmpeq	r0, r2
 800f638:	d313      	bcc.n	800f662 <set_discovery_mode+0x2d2>
					{
						diff_tsfs = sub_network_tsfs[j] - timeSinceFrameStart_us;
 800f63a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f63e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f642:	00db      	lsls	r3, r3, #3
 800f644:	4413      	add	r3, r2
 800f646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f64a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800f64e:	1a84      	subs	r4, r0, r2
 800f650:	60bc      	str	r4, [r7, #8]
 800f652:	eb61 0303 	sbc.w	r3, r1, r3
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f65c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
 800f660:	e00f      	b.n	800f682 <set_discovery_mode+0x2f2>
					}
					else
					{
						diff_tsfs = timeSinceFrameStart_us - sub_network_tsfs[j];
 800f662:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f666:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	4413      	add	r3, r2
 800f66e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f672:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800f676:	ebb2 0800 	subs.w	r8, r2, r0
 800f67a:	eb63 0901 	sbc.w	r9, r3, r1
 800f67e:	e9c7 8954 	strd	r8, r9, [r7, #336]	; 0x150
					}

					uint64 diff_tsfs_mod = diff_tsfs%min_framelengthDuration;
 800f682:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800f686:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800f68a:	f7f1 fbe7 	bl	8000e5c <__aeabi_uldivmod>
 800f68e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

					if(diff_tsfs_mod <= 0.5*min_framelengthDuration)
 800f692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f696:	f7f0 ff55 	bl	8000544 <__aeabi_ul2d>
 800f69a:	4604      	mov	r4, r0
 800f69c:	460d      	mov	r5, r1
 800f69e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f6a2:	f7f0 ff4f 	bl	8000544 <__aeabi_ul2d>
 800f6a6:	f04f 0200 	mov.w	r2, #0
 800f6aa:	4bd5      	ldr	r3, [pc, #852]	; (800fa00 <set_discovery_mode+0x670>)
 800f6ac:	f7f0 ff80 	bl	80005b0 <__aeabi_dmul>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	f7f1 f9f6 	bl	8000aa8 <__aeabi_dcmple>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d004      	beq.n	800f6cc <set_discovery_mode+0x33c>
					{
						diff_us = diff_tsfs_mod;
 800f6c2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800f6c6:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 800f6ca:	e009      	b.n	800f6e0 <set_discovery_mode+0x350>
					}
					else
					{
						diff_us = min_framelengthDuration - diff_tsfs_mod;
 800f6cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800f6d0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800f6d4:	ebb0 0a02 	subs.w	sl, r0, r2
 800f6d8:	eb61 0b03 	sbc.w	fp, r1, r3
 800f6dc:	e9c7 ab58 	strd	sl, fp, [r7, #352]	; 0x160


					//if difference is below the threshold, it belongs to this subnetwork
					//if not, it may belong to another one already listed,
					//if not, create a new one...
					if(diff_us < this->frameSyncThreshold_us)
 800f6e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 800f6ea:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800f6ee:	428b      	cmp	r3, r1
 800f6f0:	bf08      	it	eq
 800f6f2:	4282      	cmpeq	r2, r0
 800f6f4:	d219      	bcs.n	800f72a <set_discovery_mode+0x39a>
					{
						sub_network_members[j]++;
 800f6f6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800f6fa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6fe:	4413      	add	r3, r2
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	3301      	adds	r3, #1
 800f704:	b2d9      	uxtb	r1, r3
 800f706:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800f70a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f70e:	441a      	add	r2, r3
 800f710:	460b      	mov	r3, r1
 800f712:	7013      	strb	r3, [r2, #0]
						sub_network_membership[i] = j;
 800f714:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f718:	b2d9      	uxtb	r1, r3
 800f71a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800f71e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f722:	441a      	add	r2, r3
 800f724:	460b      	mov	r3, r1
 800f726:	7013      	strb	r3, [r2, #0]
						break;
 800f728:	e055      	b.n	800f7d6 <set_discovery_mode+0x446>
					}
					else if(j == num_sub_networks - 1)
 800f72a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f72e:	1e5a      	subs	r2, r3, #1
 800f730:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f734:	4293      	cmp	r3, r2
 800f736:	d142      	bne.n	800f7be <set_discovery_mode+0x42e>
					{
						//reached the last listed sub_netowrk, list a new subnetwork.
						sub_network_members[num_sub_networks] = 1;
 800f738:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f73c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f740:	441a      	add	r2, r3
 800f742:	2301      	movs	r3, #1
 800f744:	f802 3cdc 	strb.w	r3, [r2, #-220]
						sub_network_base_framelength[num_sub_networks] = this->uwbListTDMAInfo[i].framelength;
 800f748:	f897 0176 	ldrb.w	r0, [r7, #374]	; 0x176
 800f74c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f750:	6819      	ldr	r1, [r3, #0]
 800f752:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	4613      	mov	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4413      	add	r3, r2
 800f75e:	00db      	lsls	r3, r3, #3
 800f760:	440b      	add	r3, r1
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f768:	4402      	add	r2, r0
 800f76a:	f802 3ce8 	strb.w	r3, [r2, #-232]
						sub_network_tsfs[num_sub_networks] = get_dt64(this->uwbListTDMAInfo[i].frameStartTime, time_now_us);
 800f76e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f772:	6819      	ldr	r1, [r3, #0]
 800f774:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800f778:	4613      	mov	r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	00db      	lsls	r3, r3, #3
 800f780:	440b      	add	r3, r1
 800f782:	3320      	adds	r3, #32
 800f784:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f788:	f897 4176 	ldrb.w	r4, [r7, #374]	; 0x176
 800f78c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800f790:	f7f9 fd95 	bl	80092be <get_dt64>
 800f794:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f798:	00e3      	lsls	r3, r4, #3
 800f79a:	4413      	add	r3, r2
 800f79c:	e9c3 0100 	strd	r0, r1, [r3]
						sub_network_membership[num_sub_networks] = num_sub_networks;
 800f7a0:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f7a4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f7a8:	441a      	add	r2, r3
 800f7aa:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f7ae:	f802 3cd0 	strb.w	r3, [r2, #-208]
						num_sub_networks++;
 800f7b2:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
						break;
 800f7bc:	e00b      	b.n	800f7d6 <set_discovery_mode+0x446>
				for(int j=0; j < num_sub_networks; j++)
 800f7be:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800f7c8:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800f7cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	f6ff aef2 	blt.w	800f5ba <set_discovery_mode+0x22a>
					}
				}

				//no subnetworks listed yet, set the first one.
				if(num_sub_networks == 0)
 800f7d6:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d134      	bne.n	800f848 <set_discovery_mode+0x4b8>
				{
					sub_network_members[num_sub_networks] = 1;
 800f7de:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f7e2:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f7e6:	441a      	add	r2, r3
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	f802 3cdc 	strb.w	r3, [r2, #-220]
					sub_network_base_framelength[num_sub_networks] = this->uwbListTDMAInfo[i].framelength;
 800f7ee:	f897 0176 	ldrb.w	r0, [r7, #374]	; 0x176
 800f7f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f7f6:	6819      	ldr	r1, [r3, #0]
 800f7f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	4613      	mov	r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	00db      	lsls	r3, r3, #3
 800f806:	440b      	add	r3, r1
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f80e:	4402      	add	r2, r0
 800f810:	f802 3ce8 	strb.w	r3, [r2, #-232]
					sub_network_tsfs[num_sub_networks] = timeSinceFrameStart_us;
 800f814:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f818:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f81c:	00db      	lsls	r3, r3, #3
 800f81e:	18d1      	adds	r1, r2, r3
 800f820:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800f824:	e9c1 2300 	strd	r2, r3, [r1]
					sub_network_membership[num_sub_networks] = num_sub_networks;
 800f828:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f82c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800f830:	441a      	add	r2, r3
 800f832:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f836:	f802 3cd0 	strb.w	r3, [r2, #-208]
					num_sub_networks++;
 800f83a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800f83e:	3301      	adds	r3, #1
 800f840:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800f844:	e000      	b.n	800f848 <set_discovery_mode+0x4b8>
					continue;
 800f846:	bf00      	nop
			for(int i=1; i < inst->uwbListLen; i++) //zero reserved for self
 800f848:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f84c:	3301      	adds	r3, #1
 800f84e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800f852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f856:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800f85a:	3301      	adds	r3, #1
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	461a      	mov	r2, r3
 800f860:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f864:	4293      	cmp	r3, r2
 800f866:	f6ff ae62 	blt.w	800f52e <set_discovery_mode+0x19e>
				}
			}

			//now select the subnetwork with the greatest number of uwbs
			uint8 max_num = 0;
 800f86a:	2300      	movs	r3, #0
 800f86c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
			for(int i=0; i < num_sub_networks; i++)
 800f870:	2300      	movs	r3, #0
 800f872:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800f876:	e01a      	b.n	800f8ae <set_discovery_mode+0x51e>
			{
				if(sub_network_members[i] > max_num)
 800f878:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800f87c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f880:	4413      	add	r3, r2
 800f882:	781a      	ldrb	r2, [r3, #0]
 800f884:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800f888:	4293      	cmp	r3, r2
 800f88a:	d20b      	bcs.n	800f8a4 <set_discovery_mode+0x514>
				{
					max_num = sub_network_members[i];
 800f88c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800f890:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f894:	4413      	add	r3, r2
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
					sub_network_selected = i;
 800f89c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8a0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
			for(int i=0; i < num_sub_networks; i++)
 800f8a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800f8ae:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800f8b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	dbde      	blt.n	800f878 <set_discovery_mode+0x4e8>
				}
			}

			uint64 tnext[max_num];
 800f8ba:	f897 414f 	ldrb.w	r4, [r7, #335]	; 0x14f
 800f8be:	466b      	mov	r3, sp
 800f8c0:	461e      	mov	r6, r3
 800f8c2:	4623      	mov	r3, r4
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f8ca:	b2e2      	uxtb	r2, r4
 800f8cc:	f04f 0300 	mov.w	r3, #0
 800f8d0:	f04f 0000 	mov.w	r0, #0
 800f8d4:	f04f 0100 	mov.w	r1, #0
 800f8d8:	0199      	lsls	r1, r3, #6
 800f8da:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800f8de:	0190      	lsls	r0, r2, #6
 800f8e0:	b2e2      	uxtb	r2, r4
 800f8e2:	f04f 0300 	mov.w	r3, #0
 800f8e6:	f04f 0000 	mov.w	r0, #0
 800f8ea:	f04f 0100 	mov.w	r1, #0
 800f8ee:	0199      	lsls	r1, r3, #6
 800f8f0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800f8f4:	0190      	lsls	r0, r2, #6
 800f8f6:	4623      	mov	r3, r4
 800f8f8:	00db      	lsls	r3, r3, #3
 800f8fa:	3307      	adds	r3, #7
 800f8fc:	08db      	lsrs	r3, r3, #3
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	ebad 0d03 	sub.w	sp, sp, r3
 800f904:	466b      	mov	r3, sp
 800f906:	3307      	adds	r3, #7
 800f908:	08db      	lsrs	r3, r3, #3
 800f90a:	00db      	lsls	r3, r3, #3
 800f90c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			uint8 neighborIndices[max_num];
 800f910:	f897 414f 	ldrb.w	r4, [r7, #335]	; 0x14f
 800f914:	4623      	mov	r3, r4
 800f916:	3b01      	subs	r3, #1
 800f918:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f91c:	b2e2      	uxtb	r2, r4
 800f91e:	f04f 0300 	mov.w	r3, #0
 800f922:	f04f 0000 	mov.w	r0, #0
 800f926:	f04f 0100 	mov.w	r1, #0
 800f92a:	00d9      	lsls	r1, r3, #3
 800f92c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f930:	00d0      	lsls	r0, r2, #3
 800f932:	b2e2      	uxtb	r2, r4
 800f934:	f04f 0300 	mov.w	r3, #0
 800f938:	f04f 0000 	mov.w	r0, #0
 800f93c:	f04f 0100 	mov.w	r1, #0
 800f940:	00d9      	lsls	r1, r3, #3
 800f942:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f946:	00d0      	lsls	r0, r2, #3
 800f948:	4623      	mov	r3, r4
 800f94a:	3307      	adds	r3, #7
 800f94c:	08db      	lsrs	r3, r3, #3
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	ebad 0d03 	sub.w	sp, sp, r3
 800f954:	466b      	mov	r3, sp
 800f956:	3300      	adds	r3, #0
 800f958:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			uint64 latest_tnext = 0;
 800f95c:	f04f 0200 	mov.w	r2, #0
 800f960:	f04f 0300 	mov.w	r3, #0
 800f964:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			uint8 nidx = 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			uint64 slotDuration_us = this->slotDuration_us;
 800f96e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800f978:	461a      	mov	r2, r3
 800f97a:	f04f 0300 	mov.w	r3, #0
 800f97e:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

			for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800f982:	2301      	movs	r3, #1
 800f984:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800f988:	e0d3      	b.n	800fb32 <set_discovery_mode+0x7a2>
			{
				if(this->uwbListTDMAInfo[i].connectionType == UWB_LIST_NEIGHBOR && sub_network_membership[i] == sub_network_selected)
 800f98a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f98e:	6819      	ldr	r1, [r3, #0]
 800f990:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f994:	4613      	mov	r3, r2
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	4413      	add	r3, r2
 800f99a:	00db      	lsls	r3, r3, #3
 800f99c:	440b      	add	r3, r1
 800f99e:	3308      	adds	r3, #8
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	f040 80c0 	bne.w	800fb28 <set_discovery_mode+0x798>
 800f9a8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800f9ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f9b0:	4413      	add	r3, r2
 800f9b2:	781a      	ldrb	r2, [r3, #0]
 800f9b4:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	f040 80b5 	bne.w	800fb28 <set_discovery_mode+0x798>
				{
					neighborIndices[nidx] = i;
 800f9be:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 800f9c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800f9cc:	5453      	strb	r3, [r2, r1]
					tnext[nidx] = this->uwbListTDMAInfo[i].frameStartTime;
 800f9ce:	f897 413f 	ldrb.w	r4, [r7, #319]	; 0x13f
 800f9d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f9d6:	6819      	ldr	r1, [r3, #0]
 800f9d8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f9dc:	4613      	mov	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	4413      	add	r3, r2
 800f9e2:	00db      	lsls	r3, r3, #3
 800f9e4:	440b      	add	r3, r1
 800f9e6:	3320      	adds	r3, #32
 800f9e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f9f0:	00e3      	lsls	r3, r4, #3
 800f9f2:	4413      	add	r3, r2
 800f9f4:	e9c3 0100 	strd	r0, r1, [r3]
					while(time_now_us > tnext[nidx])
 800f9f8:	e03d      	b.n	800fa76 <set_discovery_mode+0x6e6>
 800f9fa:	bf00      	nop
 800f9fc:	f3af 8000 	nop.w
 800fa00:	3fe00000 	.word	0x3fe00000
 800fa04:	05f5e100 	.word	0x05f5e100
 800fa08:	00000000 	.word	0x00000000
					{
						tnext[nidx] += this->uwbListTDMAInfo[i].framelength*slotDuration_us;
 800fa0c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800fa10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fa14:	00db      	lsls	r3, r3, #3
 800fa16:	4413      	add	r3, r2
 800fa18:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fa20:	6819      	ldr	r1, [r3, #0]
 800fa22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fa26:	1c5a      	adds	r2, r3, #1
 800fa28:	4613      	mov	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	00db      	lsls	r3, r3, #3
 800fa30:	440b      	add	r3, r1
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	f04f 0300 	mov.w	r3, #0
 800fa3a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fa3e:	fb03 f001 	mul.w	r0, r3, r1
 800fa42:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800fa46:	fb02 f101 	mul.w	r1, r2, r1
 800fa4a:	4408      	add	r0, r1
 800fa4c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fa50:	fba1 2302 	umull	r2, r3, r1, r2
 800fa54:	18c1      	adds	r1, r0, r3
 800fa56:	460b      	mov	r3, r1
 800fa58:	f897 113f 	ldrb.w	r1, [r7, #319]	; 0x13f
 800fa5c:	18a0      	adds	r0, r4, r2
 800fa5e:	6438      	str	r0, [r7, #64]	; 0x40
 800fa60:	eb45 0303 	adc.w	r3, r5, r3
 800fa64:	647b      	str	r3, [r7, #68]	; 0x44
 800fa66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fa6a:	00cb      	lsls	r3, r1, #3
 800fa6c:	4413      	add	r3, r2
 800fa6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fa72:	e9c3 1200 	strd	r1, r2, [r3]
					while(time_now_us > tnext[nidx])
 800fa76:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800fa7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	4413      	add	r3, r2
 800fa82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa86:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800fa8a:	4299      	cmp	r1, r3
 800fa8c:	bf08      	it	eq
 800fa8e:	4290      	cmpeq	r0, r2
 800fa90:	d3bc      	bcc.n	800fa0c <set_discovery_mode+0x67c>
					}
					nidx++;
 800fa92:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800fa96:	3301      	adds	r3, #1
 800fa98:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

					if(this->uwbListTDMAInfo[i].framelength*slotDuration_us < shortestFrameDuration)
 800fa9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800faa0:	6819      	ldr	r1, [r3, #0]
 800faa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	4613      	mov	r3, r2
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4413      	add	r3, r2
 800faae:	00db      	lsls	r3, r3, #3
 800fab0:	440b      	add	r3, r1
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	b2da      	uxtb	r2, r3
 800fab6:	f04f 0300 	mov.w	r3, #0
 800faba:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fabe:	fb03 f001 	mul.w	r0, r3, r1
 800fac2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800fac6:	fb02 f101 	mul.w	r1, r2, r1
 800faca:	1844      	adds	r4, r0, r1
 800facc:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fad0:	fba1 0102 	umull	r0, r1, r1, r2
 800fad4:	1863      	adds	r3, r4, r1
 800fad6:	4619      	mov	r1, r3
 800fad8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800fadc:	4299      	cmp	r1, r3
 800fade:	bf08      	it	eq
 800fae0:	4290      	cmpeq	r0, r2
 800fae2:	d221      	bcs.n	800fb28 <set_discovery_mode+0x798>
					{
						shortestFrameDuration = this->uwbListTDMAInfo[i].framelength*slotDuration_us;
 800fae4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fae8:	6819      	ldr	r1, [r3, #0]
 800faea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	4613      	mov	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	440b      	add	r3, r1
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	b2da      	uxtb	r2, r3
 800fafe:	f04f 0300 	mov.w	r3, #0
 800fb02:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800fb06:	fb02 f001 	mul.w	r0, r2, r1
 800fb0a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fb0e:	fb03 f101 	mul.w	r1, r3, r1
 800fb12:	4408      	add	r0, r1
 800fb14:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fb18:	fba1 2302 	umull	r2, r3, r1, r2
 800fb1c:	18c1      	adds	r1, r0, r3
 800fb1e:	460b      	mov	r3, r1
 800fb20:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
 800fb24:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
			for(int i = 1; i < inst->uwbListLen; i++)//0 reserved for self
 800fb28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800fb32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb36:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fb44:	4293      	cmp	r3, r2
 800fb46:	f6ff af20 	blt.w	800f98a <set_discovery_mode+0x5fa>
					}
				}
			}

			tcommon = tnext[0];
 800fb4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
			latest_tnext = tcommon;
 800fb56:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800fb5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			bool converged = FALSE;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
			while(converged == FALSE)
 800fb64:	e0d4      	b.n	800fd10 <set_discovery_mode+0x980>
			{
				converged = TRUE;
 800fb66:	2301      	movs	r3, #1
 800fb68:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
				for(int i = 0; i < nidx; i++)
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800fb72:	e0c6      	b.n	800fd02 <set_discovery_mode+0x972>
				{
					uint64 frameduration = this->uwbListTDMAInfo[neighborIndices[i]].framelength*slotDuration_us;
 800fb74:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fb78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fb7c:	4413      	add	r3, r2
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	461a      	mov	r2, r3
 800fb82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fb86:	6819      	ldr	r1, [r3, #0]
 800fb88:	3201      	adds	r2, #1
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	4413      	add	r3, r2
 800fb90:	00db      	lsls	r3, r3, #3
 800fb92:	440b      	add	r3, r1
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	f04f 0300 	mov.w	r3, #0
 800fb9c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800fba0:	fb02 f001 	mul.w	r0, r2, r1
 800fba4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fba8:	fb03 f101 	mul.w	r1, r3, r1
 800fbac:	4408      	add	r0, r1
 800fbae:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800fbb2:	fba1 2302 	umull	r2, r3, r1, r2
 800fbb6:	18c1      	adds	r1, r0, r3
 800fbb8:	460b      	mov	r3, r1
 800fbba:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800fbbe:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
					while(tnext[i] < tcommon && tcommon - tnext[i] >= frameduration - this->frameSyncThreshold_us)
 800fbc2:	e018      	b.n	800fbf6 <set_discovery_mode+0x866>
					{
						tnext[i] += frameduration;
 800fbc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fbc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	4413      	add	r3, r2
 800fbd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbd4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800fbd8:	1884      	adds	r4, r0, r2
 800fbda:	63bc      	str	r4, [r7, #56]	; 0x38
 800fbdc:	eb41 0303 	adc.w	r3, r1, r3
 800fbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbe2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fbe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fbea:	00db      	lsls	r3, r3, #3
 800fbec:	4413      	add	r3, r2
 800fbee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fbf2:	e9c3 1200 	strd	r1, r2, [r3]
					while(tnext[i] < tcommon && tcommon - tnext[i] >= frameduration - this->frameSyncThreshold_us)
 800fbf6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fbfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fbfe:	00db      	lsls	r3, r3, #3
 800fc00:	4413      	add	r3, r2
 800fc02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc06:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800fc0a:	4299      	cmp	r1, r3
 800fc0c:	bf08      	it	eq
 800fc0e:	4290      	cmpeq	r0, r2
 800fc10:	d222      	bcs.n	800fc58 <set_discovery_mode+0x8c8>
 800fc12:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fc16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fc1a:	00db      	lsls	r3, r3, #3
 800fc1c:	4413      	add	r3, r2
 800fc1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc22:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800fc26:	1a14      	subs	r4, r2, r0
 800fc28:	633c      	str	r4, [r7, #48]	; 0x30
 800fc2a:	eb63 0301 	sbc.w	r3, r3, r1
 800fc2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 800fc3a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800fc3e:	1a14      	subs	r4, r2, r0
 800fc40:	62bc      	str	r4, [r7, #40]	; 0x28
 800fc42:	eb63 0301 	sbc.w	r3, r3, r1
 800fc46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc48:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800fc4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fc50:	4294      	cmp	r4, r2
 800fc52:	bf08      	it	eq
 800fc54:	428b      	cmpeq	r3, r1
 800fc56:	d2b5      	bcs.n	800fbc4 <set_discovery_mode+0x834>
					}

					if(tnext[i] > tcommon && tnext[i] - tcommon >= this->frameSyncThreshold_us)
 800fc58:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fc5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fc60:	00db      	lsls	r3, r3, #3
 800fc62:	4413      	add	r3, r2
 800fc64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc68:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800fc6c:	428b      	cmp	r3, r1
 800fc6e:	bf08      	it	eq
 800fc70:	4282      	cmpeq	r2, r0
 800fc72:	d229      	bcs.n	800fcc8 <set_discovery_mode+0x938>
 800fc74:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fc78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fc7c:	00db      	lsls	r3, r3, #3
 800fc7e:	4413      	add	r3, r2
 800fc80:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc84:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800fc88:	1a84      	subs	r4, r0, r2
 800fc8a:	623c      	str	r4, [r7, #32]
 800fc8c:	eb61 0303 	sbc.w	r3, r1, r3
 800fc90:	627b      	str	r3, [r7, #36]	; 0x24
 800fc92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	e9d3 236e 	ldrd	r2, r3, [r3, #440]	; 0x1b8
 800fc9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800fca0:	4299      	cmp	r1, r3
 800fca2:	bf08      	it	eq
 800fca4:	4290      	cmpeq	r0, r2
 800fca6:	d30f      	bcc.n	800fcc8 <set_discovery_mode+0x938>
					{
						//increment the value based on tnext[0] to guarantee all uwbs
						//in this subnetwork will have frame sync errors within the threshold
						tcommon += shortestFrameDuration;
 800fca8:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800fcac:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800fcb0:	1884      	adds	r4, r0, r2
 800fcb2:	603c      	str	r4, [r7, #0]
 800fcb4:	eb41 0303 	adc.w	r3, r1, r3
 800fcb8:	607b      	str	r3, [r7, #4]
 800fcba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fcbe:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
						converged = FALSE;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
					}

					if(tnext[i] > latest_tnext)
 800fcc8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fcd0:	00db      	lsls	r3, r3, #3
 800fcd2:	4413      	add	r3, r2
 800fcd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fcd8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800fcdc:	428b      	cmp	r3, r1
 800fcde:	bf08      	it	eq
 800fce0:	4282      	cmpeq	r2, r0
 800fce2:	d209      	bcs.n	800fcf8 <set_discovery_mode+0x968>
					{
						latest_tnext = tnext[i];
 800fce4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fce8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	4413      	add	r3, r2
 800fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
				for(int i = 0; i < nidx; i++)
 800fcf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800fd02:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800fd06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	f6ff af32 	blt.w	800fb74 <set_discovery_mode+0x7e4>
			while(converged == FALSE)
 800fd10:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800fd14:	f083 0301 	eor.w	r3, r3, #1
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f47f af23 	bne.w	800fb66 <set_discovery_mode+0x7d6>
					}
				}
			}

			//expire as the beginning of the common frame start time
			this->discovery_mode_duration = (uint32)(get_dt64(time_now_us, latest_tnext)/1000);
 800fd20:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800fd24:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800fd28:	f7f9 fac9 	bl	80092be <get_dt64>
 800fd2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd30:	f04f 0300 	mov.w	r3, #0
 800fd34:	f7f1 f892 	bl	8000e5c <__aeabi_uldivmod>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = TRUE;
 800fd46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2201      	movs	r2, #1
 800fd4e:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8

			this->free_slots(&this->uwbListTDMAInfo[0]);
 800fd52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800fd5c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fd60:	6812      	ldr	r2, [r2, #0]
 800fd62:	3208      	adds	r2, #8
 800fd64:	4610      	mov	r0, r2
 800fd66:	4798      	blx	r3
			this->deconflict_slot_assignments(this);
 800fd68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 800fd72:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fd76:	6810      	ldr	r0, [r2, #0]
 800fd78:	4798      	blx	r3
			//assign self slot
			this->find_assign_slot(this);
 800fd7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800fd84:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fd88:	6810      	ldr	r0, [r2, #0]
 800fd8a:	4798      	blx	r3
			//construct SUG packet
			this->populate_inf_msg(this, RTLS_DEMO_MSG_INF_SUG);
 800fd8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800fd96:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fd9a:	2115      	movs	r1, #21
 800fd9c:	6810      	ldr	r0, [r2, #0]
 800fd9e:	4798      	blx	r3


			//back-track the frame start time so we can inform the need to rebase
			//and keep in sync with the subnetwork we initially chose to sync with
			this->uwbListTDMAInfo[0].frameStartTime = latest_tnext;
 800fda0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fda4:	6819      	ldr	r1, [r3, #0]
 800fda6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800fdaa:	e9c1 2308 	strd	r2, r3, [r1, #32]
			uint64 myFrameDuration = this->uwbListTDMAInfo[0].framelength*this->slotDuration_us;
 800fdae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdb8:	461a      	mov	r2, r3
 800fdba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800fdc4:	fb03 f302 	mul.w	r3, r3, r2
 800fdc8:	461a      	mov	r2, r3
 800fdca:	f04f 0300 	mov.w	r3, #0
 800fdce:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			while(this->uwbListTDMAInfo[0].frameStartTime > time_now_us)
 800fdd2:	e012      	b.n	800fdfa <set_discovery_mode+0xa6a>
			{
				this->uwbListTDMAInfo[0].frameStartTime -= myFrameDuration;
 800fdd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800fdde:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800fde2:	1a84      	subs	r4, r0, r2
 800fde4:	61bc      	str	r4, [r7, #24]
 800fde6:	eb61 0303 	sbc.w	r3, r1, r3
 800fdea:	61fb      	str	r3, [r7, #28]
 800fdec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fdf6:	e9c3 1208 	strd	r1, r2, [r3, #32]
			while(this->uwbListTDMAInfo[0].frameStartTime > time_now_us)
 800fdfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fe04:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800fe08:	4299      	cmp	r1, r3
 800fe0a:	bf08      	it	eq
 800fe0c:	4290      	cmpeq	r0, r2
 800fe0e:	d3e1      	bcc.n	800fdd4 <set_discovery_mode+0xa44>
			}

			uint64 myTimeSinceFrameStart = get_dt64(this->uwbListTDMAInfo[0].frameStartTime, time_now);
 800fe10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800fe1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	461a      	mov	r2, r3
 800fe22:	f04f 0300 	mov.w	r3, #0
 800fe26:	f7f9 fa4a 	bl	80092be <get_dt64>
 800fe2a:	e9c7 013e 	strd	r0, r1, [r7, #248]	; 0xf8
			uint8 slot = myTimeSinceFrameStart/this->slotDuration_us; //integer division rounded down
 800fe2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800fe38:	461a      	mov	r2, r3
 800fe3a:	f04f 0300 	mov.w	r3, #0
 800fe3e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800fe42:	f7f1 f80b 	bl	8000e5c <__aeabi_uldivmod>
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			this->lastSlotStartTime64 = this->uwbListTDMAInfo[0].frameStartTime + (uint64)(this->slotDuration_us*slot);
 800fe50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800fe5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800fe64:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 800fe68:	fb02 f303 	mul.w	r3, r2, r3
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	f04f 0300 	mov.w	r3, #0
 800fe72:	1884      	adds	r4, r0, r2
 800fe74:	613c      	str	r4, [r7, #16]
 800fe76:	eb41 0303 	adc.w	r3, r1, r3
 800fe7a:	617b      	str	r3, [r7, #20]
 800fe7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe86:	e9c3 1266 	strd	r1, r2, [r3, #408]	; 0x198

			break;
 800fe8a:	bf00      	nop
 800fe8c:	46b5      	mov	sp, r6
		}

	}


}
 800fe8e:	e020      	b.n	800fed2 <set_discovery_mode+0xb42>
			this->discovery_mode_duration = this->slotStartDelay_us*2;
 800fe90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	005a      	lsls	r2, r3, #1
 800fe9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = TRUE;
 800fea8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 800feb4:	e00d      	b.n	800fed2 <set_discovery_mode+0xb42>
			this->discovery_mode_duration = 0;
 800feb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2200      	movs	r2, #0
 800febe:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			this->discovery_mode_expires = FALSE;
 800fec2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
			break;
 800fece:	e000      	b.n	800fed2 <set_discovery_mode+0xb42>
			break;
 800fed0:	bf00      	nop
}
 800fed2:	bf00      	nop
 800fed4:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800fed8:	46bd      	mov	sp, r7
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fede:	bf00      	nop

0800fee0 <check_discovery_mode_expiration>:

static void check_discovery_mode_expiration(struct TDMAHandler *this)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800fee8:	2000      	movs	r0, #0
 800feea:	f7f9 faa7 	bl	800943c <instance_get_local_structure_ptr>
 800feee:	6138      	str	r0, [r7, #16]

	if(inst->mode == DISCOVERY)
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d133      	bne.n	800ff60 <check_discovery_mode_expiration+0x80>
	{
		if(this->discovery_mode_expires == TRUE)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d02e      	beq.n	800ff60 <check_discovery_mode_expiration+0x80>
		{
			uint32 time_now = portGetTickCnt();
 800ff02:	f001 fee5 	bl	8011cd0 <portGetTickCnt>
 800ff06:	60f8      	str	r0, [r7, #12]
			uint32 timeSinceModeStart = get_dt32(this->discovery_mode_start_time, time_now);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7f9 f9be 	bl	8009292 <get_dt32>
 800ff16:	60b8      	str	r0, [r7, #8]
			if(timeSinceModeStart > this->discovery_mode_duration)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d91d      	bls.n	800ff60 <check_discovery_mode_expiration+0x80>
			{
				//discovery mode expired
				DISCOVERY_MODE new_mode = WAIT_INF_REG;
 800ff24:	2300      	movs	r3, #0
 800ff26:	75fb      	strb	r3, [r7, #23]
				if(this->discovery_mode == COLLECT_INF_REG)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d105      	bne.n	800ff3e <check_discovery_mode_expiration+0x5e>
				{
					new_mode = WAIT_SEND_SUG;
 800ff32:	2304      	movs	r3, #4
 800ff34:	75fb      	strb	r3, [r7, #23]
					inst->testAppState = TA_RXE_WAIT; //still collect RNG_REPORT messages while we wait to send our SUG message
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	2206      	movs	r2, #6
 800ff3a:	705a      	strb	r2, [r3, #1]
 800ff3c:	e009      	b.n	800ff52 <check_discovery_mode_expiration+0x72>
				}
				else if(this->discovery_mode == WAIT_SEND_SUG)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 800ff44:	2b04      	cmp	r3, #4
 800ff46:	d104      	bne.n	800ff52 <check_discovery_mode_expiration+0x72>
				{
					inst->testAppState = TA_TX_SELECT;
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	220a      	movs	r2, #10
 800ff4c:	705a      	strb	r2, [r3, #1]
					new_mode = SEND_SUG;
 800ff4e:	2305      	movs	r3, #5
 800ff50:	75fb      	strb	r3, [r7, #23]
				}

				this->set_discovery_mode(this, new_mode, time_now);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ff58:	7df9      	ldrb	r1, [r7, #23]
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	4798      	blx	r3
			}
		}
	}
}
 800ff60:	bf00      	nop
 800ff62:	3718      	adds	r7, #24
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <check_timeouts>:


static bool check_timeouts(struct TDMAHandler *this)
{
 800ff68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff6a:	b08b      	sub	sp, #44	; 0x2c
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
	instance_data_t *inst = instance_get_local_structure_ptr(0);
 800ff70:	2000      	movs	r0, #0
 800ff72:	f7f9 fa63 	bl	800943c <instance_get_local_structure_ptr>
 800ff76:	6178      	str	r0, [r7, #20]
	uint32 delta_t = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	613b      	str	r3, [r7, #16]
	bool rangingUWBTimeout = FALSE;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool setInactive = FALSE;
 800ff82:	2300      	movs	r3, #0
 800ff84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool updateINF = FALSE;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool noNeighbors = FALSE;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8 max_framelength = 4;
 800ff94:	2304      	movs	r3, #4
 800ff96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for(int i=0; i < inst->uwbListLen; i++)
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	61fb      	str	r3, [r7, #28]
 800ff9e:	e01f      	b.n	800ffe0 <check_timeouts+0x78>
	{
		struct TDMAInfo *info = &this->uwbListTDMAInfo[i];
 800ffa0:	69fa      	ldr	r2, [r7, #28]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4413      	add	r3, r2
 800ffa8:	00db      	lsls	r3, r3, #3
 800ffaa:	3308      	adds	r3, #8
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	4413      	add	r3, r2
 800ffb0:	60bb      	str	r3, [r7, #8]
		if (info->connectionType != UWB_LIST_SELF && info->connectionType != UWB_LIST_INACTIVE)
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00f      	beq.n	800ffda <check_timeouts+0x72>
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	d00b      	beq.n	800ffda <check_timeouts+0x72>
		{
			if(info->framelength > max_framelength)
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ffc8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d204      	bcs.n	800ffda <check_timeouts+0x72>
			{
				max_framelength = info->framelength;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ffd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for(int i=0; i < inst->uwbListLen; i++)
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	61fb      	str	r3, [r7, #28]
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	461a      	mov	r2, r3
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	4293      	cmp	r3, r2
 800fff0:	dbd6      	blt.n	800ffa0 <check_timeouts+0x38>
			}
		}
	}
	inst->durationUwbCommTimeout_ms = 2*max_framelength*CEIL_DIV(inst->durationSlotMax_us,1000);
 800fff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	461a      	mov	r2, r3
 800fffa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fffe:	4616      	mov	r6, r2
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8010006:	f240 30e7 	movw	r0, #999	; 0x3e7
 801000a:	f04f 0100 	mov.w	r1, #0
 801000e:	1814      	adds	r4, r2, r0
 8010010:	eb43 0501 	adc.w	r5, r3, r1
 8010014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010018:	f04f 0300 	mov.w	r3, #0
 801001c:	4620      	mov	r0, r4
 801001e:	4629      	mov	r1, r5
 8010020:	f7f0 ff1c 	bl	8000e5c <__aeabi_uldivmod>
 8010024:	4602      	mov	r2, r0
 8010026:	460b      	mov	r3, r1
 8010028:	4613      	mov	r3, r2
 801002a:	fb03 f206 	mul.w	r2, r3, r6
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	66da      	str	r2, [r3, #108]	; 0x6c


	for(int i=1; i < inst->uwbListLen; i++)//0 reserved for self, timeout not applicable
 8010032:	2301      	movs	r3, #1
 8010034:	61bb      	str	r3, [r7, #24]
 8010036:	e090      	b.n	801015a <check_timeouts+0x1f2>
	{
		struct TDMAInfo *info = &this->uwbListTDMAInfo[i];
 8010038:	69ba      	ldr	r2, [r7, #24]
 801003a:	4613      	mov	r3, r2
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4413      	add	r3, r2
 8010040:	00db      	lsls	r3, r3, #3
 8010042:	3308      	adds	r3, #8
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4413      	add	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]
		if(info->connectionType == UWB_LIST_INACTIVE)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	2b04      	cmp	r3, #4
 8010050:	d077      	beq.n	8010142 <check_timeouts+0x1da>
		{
			continue;
		}

		switch (info->connectionType)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	3b01      	subs	r3, #1
 8010058:	2b03      	cmp	r3, #3
 801005a:	d874      	bhi.n	8010146 <check_timeouts+0x1de>
 801005c:	a201      	add	r2, pc, #4	; (adr r2, 8010064 <check_timeouts+0xfc>)
 801005e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010062:	bf00      	nop
 8010064:	08010075 	.word	0x08010075
 8010068:	080100c9 	.word	0x080100c9
 801006c:	080100f5 	.word	0x080100f5
 8010070:	08010147 	.word	0x08010147
			case UWB_LIST_NEIGHBOR:
			{



				delta_t = get_dt32(info->lastCommNeighbor, portGetTickCnt()); //get time now here in case rx interrupt occurs before get_dt call
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	685c      	ldr	r4, [r3, #4]
 8010078:	f001 fe2a 	bl	8011cd0 <portGetTickCnt>
 801007c:	4603      	mov	r3, r0
 801007e:	4619      	mov	r1, r3
 8010080:	4620      	mov	r0, r4
 8010082:	f7f9 f906 	bl	8009292 <get_dt32>
 8010086:	6138      	str	r0, [r7, #16]

				if(delta_t > inst->durationUwbCommTimeout_ms)
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801008c:	693a      	ldr	r2, [r7, #16]
 801008e:	429a      	cmp	r2, r3
 8010090:	d95b      	bls.n	801014a <check_timeouts+0x1e2>
				{
					info->connectionType = UWB_LIST_HIDDEN;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2202      	movs	r2, #2
 8010096:	701a      	strb	r2, [r3, #0]
					updateINF = TRUE;
 8010098:	2301      	movs	r3, #1
 801009a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

					if(instfindnumneighbors(inst) <= 0)
 801009e:	6978      	ldr	r0, [r7, #20]
 80100a0:	f7fa fce4 	bl	800aa6c <instfindnumneighbors>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	dc02      	bgt.n	80100b0 <check_timeouts+0x148>
					{
						noNeighbors = TRUE;
 80100aa:	2301      	movs	r3, #1
 80100ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					}

					if(inst->uwbToRangeWith == i)
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	461a      	mov	r2, r3
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	4293      	cmp	r3, r2
 80100be:	d144      	bne.n	801014a <check_timeouts+0x1e2>
					{
						rangingUWBTimeout = TRUE;
 80100c0:	2301      	movs	r3, #1
 80100c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}

				break;
 80100c6:	e040      	b.n	801014a <check_timeouts+0x1e2>
			}
			case UWB_LIST_HIDDEN:
			{
				delta_t = get_dt32(info->lastCommHidden, portGetTickCnt()); //get time now here in case rx interrupt occurs before get_dt call
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	689c      	ldr	r4, [r3, #8]
 80100cc:	f001 fe00 	bl	8011cd0 <portGetTickCnt>
 80100d0:	4603      	mov	r3, r0
 80100d2:	4619      	mov	r1, r3
 80100d4:	4620      	mov	r0, r4
 80100d6:	f7f9 f8dc 	bl	8009292 <get_dt32>
 80100da:	6138      	str	r0, [r7, #16]

				if(delta_t > inst->durationUwbCommTimeout_ms)
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100e0:	693a      	ldr	r2, [r7, #16]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d933      	bls.n	801014e <check_timeouts+0x1e6>
				{
					info->connectionType = UWB_LIST_TWICE_HIDDEN;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2203      	movs	r2, #3
 80100ea:	701a      	strb	r2, [r3, #0]
					updateINF = TRUE;
 80100ec:	2301      	movs	r3, #1
 80100ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				}

				break;
 80100f2:	e02c      	b.n	801014e <check_timeouts+0x1e6>
			}
			case UWB_LIST_TWICE_HIDDEN:
			{
				delta_t = get_dt32(info->lastCommTwiceHidden, portGetTickCnt()); //get time now here in case rx interrupt occurs before get_dt call
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	68dc      	ldr	r4, [r3, #12]
 80100f8:	f001 fdea 	bl	8011cd0 <portGetTickCnt>
 80100fc:	4603      	mov	r3, r0
 80100fe:	4619      	mov	r1, r3
 8010100:	4620      	mov	r0, r4
 8010102:	f7f9 f8c6 	bl	8009292 <get_dt32>
 8010106:	6138      	str	r0, [r7, #16]

				if(delta_t > inst->durationUwbCommTimeout_ms)
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801010c:	693a      	ldr	r2, [r7, #16]
 801010e:	429a      	cmp	r2, r3
 8010110:	d91f      	bls.n	8010152 <check_timeouts+0x1ea>
				{
					info->connectionType = UWB_LIST_INACTIVE;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2204      	movs	r2, #4
 8010116:	701a      	strb	r2, [r3, #0]
					this->free_slots(info);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801011e:	68f8      	ldr	r0, [r7, #12]
 8010120:	4798      	blx	r3
					setInactive = TRUE;
 8010122:	2301      	movs	r3, #1
 8010124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					updateINF = TRUE;
 8010128:	2301      	movs	r3, #1
 801012a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					info->lastCommNeighbor = 0;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2200      	movs	r2, #0
 8010132:	605a      	str	r2, [r3, #4]
					info->lastCommHidden = 0;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2200      	movs	r2, #0
 8010138:	609a      	str	r2, [r3, #8]
					info->lastCommTwiceHidden = 0;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2200      	movs	r2, #0
 801013e:	60da      	str	r2, [r3, #12]
				}

				break;
 8010140:	e007      	b.n	8010152 <check_timeouts+0x1ea>
			continue;
 8010142:	bf00      	nop
 8010144:	e006      	b.n	8010154 <check_timeouts+0x1ec>
				break;
			}
			default:
			{
				//invalid list type
				break;
 8010146:	bf00      	nop
 8010148:	e004      	b.n	8010154 <check_timeouts+0x1ec>
				break;
 801014a:	bf00      	nop
 801014c:	e002      	b.n	8010154 <check_timeouts+0x1ec>
				break;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <check_timeouts+0x1ec>
				break;
 8010152:	bf00      	nop
	for(int i=1; i < inst->uwbListLen; i++)//0 reserved for self, timeout not applicable
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	3301      	adds	r3, #1
 8010158:	61bb      	str	r3, [r7, #24]
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 8010160:	3301      	adds	r3, #1
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	461a      	mov	r2, r3
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	4293      	cmp	r3, r2
 801016a:	f6ff af65 	blt.w	8010038 <check_timeouts+0xd0>
		}
	}

	//one of the UWBs we were tracking became inactive,
	//re-optimize our TDMA assignments and repopulate the inf message
	if(setInactive == TRUE)
 801016e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00b      	beq.n	801018e <check_timeouts+0x226>
	{
		this->free_slots(&this->uwbListTDMAInfo[0]);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	3208      	adds	r2, #8
 8010180:	4610      	mov	r0, r2
 8010182:	4798      	blx	r3
		this->find_assign_slot(this);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	4798      	blx	r3
	}

	//adjust the INF message to reflect any changes
	if(updateINF == TRUE)
 801018e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010192:	2b00      	cmp	r3, #0
 8010194:	d005      	beq.n	80101a2 <check_timeouts+0x23a>
	{
		this->populate_inf_msg(this, RTLS_DEMO_MSG_INF_UPDATE);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801019c:	2116      	movs	r1, #22
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	4798      	blx	r3
	}

	if(rangingUWBTimeout == TRUE)
 80101a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d013      	beq.n	80101d2 <check_timeouts+0x26a>
	{
		inst->uwbToRangeWith = 255;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f503 53a7 	add.w	r3, r3, #5344	; 0x14e0
 80101b0:	22ff      	movs	r2, #255	; 0xff
 80101b2:	701a      	strb	r2, [r3, #0]
		if(inst->mode == ANCHOR || inst->mode == DISCOVERY)
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	2b02      	cmp	r3, #2
 80101ba:	d003      	beq.n	80101c4 <check_timeouts+0x25c>
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d103      	bne.n	80101cc <check_timeouts+0x264>
		{
			inst->testAppState = TA_RXE_WAIT;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2206      	movs	r2, #6
 80101c8:	705a      	strb	r2, [r3, #1]
 80101ca:	e002      	b.n	80101d2 <check_timeouts+0x26a>
		}
		else
		{
			inst->testAppState = TA_TX_SELECT;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	220a      	movs	r2, #10
 80101d0:	705a      	strb	r2, [r3, #1]
		}
	}

	return noNeighbors;
 80101d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	372c      	adds	r7, #44	; 0x2c
 80101da:	46bd      	mov	sp, r7
 80101dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101de:	bf00      	nop

080101e0 <new>:


static struct TDMAHandler new(uint64 slot_duration){
 80101e0:	b590      	push	{r4, r7, lr}
 80101e2:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	f107 010c 	add.w	r1, r7, #12
 80101ec:	6008      	str	r0, [r1, #0]
 80101ee:	e9c7 2300 	strd	r2, r3, [r7]
	struct TDMAHandler ret = {};
 80101f2:	f107 0310 	add.w	r3, r7, #16
 80101f6:	4618      	mov	r0, r3
 80101f8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80101fc:	461a      	mov	r2, r3
 80101fe:	2100      	movs	r1, #0
 8010200:	f002 ff28 	bl	8013054 <memset>

	ret.slot_transition = &slot_transition;
 8010204:	f107 0310 	add.w	r3, r7, #16
 8010208:	4a60      	ldr	r2, [pc, #384]	; (801038c <new+0x1ac>)
 801020a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	ret.frame_sync = &frame_sync;
 801020e:	f107 0310 	add.w	r3, r7, #16
 8010212:	4a5f      	ldr	r2, [pc, #380]	; (8010390 <new+0x1b0>)
 8010214:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	ret.update_frame_start = &update_frame_start;
 8010218:	f107 0310 	add.w	r3, r7, #16
 801021c:	4a5d      	ldr	r2, [pc, #372]	; (8010394 <new+0x1b4>)
 801021e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	ret.tx_sync_msg = &tx_sync_msg;
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	4a5c      	ldr	r2, [pc, #368]	; (8010398 <new+0x1b8>)
 8010228:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	ret.tx_select  = &tx_select;
 801022c:	f107 0310 	add.w	r3, r7, #16
 8010230:	4a5a      	ldr	r2, [pc, #360]	; (801039c <new+0x1bc>)
 8010232:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	ret.check_blink  = &check_blink;
 8010236:	f107 0310 	add.w	r3, r7, #16
 801023a:	4a59      	ldr	r2, [pc, #356]	; (80103a0 <new+0x1c0>)
 801023c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	ret.populate_inf_msg = &populate_inf_msg;
 8010240:	f107 0310 	add.w	r3, r7, #16
 8010244:	4a57      	ldr	r2, [pc, #348]	; (80103a4 <new+0x1c4>)
 8010246:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	ret.update_inf_tsfs = &update_inf_tsfs;
 801024a:	f107 0310 	add.w	r3, r7, #16
 801024e:	4a56      	ldr	r2, [pc, #344]	; (80103a8 <new+0x1c8>)
 8010250:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	ret.process_inf_msg = &process_inf_msg;
 8010254:	f107 0310 	add.w	r3, r7, #16
 8010258:	4a54      	ldr	r2, [pc, #336]	; (80103ac <new+0x1cc>)
 801025a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	ret.poll_delay = &poll_delay;
 801025e:	f107 0310 	add.w	r3, r7, #16
 8010262:	4a53      	ldr	r2, [pc, #332]	; (80103b0 <new+0x1d0>)
 8010264:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	ret.slot_assigned = &slot_assigned;
 8010268:	f107 0310 	add.w	r3, r7, #16
 801026c:	4a51      	ldr	r2, [pc, #324]	; (80103b4 <new+0x1d4>)
 801026e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	ret.assign_slot = &assign_slot;
 8010272:	f107 0310 	add.w	r3, r7, #16
 8010276:	4a50      	ldr	r2, [pc, #320]	; (80103b8 <new+0x1d8>)
 8010278:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	ret.find_assign_slot = &find_assign_slot;
 801027c:	f107 0310 	add.w	r3, r7, #16
 8010280:	4a4e      	ldr	r2, [pc, #312]	; (80103bc <new+0x1dc>)
 8010282:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	ret.build_new_network = &build_new_network;
 8010286:	f107 0310 	add.w	r3, r7, #16
 801028a:	4a4d      	ldr	r2, [pc, #308]	; (80103c0 <new+0x1e0>)
 801028c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244

	ret.free_slot = &free_slot;
 8010290:	f107 0310 	add.w	r3, r7, #16
 8010294:	4a4b      	ldr	r2, [pc, #300]	; (80103c4 <new+0x1e4>)
 8010296:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	ret.free_slots = &free_slots;
 801029a:	f107 0310 	add.w	r3, r7, #16
 801029e:	4a4a      	ldr	r2, [pc, #296]	; (80103c8 <new+0x1e8>)
 80102a0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	ret.tdma_free_all_slots = &tdma_free_all_slots;
 80102a4:	f107 0310 	add.w	r3, r7, #16
 80102a8:	4a48      	ldr	r2, [pc, #288]	; (80103cc <new+0x1ec>)
 80102aa:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	ret.uwblist_free_slots = &uwblist_free_slots;
 80102ae:	f107 0310 	add.w	r3, r7, #16
 80102b2:	4a47      	ldr	r2, [pc, #284]	; (80103d0 <new+0x1f0>)
 80102b4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	ret.enter_discovery_mode = &enter_discovery_mode;
 80102b8:	f107 0310 	add.w	r3, r7, #16
 80102bc:	4a45      	ldr	r2, [pc, #276]	; (80103d4 <new+0x1f4>)
 80102be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	ret.set_discovery_mode = &set_discovery_mode;
 80102c2:	f107 0310 	add.w	r3, r7, #16
 80102c6:	4a44      	ldr	r2, [pc, #272]	; (80103d8 <new+0x1f8>)
 80102c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	ret.check_discovery_mode_expiration = &check_discovery_mode_expiration;
 80102cc:	f107 0310 	add.w	r3, r7, #16
 80102d0:	4a42      	ldr	r2, [pc, #264]	; (80103dc <new+0x1fc>)
 80102d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	ret.check_timeouts = &check_timeouts;
 80102d6:	f107 0310 	add.w	r3, r7, #16
 80102da:	4a41      	ldr	r2, [pc, #260]	; (80103e0 <new+0x200>)
 80102dc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220


	ret.deconflict_slot_assignments = &deconflict_slot_assignments;
 80102e0:	f107 0310 	add.w	r3, r7, #16
 80102e4:	4a3f      	ldr	r2, [pc, #252]	; (80103e4 <new+0x204>)
 80102e6:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	ret.deconflict_uwb_pair = &deconflict_uwb_pair;
 80102ea:	f107 0310 	add.w	r3, r7, #16
 80102ee:	4a3e      	ldr	r2, [pc, #248]	; (80103e8 <new+0x208>)
 80102f0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	ret.deconflict_slot_pair = &deconflict_slot_pair;
 80102f4:	f107 0310 	add.w	r3, r7, #16
 80102f8:	4a3c      	ldr	r2, [pc, #240]	; (80103ec <new+0x20c>)
 80102fa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	ret.self_conflict = &self_conflict;
 80102fe:	f107 0310 	add.w	r3, r7, #16
 8010302:	4a3b      	ldr	r2, [pc, #236]	; (80103f0 <new+0x210>)
 8010304:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

	ret.slotDuration_us = slot_duration;
 8010308:	463b      	mov	r3, r7
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	f107 0310 	add.w	r3, r7, #16
 8010310:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	ret.slotDuration_ms = slot_duration/1000 + (slot_duration%1000 == 0 ? 0 : 1);
 8010314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801031c:	f04f 0300 	mov.w	r3, #0
 8010320:	f7f0 fd9c 	bl	8000e5c <__aeabi_uldivmod>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	4614      	mov	r4, r2
 801032a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801032e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010332:	f04f 0300 	mov.w	r3, #0
 8010336:	f7f0 fd91 	bl	8000e5c <__aeabi_uldivmod>
 801033a:	4313      	orrs	r3, r2
 801033c:	2b00      	cmp	r3, #0
 801033e:	bf14      	ite	ne
 8010340:	2301      	movne	r3, #1
 8010342:	2300      	moveq	r3, #0
 8010344:	b2db      	uxtb	r3, r3
 8010346:	18e2      	adds	r2, r4, r3
 8010348:	f107 0310 	add.w	r3, r7, #16
 801034c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	uint64 time_now_us = portGetTickCntMicro();
 8010350:	f001 fcc8 	bl	8011ce4 <portGetTickCntMicro>
 8010354:	e9c7 019c 	strd	r0, r1, [r7, #624]	; 0x270
	uint32 time_now = portGetTickCnt();
 8010358:	f001 fcba 	bl	8011cd0 <portGetTickCnt>
 801035c:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c

	ret.maxFramelength = (uint8)MIN_FRAMELENGTH;
 8010360:	f107 0310 	add.w	r3, r7, #16
 8010364:	2204      	movs	r2, #4
 8010366:	701a      	strb	r2, [r3, #0]
	while(ret.maxFramelength < (uint8)UWB_LIST_SIZE + 1)
 8010368:	e007      	b.n	801037a <new+0x19a>
	{
		ret.maxFramelength *= 2;
 801036a:	f107 0310 	add.w	r3, r7, #16
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	005b      	lsls	r3, r3, #1
 8010372:	b2da      	uxtb	r2, r3
 8010374:	f107 0310 	add.w	r3, r7, #16
 8010378:	701a      	strb	r2, [r3, #0]
	while(ret.maxFramelength < (uint8)UWB_LIST_SIZE + 1)
 801037a:	f107 0310 	add.w	r3, r7, #16
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	2b0a      	cmp	r3, #10
 8010382:	d9f2      	bls.n	801036a <new+0x18a>
	}

	for(int i = 0; i < UWB_LIST_SIZE; i++)
 8010384:	2300      	movs	r3, #0
 8010386:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 801038a:	e0aa      	b.n	80104e2 <new+0x302>
 801038c:	0800cba5 	.word	0x0800cba5
 8010390:	0800cf71 	.word	0x0800cf71
 8010394:	0800cdf1 	.word	0x0800cdf1
 8010398:	0800d53d 	.word	0x0800d53d
 801039c:	0800d63d 	.word	0x0800d63d
 80103a0:	0800d98b 	.word	0x0800d98b
 80103a4:	0800da01 	.word	0x0800da01
 80103a8:	0800dcc5 	.word	0x0800dcc5
 80103ac:	0800dd31 	.word	0x0800dd31
 80103b0:	0800e571 	.word	0x0800e571
 80103b4:	0800e5c1 	.word	0x0800e5c1
 80103b8:	0800e621 	.word	0x0800e621
 80103bc:	0800e719 	.word	0x0800e719
 80103c0:	0800ea39 	.word	0x0800ea39
 80103c4:	0800f151 	.word	0x0800f151
 80103c8:	0800f21f 	.word	0x0800f21f
 80103cc:	0800f29f 	.word	0x0800f29f
 80103d0:	0800f257 	.word	0x0800f257
 80103d4:	0800f333 	.word	0x0800f333
 80103d8:	0800f391 	.word	0x0800f391
 80103dc:	0800fee1 	.word	0x0800fee1
 80103e0:	0800ff69 	.word	0x0800ff69
 80103e4:	0800eafb 	.word	0x0800eafb
 80103e8:	0800ed0f 	.word	0x0800ed0f
 80103ec:	0800ee53 	.word	0x0800ee53
 80103f0:	0800f00d 	.word	0x0800f00d
	{
		ret.uwbListTDMAInfo[i].framelength = (uint8)MIN_FRAMELENGTH;
 80103f4:	f107 0110 	add.w	r1, r7, #16
 80103f8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	4613      	mov	r3, r2
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	440b      	add	r3, r1
 8010408:	2204      	movs	r2, #4
 801040a:	701a      	strb	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].slots = NULL;
 801040c:	f107 0110 	add.w	r1, r7, #16
 8010410:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8010414:	1c5a      	adds	r2, r3, #1
 8010416:	4613      	mov	r3, r2
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	440b      	add	r3, r1
 8010420:	3304      	adds	r3, #4
 8010422:	2200      	movs	r2, #0
 8010424:	601a      	str	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].slotsLength = 0;
 8010426:	f107 0110 	add.w	r1, r7, #16
 801042a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	4613      	mov	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4413      	add	r3, r2
 8010436:	00db      	lsls	r3, r3, #3
 8010438:	440b      	add	r3, r1
 801043a:	3301      	adds	r3, #1
 801043c:	2200      	movs	r2, #0
 801043e:	701a      	strb	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].frameStartTime = time_now_us;
 8010440:	f107 0110 	add.w	r1, r7, #16
 8010444:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8010448:	4613      	mov	r3, r2
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	4413      	add	r3, r2
 801044e:	00db      	lsls	r3, r3, #3
 8010450:	440b      	add	r3, r1
 8010452:	f103 0120 	add.w	r1, r3, #32
 8010456:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 801045a:	e9c1 2300 	strd	r2, r3, [r1]
		ret.uwbListTDMAInfo[i].connectionType = UWB_LIST_INACTIVE;
 801045e:	f107 0110 	add.w	r1, r7, #16
 8010462:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8010466:	4613      	mov	r3, r2
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	4413      	add	r3, r2
 801046c:	00db      	lsls	r3, r3, #3
 801046e:	440b      	add	r3, r1
 8010470:	3308      	adds	r3, #8
 8010472:	2204      	movs	r2, #4
 8010474:	701a      	strb	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].lastCommNeighbor = 0;
 8010476:	f107 0110 	add.w	r1, r7, #16
 801047a:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 801047e:	4613      	mov	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	00db      	lsls	r3, r3, #3
 8010486:	440b      	add	r3, r1
 8010488:	330c      	adds	r3, #12
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].lastCommHidden = 0;
 801048e:	f107 0110 	add.w	r1, r7, #16
 8010492:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8010496:	4613      	mov	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	00db      	lsls	r3, r3, #3
 801049e:	440b      	add	r3, r1
 80104a0:	3310      	adds	r3, #16
 80104a2:	2200      	movs	r2, #0
 80104a4:	601a      	str	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].lastCommTwiceHidden = 0;
 80104a6:	f107 0110 	add.w	r1, r7, #16
 80104aa:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80104ae:	4613      	mov	r3, r2
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	4413      	add	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	440b      	add	r3, r1
 80104b8:	3314      	adds	r3, #20
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
		ret.uwbListTDMAInfo[i].lastRange = time_now;
 80104be:	f107 0110 	add.w	r1, r7, #16
 80104c2:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80104c6:	4613      	mov	r3, r2
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	4413      	add	r3, r2
 80104cc:	00db      	lsls	r3, r3, #3
 80104ce:	440b      	add	r3, r1
 80104d0:	3318      	adds	r3, #24
 80104d2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80104d6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < UWB_LIST_SIZE; i++)
 80104d8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80104dc:	3301      	adds	r3, #1
 80104de:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80104e2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80104e6:	2b09      	cmp	r3, #9
 80104e8:	dd84      	ble.n	80103f4 <new+0x214>
	}
	ret.uwbListTDMAInfo[0].connectionType = UWB_LIST_SELF;
 80104ea:	f107 0310 	add.w	r3, r7, #16
 80104ee:	2200      	movs	r2, #0
 80104f0:	721a      	strb	r2, [r3, #8]

    ret.lastSlotStartTime64 = time_now_us;
 80104f2:	f107 0110 	add.w	r1, r7, #16
 80104f6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80104fa:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
    ret.infSentThisSlot = FALSE;
 80104fe:	f107 0310 	add.w	r3, r7, #16
 8010502:	2200      	movs	r2, #0
 8010504:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
    ret.firstPollSentThisSlot = FALSE;
 8010508:	f107 0310 	add.w	r3, r7, #16
 801050c:	2200      	movs	r2, #0
 801050e:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
    ret.firstPollResponse = FALSE;
 8010512:	f107 0310 	add.w	r3, r7, #16
 8010516:	2200      	movs	r2, #0
 8010518:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
    ret.firstPollComplete = FALSE;
 801051c:	f107 0310 	add.w	r3, r7, #16
 8010520:	2200      	movs	r2, #0
 8010522:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    ret.secondPollSentThisSlot = FALSE;
 8010526:	f107 0310 	add.w	r3, r7, #16
 801052a:	2200      	movs	r2, #0
 801052c:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    ret.nthOldest = 1;
 8010530:	f107 0310 	add.w	r3, r7, #16
 8010534:	2201      	movs	r2, #1
 8010536:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
    ret.nthOldestPlus = 2;
 801053a:	f107 0310 	add.w	r3, r7, #16
 801053e:	2202      	movs	r2, #2
 8010540:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
    ret.slotStartDelay_us = SLOT_START_BUFFER_US;
 8010544:	f107 0110 	add.w	r1, r7, #16
 8010548:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801054c:	f04f 0300 	mov.w	r3, #0
 8010550:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
    ret.frameSyncThreshold_us = ret.slotStartDelay_us;
 8010554:	f107 0310 	add.w	r3, r7, #16
 8010558:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 801055c:	f107 0110 	add.w	r1, r7, #16
 8010560:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    ret.infMessageLength = 0;
 8010564:	f107 0310 	add.w	r3, r7, #16
 8010568:	2200      	movs	r2, #0
 801056a:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8

    ret.enter_discovery_mode(&ret);
 801056e:	f107 0310 	add.w	r3, r7, #16
 8010572:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010576:	f107 0210 	add.w	r2, r7, #16
 801057a:	4610      	mov	r0, r2
 801057c:	4798      	blx	r3
    ret.collectInfDuration = ret.maxFramelength*ret.slotDuration_ms;
 801057e:	f107 0310 	add.w	r3, r7, #16
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	461a      	mov	r2, r3
 8010586:	f107 0310 	add.w	r3, r7, #16
 801058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801058e:	fb03 f202 	mul.w	r2, r3, r2
 8010592:	f107 0310 	add.w	r3, r7, #16
 8010596:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	ret.waitInfDuration = ret.collectInfDuration;
 801059a:	f107 0310 	add.w	r3, r7, #16
 801059e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80105a2:	f107 0310 	add.w	r3, r7, #16
 80105a6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	ret.blinkPeriodRand = (uint32)rand()%BLINK_PERIOD_RAND_MS;
 80105aa:	f003 fa8f 	bl	8013acc <rand>
 80105ae:	4603      	mov	r3, r0
 80105b0:	461a      	mov	r2, r3
 80105b2:	4b0f      	ldr	r3, [pc, #60]	; (80105f0 <new+0x410>)
 80105b4:	fba3 1302 	umull	r1, r3, r3, r2
 80105b8:	099b      	lsrs	r3, r3, #6
 80105ba:	21c8      	movs	r1, #200	; 0xc8
 80105bc:	fb01 f303 	mul.w	r3, r1, r3
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	f107 0210 	add.w	r2, r7, #16
 80105c6:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8

	return ret;
 80105ca:	f107 030c 	add.w	r3, r7, #12
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	f107 0310 	add.w	r3, r7, #16
 80105d4:	4610      	mov	r0, r2
 80105d6:	4619      	mov	r1, r3
 80105d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80105dc:	461a      	mov	r2, r3
 80105de:	f002 fd2b 	bl	8013038 <memcpy>
}
 80105e2:	f107 030c 	add.w	r3, r7, #12
 80105e6:	6818      	ldr	r0, [r3, #0]
 80105e8:	f507 7721 	add.w	r7, r7, #644	; 0x284
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd90      	pop	{r4, r7, pc}
 80105f0:	51eb851f 	.word	0x51eb851f

080105f4 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(uint16 config)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b086      	sub	sp, #24
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	4603      	mov	r3, r0
 80105fc:	80fb      	strh	r3, [r7, #6]
    uint16 otp_addr = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	613b      	str	r3, [r7, #16]

    dw1000local.dblbuffon = 0; // Double buffer mode off by default
 8010606:	4b4c      	ldr	r3, [pc, #304]	; (8010738 <dwt_initialise+0x144>)
 8010608:	2200      	movs	r2, #0
 801060a:	745a      	strb	r2, [r3, #17]
    dw1000local.wait4resp = 0;
 801060c:	4b4a      	ldr	r3, [pc, #296]	; (8010738 <dwt_initialise+0x144>)
 801060e:	2200      	movs	r2, #0
 8010610:	769a      	strb	r2, [r3, #26]
    dw1000local.sleep_mode = 0;
 8010612:	4b49      	ldr	r3, [pc, #292]	; (8010738 <dwt_initialise+0x144>)
 8010614:	2200      	movs	r2, #0
 8010616:	831a      	strh	r2, [r3, #24]

    dw1000local.cbTxDone = NULL;
 8010618:	4b47      	ldr	r3, [pc, #284]	; (8010738 <dwt_initialise+0x144>)
 801061a:	2200      	movs	r2, #0
 801061c:	629a      	str	r2, [r3, #40]	; 0x28
    dw1000local.cbRxOk = NULL;
 801061e:	4b46      	ldr	r3, [pc, #280]	; (8010738 <dwt_initialise+0x144>)
 8010620:	2200      	movs	r2, #0
 8010622:	62da      	str	r2, [r3, #44]	; 0x2c
    dw1000local.cbRxTo = NULL;
 8010624:	4b44      	ldr	r3, [pc, #272]	; (8010738 <dwt_initialise+0x144>)
 8010626:	2200      	movs	r2, #0
 8010628:	631a      	str	r2, [r3, #48]	; 0x30
    dw1000local.cbRxErr = NULL;
 801062a:	4b43      	ldr	r3, [pc, #268]	; (8010738 <dwt_initialise+0x144>)
 801062c:	2200      	movs	r2, #0
 801062e:	635a      	str	r2, [r3, #52]	; 0x34

    // Read and validate device ID return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8010630:	f000 f8ca 	bl	80107c8 <dwt_readdevid>
 8010634:	4603      	mov	r3, r0
 8010636:	4a41      	ldr	r2, [pc, #260]	; (801073c <dwt_initialise+0x148>)
 8010638:	4293      	cmp	r3, r2
 801063a:	d002      	beq.n	8010642 <dwt_initialise+0x4e>
    {
        return DWT_ERROR ;
 801063c:	f04f 33ff 	mov.w	r3, #4294967295
 8010640:	e076      	b.n	8010730 <dwt_initialise+0x13c>
    }

    // Make sure the device is completely reset before starting initialisation
    dwt_softreset();
 8010642:	f001 f937 	bl	80118b4 <dwt_softreset>

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8010646:	2000      	movs	r0, #0
 8010648:	f000 ff16 	bl	8011478 <_dwt_enableclocks>

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 801064c:	2204      	movs	r2, #4
 801064e:	2100      	movs	r1, #0
 8010650:	2024      	movs	r0, #36	; 0x24
 8010652:	f000 fc56 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Read OTP revision number
    otp_addr = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8010656:	201e      	movs	r0, #30
 8010658:	f000 fd3d 	bl	80110d6 <_dwt_otpread>
 801065c:	4603      	mov	r3, r0
 801065e:	82fb      	strh	r3, [r7, #22]
    dw1000local.otprev = (otp_addr >> 8) & 0xff;            // OTP revision is next byte
 8010660:	8afb      	ldrh	r3, [r7, #22]
 8010662:	0a1b      	lsrs	r3, r3, #8
 8010664:	b29b      	uxth	r3, r3
 8010666:	b2da      	uxtb	r2, r3
 8010668:	4b33      	ldr	r3, [pc, #204]	; (8010738 <dwt_initialise+0x144>)
 801066a:	725a      	strb	r2, [r3, #9]

    // Load LDO tune from OTP and kick it if there is a value actually programmed.
    ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 801066c:	2004      	movs	r0, #4
 801066e:	f000 fd32 	bl	80110d6 <_dwt_otpread>
 8010672:	6138      	str	r0, [r7, #16]
    if((ldo_tune & 0xFF) != 0)
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	b2db      	uxtb	r3, r3
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00b      	beq.n	8010694 <dwt_initialise+0xa0>
    {
        // Kick LDO tune
        dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDE kick bit
 801067c:	2202      	movs	r2, #2
 801067e:	2112      	movs	r1, #18
 8010680:	202d      	movs	r0, #45	; 0x2d
 8010682:	f000 fc3e 	bl	8010f02 <dwt_write8bitoffsetreg>
        dw1000local.sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8010686:	4b2c      	ldr	r3, [pc, #176]	; (8010738 <dwt_initialise+0x144>)
 8010688:	8b1b      	ldrh	r3, [r3, #24]
 801068a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801068e:	b29a      	uxth	r2, r3
 8010690:	4b29      	ldr	r3, [pc, #164]	; (8010738 <dwt_initialise+0x144>)
 8010692:	831a      	strh	r2, [r3, #24]
    }

    // Load Part and Lot ID from OTP
    dw1000local.partID = _dwt_otpread(PARTID_ADDRESS);
 8010694:	2006      	movs	r0, #6
 8010696:	f000 fd1e 	bl	80110d6 <_dwt_otpread>
 801069a:	4603      	mov	r3, r0
 801069c:	4a26      	ldr	r2, [pc, #152]	; (8010738 <dwt_initialise+0x144>)
 801069e:	6013      	str	r3, [r2, #0]
    dw1000local.lotID = _dwt_otpread(LOTID_ADDRESS);
 80106a0:	2007      	movs	r0, #7
 80106a2:	f000 fd18 	bl	80110d6 <_dwt_otpread>
 80106a6:	4603      	mov	r3, r0
 80106a8:	4a23      	ldr	r2, [pc, #140]	; (8010738 <dwt_initialise+0x144>)
 80106aa:	6053      	str	r3, [r2, #4]

    // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
    dw1000local.init_xtrim = otp_addr & 0x1F;
 80106ac:	8afb      	ldrh	r3, [r7, #22]
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	f003 031f 	and.w	r3, r3, #31
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	4b20      	ldr	r3, [pc, #128]	; (8010738 <dwt_initialise+0x144>)
 80106b8:	741a      	strb	r2, [r3, #16]
    if (!dw1000local.init_xtrim) // A value of 0 means that the crystal has not been trimmed
 80106ba:	4b1f      	ldr	r3, [pc, #124]	; (8010738 <dwt_initialise+0x144>)
 80106bc:	7c1b      	ldrb	r3, [r3, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d102      	bne.n	80106c8 <dwt_initialise+0xd4>
    {
        dw1000local.init_xtrim = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80106c2:	4b1d      	ldr	r3, [pc, #116]	; (8010738 <dwt_initialise+0x144>)
 80106c4:	2210      	movs	r2, #16
 80106c6:	741a      	strb	r2, [r3, #16]
    }
    // Configure XTAL trim
    dwt_setxtaltrim(dw1000local.init_xtrim);
 80106c8:	4b1b      	ldr	r3, [pc, #108]	; (8010738 <dwt_initialise+0x144>)
 80106ca:	7c1b      	ldrb	r3, [r3, #16]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f001 f915 	bl	80118fc <dwt_setxtaltrim>

    // Load leading edge detect code
    if(config & DWT_LOADUCODE)
 80106d2:	88fb      	ldrh	r3, [r7, #6]
 80106d4:	f003 0301 	and.w	r3, r3, #1
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d009      	beq.n	80106f0 <dwt_initialise+0xfc>
    {
        _dwt_loaducodefromrom();
 80106dc:	f000 fd48 	bl	8011170 <_dwt_loaducodefromrom>
        dw1000local.sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up
 80106e0:	4b15      	ldr	r3, [pc, #84]	; (8010738 <dwt_initialise+0x144>)
 80106e2:	8b1b      	ldrh	r3, [r3, #24]
 80106e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	4b13      	ldr	r3, [pc, #76]	; (8010738 <dwt_initialise+0x144>)
 80106ec:	831a      	strh	r2, [r3, #24]
 80106ee:	e00f      	b.n	8010710 <dwt_initialise+0x11c>
    }
    else // Should disable the LDERUN enable bit in 0x36, 0x4
    {
        uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80106f0:	2105      	movs	r1, #5
 80106f2:	2036      	movs	r0, #54	; 0x36
 80106f4:	f000 fbd5 	bl	8010ea2 <dwt_read16bitoffsetreg>
 80106f8:	4603      	mov	r3, r0
 80106fa:	81fb      	strh	r3, [r7, #14]
        rega &= 0xFDFF ; // Clear LDERUN bit
 80106fc:	89fb      	ldrh	r3, [r7, #14]
 80106fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010702:	81fb      	strh	r3, [r7, #14]
        dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8010704:	89fb      	ldrh	r3, [r7, #14]
 8010706:	461a      	mov	r2, r3
 8010708:	2105      	movs	r1, #5
 801070a:	2036      	movs	r0, #54	; 0x36
 801070c:	f000 fc0c 	bl	8010f28 <dwt_write16bitoffsetreg>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8010710:	2001      	movs	r0, #1
 8010712:	f000 feb1 	bl	8011478 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8010716:	2200      	movs	r2, #0
 8010718:	210a      	movs	r1, #10
 801071a:	202c      	movs	r0, #44	; 0x2c
 801071c:	f000 fbf1 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    dw1000local.sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8010720:	2100      	movs	r1, #0
 8010722:	2004      	movs	r0, #4
 8010724:	f000 fb96 	bl	8010e54 <dwt_read32bitoffsetreg>
 8010728:	4603      	mov	r3, r0
 801072a:	4a03      	ldr	r2, [pc, #12]	; (8010738 <dwt_initialise+0x144>)
 801072c:	6153      	str	r3, [r2, #20]

    return DWT_SUCCESS ;
 801072e:	2300      	movs	r3, #0

} // end dwt_initialise()
 8010730:	4618      	mov	r0, r3
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20003c10 	.word	0x20003c10
 801073c:	deca0130 	.word	0xdeca0130

08010740 <dwt_otprevision>:
 * output parameters
 *
 * returns the read OTP revision value
 */
uint8 dwt_otprevision(void)
{
 8010740:	b480      	push	{r7}
 8010742:	af00      	add	r7, sp, #0
    return dw1000local.otprev ;
 8010744:	4b02      	ldr	r3, [pc, #8]	; (8010750 <dwt_otprevision+0x10>)
 8010746:	7a5b      	ldrb	r3, [r3, #9]
}
 8010748:	4618      	mov	r0, r3
 801074a:	46bd      	mov	sp, r7
 801074c:	bc80      	pop	{r7}
 801074e:	4770      	bx	lr
 8010750:	20003c10 	.word	0x20003c10

08010754 <dwt_setlnapamode>:
 * output parameters
 *
 * no return value
 */
void dwt_setlnapamode(int lna, int pa)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
    uint32 gpio_mode = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 801075e:	2100      	movs	r1, #0
 8010760:	2026      	movs	r0, #38	; 0x26
 8010762:	f000 fb77 	bl	8010e54 <dwt_read32bitoffsetreg>
 8010766:	60f8      	str	r0, [r7, #12]
    gpio_mode &= ~(GPIO_MSGP4_MASK | GPIO_MSGP5_MASK | GPIO_MSGP6_MASK);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f423 237c 	bic.w	r3, r3, #1032192	; 0xfc000
 801076e:	60fb      	str	r3, [r7, #12]
    if (lna)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d003      	beq.n	801077e <dwt_setlnapamode+0x2a>
    {
        gpio_mode |= GPIO_PIN6_EXTRXE;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801077c:	60fb      	str	r3, [r7, #12]
    }
    if (pa)
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d003      	beq.n	801078c <dwt_setlnapamode+0x38>
    {
        gpio_mode |= (GPIO_PIN5_EXTTXE | GPIO_PIN4_EXTPA);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f443 33a0 	orr.w	r3, r3, #81920	; 0x14000
 801078a:	60fb      	str	r3, [r7, #12]
    }
    dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, gpio_mode);
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	2100      	movs	r1, #0
 8010790:	2026      	movs	r0, #38	; 0x26
 8010792:	f000 fbe5 	bl	8010f60 <dwt_write32bitoffsetreg>
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <dwt_getpartid>:
 * output parameters
 *
 * returns the 32 bit part ID value as programmed in the factory
 */
uint32 dwt_getpartid(void)
{
 80107a0:	b480      	push	{r7}
 80107a2:	af00      	add	r7, sp, #0
    return dw1000local.partID;
 80107a4:	4b02      	ldr	r3, [pc, #8]	; (80107b0 <dwt_getpartid+0x10>)
 80107a6:	681b      	ldr	r3, [r3, #0]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bc80      	pop	{r7}
 80107ae:	4770      	bx	lr
 80107b0:	20003c10 	.word	0x20003c10

080107b4 <dwt_getlotid>:
 * output parameters
 *
 * returns the 32 bit lot ID value as programmed in the factory
 */
uint32 dwt_getlotid(void)
{
 80107b4:	b480      	push	{r7}
 80107b6:	af00      	add	r7, sp, #0
    return dw1000local.lotID;
 80107b8:	4b02      	ldr	r3, [pc, #8]	; (80107c4 <dwt_getlotid+0x10>)
 80107ba:	685b      	ldr	r3, [r3, #4]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	46bd      	mov	sp, r7
 80107c0:	bc80      	pop	{r7}
 80107c2:	4770      	bx	lr
 80107c4:	20003c10 	.word	0x20003c10

080107c8 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80107cc:	2100      	movs	r1, #0
 80107ce:	2000      	movs	r0, #0
 80107d0:	f000 fb40 	bl	8010e54 <dwt_read32bitoffsetreg>
 80107d4:	4603      	mov	r3, r0
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	bd80      	pop	{r7, pc}

080107da <dwt_configuretxrf>:
 * output parameters
 *
 * no return value
 */
void dwt_configuretxrf(dwt_txconfig_t *config)
{
 80107da:	b580      	push	{r7, lr}
 80107dc:	b082      	sub	sp, #8
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]

    // Configure RF TX PG_DELAY
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	210b      	movs	r1, #11
 80107ea:	202a      	movs	r0, #42	; 0x2a
 80107ec:	f000 fb89 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Configure TX power
    dwt_write32bitreg(TX_POWER_ID, config->power);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	461a      	mov	r2, r3
 80107f6:	2100      	movs	r1, #0
 80107f8:	201e      	movs	r0, #30
 80107fa:	f000 fbb1 	bl	8010f60 <dwt_write32bitoffsetreg>

}
 80107fe:	bf00      	nop
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
	...

08010808 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	795b      	ldrb	r3, [r3, #5]
 8010822:	461a      	mov	r2, r3
 8010824:	4b9b      	ldr	r3, [pc, #620]	; (8010a94 <dwt_configure+0x28c>)
 8010826:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801082a:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	785b      	ldrb	r3, [r3, #1]
 8010830:	3b01      	subs	r3, #1
 8010832:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8010834:	7cfb      	ldrb	r3, [r7, #19]
 8010836:	2b04      	cmp	r3, #4
 8010838:	d002      	beq.n	8010840 <dwt_configure+0x38>
 801083a:	7cfb      	ldrb	r3, [r7, #19]
 801083c:	2b07      	cmp	r3, #7
 801083e:	d101      	bne.n	8010844 <dwt_configure+0x3c>
 8010840:	2301      	movs	r3, #1
 8010842:	e000      	b.n	8010846 <dwt_configure+0x3e>
 8010844:	2300      	movs	r3, #0
 8010846:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	79db      	ldrb	r3, [r3, #7]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d109      	bne.n	8010864 <dwt_configure+0x5c>
    {
        dw1000local.sysCFGreg |= SYS_CFG_RXM110K ;
 8010850:	4b91      	ldr	r3, [pc, #580]	; (8010a98 <dwt_configure+0x290>)
 8010852:	695b      	ldr	r3, [r3, #20]
 8010854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010858:	4a8f      	ldr	r2, [pc, #572]	; (8010a98 <dwt_configure+0x290>)
 801085a:	6153      	str	r3, [r2, #20]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 801085c:	8abb      	ldrh	r3, [r7, #20]
 801085e:	08db      	lsrs	r3, r3, #3
 8010860:	82bb      	strh	r3, [r7, #20]
 8010862:	e005      	b.n	8010870 <dwt_configure+0x68>
    }
    else
    {
        dw1000local.sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8010864:	4b8c      	ldr	r3, [pc, #560]	; (8010a98 <dwt_configure+0x290>)
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801086c:	4a8a      	ldr	r2, [pc, #552]	; (8010a98 <dwt_configure+0x290>)
 801086e:	6153      	str	r3, [r2, #20]
    }

    dw1000local.longFrames = config->phrMode ;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	7a1a      	ldrb	r2, [r3, #8]
 8010874:	4b88      	ldr	r3, [pc, #544]	; (8010a98 <dwt_configure+0x290>)
 8010876:	721a      	strb	r2, [r3, #8]

    dw1000local.sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8010878:	4b87      	ldr	r3, [pc, #540]	; (8010a98 <dwt_configure+0x290>)
 801087a:	695b      	ldr	r3, [r3, #20]
 801087c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8010880:	4a85      	ldr	r2, [pc, #532]	; (8010a98 <dwt_configure+0x290>)
 8010882:	6153      	str	r3, [r2, #20]
    dw1000local.sysCFGreg |= (SYS_CFG_PHR_MODE_11 & (config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8010884:	4b84      	ldr	r3, [pc, #528]	; (8010a98 <dwt_configure+0x290>)
 8010886:	695a      	ldr	r2, [r3, #20]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	7a1b      	ldrb	r3, [r3, #8]
 801088c:	041b      	lsls	r3, r3, #16
 801088e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010892:	4313      	orrs	r3, r2
 8010894:	4a80      	ldr	r2, [pc, #512]	; (8010a98 <dwt_configure+0x290>)
 8010896:	6153      	str	r3, [r2, #20]
    
    dwt_write32bitreg(SYS_CFG_ID,dw1000local.sysCFGreg) ;
 8010898:	4b7f      	ldr	r3, [pc, #508]	; (8010a98 <dwt_configure+0x290>)
 801089a:	695b      	ldr	r3, [r3, #20]
 801089c:	461a      	mov	r2, r3
 801089e:	2100      	movs	r1, #0
 80108a0:	2004      	movs	r0, #4
 80108a2:	f000 fb5d 	bl	8010f60 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80108a6:	8abb      	ldrh	r3, [r7, #20]
 80108a8:	461a      	mov	r2, r3
 80108aa:	f642 0104 	movw	r1, #10244	; 0x2804
 80108ae:	202e      	movs	r0, #46	; 0x2e
 80108b0:	f000 fb3a 	bl	8010f28 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80108b4:	7cbb      	ldrb	r3, [r7, #18]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f000 fc3a 	bl	8011130 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80108bc:	7cfb      	ldrb	r3, [r7, #19]
 80108be:	4a77      	ldr	r2, [pc, #476]	; (8010a9c <dwt_configure+0x294>)
 80108c0:	5cd3      	ldrb	r3, [r2, r3]
 80108c2:	461a      	mov	r2, r3
 80108c4:	4b76      	ldr	r3, [pc, #472]	; (8010aa0 <dwt_configure+0x298>)
 80108c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ca:	461a      	mov	r2, r3
 80108cc:	2107      	movs	r1, #7
 80108ce:	202b      	movs	r0, #43	; 0x2b
 80108d0:	f000 fb46 	bl	8010f60 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 80108d4:	7cfb      	ldrb	r3, [r7, #19]
 80108d6:	4a71      	ldr	r2, [pc, #452]	; (8010a9c <dwt_configure+0x294>)
 80108d8:	5cd3      	ldrb	r3, [r2, r3]
 80108da:	461a      	mov	r2, r3
 80108dc:	4b71      	ldr	r3, [pc, #452]	; (8010aa4 <dwt_configure+0x29c>)
 80108de:	5c9b      	ldrb	r3, [r3, r2]
 80108e0:	461a      	mov	r2, r3
 80108e2:	210b      	movs	r1, #11
 80108e4:	202b      	movs	r0, #43	; 0x2b
 80108e6:	f000 fb0c 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80108ea:	7c7b      	ldrb	r3, [r7, #17]
 80108ec:	4a6e      	ldr	r2, [pc, #440]	; (8010aa8 <dwt_configure+0x2a0>)
 80108ee:	5cd3      	ldrb	r3, [r2, r3]
 80108f0:	461a      	mov	r2, r3
 80108f2:	210b      	movs	r1, #11
 80108f4:	2028      	movs	r0, #40	; 0x28
 80108f6:	f000 fb04 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80108fa:	7cfb      	ldrb	r3, [r7, #19]
 80108fc:	4a67      	ldr	r2, [pc, #412]	; (8010a9c <dwt_configure+0x294>)
 80108fe:	5cd3      	ldrb	r3, [r2, r3]
 8010900:	461a      	mov	r2, r3
 8010902:	4b6a      	ldr	r3, [pc, #424]	; (8010aac <dwt_configure+0x2a4>)
 8010904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010908:	461a      	mov	r2, r3
 801090a:	210c      	movs	r1, #12
 801090c:	2028      	movs	r0, #40	; 0x28
 801090e:	f000 fb27 	bl	8010f60 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	79db      	ldrb	r3, [r3, #7]
 8010916:	4618      	mov	r0, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	799b      	ldrb	r3, [r3, #6]
 801091c:	4619      	mov	r1, r3
 801091e:	4a64      	ldr	r2, [pc, #400]	; (8010ab0 <dwt_configure+0x2a8>)
 8010920:	0043      	lsls	r3, r0, #1
 8010922:	440b      	add	r3, r1
 8010924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010928:	461a      	mov	r2, r3
 801092a:	2102      	movs	r1, #2
 801092c:	2027      	movs	r0, #39	; 0x27
 801092e:	f000 fafb 	bl	8010f28 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8010932:	7cbb      	ldrb	r3, [r7, #18]
 8010934:	4a5f      	ldr	r2, [pc, #380]	; (8010ab4 <dwt_configure+0x2ac>)
 8010936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801093a:	461a      	mov	r2, r3
 801093c:	2104      	movs	r1, #4
 801093e:	2027      	movs	r0, #39	; 0x27
 8010940:	f000 faf2 	bl	8010f28 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	79db      	ldrb	r3, [r3, #7]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d105      	bne.n	8010958 <dwt_configure+0x150>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 801094c:	2264      	movs	r2, #100	; 0x64
 801094e:	2106      	movs	r1, #6
 8010950:	2027      	movs	r0, #39	; 0x27
 8010952:	f000 fae9 	bl	8010f28 <dwt_write16bitoffsetreg>
 8010956:	e018      	b.n	801098a <dwt_configure+0x182>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	789b      	ldrb	r3, [r3, #2]
 801095c:	2b04      	cmp	r3, #4
 801095e:	d10a      	bne.n	8010976 <dwt_configure+0x16e>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8010960:	2210      	movs	r2, #16
 8010962:	2106      	movs	r1, #6
 8010964:	2027      	movs	r0, #39	; 0x27
 8010966:	f000 fadf 	bl	8010f28 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 801096a:	2210      	movs	r2, #16
 801096c:	2126      	movs	r1, #38	; 0x26
 801096e:	2027      	movs	r0, #39	; 0x27
 8010970:	f000 fac7 	bl	8010f02 <dwt_write8bitoffsetreg>
 8010974:	e009      	b.n	801098a <dwt_configure+0x182>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8010976:	2220      	movs	r2, #32
 8010978:	2106      	movs	r1, #6
 801097a:	2027      	movs	r0, #39	; 0x27
 801097c:	f000 fad4 	bl	8010f28 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8010980:	2228      	movs	r2, #40	; 0x28
 8010982:	2126      	movs	r1, #38	; 0x26
 8010984:	2027      	movs	r0, #39	; 0x27
 8010986:	f000 fabc 	bl	8010f02 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 801098a:	7cbb      	ldrb	r3, [r7, #18]
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	78d2      	ldrb	r2, [r2, #3]
 8010990:	4611      	mov	r1, r2
 8010992:	4a49      	ldr	r2, [pc, #292]	; (8010ab8 <dwt_configure+0x2b0>)
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	440b      	add	r3, r1
 8010998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801099c:	461a      	mov	r2, r3
 801099e:	2108      	movs	r1, #8
 80109a0:	2027      	movs	r0, #39	; 0x27
 80109a2:	f000 fadd 	bl	8010f60 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	895b      	ldrh	r3, [r3, #10]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d103      	bne.n	80109b6 <dwt_configure+0x1ae>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f241 0241 	movw	r2, #4161	; 0x1041
 80109b4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	895b      	ldrh	r3, [r3, #10]
 80109ba:	461a      	mov	r2, r3
 80109bc:	2120      	movs	r1, #32
 80109be:	2027      	movs	r0, #39	; 0x27
 80109c0:	f000 fab2 	bl	8010f28 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80109c4:	4b3d      	ldr	r3, [pc, #244]	; (8010abc <dwt_configure+0x2b4>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	461a      	mov	r2, r3
 80109ca:	210c      	movs	r1, #12
 80109cc:	2023      	movs	r0, #35	; 0x23
 80109ce:	f000 fac7 	bl	8010f60 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80109d2:	7cbb      	ldrb	r3, [r7, #18]
 80109d4:	4a39      	ldr	r2, [pc, #228]	; (8010abc <dwt_configure+0x2b4>)
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	4413      	add	r3, r2
 80109da:	889b      	ldrh	r3, [r3, #4]
 80109dc:	461a      	mov	r2, r3
 80109de:	2104      	movs	r1, #4
 80109e0:	2023      	movs	r0, #35	; 0x23
 80109e2:	f000 faa1 	bl	8010f28 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	799b      	ldrb	r3, [r3, #6]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00d      	beq.n	8010a0a <dwt_configure+0x202>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	79db      	ldrb	r3, [r3, #7]
 80109f2:	461a      	mov	r2, r3
 80109f4:	4b32      	ldr	r3, [pc, #200]	; (8010ac0 <dwt_configure+0x2b8>)
 80109f6:	5c9b      	ldrb	r3, [r3, r2]
 80109f8:	461a      	mov	r2, r3
 80109fa:	2100      	movs	r1, #0
 80109fc:	2021      	movs	r0, #33	; 0x21
 80109fe:	f000 fa80 	bl	8010f02 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8010a02:	2303      	movs	r3, #3
 8010a04:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8010a06:	2301      	movs	r3, #1
 8010a08:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8010a0a:	7cfb      	ldrb	r3, [r7, #19]
 8010a0c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8010a10:	7cfb      	ldrb	r3, [r7, #19]
 8010a12:	011b      	lsls	r3, r3, #4
 8010a14:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8010a16:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	785b      	ldrb	r3, [r3, #1]
 8010a1c:	049b      	lsls	r3, r3, #18
 8010a1e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8010a22:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8010a24:	7dfb      	ldrb	r3, [r7, #23]
 8010a26:	051b      	lsls	r3, r3, #20
 8010a28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & (config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8010a2c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8010a2e:	7dbb      	ldrb	r3, [r7, #22]
 8010a30:	045b      	lsls	r3, r3, #17
 8010a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8010a36:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & (config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	791b      	ldrb	r3, [r3, #4]
 8010a3c:	059b      	lsls	r3, r3, #22
 8010a3e:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & (useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8010a42:	4313      	orrs	r3, r2
              (CHAN_CTRL_RX_PCOD_MASK & (config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	7952      	ldrb	r2, [r2, #5]
 8010a48:	06d2      	lsls	r2, r2, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8010a4e:	68fa      	ldr	r2, [r7, #12]
 8010a50:	2100      	movs	r1, #0
 8010a52:	201f      	movs	r0, #31
 8010a54:	f000 fa84 	bl	8010f60 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    dw1000local.txFCTRL = ((config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | (config->dataRate << TX_FCTRL_TXBR_SHFT);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	789a      	ldrb	r2, [r3, #2]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	785b      	ldrb	r3, [r3, #1]
 8010a60:	4313      	orrs	r3, r2
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	041a      	lsls	r2, r3, #16
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	79db      	ldrb	r3, [r3, #7]
 8010a6a:	035b      	lsls	r3, r3, #13
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	461a      	mov	r2, r3
 8010a70:	4b09      	ldr	r3, [pc, #36]	; (8010a98 <dwt_configure+0x290>)
 8010a72:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, dw1000local.txFCTRL);
 8010a74:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <dwt_configure+0x290>)
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	461a      	mov	r2, r3
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	2008      	movs	r0, #8
 8010a7e:	f000 fa6f 	bl	8010f60 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8010a82:	2242      	movs	r2, #66	; 0x42
 8010a84:	2100      	movs	r1, #0
 8010a86:	200d      	movs	r0, #13
 8010a88:	f000 fa3b 	bl	8010f02 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8010a8c:	bf00      	nop
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	08017d30 	.word	0x08017d30
 8010a98:	20003c10 	.word	0x20003c10
 8010a9c:	08017cb0 	.word	0x08017cb0
 8010aa0:	08017cd0 	.word	0x08017cd0
 8010aa4:	08017ce8 	.word	0x08017ce8
 8010aa8:	08017cf0 	.word	0x08017cf0
 8010aac:	08017cb8 	.word	0x08017cb8
 8010ab0:	08017d00 	.word	0x08017d00
 8010ab4:	08017d0c 	.word	0x08017d0c
 8010ab8:	08017d10 	.word	0x08017d10
 8010abc:	08017cf4 	.word	0x08017cf4
 8010ac0:	08017cfc 	.word	0x08017cfc

08010ac4 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8010ace:	88fb      	ldrh	r3, [r7, #6]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	f641 0104 	movw	r1, #6148	; 0x1804
 8010ad6:	202e      	movs	r0, #46	; 0x2e
 8010ad8:	f000 fa26 	bl	8010f28 <dwt_write16bitoffsetreg>
}
 8010adc:	bf00      	nop
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	4603      	mov	r3, r0
 8010aec:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8010aee:	88fb      	ldrh	r3, [r7, #6]
 8010af0:	461a      	mov	r2, r3
 8010af2:	2100      	movs	r1, #0
 8010af4:	2018      	movs	r0, #24
 8010af6:	f000 fa17 	bl	8010f28 <dwt_write16bitoffsetreg>
}
 8010afa:	bf00      	nop
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b082      	sub	sp, #8
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	4603      	mov	r3, r0
 8010b0a:	6039      	str	r1, [r7, #0]
 8010b0c:	80fb      	strh	r3, [r7, #6]
 8010b0e:	4613      	mov	r3, r2
 8010b10:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((dw1000local.longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8010b12:	88ba      	ldrh	r2, [r7, #4]
 8010b14:	88fb      	ldrh	r3, [r7, #6]
 8010b16:	4413      	add	r3, r2
 8010b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b1c:	dc09      	bgt.n	8010b32 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8010b1e:	88fb      	ldrh	r3, [r7, #6]
 8010b20:	3b02      	subs	r3, #2
 8010b22:	461a      	mov	r2, r3
 8010b24:	88b9      	ldrh	r1, [r7, #4]
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	2009      	movs	r0, #9
 8010b2a:	f000 f8de 	bl	8010cea <dwt_writetodevice>
        return DWT_SUCCESS;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e001      	b.n	8010b36 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8010b32:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8010b36:	4618      	mov	r0, r3
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
	...

08010b40 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	4603      	mov	r3, r0
 8010b48:	603a      	str	r2, [r7, #0]
 8010b4a:	80fb      	strh	r3, [r7, #6]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	80bb      	strh	r3, [r7, #4]
    assert((dw1000local.longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
#endif

    // Write the frame length to the TX frame control register
    // dw1000local.txFCTRL has kept configured bit rate information
    uint32 reg32 = dw1000local.txFCTRL | txFrameLength | (txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | (ranging << TX_FCTRL_TR_SHFT);
 8010b50:	4b09      	ldr	r3, [pc, #36]	; (8010b78 <dwt_writetxfctrl+0x38>)
 8010b52:	68da      	ldr	r2, [r3, #12]
 8010b54:	88fb      	ldrh	r3, [r7, #6]
 8010b56:	4313      	orrs	r3, r2
 8010b58:	88ba      	ldrh	r2, [r7, #4]
 8010b5a:	0592      	lsls	r2, r2, #22
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	683a      	ldr	r2, [r7, #0]
 8010b60:	03d2      	lsls	r2, r2, #15
 8010b62:	4313      	orrs	r3, r2
 8010b64:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	2100      	movs	r1, #0
 8010b6a:	2008      	movs	r0, #8
 8010b6c:	f000 f9f8 	bl	8010f60 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8010b70:	bf00      	nop
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	20003c10 	.word	0x20003c10

08010b7c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	807b      	strh	r3, [r7, #2]
 8010b88:	4613      	mov	r3, r2
 8010b8a:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8010b8c:	887a      	ldrh	r2, [r7, #2]
 8010b8e:	8839      	ldrh	r1, [r7, #0]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2011      	movs	r0, #17
 8010b94:	f000 f905 	bl	8010da2 <dwt_readfromdevice>
}
 8010b98:	bf00      	nop
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <dwt_readdiagnostics>:
 * output parameters
 *
 * no return value
 */
void dwt_readdiagnostics(dwt_rxdiag_t *diagnostics)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
    // Read the HW FP index
    diagnostics->firstPath = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET);
 8010ba8:	2105      	movs	r1, #5
 8010baa:	2015      	movs	r0, #21
 8010bac:	f000 f979 	bl	8010ea2 <dwt_read16bitoffsetreg>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	81da      	strh	r2, [r3, #14]

    // LDE diagnostic data
    diagnostics->maxNoise = dwt_read16bitoffsetreg(LDE_IF_ID, LDE_THRESH_OFFSET);
 8010bb8:	2100      	movs	r1, #0
 8010bba:	202e      	movs	r0, #46	; 0x2e
 8010bbc:	f000 f971 	bl	8010ea2 <dwt_read16bitoffsetreg>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	801a      	strh	r2, [r3, #0]

    // Read all 8 bytes in one SPI transaction
    dwt_readfromdevice(RX_FQUAL_ID, 0x0, 8, (uint8*)&diagnostics->stdNoise);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3304      	adds	r3, #4
 8010bcc:	2208      	movs	r2, #8
 8010bce:	2100      	movs	r1, #0
 8010bd0:	2012      	movs	r0, #18
 8010bd2:	f000 f8e6 	bl	8010da2 <dwt_readfromdevice>

    diagnostics->firstPathAmp1 = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_AMPL1_OFFSET);
 8010bd6:	2107      	movs	r1, #7
 8010bd8:	2015      	movs	r0, #21
 8010bda:	f000 f962 	bl	8010ea2 <dwt_read16bitoffsetreg>
 8010bde:	4603      	mov	r3, r0
 8010be0:	461a      	mov	r2, r3
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	805a      	strh	r2, [r3, #2]

    diagnostics->rxPreamCount = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT  ;
 8010be6:	2100      	movs	r1, #0
 8010be8:	2010      	movs	r0, #16
 8010bea:	f000 f933 	bl	8010e54 <dwt_read32bitoffsetreg>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	0d1b      	lsrs	r3, r3, #20
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	819a      	strh	r2, [r3, #12]
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2205      	movs	r2, #5
 8010c12:	2100      	movs	r1, #0
 8010c14:	2017      	movs	r0, #23
 8010c16:	f000 f8c4 	bl	8010da2 <dwt_readfromdevice>
}
 8010c1a:	bf00      	nop
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b082      	sub	sp, #8
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2205      	movs	r2, #5
 8010c2e:	2100      	movs	r1, #0
 8010c30:	2015      	movs	r0, #21
 8010c32:	f000 f8b6 	bl	8010da2 <dwt_readfromdevice>
}
 8010c36:	bf00      	nop
 8010c38:	3708      	adds	r7, #8
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <dwt_readsystime>:
 * @param timestamp - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readsystime(uint8 * timestamp)
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b082      	sub	sp, #8
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN, timestamp) ;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2205      	movs	r2, #5
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	2006      	movs	r0, #6
 8010c4e:	f000 f8a8 	bl	8010da2 <dwt_readfromdevice>
}
 8010c52:	bf00      	nop
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <dwt_getdt>:
 * @param t2 - the second dwt timestamp which occurs after t1
 *
 * returns difference between the timestamps
 */
uint64 dwt_getdt(uint64 t1, uint64 t2)
{
 8010c5a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010c5e:	b086      	sub	sp, #24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8010c66:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//dwt systime timestamps are 40 bits
	t1 &= 0x00FFFFFFFFFF;//40 bit mask
 8010c6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c72:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8010c76:	ea02 0600 	and.w	r6, r2, r0
 8010c7a:	603e      	str	r6, [r7, #0]
 8010c7c:	400b      	ands	r3, r1
 8010c7e:	607b      	str	r3, [r7, #4]
 8010c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 &= 0x00FFFFFFFFFF;//40 bit mask
 8010c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c90:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8010c94:	ea02 0a00 	and.w	sl, r2, r0
 8010c98:	ea03 0b01 	and.w	fp, r3, r1
 8010c9c:	e9c7 ab02 	strd	sl, fp, [r7, #8]

	if(t2 >= t1)
 8010ca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ca8:	4299      	cmp	r1, r3
 8010caa:	bf08      	it	eq
 8010cac:	4290      	cmpeq	r0, r2
 8010cae:	d307      	bcc.n	8010cc0 <dwt_getdt+0x66>
	{
		return t2 - t1;
 8010cb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010cb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010cb8:	1a84      	subs	r4, r0, r2
 8010cba:	eb61 0503 	sbc.w	r5, r1, r3
 8010cbe:	e00b      	b.n	8010cd8 <dwt_getdt+0x7e>
	}
	else
	{
		//handle timestamp roleover
		return (uint64)0xFFFFFFFFFF - t1 + t2;
 8010cc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010cc8:	ebb0 0802 	subs.w	r8, r0, r2
 8010ccc:	eb61 0903 	sbc.w	r9, r1, r3
 8010cd0:	f118 34ff 	adds.w	r4, r8, #4294967295
 8010cd4:	f149 05ff 	adc.w	r5, r9, #255	; 0xff
 8010cd8:	4622      	mov	r2, r4
 8010cda:	462b      	mov	r3, r5
	}
}
 8010cdc:	4610      	mov	r0, r2
 8010cde:	4619      	mov	r1, r3
 8010ce0:	3718      	adds	r7, #24
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010ce8:	4770      	bx	lr

08010cea <dwt_writetodevice>:
    uint16      recordNumber,
    uint16      index,
    uint32      length,
    const uint8 *buffer
)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b086      	sub	sp, #24
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	60ba      	str	r2, [r7, #8]
 8010cf2:	607b      	str	r3, [r7, #4]
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	81fb      	strh	r3, [r7, #14]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8010d00:	89bb      	ldrh	r3, [r7, #12]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10d      	bne.n	8010d22 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8010d06:	89fb      	ldrh	r3, [r7, #14]
 8010d08:	b2da      	uxtb	r2, r3
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	1c59      	adds	r1, r3, #1
 8010d0e:	6179      	str	r1, [r7, #20]
 8010d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010d14:	b2d2      	uxtb	r2, r2
 8010d16:	f107 0118 	add.w	r1, r7, #24
 8010d1a:	440b      	add	r3, r1
 8010d1c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010d20:	e033      	b.n	8010d8a <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8010d22:	89fb      	ldrh	r3, [r7, #14]
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	1c59      	adds	r1, r3, #1
 8010d2a:	6179      	str	r1, [r7, #20]
 8010d2c:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8010d30:	b2d2      	uxtb	r2, r2
 8010d32:	f107 0118 	add.w	r1, r7, #24
 8010d36:	440b      	add	r3, r1
 8010d38:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8010d3c:	89bb      	ldrh	r3, [r7, #12]
 8010d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8010d40:	d80a      	bhi.n	8010d58 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	617a      	str	r2, [r7, #20]
 8010d48:	89ba      	ldrh	r2, [r7, #12]
 8010d4a:	b2d2      	uxtb	r2, r2
 8010d4c:	f107 0118 	add.w	r1, r7, #24
 8010d50:	440b      	add	r3, r1
 8010d52:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010d56:	e018      	b.n	8010d8a <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8010d58:	89bb      	ldrh	r3, [r7, #12]
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	1c59      	adds	r1, r3, #1
 8010d60:	6179      	str	r1, [r7, #20]
 8010d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010d66:	b2d2      	uxtb	r2, r2
 8010d68:	f107 0118 	add.w	r1, r7, #24
 8010d6c:	440b      	add	r3, r1
 8010d6e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8010d72:	89bb      	ldrh	r3, [r7, #12]
 8010d74:	09db      	lsrs	r3, r3, #7
 8010d76:	b299      	uxth	r1, r3
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	1c5a      	adds	r2, r3, #1
 8010d7c:	617a      	str	r2, [r7, #20]
 8010d7e:	b2ca      	uxtb	r2, r1
 8010d80:	f107 0118 	add.w	r1, r7, #24
 8010d84:	440b      	add	r3, r1
 8010d86:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	b298      	uxth	r0, r3
 8010d8e:	f107 0110 	add.w	r1, r7, #16
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	f000 fe1f 	bl	80119d8 <writetospi>
} // end dwt_writetodevice()
 8010d9a:	bf00      	nop
 8010d9c:	3718      	adds	r7, #24
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32  length,
    uint8   *buffer
)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b086      	sub	sp, #24
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	60ba      	str	r2, [r7, #8]
 8010daa:	607b      	str	r3, [r7, #4]
 8010dac:	4603      	mov	r3, r0
 8010dae:	81fb      	strh	r3, [r7, #14]
 8010db0:	460b      	mov	r3, r1
 8010db2:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8010db4:	2300      	movs	r3, #0
 8010db6:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8010db8:	89bb      	ldrh	r3, [r7, #12]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d10a      	bne.n	8010dd4 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	1c5a      	adds	r2, r3, #1
 8010dc2:	617a      	str	r2, [r7, #20]
 8010dc4:	89fa      	ldrh	r2, [r7, #14]
 8010dc6:	b2d2      	uxtb	r2, r2
 8010dc8:	f107 0118 	add.w	r1, r7, #24
 8010dcc:	440b      	add	r3, r1
 8010dce:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010dd2:	e033      	b.n	8010e3c <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8010dd4:	89fb      	ldrh	r3, [r7, #14]
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	1c59      	adds	r1, r3, #1
 8010ddc:	6179      	str	r1, [r7, #20]
 8010dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010de2:	b2d2      	uxtb	r2, r2
 8010de4:	f107 0118 	add.w	r1, r7, #24
 8010de8:	440b      	add	r3, r1
 8010dea:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8010dee:	89bb      	ldrh	r3, [r7, #12]
 8010df0:	2b7f      	cmp	r3, #127	; 0x7f
 8010df2:	d80a      	bhi.n	8010e0a <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	1c5a      	adds	r2, r3, #1
 8010df8:	617a      	str	r2, [r7, #20]
 8010dfa:	89ba      	ldrh	r2, [r7, #12]
 8010dfc:	b2d2      	uxtb	r2, r2
 8010dfe:	f107 0118 	add.w	r1, r7, #24
 8010e02:	440b      	add	r3, r1
 8010e04:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010e08:	e018      	b.n	8010e3c <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8010e0a:	89bb      	ldrh	r3, [r7, #12]
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	1c59      	adds	r1, r3, #1
 8010e12:	6179      	str	r1, [r7, #20]
 8010e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010e18:	b2d2      	uxtb	r2, r2
 8010e1a:	f107 0118 	add.w	r1, r7, #24
 8010e1e:	440b      	add	r3, r1
 8010e20:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	09db      	lsrs	r3, r3, #7
 8010e28:	b299      	uxth	r1, r3
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	1c5a      	adds	r2, r3, #1
 8010e2e:	617a      	str	r2, [r7, #20]
 8010e30:	b2ca      	uxtb	r2, r1
 8010e32:	f107 0118 	add.w	r1, r7, #24
 8010e36:	440b      	add	r3, r1
 8010e38:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	b298      	uxth	r0, r3
 8010e40:	f107 0110 	add.w	r1, r7, #16
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	68ba      	ldr	r2, [r7, #8]
 8010e48:	f000 fe0e 	bl	8011a68 <readfromspi>
} // end dwt_readfromdevice()
 8010e4c:	bf00      	nop
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID,int regOffset)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b086      	sub	sp, #24
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	b298      	uxth	r0, r3
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	b299      	uxth	r1, r3
 8010e6a:	f107 030c 	add.w	r3, r7, #12
 8010e6e:	2204      	movs	r2, #4
 8010e70:	f7ff ff97 	bl	8010da2 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8010e74:	2303      	movs	r3, #3
 8010e76:	613b      	str	r3, [r7, #16]
 8010e78:	e00b      	b.n	8010e92 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	021b      	lsls	r3, r3, #8
 8010e7e:	f107 010c 	add.w	r1, r7, #12
 8010e82:	693a      	ldr	r2, [r7, #16]
 8010e84:	440a      	add	r2, r1
 8010e86:	7812      	ldrb	r2, [r2, #0]
 8010e88:	4413      	add	r3, r2
 8010e8a:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	613b      	str	r3, [r7, #16]
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	daf0      	bge.n	8010e7a <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8010e98:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3718      	adds	r7, #24
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID,int regOffset)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b084      	sub	sp, #16
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8010eac:	2300      	movs	r3, #0
 8010eae:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	b298      	uxth	r0, r3
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	b299      	uxth	r1, r3
 8010eb8:	f107 030c 	add.w	r3, r7, #12
 8010ebc:	2202      	movs	r2, #2
 8010ebe:	f7ff ff70 	bl	8010da2 <dwt_readfromdevice>

    regval = (buffer[1] << 8) + buffer[0] ;
 8010ec2:	7b7b      	ldrb	r3, [r7, #13]
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	021b      	lsls	r3, r3, #8
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	7b3b      	ldrb	r3, [r7, #12]
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	4413      	add	r3, r2
 8010ed0:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8010ed2:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	b298      	uxth	r0, r3
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	b299      	uxth	r1, r3
 8010eee:	f107 030f 	add.w	r3, r7, #15
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f7ff ff55 	bl	8010da2 <dwt_readfromdevice>

    return regval ;
 8010ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b084      	sub	sp, #16
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	60f8      	str	r0, [r7, #12]
 8010f0a:	60b9      	str	r1, [r7, #8]
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	b298      	uxth	r0, r3
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	b299      	uxth	r1, r3
 8010f18:	1dfb      	adds	r3, r7, #7
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	f7ff fee5 	bl	8010cea <dwt_writetodevice>
}
 8010f20:	bf00      	nop
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID,int regOffset,uint16 regval)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	4613      	mov	r3, r2
 8010f34:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8010f36:	88fb      	ldrh	r3, [r7, #6]
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8010f3c:	88fb      	ldrh	r3, [r7, #6]
 8010f3e:	0a1b      	lsrs	r3, r3, #8
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	b298      	uxth	r0, r3
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	b299      	uxth	r1, r3
 8010f4e:	f107 0314 	add.w	r3, r7, #20
 8010f52:	2202      	movs	r2, #2
 8010f54:	f7ff fec9 	bl	8010cea <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8010f58:	bf00      	nop
 8010f5a:	3718      	adds	r7, #24
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID,int regOffset,uint32 regval)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	617b      	str	r3, [r7, #20]
 8010f70:	e00d      	b.n	8010f8e <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	b2d9      	uxtb	r1, r3
 8010f76:	f107 0210 	add.w	r2, r7, #16
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	4413      	add	r3, r2
 8010f7e:	460a      	mov	r2, r1
 8010f80:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	0a1b      	lsrs	r3, r3, #8
 8010f86:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	617b      	str	r3, [r7, #20]
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	2b03      	cmp	r3, #3
 8010f92:	ddee      	ble.n	8010f72 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	b298      	uxth	r0, r3
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	b299      	uxth	r1, r3
 8010f9c:	f107 0310 	add.w	r3, r7, #16
 8010fa0:	2204      	movs	r2, #4
 8010fa2:	f7ff fea2 	bl	8010cea <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8010fa6:	bf00      	nop
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
	...

08010fb0 <dwt_enableframefilter>:
 * output parameters
 *
 * no return value
 */
void dwt_enableframefilter(uint16 enable)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	80fb      	strh	r3, [r7, #6]
    uint32 sysconfig = SYS_CFG_MASK & dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8010fba:	2100      	movs	r1, #0
 8010fbc:	2004      	movs	r0, #4
 8010fbe:	f7ff ff49 	bl	8010e54 <dwt_read32bitoffsetreg>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	f023 637b 	bic.w	r3, r3, #263192576	; 0xfb00000
 8010fc8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010fcc:	60fb      	str	r3, [r7, #12]

    if(enable)
 8010fce:	88fb      	ldrh	r3, [r7, #6]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00c      	beq.n	8010fee <dwt_enableframefilter+0x3e>
    {
        // Enable frame filtering and configure frame types
        sysconfig &= ~(SYS_CFG_FF_ALL_EN); // Clear all
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8010fda:	60fb      	str	r3, [r7, #12]
        sysconfig |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
 8010fdc:	88fb      	ldrh	r3, [r7, #6]
 8010fde:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	f043 0301 	orr.w	r3, r3, #1
 8010fea:	60fb      	str	r3, [r7, #12]
 8010fec:	e003      	b.n	8010ff6 <dwt_enableframefilter+0x46>
    }
    else
    {
        sysconfig &= ~(SYS_CFG_FFE);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f023 0301 	bic.w	r3, r3, #1
 8010ff4:	60fb      	str	r3, [r7, #12]
    }

    dw1000local.sysCFGreg = sysconfig ;
 8010ff6:	4a06      	ldr	r2, [pc, #24]	; (8011010 <dwt_enableframefilter+0x60>)
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6153      	str	r3, [r2, #20]
    dwt_write32bitreg(SYS_CFG_ID,sysconfig) ;
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	2100      	movs	r1, #0
 8011000:	2004      	movs	r0, #4
 8011002:	f7ff ffad 	bl	8010f60 <dwt_write32bitoffsetreg>
}
 8011006:	bf00      	nop
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20003c10 	.word	0x20003c10

08011014 <dwt_setpanid>:
 * output parameters
 *
 * no return value
 */
void dwt_setpanid(uint16 panID)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	4603      	mov	r3, r0
 801101c:	80fb      	strh	r3, [r7, #6]
    // PAN ID is high 16 bits of register
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_PAN_ID_OFFSET, panID);
 801101e:	88fb      	ldrh	r3, [r7, #6]
 8011020:	461a      	mov	r2, r3
 8011022:	2102      	movs	r1, #2
 8011024:	2003      	movs	r0, #3
 8011026:	f7ff ff7f 	bl	8010f28 <dwt_write16bitoffsetreg>
}
 801102a:	bf00      	nop
 801102c:	3708      	adds	r7, #8
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <dwt_setaddress16>:
 * output parameters
 *
 * no return value
 */
void dwt_setaddress16(uint16 shortAddress)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b082      	sub	sp, #8
 8011036:	af00      	add	r7, sp, #0
 8011038:	4603      	mov	r3, r0
 801103a:	80fb      	strh	r3, [r7, #6]
    // Short address into low 16 bits
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_SHORT_ADDR_OFFSET, shortAddress);
 801103c:	88fb      	ldrh	r3, [r7, #6]
 801103e:	461a      	mov	r2, r3
 8011040:	2100      	movs	r1, #0
 8011042:	2003      	movs	r0, #3
 8011044:	f7ff ff70 	bl	8010f28 <dwt_write16bitoffsetreg>
}
 8011048:	bf00      	nop
 801104a:	3708      	adds	r7, #8
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <dwt_seteui>:
 * output parameters
 *
 * no return value
 */
void dwt_seteui(uint8 *eui64)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
    dwt_writetodevice(EUI_64_ID, EUI_64_OFFSET, EUI_64_LEN, eui64);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2208      	movs	r2, #8
 801105c:	2100      	movs	r1, #0
 801105e:	2001      	movs	r0, #1
 8011060:	f7ff fe43 	bl	8010cea <dwt_writetodevice>
}
 8011064:	bf00      	nop
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <dwt_geteui>:
 * output parameters
 *
 * no return value
 */
void dwt_geteui(uint8 *eui64)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(EUI_64_ID, EUI_64_OFFSET, EUI_64_LEN, eui64);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2208      	movs	r2, #8
 8011078:	2100      	movs	r1, #0
 801107a:	2001      	movs	r0, #1
 801107c:	f7ff fe91 	bl	8010da2 <dwt_readfromdevice>
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <dwt_otpread>:
 * output parameters
 *
 * no return value
 */
void dwt_otpread(uint32 address, uint32 *array, uint8 length)
{
 8011088:	b590      	push	{r4, r7, lr}
 801108a:	b087      	sub	sp, #28
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	4613      	mov	r3, r2
 8011094:	71fb      	strb	r3, [r7, #7]
    int i;

    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: Set system clock to XTAL - this is necessary to make sure the values read by _dwt_otpread are reliable
 8011096:	2000      	movs	r0, #0
 8011098:	f000 f9ee 	bl	8011478 <_dwt_enableclocks>

    for(i=0; i<length; i++)
 801109c:	2300      	movs	r3, #0
 801109e:	617b      	str	r3, [r7, #20]
 80110a0:	e00e      	b.n	80110c0 <dwt_otpread+0x38>
    {
        array[i] = _dwt_otpread(address + i) ;
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	18d1      	adds	r1, r2, r3
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	18d4      	adds	r4, r2, r3
 80110b0:	4608      	mov	r0, r1
 80110b2:	f000 f810 	bl	80110d6 <_dwt_otpread>
 80110b6:	4603      	mov	r3, r0
 80110b8:	6023      	str	r3, [r4, #0]
    for(i=0; i<length; i++)
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	3301      	adds	r3, #1
 80110be:	617b      	str	r3, [r7, #20]
 80110c0:	79fb      	ldrb	r3, [r7, #7]
 80110c2:	697a      	ldr	r2, [r7, #20]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	dbec      	blt.n	80110a2 <dwt_otpread+0x1a>
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Restore system clock to PLL
 80110c8:	2001      	movs	r0, #1
 80110ca:	f000 f9d5 	bl	8011478 <_dwt_enableclocks>

    return ;
 80110ce:	bf00      	nop
}
 80110d0:	371c      	adds	r7, #28
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd90      	pop	{r4, r7, pc}

080110d6 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint32 address)
{
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b084      	sub	sp, #16
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	461a      	mov	r2, r3
 80110e4:	2104      	movs	r1, #4
 80110e6:	202d      	movs	r0, #45	; 0x2d
 80110e8:	f7ff ff1e 	bl	8010f28 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80110ec:	2203      	movs	r2, #3
 80110ee:	2106      	movs	r1, #6
 80110f0:	202d      	movs	r0, #45	; 0x2d
 80110f2:	f7ff ff06 	bl	8010f02 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80110f6:	2200      	movs	r2, #0
 80110f8:	2106      	movs	r1, #6
 80110fa:	202d      	movs	r0, #45	; 0x2d
 80110fc:	f7ff ff01 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8011100:	210a      	movs	r1, #10
 8011102:	202d      	movs	r0, #45	; 0x2d
 8011104:	f7ff fea6 	bl	8010e54 <dwt_read32bitoffsetreg>
 8011108:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 801110a:	68fb      	ldr	r3, [r7, #12]
}
 801110c:	4618      	mov	r0, r3
 801110e:	3710      	adds	r7, #16
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8011118:	2200      	movs	r2, #0
 801111a:	2102      	movs	r1, #2
 801111c:	202c      	movs	r0, #44	; 0x2c
 801111e:	f7ff fef0 	bl	8010f02 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8011122:	2202      	movs	r2, #2
 8011124:	2102      	movs	r1, #2
 8011126:	202c      	movs	r0, #44	; 0x2c
 8011128:	f7ff feeb 	bl	8010f02 <dwt_write8bitoffsetreg>
}
 801112c:	bf00      	nop
 801112e:	bd80      	pop	{r7, pc}

08011130 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8011138:	226d      	movs	r2, #109	; 0x6d
 801113a:	f640 0106 	movw	r1, #2054	; 0x806
 801113e:	202e      	movs	r0, #46	; 0x2e
 8011140:	f7ff fedf 	bl	8010f02 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d007      	beq.n	801115a <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 801114a:	f240 6207 	movw	r2, #1543	; 0x607
 801114e:	f641 0106 	movw	r1, #6150	; 0x1806
 8011152:	202e      	movs	r0, #46	; 0x2e
 8011154:	f7ff fee8 	bl	8010f28 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8011158:	e006      	b.n	8011168 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 801115a:	f241 6207 	movw	r2, #5639	; 0x1607
 801115e:	f641 0106 	movw	r1, #6150	; 0x1806
 8011162:	202e      	movs	r0, #46	; 0x2e
 8011164:	f7ff fee0 	bl	8010f28 <dwt_write16bitoffsetreg>
}
 8011168:	bf00      	nop
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8011174:	200e      	movs	r0, #14
 8011176:	f000 f97f 	bl	8011478 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 801117a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801117e:	2106      	movs	r1, #6
 8011180:	202d      	movs	r0, #45	; 0x2d
 8011182:	f7ff fed1 	bl	8010f28 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8011186:	2001      	movs	r0, #1
 8011188:	f000 fc1a 	bl	80119c0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 801118c:	2001      	movs	r0, #1
 801118e:	f000 f973 	bl	8011478 <_dwt_enableclocks>
}
 8011192:	bf00      	nop
 8011194:	bd80      	pop	{r7, pc}

08011196 <dwt_loadopsettabfromotp>:
 * output parameters
 *
 * no return value
 */
void dwt_loadopsettabfromotp(uint8 ops_sel)
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b084      	sub	sp, #16
 801119a:	af00      	add	r7, sp, #0
 801119c:	4603      	mov	r3, r0
 801119e:	71fb      	strb	r3, [r7, #7]
    uint16 reg = ((ops_sel << OTP_SF_OPS_SEL_SHFT) & OTP_SF_OPS_SEL_MASK) | OTP_SF_OPS_KICK; // Select defined OPS table and trigger its loading
 80111a0:	79fb      	ldrb	r3, [r7, #7]
 80111a2:	015b      	lsls	r3, r3, #5
 80111a4:	b21b      	sxth	r3, r3
 80111a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80111aa:	b21b      	sxth	r3, r3
 80111ac:	f043 0301 	orr.w	r3, r3, #1
 80111b0:	b21b      	sxth	r3, r3
 80111b2:	81fb      	strh	r3, [r7, #14]

    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80111b4:	200e      	movs	r0, #14
 80111b6:	f000 f95f 	bl	8011478 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_SF, reg);
 80111ba:	89fb      	ldrh	r3, [r7, #14]
 80111bc:	461a      	mov	r2, r3
 80111be:	2112      	movs	r1, #18
 80111c0:	202d      	movs	r0, #45	; 0x2d
 80111c2:	f7ff feb1 	bl	8010f28 <dwt_write16bitoffsetreg>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80111c6:	2001      	movs	r0, #1
 80111c8:	f000 f956 	bl	8011478 <_dwt_enableclocks>

}
 80111cc:	bf00      	nop
 80111ce:	3710      	adds	r7, #16
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr, irq_cb_t cbIrqStuck)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
    dw1000local.cbTxDone = cbTxDone;
 80111e2:	4a0a      	ldr	r2, [pc, #40]	; (801120c <dwt_setcallbacks+0x38>)
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6293      	str	r3, [r2, #40]	; 0x28
    dw1000local.cbRxOk = cbRxOk;
 80111e8:	4a08      	ldr	r2, [pc, #32]	; (801120c <dwt_setcallbacks+0x38>)
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    dw1000local.cbRxTo = cbRxTo;
 80111ee:	4a07      	ldr	r2, [pc, #28]	; (801120c <dwt_setcallbacks+0x38>)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6313      	str	r3, [r2, #48]	; 0x30
    dw1000local.cbRxErr = cbRxErr;
 80111f4:	4a05      	ldr	r2, [pc, #20]	; (801120c <dwt_setcallbacks+0x38>)
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	6353      	str	r3, [r2, #52]	; 0x34
    dw1000local.cbIrqStuck = cbIrqStuck;
 80111fa:	4a04      	ldr	r2, [pc, #16]	; (801120c <dwt_setcallbacks+0x38>)
 80111fc:	69bb      	ldr	r3, [r7, #24]
 80111fe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011200:	bf00      	nop
 8011202:	3714      	adds	r7, #20
 8011204:	46bd      	mov	sp, r7
 8011206:	bc80      	pop	{r7}
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	20003c10 	.word	0x20003c10

08011210 <irq_stuck_callback>:
 * output parameters
 *
 * no return value
 */
void irq_stuck_callback()
{
 8011210:	b580      	push	{r7, lr}
 8011212:	af00      	add	r7, sp, #0
	 dw1000local.cbIrqStuck();
 8011214:	4b02      	ldr	r3, [pc, #8]	; (8011220 <irq_stuck_callback+0x10>)
 8011216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011218:	4798      	blx	r3
}
 801121a:	bf00      	nop
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	20003c10 	.word	0x20003c10

08011224 <dwt_isr>:
 * output parameters
 *
 * no return value
 */
void dwt_isr(void)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
    uint32 status = dw1000local.cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 801122a:	2100      	movs	r1, #0
 801122c:	200f      	movs	r0, #15
 801122e:	f7ff fe11 	bl	8010e54 <dwt_read32bitoffsetreg>
 8011232:	4603      	mov	r3, r0
 8011234:	4a5e      	ldr	r2, [pc, #376]	; (80113b0 <dwt_isr+0x18c>)
 8011236:	61d3      	str	r3, [r2, #28]
 8011238:	4b5d      	ldr	r3, [pc, #372]	; (80113b0 <dwt_isr+0x18c>)
 801123a:	69db      	ldr	r3, [r3, #28]
 801123c:	60bb      	str	r3, [r7, #8]

    // Handle RX good frame event
    if(status & SYS_STATUS_RXFCG)
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011244:	2b00      	cmp	r3, #0
 8011246:	d05c      	beq.n	8011302 <dwt_isr+0xde>
    {
        uint16 finfo16;
        uint16 len;
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 8011248:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 801124c:	2100      	movs	r1, #0
 801124e:	200f      	movs	r0, #15
 8011250:	f7ff fe86 	bl	8010f60 <dwt_write32bitoffsetreg>

        dw1000local.cbData.rx_flags = 0;
 8011254:	4b56      	ldr	r3, [pc, #344]	; (80113b0 <dwt_isr+0x18c>)
 8011256:	2200      	movs	r2, #0
 8011258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        // Read frame info - Only the first two bytes of the register are used here.
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 801125c:	2100      	movs	r1, #0
 801125e:	2010      	movs	r0, #16
 8011260:	f7ff fe1f 	bl	8010ea2 <dwt_read16bitoffsetreg>
 8011264:	4603      	mov	r3, r0
 8011266:	80fb      	strh	r3, [r7, #6]

        // Report frame length - Standard frame length up to 127, extended frame length up to 1023 bytes
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8011268:	88fb      	ldrh	r3, [r7, #6]
 801126a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801126e:	81fb      	strh	r3, [r7, #14]
        if(dw1000local.longFrames == 0)
 8011270:	4b4f      	ldr	r3, [pc, #316]	; (80113b0 <dwt_isr+0x18c>)
 8011272:	7a1b      	ldrb	r3, [r3, #8]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d103      	bne.n	8011280 <dwt_isr+0x5c>
        {
            len &= RX_FINFO_RXFLEN_MASK;
 8011278:	89fb      	ldrh	r3, [r7, #14]
 801127a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801127e:	81fb      	strh	r3, [r7, #14]
        }
        dw1000local.cbData.datalength = len;
 8011280:	4a4b      	ldr	r2, [pc, #300]	; (80113b0 <dwt_isr+0x18c>)
 8011282:	89fb      	ldrh	r3, [r7, #14]
 8011284:	8413      	strh	r3, [r2, #32]

        // Report ranging bit
        if(finfo16 & RX_FINFO_RNG)
 8011286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801128a:	2b00      	cmp	r3, #0
 801128c:	da08      	bge.n	80112a0 <dwt_isr+0x7c>
        {
            dw1000local.cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 801128e:	4b48      	ldr	r3, [pc, #288]	; (80113b0 <dwt_isr+0x18c>)
 8011290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011294:	f043 0301 	orr.w	r3, r3, #1
 8011298:	b2da      	uxtb	r2, r3
 801129a:	4b45      	ldr	r3, [pc, #276]	; (80113b0 <dwt_isr+0x18c>)
 801129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        // Report frame control - First bytes of the received frame.
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, dw1000local.cbData.fctrl);
 80112a0:	4b44      	ldr	r3, [pc, #272]	; (80113b4 <dwt_isr+0x190>)
 80112a2:	2202      	movs	r2, #2
 80112a4:	2100      	movs	r1, #0
 80112a6:	2011      	movs	r0, #17
 80112a8:	f7ff fd7b 	bl	8010da2 <dwt_readfromdevice>

        // Because of a previous frame not being received properly, AAT bit can be set upon the proper reception of a frame not requesting for
        // acknowledgement (ACK frame is not actually sent though). If the AAT bit is set, check ACK request bit in frame control to confirm (this
        // implementation works only for IEEE802.15.4-2011 compliant frames).
        // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
        if((status & SYS_STATUS_AAT) && ((dw1000local.cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	f003 0308 	and.w	r3, r3, #8
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d014      	beq.n	80112e0 <dwt_isr+0xbc>
 80112b6:	4b3e      	ldr	r3, [pc, #248]	; (80113b0 <dwt_isr+0x18c>)
 80112b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80112bc:	f003 0320 	and.w	r3, r3, #32
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d10d      	bne.n	80112e0 <dwt_isr+0xbc>
        {
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 80112c4:	2208      	movs	r2, #8
 80112c6:	2100      	movs	r1, #0
 80112c8:	200f      	movs	r0, #15
 80112ca:	f7ff fe49 	bl	8010f60 <dwt_write32bitoffsetreg>
            dw1000local.cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 80112ce:	4b38      	ldr	r3, [pc, #224]	; (80113b0 <dwt_isr+0x18c>)
 80112d0:	69db      	ldr	r3, [r3, #28]
 80112d2:	f023 0308 	bic.w	r3, r3, #8
 80112d6:	4a36      	ldr	r2, [pc, #216]	; (80113b0 <dwt_isr+0x18c>)
 80112d8:	61d3      	str	r3, [r2, #28]
            dw1000local.wait4resp = 0;
 80112da:	4b35      	ldr	r3, [pc, #212]	; (80113b0 <dwt_isr+0x18c>)
 80112dc:	2200      	movs	r2, #0
 80112de:	769a      	strb	r2, [r3, #26]
        }

        // Call the corresponding callback if present
        if(dw1000local.cbRxOk != NULL)
 80112e0:	4b33      	ldr	r3, [pc, #204]	; (80113b0 <dwt_isr+0x18c>)
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d003      	beq.n	80112f0 <dwt_isr+0xcc>
        {
            dw1000local.cbRxOk(&dw1000local.cbData);
 80112e8:	4b31      	ldr	r3, [pc, #196]	; (80113b0 <dwt_isr+0x18c>)
 80112ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ec:	4832      	ldr	r0, [pc, #200]	; (80113b8 <dwt_isr+0x194>)
 80112ee:	4798      	blx	r3
        }

         if (dw1000local.dblbuffon)
 80112f0:	4b2f      	ldr	r3, [pc, #188]	; (80113b0 <dwt_isr+0x18c>)
 80112f2:	7c5b      	ldrb	r3, [r3, #17]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d004      	beq.n	8011302 <dwt_isr+0xde>
         {
             // Toggle the Host side Receive Buffer Pointer
             dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 80112f8:	2201      	movs	r2, #1
 80112fa:	2103      	movs	r1, #3
 80112fc:	200d      	movs	r0, #13
 80112fe:	f7ff fe00 	bl	8010f02 <dwt_write8bitoffsetreg>
         }
    }

    // Handle TX confirmation event
    if(status & SYS_STATUS_TXFRS)
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011308:	2b00      	cmp	r3, #0
 801130a:	d019      	beq.n	8011340 <dwt_isr+0x11c>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 801130c:	22f8      	movs	r2, #248	; 0xf8
 801130e:	2100      	movs	r1, #0
 8011310:	200f      	movs	r0, #15
 8011312:	f7ff fe25 	bl	8010f60 <dwt_write32bitoffsetreg>
        // In the case where this TXFRS interrupt is due to the automatic transmission of an ACK solicited by a response (with ACK request bit set)
        // that we receive through using wait4resp to a previous TX (and assuming that the IRQ processing of that TX has already been handled), then
        // we need to handle the IC issue which turns on the RX again in this situation (i.e. because it is wrongly applying the wait4resp after the
        // ACK TX).
        // See section "Transmit and automatically wait for response" in DW1000 User Manual
        if((status & SYS_STATUS_AAT) && dw1000local.wait4resp)
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	f003 0308 	and.w	r3, r3, #8
 801131c:	2b00      	cmp	r3, #0
 801131e:	d007      	beq.n	8011330 <dwt_isr+0x10c>
 8011320:	4b23      	ldr	r3, [pc, #140]	; (80113b0 <dwt_isr+0x18c>)
 8011322:	7e9b      	ldrb	r3, [r3, #26]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d003      	beq.n	8011330 <dwt_isr+0x10c>
        {
        	//DW1000 forum users reported soft reset after TX helped with timestamp accuracy.
            dwt_forcetrxoff(); // Turn the RX off
 8011328:	f000 f9b2 	bl	8011690 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 801132c:	f000 fab4 	bl	8011898 <dwt_rxreset>
        }

        // Call the corresponding callback if present
        if(dw1000local.cbTxDone != NULL)
 8011330:	4b1f      	ldr	r3, [pc, #124]	; (80113b0 <dwt_isr+0x18c>)
 8011332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011334:	2b00      	cmp	r3, #0
 8011336:	d003      	beq.n	8011340 <dwt_isr+0x11c>
        {
            dw1000local.cbTxDone(&dw1000local.cbData);
 8011338:	4b1d      	ldr	r3, [pc, #116]	; (80113b0 <dwt_isr+0x18c>)
 801133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801133c:	481e      	ldr	r0, [pc, #120]	; (80113b8 <dwt_isr+0x194>)
 801133e:	4798      	blx	r3
        }
    }

    // Handle frame reception/preamble detect timeout events
    if(status & SYS_STATUS_ALL_RX_TO)
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	f403 1308 	and.w	r3, r3, #2228224	; 0x220000
 8011346:	2b00      	cmp	r3, #0
 8011348:	d014      	beq.n	8011374 <dwt_isr+0x150>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 801134a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801134e:	2100      	movs	r1, #0
 8011350:	200f      	movs	r0, #15
 8011352:	f7ff fe05 	bl	8010f60 <dwt_write32bitoffsetreg>

        dw1000local.wait4resp = 0;
 8011356:	4b16      	ldr	r3, [pc, #88]	; (80113b0 <dwt_isr+0x18c>)
 8011358:	2200      	movs	r2, #0
 801135a:	769a      	strb	r2, [r3, #26]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
 801135c:	f000 f998 	bl	8011690 <dwt_forcetrxoff>
        dwt_rxreset();
 8011360:	f000 fa9a 	bl	8011898 <dwt_rxreset>

        // Call the corresponding callback if present
        if(dw1000local.cbRxTo != NULL)
 8011364:	4b12      	ldr	r3, [pc, #72]	; (80113b0 <dwt_isr+0x18c>)
 8011366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011368:	2b00      	cmp	r3, #0
 801136a:	d003      	beq.n	8011374 <dwt_isr+0x150>
        {
            dw1000local.cbRxTo(&dw1000local.cbData);
 801136c:	4b10      	ldr	r3, [pc, #64]	; (80113b0 <dwt_isr+0x18c>)
 801136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011370:	4811      	ldr	r0, [pc, #68]	; (80113b8 <dwt_isr+0x194>)
 8011372:	4798      	blx	r3
        }
    }

    // Handle RX errors events
    if(status & SYS_STATUS_ALL_RX_ERR)
 8011374:	68ba      	ldr	r2, [r7, #8]
 8011376:	4b11      	ldr	r3, [pc, #68]	; (80113bc <dwt_isr+0x198>)
 8011378:	4013      	ands	r3, r2
 801137a:	2b00      	cmp	r3, #0
 801137c:	d013      	beq.n	80113a6 <dwt_isr+0x182>
    {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 801137e:	4a0f      	ldr	r2, [pc, #60]	; (80113bc <dwt_isr+0x198>)
 8011380:	2100      	movs	r1, #0
 8011382:	200f      	movs	r0, #15
 8011384:	f7ff fdec 	bl	8010f60 <dwt_write32bitoffsetreg>

        dw1000local.wait4resp = 0;
 8011388:	4b09      	ldr	r3, [pc, #36]	; (80113b0 <dwt_isr+0x18c>)
 801138a:	2200      	movs	r2, #0
 801138c:	769a      	strb	r2, [r3, #26]

        // Because of an issue with receiver restart after error conditions, an RX reset must be applied after any error or timeout event to ensure
        // the next good frame's timestamp is computed correctly.
        // See section "RX Message timestamp" in DW1000 User Manual.
        dwt_forcetrxoff();
 801138e:	f000 f97f 	bl	8011690 <dwt_forcetrxoff>
        dwt_rxreset();
 8011392:	f000 fa81 	bl	8011898 <dwt_rxreset>

        // Call the corresponding callback if present
        if(dw1000local.cbRxErr != NULL)
 8011396:	4b06      	ldr	r3, [pc, #24]	; (80113b0 <dwt_isr+0x18c>)
 8011398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801139a:	2b00      	cmp	r3, #0
 801139c:	d003      	beq.n	80113a6 <dwt_isr+0x182>
        {
            dw1000local.cbRxErr(&dw1000local.cbData);
 801139e:	4b04      	ldr	r3, [pc, #16]	; (80113b0 <dwt_isr+0x18c>)
 80113a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a2:	4805      	ldr	r0, [pc, #20]	; (80113b8 <dwt_isr+0x194>)
 80113a4:	4798      	blx	r3
        }
    }
}
 80113a6:	bf00      	nop
 80113a8:	3710      	adds	r7, #16
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	20003c10 	.word	0x20003c10
 80113b4:	20003c32 	.word	0x20003c32
 80113b8:	20003c2c 	.word	0x20003c2c
 80113bc:	24159000 	.word	0x24159000

080113c0 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 80113ca:	79fb      	ldrb	r3, [r7, #7]
 80113cc:	f003 0301 	and.w	r3, r3, #1
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d03f      	beq.n	8011454 <dwt_setleds+0x94>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 80113d4:	2100      	movs	r1, #0
 80113d6:	2026      	movs	r0, #38	; 0x26
 80113d8:	f7ff fd3c 	bl	8010e54 <dwt_read32bitoffsetreg>
 80113dc:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80113e4:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80113ec:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	2100      	movs	r1, #0
 80113f2:	2026      	movs	r0, #38	; 0x26
 80113f4:	f7ff fdb4 	bl	8010f60 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 80113f8:	2100      	movs	r1, #0
 80113fa:	2036      	movs	r0, #54	; 0x36
 80113fc:	f7ff fd2a 	bl	8010e54 <dwt_read32bitoffsetreg>
 8011400:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f443 0304 	orr.w	r3, r3, #8650752	; 0x840000
 8011408:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 801140a:	68fa      	ldr	r2, [r7, #12]
 801140c:	2100      	movs	r1, #0
 801140e:	2036      	movs	r0, #54	; 0x36
 8011410:	f7ff fda6 	bl	8010f60 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8011414:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011418:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	f003 0302 	and.w	r3, r3, #2
 8011420:	2b00      	cmp	r3, #0
 8011422:	d003      	beq.n	801142c <dwt_setleds+0x6c>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 801142a:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	2128      	movs	r1, #40	; 0x28
 8011430:	2036      	movs	r0, #54	; 0x36
 8011432:	f7ff fd95 	bl	8010f60 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8011436:	79fb      	ldrb	r3, [r7, #7]
 8011438:	f003 0302 	and.w	r3, r3, #2
 801143c:	2b00      	cmp	r3, #0
 801143e:	d017      	beq.n	8011470 <dwt_setleds+0xb0>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8011446:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8011448:	68fa      	ldr	r2, [r7, #12]
 801144a:	2128      	movs	r1, #40	; 0x28
 801144c:	2036      	movs	r0, #54	; 0x36
 801144e:	f7ff fd87 	bl	8010f60 <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
 8011452:	e00d      	b.n	8011470 <dwt_setleds+0xb0>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8011454:	2100      	movs	r1, #0
 8011456:	2026      	movs	r0, #38	; 0x26
 8011458:	f7ff fcfc 	bl	8010e54 <dwt_read32bitoffsetreg>
 801145c:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8011464:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	2100      	movs	r1, #0
 801146a:	2026      	movs	r0, #38	; 0x26
 801146c:	f7ff fd78 	bl	8010f60 <dwt_write32bitoffsetreg>
}
 8011470:	bf00      	nop
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8011480:	f107 030c 	add.w	r3, r7, #12
 8011484:	2202      	movs	r2, #2
 8011486:	2100      	movs	r1, #0
 8011488:	2036      	movs	r0, #54	; 0x36
 801148a:	f7ff fc8a 	bl	8010da2 <dwt_readfromdevice>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2b0e      	cmp	r3, #14
 8011492:	d876      	bhi.n	8011582 <_dwt_enableclocks+0x10a>
 8011494:	a201      	add	r2, pc, #4	; (adr r2, 801149c <_dwt_enableclocks+0x24>)
 8011496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801149a:	bf00      	nop
 801149c:	080114e9 	.word	0x080114e9
 80114a0:	080114d9 	.word	0x080114d9
 80114a4:	080114ff 	.word	0x080114ff
 80114a8:	08011583 	.word	0x08011583
 80114ac:	08011583 	.word	0x08011583
 80114b0:	08011583 	.word	0x08011583
 80114b4:	08011583 	.word	0x08011583
 80114b8:	08011515 	.word	0x08011515
 80114bc:	08011535 	.word	0x08011535
 80114c0:	08011583 	.word	0x08011583
 80114c4:	08011583 	.word	0x08011583
 80114c8:	0801154b 	.word	0x0801154b
 80114cc:	08011557 	.word	0x08011557
 80114d0:	08011563 	.word	0x08011563
 80114d4:	08011579 	.word	0x08011579
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80114d8:	2300      	movs	r3, #0
 80114da:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80114dc:	7b7b      	ldrb	r3, [r7, #13]
 80114de:	f023 0301 	bic.w	r3, r3, #1
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	737b      	strb	r3, [r7, #13]
        }
        break;
 80114e6:	e04d      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80114e8:	7b3b      	ldrb	r3, [r7, #12]
 80114ea:	b25b      	sxtb	r3, r3
 80114ec:	f023 0303 	bic.w	r3, r3, #3
 80114f0:	b25b      	sxtb	r3, r3
 80114f2:	f043 0301 	orr.w	r3, r3, #1
 80114f6:	b25b      	sxtb	r3, r3
 80114f8:	b2db      	uxtb	r3, r3
 80114fa:	733b      	strb	r3, [r7, #12]
        }
        break;
 80114fc:	e042      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 80114fe:	7b3b      	ldrb	r3, [r7, #12]
 8011500:	b25b      	sxtb	r3, r3
 8011502:	f023 0303 	bic.w	r3, r3, #3
 8011506:	b25b      	sxtb	r3, r3
 8011508:	f043 0302 	orr.w	r3, r3, #2
 801150c:	b25b      	sxtb	r3, r3
 801150e:	b2db      	uxtb	r3, r3
 8011510:	733b      	strb	r3, [r7, #12]
        }
        break;
 8011512:	e037      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8011514:	7b3b      	ldrb	r3, [r7, #12]
 8011516:	b25b      	sxtb	r3, r3
 8011518:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 801151c:	b25b      	sxtb	r3, r3
 801151e:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8011522:	b25b      	sxtb	r3, r3
 8011524:	b2db      	uxtb	r3, r3
 8011526:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8011528:	7b7b      	ldrb	r3, [r7, #13]
 801152a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801152e:	b2db      	uxtb	r3, r3
 8011530:	737b      	strb	r3, [r7, #13]
        }
        break;
 8011532:	e027      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8011534:	7b3b      	ldrb	r3, [r7, #12]
 8011536:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 801153a:	b2db      	uxtb	r3, r3
 801153c:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 801153e:	7b7b      	ldrb	r3, [r7, #13]
 8011540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011544:	b2db      	uxtb	r3, r3
 8011546:	737b      	strb	r3, [r7, #13]
        }
        break;
 8011548:	e01c      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 801154a:	7b7b      	ldrb	r3, [r7, #13]
 801154c:	f043 0302 	orr.w	r3, r3, #2
 8011550:	b2db      	uxtb	r3, r3
 8011552:	737b      	strb	r3, [r7, #13]
        }
        break;
 8011554:	e016      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8011556:	7b7b      	ldrb	r3, [r7, #13]
 8011558:	f023 0302 	bic.w	r3, r3, #2
 801155c:	b2db      	uxtb	r3, r3
 801155e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8011560:	e010      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8011562:	7b3b      	ldrb	r3, [r7, #12]
 8011564:	b25b      	sxtb	r3, r3
 8011566:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801156a:	b25b      	sxtb	r3, r3
 801156c:	f043 0320 	orr.w	r3, r3, #32
 8011570:	b25b      	sxtb	r3, r3
 8011572:	b2db      	uxtb	r3, r3
 8011574:	733b      	strb	r3, [r7, #12]
        }
        break;
 8011576:	e005      	b.n	8011584 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8011578:	2301      	movs	r3, #1
 801157a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 801157c:	2303      	movs	r3, #3
 801157e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8011580:	e000      	b.n	8011584 <_dwt_enableclocks+0x10c>
        default:
        break;
 8011582:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8011584:	f107 030c 	add.w	r3, r7, #12
 8011588:	2201      	movs	r2, #1
 801158a:	2100      	movs	r1, #0
 801158c:	2036      	movs	r0, #54	; 0x36
 801158e:	f7ff fbac 	bl	8010cea <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8011592:	f107 030c 	add.w	r3, r7, #12
 8011596:	3301      	adds	r3, #1
 8011598:	2201      	movs	r2, #1
 801159a:	2101      	movs	r1, #1
 801159c:	2036      	movs	r0, #54	; 0x36
 801159e:	f7ff fba4 	bl	8010cea <dwt_writetodevice>

} // end _dwt_enableclocks()
 80115a2:	bf00      	nop
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop

080115ac <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80115b0:	2000      	movs	r0, #0
 80115b2:	f7ff ff61 	bl	8011478 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80115b6:	2200      	movs	r2, #0
 80115b8:	2104      	movs	r1, #4
 80115ba:	2036      	movs	r0, #54	; 0x36
 80115bc:	f7ff fcb4 	bl	8010f28 <dwt_write16bitoffsetreg>
}
 80115c0:	bf00      	nop
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	2101      	movs	r1, #1
 80115d0:	200a      	movs	r0, #10
 80115d2:	f7ff fcc5 	bl	8010f60 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 80115d6:	bf00      	nop
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
	...

080115e0 <dwt_starttx>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will fail if the delayed time has passed)
 */
int dwt_starttx(uint8 mode)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	4603      	mov	r3, r0
 80115e8:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 80115ea:	2300      	movs	r3, #0
 80115ec:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 80115ee:	2300      	movs	r3, #0
 80115f0:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 80115f2:	2300      	movs	r3, #0
 80115f4:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	f003 0302 	and.w	r3, r3, #2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00a      	beq.n	8011616 <dwt_starttx+0x36>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8011600:	2380      	movs	r3, #128	; 0x80
 8011602:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8011604:	7afb      	ldrb	r3, [r7, #11]
 8011606:	461a      	mov	r2, r3
 8011608:	2100      	movs	r1, #0
 801160a:	200d      	movs	r0, #13
 801160c:	f7ff fc79 	bl	8010f02 <dwt_write8bitoffsetreg>
        dw1000local.wait4resp = 1;
 8011610:	4b1e      	ldr	r3, [pc, #120]	; (801168c <dwt_starttx+0xac>)
 8011612:	2201      	movs	r2, #1
 8011614:	769a      	strb	r2, [r3, #26]
    }

    if (mode & DWT_START_TX_DELAYED)
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	2b00      	cmp	r3, #0
 801161e:	d026      	beq.n	801166e <dwt_starttx+0x8e>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8011620:	7afb      	ldrb	r3, [r7, #11]
 8011622:	f043 0306 	orr.w	r3, r3, #6
 8011626:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8011628:	7afb      	ldrb	r3, [r7, #11]
 801162a:	461a      	mov	r2, r3
 801162c:	2100      	movs	r1, #0
 801162e:	200d      	movs	r0, #13
 8011630:	f7ff fc67 	bl	8010f02 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8011634:	2103      	movs	r1, #3
 8011636:	200f      	movs	r0, #15
 8011638:	f7ff fc33 	bl	8010ea2 <dwt_read16bitoffsetreg>
 801163c:	4603      	mov	r3, r0
 801163e:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8011640:	893b      	ldrh	r3, [r7, #8]
 8011642:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8011646:	2b00      	cmp	r3, #0
 8011648:	d102      	bne.n	8011650 <dwt_starttx+0x70>
        {
            retval = DWT_SUCCESS ; // All okay
 801164a:	2300      	movs	r3, #0
 801164c:	60fb      	str	r3, [r7, #12]
 801164e:	e018      	b.n	8011682 <dwt_starttx+0xa2>
        }
        else
        {
            // I am taking DSHP set to Indicate that the TXDLYS was set too late for the specified DX_TIME.
            // Remedial Action - (a) cancel delayed send
            temp = (uint8)SYS_CTRL_TRXOFF; // This assumes the bit is in the lowest byte
 8011650:	2340      	movs	r3, #64	; 0x40
 8011652:	72fb      	strb	r3, [r7, #11]
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8011654:	7afb      	ldrb	r3, [r7, #11]
 8011656:	461a      	mov	r2, r3
 8011658:	2100      	movs	r1, #0
 801165a:	200d      	movs	r0, #13
 801165c:	f7ff fc51 	bl	8010f02 <dwt_write8bitoffsetreg>
            // Note event Delayed TX Time too Late
            // Could fall through to start a normal send (below) just sending late.....
            // ... instead return and assume return value of 1 will be used to detect and recover from the issue.
            dw1000local.wait4resp = 0;
 8011660:	4b0a      	ldr	r3, [pc, #40]	; (801168c <dwt_starttx+0xac>)
 8011662:	2200      	movs	r2, #0
 8011664:	769a      	strb	r2, [r3, #26]
            retval = DWT_ERROR ; // Failed !
 8011666:	f04f 33ff 	mov.w	r3, #4294967295
 801166a:	60fb      	str	r3, [r7, #12]
 801166c:	e009      	b.n	8011682 <dwt_starttx+0xa2>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 801166e:	7afb      	ldrb	r3, [r7, #11]
 8011670:	f043 0302 	orr.w	r3, r3, #2
 8011674:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8011676:	7afb      	ldrb	r3, [r7, #11]
 8011678:	461a      	mov	r2, r3
 801167a:	2100      	movs	r1, #0
 801167c:	200d      	movs	r0, #13
 801167e:	f7ff fc40 	bl	8010f02 <dwt_write8bitoffsetreg>
    }

    return retval;
 8011682:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8011684:	4618      	mov	r0, r3
 8011686:	3710      	adds	r7, #16
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	20003c10 	.word	0x20003c10

08011690 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8011696:	2100      	movs	r1, #0
 8011698:	200e      	movs	r0, #14
 801169a:	f7ff fbdb 	bl	8010e54 <dwt_read32bitoffsetreg>
 801169e:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 80116a0:	f000 f970 	bl	8011984 <decamutexon>
 80116a4:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80116a6:	2200      	movs	r2, #0
 80116a8:	2100      	movs	r1, #0
 80116aa:	200e      	movs	r0, #14
 80116ac:	f7ff fc58 	bl	8010f60 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 80116b0:	2240      	movs	r2, #64	; 0x40
 80116b2:	2100      	movs	r1, #0
 80116b4:	200d      	movs	r0, #13
 80116b6:	f7ff fc24 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 80116ba:	4a0b      	ldr	r2, [pc, #44]	; (80116e8 <dwt_forcetrxoff+0x58>)
 80116bc:	2100      	movs	r1, #0
 80116be:	200f      	movs	r0, #15
 80116c0:	f7ff fc4e 	bl	8010f60 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 80116c4:	f000 f814 	bl	80116f0 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	2100      	movs	r1, #0
 80116cc:	200e      	movs	r0, #14
 80116ce:	f7ff fc47 	bl	8010f60 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 80116d2:	6838      	ldr	r0, [r7, #0]
 80116d4:	f000 f967 	bl	80119a6 <decamutexoff>
    dw1000local.wait4resp = 0;
 80116d8:	4b04      	ldr	r3, [pc, #16]	; (80116ec <dwt_forcetrxoff+0x5c>)
 80116da:	2200      	movs	r2, #0
 80116dc:	769a      	strb	r2, [r3, #26]

} // end deviceforcetrxoff()
 80116de:	bf00      	nop
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	2437fff8 	.word	0x2437fff8
 80116ec:	20003c10 	.word	0x20003c10

080116f0 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80116f6:	2103      	movs	r1, #3
 80116f8:	200f      	movs	r0, #15
 80116fa:	f7ff fbef 	bl	8010edc <dwt_read8bitoffsetreg>
 80116fe:	4603      	mov	r3, r0
 8011700:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8011702:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8011704:	79fb      	ldrb	r3, [r7, #7]
 8011706:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8011708:	4053      	eors	r3, r2
 801170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801170e:	2b00      	cmp	r3, #0
 8011710:	d004      	beq.n	801171c <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8011712:	2201      	movs	r2, #1
 8011714:	2103      	movs	r1, #3
 8011716:	200d      	movs	r0, #13
 8011718:	f7ff fbf3 	bl	8010f02 <dwt_write8bitoffsetreg>
    }
}
 801171c:	bf00      	nop
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f003 0304 	and.w	r3, r3, #4
 8011732:	2b00      	cmp	r3, #0
 8011734:	d101      	bne.n	801173a <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8011736:	f7ff ffdb 	bl	80116f0 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 801173a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801173e:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f003 0301 	and.w	r3, r3, #1
 8011746:	2b00      	cmp	r3, #0
 8011748:	d003      	beq.n	8011752 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 801174a:	89fb      	ldrh	r3, [r7, #14]
 801174c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011750:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8011752:	89fb      	ldrh	r3, [r7, #14]
 8011754:	461a      	mov	r2, r3
 8011756:	2100      	movs	r1, #0
 8011758:	200d      	movs	r0, #13
 801175a:	f7ff fbe5 	bl	8010f28 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f003 0301 	and.w	r3, r3, #1
 8011764:	2b00      	cmp	r3, #0
 8011766:	d01a      	beq.n	801179e <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8011768:	2103      	movs	r1, #3
 801176a:	200f      	movs	r0, #15
 801176c:	f7ff fbb6 	bl	8010edc <dwt_read8bitoffsetreg>
 8011770:	4603      	mov	r3, r0
 8011772:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8011774:	7b7b      	ldrb	r3, [r7, #13]
 8011776:	f003 0308 	and.w	r3, r3, #8
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00f      	beq.n	801179e <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 801177e:	f7ff ff87 	bl	8011690 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f003 0302 	and.w	r3, r3, #2
 8011788:	2b00      	cmp	r3, #0
 801178a:	d105      	bne.n	8011798 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 801178c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011790:	2100      	movs	r1, #0
 8011792:	200d      	movs	r0, #13
 8011794:	f7ff fbc8 	bl	8010f28 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8011798:	f04f 33ff 	mov.w	r3, #4294967295
 801179c:	e000      	b.n	80117a0 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 801179e:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80117a0:	4618      	mov	r0, r3
 80117a2:	3710      	adds	r7, #16
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	4603      	mov	r3, r0
 80117b0:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 80117b2:	2103      	movs	r1, #3
 80117b4:	2004      	movs	r0, #4
 80117b6:	f7ff fb91 	bl	8010edc <dwt_read8bitoffsetreg>
 80117ba:	4603      	mov	r3, r0
 80117bc:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 80117be:	88fb      	ldrh	r3, [r7, #6]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d016      	beq.n	80117f2 <dwt_setrxtimeout+0x4a>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80117c4:	88fb      	ldrh	r3, [r7, #6]
 80117c6:	461a      	mov	r2, r3
 80117c8:	2100      	movs	r1, #0
 80117ca:	200c      	movs	r0, #12
 80117cc:	f7ff fbac 	bl	8010f28 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
 80117d2:	f043 0310 	orr.w	r3, r3, #16
 80117d6:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        dw1000local.sysCFGreg |= SYS_CFG_RXWTOE;
 80117d8:	4b10      	ldr	r3, [pc, #64]	; (801181c <dwt_setrxtimeout+0x74>)
 80117da:	695b      	ldr	r3, [r3, #20]
 80117dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117e0:	4a0e      	ldr	r2, [pc, #56]	; (801181c <dwt_setrxtimeout+0x74>)
 80117e2:	6153      	str	r3, [r2, #20]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80117e4:	7bfb      	ldrb	r3, [r7, #15]
 80117e6:	461a      	mov	r2, r3
 80117e8:	2103      	movs	r1, #3
 80117ea:	2004      	movs	r0, #4
 80117ec:	f7ff fb89 	bl	8010f02 <dwt_write8bitoffsetreg>
        dw1000local.sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80117f0:	e00f      	b.n	8011812 <dwt_setrxtimeout+0x6a>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80117f2:	7bfb      	ldrb	r3, [r7, #15]
 80117f4:	f023 0310 	bic.w	r3, r3, #16
 80117f8:	73fb      	strb	r3, [r7, #15]
        dw1000local.sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80117fa:	4b08      	ldr	r3, [pc, #32]	; (801181c <dwt_setrxtimeout+0x74>)
 80117fc:	695b      	ldr	r3, [r3, #20]
 80117fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011802:	4a06      	ldr	r2, [pc, #24]	; (801181c <dwt_setrxtimeout+0x74>)
 8011804:	6153      	str	r3, [r2, #20]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8011806:	7bfb      	ldrb	r3, [r7, #15]
 8011808:	461a      	mov	r2, r3
 801180a:	2103      	movs	r1, #3
 801180c:	2004      	movs	r0, #4
 801180e:	f7ff fb78 	bl	8010f02 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8011812:	bf00      	nop
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	20003c10 	.word	0x20003c10

08011820 <dwt_setinterrupt>:
 * output parameters
 *
 * no return value
 */
void dwt_setinterrupt(uint32 bitmask, uint8 enable)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	460b      	mov	r3, r1
 801182a:	70fb      	strb	r3, [r7, #3]
    decaIrqStatus_t stat ;
    uint32 mask ;

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    stat = decamutexon() ;
 801182c:	f000 f8aa 	bl	8011984 <decamutexon>
 8011830:	60b8      	str	r0, [r7, #8]

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read register
 8011832:	2100      	movs	r1, #0
 8011834:	200e      	movs	r0, #14
 8011836:	f7ff fb0d 	bl	8010e54 <dwt_read32bitoffsetreg>
 801183a:	60f8      	str	r0, [r7, #12]

    if(enable)
 801183c:	78fb      	ldrb	r3, [r7, #3]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d004      	beq.n	801184c <dwt_setinterrupt+0x2c>
    {
        mask |= bitmask ;
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	4313      	orrs	r3, r2
 8011848:	60fb      	str	r3, [r7, #12]
 801184a:	e004      	b.n	8011856 <dwt_setinterrupt+0x36>
    }
    else
    {
        mask &= ~bitmask ; // Clear the bit
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	43db      	mvns	r3, r3
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	4013      	ands	r3, r2
 8011854:	60fb      	str	r3, [r7, #12]
    }
    dwt_write32bitreg(SYS_MASK_ID,mask) ; // New value
 8011856:	68fa      	ldr	r2, [r7, #12]
 8011858:	2100      	movs	r1, #0
 801185a:	200e      	movs	r0, #14
 801185c:	f7ff fb80 	bl	8010f60 <dwt_write32bitoffsetreg>

    decamutexoff(stat) ;
 8011860:	68b8      	ldr	r0, [r7, #8]
 8011862:	f000 f8a0 	bl	80119a6 <decamutexoff>
}
 8011866:	bf00      	nop
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <dwt_configeventcounters>:
 * output parameters
 *
 * no return value
 */
void dwt_configeventcounters(int enable)
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b082      	sub	sp, #8
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
    // Need to clear and disable, can't just clear
    dwt_write8bitoffsetreg(DIG_DIAG_ID, EVC_CTRL_OFFSET, (uint8)(EVC_CLR));
 8011876:	2202      	movs	r2, #2
 8011878:	2100      	movs	r1, #0
 801187a:	202f      	movs	r0, #47	; 0x2f
 801187c:	f7ff fb41 	bl	8010f02 <dwt_write8bitoffsetreg>

    if(enable)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d004      	beq.n	8011890 <dwt_configeventcounters+0x22>
    {
        dwt_write8bitoffsetreg(DIG_DIAG_ID, EVC_CTRL_OFFSET, (uint8)(EVC_EN)); // Enable
 8011886:	2201      	movs	r2, #1
 8011888:	2100      	movs	r1, #0
 801188a:	202f      	movs	r0, #47	; 0x2f
 801188c:	f7ff fb39 	bl	8010f02 <dwt_write8bitoffsetreg>
    }
}
 8011890:	bf00      	nop
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 801189c:	22e0      	movs	r2, #224	; 0xe0
 801189e:	2103      	movs	r1, #3
 80118a0:	2036      	movs	r0, #54	; 0x36
 80118a2:	f7ff fb2e 	bl	8010f02 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80118a6:	22f0      	movs	r2, #240	; 0xf0
 80118a8:	2103      	movs	r1, #3
 80118aa:	2036      	movs	r0, #54	; 0x36
 80118ac:	f7ff fb29 	bl	8010f02 <dwt_write8bitoffsetreg>
}
 80118b0:	bf00      	nop
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80118b8:	f7ff fe78 	bl	80115ac <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80118bc:	2200      	movs	r2, #0
 80118be:	2100      	movs	r1, #0
 80118c0:	202c      	movs	r0, #44	; 0x2c
 80118c2:	f7ff fb31 	bl	8010f28 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80118c6:	2200      	movs	r2, #0
 80118c8:	2106      	movs	r1, #6
 80118ca:	202c      	movs	r0, #44	; 0x2c
 80118cc:	f7ff fb19 	bl	8010f02 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80118d0:	f7ff fc20 	bl	8011114 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80118d4:	2200      	movs	r2, #0
 80118d6:	2103      	movs	r1, #3
 80118d8:	2036      	movs	r0, #54	; 0x36
 80118da:	f7ff fb12 	bl	8010f02 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80118de:	2001      	movs	r0, #1
 80118e0:	f000 f86e 	bl	80119c0 <deca_sleep>

    // Clear reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80118e4:	22f0      	movs	r2, #240	; 0xf0
 80118e6:	2103      	movs	r1, #3
 80118e8:	2036      	movs	r0, #54	; 0x36
 80118ea:	f7ff fb0a 	bl	8010f02 <dwt_write8bitoffsetreg>

    dw1000local.wait4resp = 0;
 80118ee:	4b02      	ldr	r3, [pc, #8]	; (80118f8 <dwt_softreset+0x44>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	769a      	strb	r2, [r3, #26]
}
 80118f4:	bf00      	nop
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	20003c10 	.word	0x20003c10

080118fc <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	4603      	mov	r3, r0
 8011904:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8011906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801190a:	f003 031f 	and.w	r3, r3, #31
 801190e:	b25b      	sxtb	r3, r3
 8011910:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8011914:	b25b      	sxtb	r3, r3
 8011916:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8011918:	7bfb      	ldrb	r3, [r7, #15]
 801191a:	461a      	mov	r2, r3
 801191c:	210e      	movs	r1, #14
 801191e:	202b      	movs	r0, #43	; 0x2b
 8011920:	f7ff faef 	bl	8010f02 <dwt_write8bitoffsetreg>
}
 8011924:	bf00      	nop
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <dwt_configcontinuousframemode>:
 * output parameters
 *
 * no return value
 */
void dwt_configcontinuousframemode(uint32 framerepetitionrate)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
    //
    // Disable TX/RX RF block sequencing (needed for continuous frame mode)
    //
    _dwt_disablesequencing();
 8011934:	f7ff fe3a 	bl	80115ac <_dwt_disablesequencing>

    //
    // Enable RF PLL and TX blocks
    //
    dwt_write32bitreg(RF_CONF_ID, RF_CONF_TXPLLPOWEN_MASK); // Enable LDO and RF PLL blocks
 8011938:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 801193c:	2100      	movs	r1, #0
 801193e:	2028      	movs	r0, #40	; 0x28
 8011940:	f7ff fb0e 	bl	8010f60 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(RF_CONF_ID, RF_CONF_TXALLEN_MASK); // Enable the rest of TX blocks
 8011944:	4a0e      	ldr	r2, [pc, #56]	; (8011980 <dwt_configcontinuousframemode+0x54>)
 8011946:	2100      	movs	r1, #0
 8011948:	2028      	movs	r0, #40	; 0x28
 801194a:	f7ff fb09 	bl	8010f60 <dwt_write32bitoffsetreg>

    //
    // Configure TX clocks
    //
    _dwt_enableclocks(FORCE_SYS_PLL);
 801194e:	2002      	movs	r0, #2
 8011950:	f7ff fd92 	bl	8011478 <_dwt_enableclocks>
    _dwt_enableclocks(FORCE_TX_PLL);
 8011954:	200d      	movs	r0, #13
 8011956:	f7ff fd8f 	bl	8011478 <_dwt_enableclocks>

    // Set the frame repetition rate
    if(framerepetitionrate < 4)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2b03      	cmp	r3, #3
 801195e:	d801      	bhi.n	8011964 <dwt_configcontinuousframemode+0x38>
    {
        framerepetitionrate = 4;
 8011960:	2304      	movs	r3, #4
 8011962:	607b      	str	r3, [r7, #4]
    }
    dwt_write32bitreg(DX_TIME_ID, framerepetitionrate);
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	2100      	movs	r1, #0
 8011968:	200a      	movs	r0, #10
 801196a:	f7ff faf9 	bl	8010f60 <dwt_write32bitoffsetreg>

    //
    // Configure continuous frame TX
    //
    dwt_write8bitoffsetreg(DIG_DIAG_ID, DIAG_TMC_OFFSET, (uint8)(DIAG_TMC_TX_PSTM)); // Turn the tx power spectrum test mode - continuous sending of frames
 801196e:	2210      	movs	r2, #16
 8011970:	2124      	movs	r1, #36	; 0x24
 8011972:	202f      	movs	r0, #47	; 0x2f
 8011974:	f7ff fac5 	bl	8010f02 <dwt_write8bitoffsetreg>
}
 8011978:	bf00      	nop
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	005fff00 	.word	0x005fff00

08011984 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 801198a:	f000 fdff 	bl	801258c <port_GetEXT_IRQStatus>
 801198e:	4603      	mov	r3, r0
 8011990:	607b      	str	r3, [r7, #4]

	if(s) {
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8011998:	f000 fdea 	bl	8012570 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 801199c:	687b      	ldr	r3, [r7, #4]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b082      	sub	sp, #8
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80119b4:	f000 fde3 	bl	801257e <port_EnableEXT_IRQ>
	}
}
 80119b8:	bf00      	nop
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f000 fa7d 	bl	8011ec8 <Sleep>
}
 80119ce:	bf00      	nop
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
	...

080119d8 <writetospi>:
    uint16       headerLength,
    const uint8 *headerBuffer,
    uint32       bodyLength,
    const uint8 *bodyBuffer
)
{
 80119d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80119dc:	4691      	mov	r9, r2
 80119de:	4698      	mov	r8, r3
 80119e0:	4604      	mov	r4, r0
 80119e2:	460e      	mov	r6, r1

	uint32 i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
 80119e4:	f7ff ffce 	bl	8011984 <decamutexon>

    SPIx_CS_GPIO->BRR = SPIx_CS;
 80119e8:	2210      	movs	r2, #16
 80119ea:	4b1d      	ldr	r3, [pc, #116]	; (8011a60 <writetospi+0x88>)
 80119ec:	615a      	str	r2, [r3, #20]

    for(i=0; i<headerLength; i++)
 80119ee:	b17c      	cbz	r4, 8011a10 <writetospi+0x38>
    {
    	SPIx->DR = headerBuffer[i];
 80119f0:	4d1c      	ldr	r5, [pc, #112]	; (8011a64 <writetospi+0x8c>)
 80119f2:	1932      	adds	r2, r6, r4
 80119f4:	f816 3b01 	ldrb.w	r3, [r6], #1

    	int count = 0;
    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 80119f8:	f242 7111 	movw	r1, #10001	; 0x2711
    	SPIx->DR = headerBuffer[i];
 80119fc:	81ab      	strh	r3, [r5, #12]
    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 80119fe:	e001      	b.n	8011a04 <writetospi+0x2c>
    		count++;
    		if(count > SPI_STUCK_CNT){
 8011a00:	3901      	subs	r1, #1
 8011a02:	d023      	beq.n	8011a4c <writetospi+0x74>
    	while ((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a04:	892c      	ldrh	r4, [r5, #8]
 8011a06:	07e4      	lsls	r4, r4, #31
 8011a08:	d5fa      	bpl.n	8011a00 <writetospi+0x28>
    for(i=0; i<headerLength; i++)
 8011a0a:	4296      	cmp	r6, r2
    			decamutexoff(stat) ;
    			return -1;
    		}
    	}

    	SPIx->DR ;
 8011a0c:	89ab      	ldrh	r3, [r5, #12]
    for(i=0; i<headerLength; i++)
 8011a0e:	d1f1      	bne.n	80119f4 <writetospi+0x1c>
    }

    for(i=0; i<bodyLength; i++)
 8011a10:	f1b9 0f00 	cmp.w	r9, #0
 8011a14:	d013      	beq.n	8011a3e <writetospi+0x66>
 8011a16:	eb08 0409 	add.w	r4, r8, r9
    {
     	SPIx->DR = bodyBuffer[i];
 8011a1a:	4912      	ldr	r1, [pc, #72]	; (8011a64 <writetospi+0x8c>)
 8011a1c:	3c01      	subs	r4, #1
 8011a1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a22:	f818 2f01 	ldrb.w	r2, [r8, #1]!

     	int count = 0;
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a26:	f242 7311 	movw	r3, #10001	; 0x2711
     	SPIx->DR = bodyBuffer[i];
 8011a2a:	818a      	strh	r2, [r1, #12]
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a2c:	e001      	b.n	8011a32 <writetospi+0x5a>
    		count++;
			if(count > SPI_STUCK_CNT){
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	d00c      	beq.n	8011a4c <writetospi+0x74>
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a32:	890a      	ldrh	r2, [r1, #8]
 8011a34:	07d2      	lsls	r2, r2, #31
 8011a36:	d5fa      	bpl.n	8011a2e <writetospi+0x56>
    for(i=0; i<bodyLength; i++)
 8011a38:	4544      	cmp	r4, r8
				decamutexoff(stat) ;
				return -1;
			}
    	}

		SPIx->DR ;
 8011a3a:	898b      	ldrh	r3, [r1, #12]
    for(i=0; i<bodyLength; i++)
 8011a3c:	d1f1      	bne.n	8011a22 <writetospi+0x4a>
	}

    SPIx_CS_GPIO->BSRR = SPIx_CS;
 8011a3e:	2210      	movs	r2, #16
 8011a40:	4b07      	ldr	r3, [pc, #28]	; (8011a60 <writetospi+0x88>)
 8011a42:	611a      	str	r2, [r3, #16]

    decamutexoff(stat) ;
 8011a44:	f7ff ffaf 	bl	80119a6 <decamutexoff>

    return 0;
 8011a48:	2000      	movs	r0, #0
 8011a4a:	e006      	b.n	8011a5a <writetospi+0x82>
				SPIx_CS_GPIO->BSRR = SPIx_CS;
 8011a4c:	2210      	movs	r2, #16
 8011a4e:	4b04      	ldr	r3, [pc, #16]	; (8011a60 <writetospi+0x88>)
 8011a50:	611a      	str	r2, [r3, #16]
				decamutexoff(stat) ;
 8011a52:	f7ff ffa8 	bl	80119a6 <decamutexoff>
				return -1;
 8011a56:	f04f 30ff 	mov.w	r0, #4294967295
} // end writetospi()
 8011a5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011a5e:	bf00      	nop
 8011a60:	40010800 	.word	0x40010800
 8011a64:	40013000 	.word	0x40013000

08011a68 <readfromspi>:
    uint16       headerLength,
    const uint8 *headerBuffer,
    uint32       readlength,
    uint8       *readBuffer
)
{
 8011a68:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8011a6c:	4691      	mov	r9, r2
 8011a6e:	4698      	mov	r8, r3
 8011a70:	4604      	mov	r4, r0
 8011a72:	460e      	mov	r6, r1

	uint32 i=0;

    decaIrqStatus_t  stat ;

    stat = decamutexon() ;
 8011a74:	f7ff ff86 	bl	8011984 <decamutexon>

    /* Wait for SPIx Tx buffer empty */
    //while (port_SPIx_busy_sending());

    SPIx_CS_GPIO->BRR = SPIx_CS;
 8011a78:	2210      	movs	r2, #16
 8011a7a:	4b1f      	ldr	r3, [pc, #124]	; (8011af8 <readfromspi+0x90>)
 8011a7c:	615a      	str	r2, [r3, #20]

    for(i=0; i<headerLength; i++)
 8011a7e:	b18c      	cbz	r4, 8011aa4 <readfromspi+0x3c>
    {
    	SPIx->DR = headerBuffer[i];
 8011a80:	4d1e      	ldr	r5, [pc, #120]	; (8011afc <readfromspi+0x94>)
 8011a82:	1932      	adds	r2, r6, r4
 8011a84:	f816 3b01 	ldrb.w	r3, [r6], #1

    	int count = 0;
     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a88:	f242 7111 	movw	r1, #10001	; 0x2711
    	SPIx->DR = headerBuffer[i];
 8011a8c:	81ab      	strh	r3, [r5, #12]
     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a8e:	e001      	b.n	8011a94 <readfromspi+0x2c>
     		count++;
			if(count > SPI_STUCK_CNT){
 8011a90:	3901      	subs	r1, #1
 8011a92:	d027      	beq.n	8011ae4 <readfromspi+0x7c>
     	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011a94:	892c      	ldrh	r4, [r5, #8]
 8011a96:	07e4      	lsls	r4, r4, #31
 8011a98:	d5fa      	bpl.n	8011a90 <readfromspi+0x28>
				decamutexoff(stat) ;
				return -1;
			}
     	}

     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
 8011a9a:	89ab      	ldrh	r3, [r5, #12]
    for(i=0; i<headerLength; i++)
 8011a9c:	4296      	cmp	r6, r2
     	readBuffer[0] = SPIx->DR ; // Dummy read as we write the header
 8011a9e:	f888 3000 	strb.w	r3, [r8]
    for(i=0; i<headerLength; i++)
 8011aa2:	d1ef      	bne.n	8011a84 <readfromspi+0x1c>
    }

    for(i=0; i<readlength; i++)
 8011aa4:	f1b9 0f00 	cmp.w	r9, #0
 8011aa8:	d015      	beq.n	8011ad6 <readfromspi+0x6e>
    {
    	SPIx->DR = 0;  // Dummy write as we read the message body
 8011aaa:	f04f 0500 	mov.w	r5, #0
 8011aae:	eb08 0409 	add.w	r4, r8, r9
 8011ab2:	4912      	ldr	r1, [pc, #72]	; (8011afc <readfromspi+0x94>)
 8011ab4:	3c01      	subs	r4, #1
 8011ab6:	f108 38ff 	add.w	r8, r8, #4294967295

    	int count = 0;
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011aba:	f242 7311 	movw	r3, #10001	; 0x2711
    	SPIx->DR = 0;  // Dummy write as we read the message body
 8011abe:	818d      	strh	r5, [r1, #12]
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011ac0:	e001      	b.n	8011ac6 <readfromspi+0x5e>
    		count++;
			if(count > SPI_STUCK_CNT){
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	d00e      	beq.n	8011ae4 <readfromspi+0x7c>
    	while((SPIx->SR & SPI_I2S_FLAG_RXNE) == (uint16_t)RESET){
 8011ac6:	890a      	ldrh	r2, [r1, #8]
 8011ac8:	07d2      	lsls	r2, r2, #31
 8011aca:	d5fa      	bpl.n	8011ac2 <readfromspi+0x5a>
				decamutexoff(stat) ;
				return -1;
			}
    	}

	   	readBuffer[i] = SPIx->DR ;//port_SPIx_receive_data(); //this clears RXNE bit
 8011acc:	898b      	ldrh	r3, [r1, #12]
 8011ace:	f808 3f01 	strb.w	r3, [r8, #1]!
    for(i=0; i<readlength; i++)
 8011ad2:	45a0      	cmp	r8, r4
 8011ad4:	d1f1      	bne.n	8011aba <readfromspi+0x52>
    }

    SPIx_CS_GPIO->BSRR = SPIx_CS;
 8011ad6:	2210      	movs	r2, #16
 8011ad8:	4b07      	ldr	r3, [pc, #28]	; (8011af8 <readfromspi+0x90>)
 8011ada:	611a      	str	r2, [r3, #16]

    decamutexoff(stat) ;
 8011adc:	f7ff ff63 	bl	80119a6 <decamutexoff>

    return 0;
 8011ae0:	2000      	movs	r0, #0
 8011ae2:	e006      	b.n	8011af2 <readfromspi+0x8a>
				SPIx_CS_GPIO->BSRR = SPIx_CS;
 8011ae4:	2210      	movs	r2, #16
 8011ae6:	4b04      	ldr	r3, [pc, #16]	; (8011af8 <readfromspi+0x90>)
 8011ae8:	611a      	str	r2, [r3, #16]
				decamutexoff(stat) ;
 8011aea:	f7ff ff5c 	bl	80119a6 <decamutexoff>
				return -1;
 8011aee:	f04f 30ff 	mov.w	r0, #4294967295
} // end readfromspi()
 8011af2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011af6:	bf00      	nop
 8011af8:	40010800 	.word	0x40010800
 8011afc:	40013000 	.word	0x40013000

08011b00 <writetoLCD>:
(
    uint32       bodylength,
    uint8        rs_enable,
    const uint8 *bodyBuffer
)
{
 8011b00:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8011b04:	4680      	mov	r8, r0
 8011b06:	4616      	mov	r6, r2
	uint32 i = 0;
	int sleep = 0;

	if(rs_enable)
 8011b08:	2900      	cmp	r1, #0
 8011b0a:	d13c      	bne.n	8011b86 <writetoLCD+0x86>
	{
    	port_LCD_RS_set();
    }
	else
	{
		if(bodylength == 1)
 8011b0c:	2801      	cmp	r0, #1
 8011b0e:	d02b      	beq.n	8011b68 <writetoLCD+0x68>
 8011b10:	4689      	mov	r9, r1
		{
			if(bodyBuffer[0] & 0x3) //if this is command = 1 or 2 - execution time is > 1ms
				sleep = 1 ;
		}
    	port_LCD_RS_clear();
 8011b12:	f000 fced 	bl	80124f0 <port_LCD_RS_clear>
    }

    port_SPIy_clear_chip_select();  //CS low
 8011b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011b1a:	4828      	ldr	r0, [pc, #160]	; (8011bbc <writetoLCD+0xbc>)
 8011b1c:	f7ef fe63 	bl	80017e6 <GPIO_ResetBits>


    for(i=0; i<bodylength; i++)
 8011b20:	f1b8 0f00 	cmp.w	r8, #0
 8011b24:	d03b      	beq.n	8011b9e <writetoLCD+0x9e>
    {
		port_SPIy_send_data(bodyBuffer[i]); //send data on the SPI
 8011b26:	4c26      	ldr	r4, [pc, #152]	; (8011bc0 <writetoLCD+0xc0>)
 8011b28:	1e75      	subs	r5, r6, #1
 8011b2a:	f1c6 0601 	rsb	r6, r6, #1
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8011b34:	f7f0 fb7a 	bl	800222c <SPI_I2S_SendData>

		while (port_SPIy_no_data()); //wait for rx buffer to fill
 8011b38:	2101      	movs	r1, #1
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f7f0 fbaf 	bl	800229e <SPI_I2S_GetFlagStatus>
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d0f9      	beq.n	8011b38 <writetoLCD+0x38>

		port_SPIy_receive_data(); //this clears RXNE bit
 8011b44:	4620      	mov	r0, r4
 8011b46:	f7f0 fb7f 	bl	8002248 <SPI_I2S_ReceiveData>
    for(i=0; i<bodylength; i++)
 8011b4a:	1973      	adds	r3, r6, r5
 8011b4c:	4598      	cmp	r8, r3
 8011b4e:	d8ee      	bhi.n	8011b2e <writetoLCD+0x2e>
	}

    port_LCD_RS_clear();
 8011b50:	f000 fcce 	bl	80124f0 <port_LCD_RS_clear>

    port_SPIy_set_chip_select();  //CS high
 8011b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011b58:	4818      	ldr	r0, [pc, #96]	; (8011bbc <writetoLCD+0xbc>)
 8011b5a:	f7ef fe36 	bl	80017ca <GPIO_SetBits>

    if(sleep)
 8011b5e:	f1b9 0f00 	cmp.w	r9, #0
 8011b62:	d125      	bne.n	8011bb0 <writetoLCD+0xb0>
    	Sleep(2);
} // end writetoLCD()
 8011b64:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
			if(bodyBuffer[0] & 0x3) //if this is command = 1 or 2 - execution time is > 1ms
 8011b68:	f892 9000 	ldrb.w	r9, [r2]
 8011b6c:	f019 0903 	ands.w	r9, r9, #3
 8011b70:	bf18      	it	ne
 8011b72:	f04f 0901 	movne.w	r9, #1
    	port_LCD_RS_clear();
 8011b76:	f000 fcbb 	bl	80124f0 <port_LCD_RS_clear>
    port_SPIy_clear_chip_select();  //CS low
 8011b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011b7e:	480f      	ldr	r0, [pc, #60]	; (8011bbc <writetoLCD+0xbc>)
 8011b80:	f7ef fe31 	bl	80017e6 <GPIO_ResetBits>
 8011b84:	e7cf      	b.n	8011b26 <writetoLCD+0x26>
    	port_LCD_RS_set();
 8011b86:	f000 fca7 	bl	80124d8 <port_LCD_RS_set>
    port_SPIy_clear_chip_select();  //CS low
 8011b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011b8e:	480b      	ldr	r0, [pc, #44]	; (8011bbc <writetoLCD+0xbc>)
 8011b90:	f7ef fe29 	bl	80017e6 <GPIO_ResetBits>
	int sleep = 0;
 8011b94:	f04f 0900 	mov.w	r9, #0
    for(i=0; i<bodylength; i++)
 8011b98:	f1b8 0f00 	cmp.w	r8, #0
 8011b9c:	d1c3      	bne.n	8011b26 <writetoLCD+0x26>
    port_LCD_RS_clear();
 8011b9e:	f000 fca7 	bl	80124f0 <port_LCD_RS_clear>
} // end writetoLCD()
 8011ba2:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
    port_SPIy_set_chip_select();  //CS high
 8011ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011baa:	4804      	ldr	r0, [pc, #16]	; (8011bbc <writetoLCD+0xbc>)
 8011bac:	f7ef be0d 	b.w	80017ca <GPIO_SetBits>
    	Sleep(2);
 8011bb0:	2002      	movs	r0, #2
} // end writetoLCD()
 8011bb2:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
    	Sleep(2);
 8011bb6:	f000 b987 	b.w	8011ec8 <Sleep>
 8011bba:	bf00      	nop
 8011bbc:	40010c00 	.word	0x40010c00
 8011bc0:	40003800 	.word	0x40003800

08011bc4 <__NOP>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 8011bc4:	b480      	push	{r7}
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	bf00      	nop
 8011bca:	bf00      	nop
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bc80      	pop	{r7}
 8011bd0:	4770      	bx	lr
	...

08011bd4 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	4603      	mov	r3, r0
 8011bdc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8011bde:	79fb      	ldrb	r3, [r7, #7]
 8011be0:	f003 031f 	and.w	r3, r3, #31
 8011be4:	2201      	movs	r2, #1
 8011be6:	fa02 f103 	lsl.w	r1, r2, r3
 8011bea:	4a05      	ldr	r2, [pc, #20]	; (8011c00 <NVIC_EnableIRQ+0x2c>)
 8011bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bf0:	095b      	lsrs	r3, r3, #5
 8011bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8011bf6:	bf00      	nop
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bc80      	pop	{r7}
 8011bfe:	4770      	bx	lr
 8011c00:	e000e100 	.word	0xe000e100

08011c04 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8011c0e:	79fb      	ldrb	r3, [r7, #7]
 8011c10:	f003 031f 	and.w	r3, r3, #31
 8011c14:	2201      	movs	r2, #1
 8011c16:	fa02 f103 	lsl.w	r1, r2, r3
 8011c1a:	4a06      	ldr	r2, [pc, #24]	; (8011c34 <NVIC_DisableIRQ+0x30>)
 8011c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c20:	095b      	lsrs	r3, r3, #5
 8011c22:	3320      	adds	r3, #32
 8011c24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8011c28:	bf00      	nop
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bc80      	pop	{r7}
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	e000e100 	.word	0xe000e100

08011c38 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	4603      	mov	r3, r0
 8011c40:	6039      	str	r1, [r7, #0]
 8011c42:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8011c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	da0b      	bge.n	8011c64 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	b2da      	uxtb	r2, r3
 8011c50:	490c      	ldr	r1, [pc, #48]	; (8011c84 <NVIC_SetPriority+0x4c>)
 8011c52:	79fb      	ldrb	r3, [r7, #7]
 8011c54:	f003 030f 	and.w	r3, r3, #15
 8011c58:	3b04      	subs	r3, #4
 8011c5a:	0112      	lsls	r2, r2, #4
 8011c5c:	b2d2      	uxtb	r2, r2
 8011c5e:	440b      	add	r3, r1
 8011c60:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8011c62:	e009      	b.n	8011c78 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	4907      	ldr	r1, [pc, #28]	; (8011c88 <NVIC_SetPriority+0x50>)
 8011c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c6e:	0112      	lsls	r2, r2, #4
 8011c70:	b2d2      	uxtb	r2, r2
 8011c72:	440b      	add	r3, r1
 8011c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011c78:	bf00      	nop
 8011c7a:	370c      	adds	r7, #12
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bc80      	pop	{r7}
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	e000ed00 	.word	0xe000ed00
 8011c88:	e000e100 	.word	0xe000e100

08011c8c <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c9a:	d301      	bcc.n	8011ca0 <SysTick_Config+0x14>
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	e011      	b.n	8011cc4 <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011ca6:	4a09      	ldr	r2, [pc, #36]	; (8011ccc <SysTick_Config+0x40>)
 8011ca8:	3b01      	subs	r3, #1
 8011caa:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8011cac:	210f      	movs	r1, #15
 8011cae:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb2:	f7ff ffc1 	bl	8011c38 <NVIC_SetPriority>
  // NVIC_SetPriority (SysTick_IRQn, 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8011cb6:	4b05      	ldr	r3, [pc, #20]	; (8011ccc <SysTick_Config+0x40>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 8011cbc:	4b03      	ldr	r3, [pc, #12]	; (8011ccc <SysTick_Config+0x40>)
 8011cbe:	2207      	movs	r2, #7
 8011cc0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8011cc2:	2300      	movs	r3, #0
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3708      	adds	r7, #8
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	e000e010 	.word	0xe000e010

08011cd0 <portGetTickCnt>:
 * @brief wrapper for to read a SysTickTimer, which is incremented with
 * 		  CLOCKS_PER_SEC frequency.
 * 		  The resolution of time32_incr is usually 1/1000 sec.
 * */
 __INLINE unsigned long portGetTickCnt(void)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	af00      	add	r7, sp, #0
	return time32_incr;
 8011cd4:	4b02      	ldr	r3, [pc, #8]	; (8011ce0 <portGetTickCnt+0x10>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bc80      	pop	{r7}
 8011cde:	4770      	bx	lr
 8011ce0:	200052f8 	.word	0x200052f8

08011ce4 <portGetTickCntMicro>:
/* @fn 	  portGetTickCntMicro
* @brief  function to read a SysTickTimer modified by its count to get a higher resolution timestamp.
* 		  The resolution is usually one microsecond.
* */
unsigned long long portGetTickCntMicro(void)
{
 8011ce4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011ce8:	b08d      	sub	sp, #52	; 0x34
 8011cea:	af00      	add	r7, sp, #0
	uint64_t major_incr1 = (uint64_t)time32_incr;
 8011cec:	4b50      	ldr	r3, [pc, #320]	; (8011e30 <portGetTickCntMicro+0x14c>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	f04f 0300 	mov.w	r3, #0
 8011cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint32_t minor_incr1 = SysTick->VAL;
 8011cfa:	4b4e      	ldr	r3, [pc, #312]	; (8011e34 <portGetTickCntMicro+0x150>)
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	61fb      	str	r3, [r7, #28]

	uint64_t major_incr2 = (uint64_t)time32_incr;
 8011d00:	4b4b      	ldr	r3, [pc, #300]	; (8011e30 <portGetTickCntMicro+0x14c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	461a      	mov	r2, r3
 8011d06:	f04f 0300 	mov.w	r3, #0
 8011d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t minor_incr2 = SysTick->VAL;
 8011d0e:	4b49      	ldr	r3, [pc, #292]	; (8011e34 <portGetTickCntMicro+0x150>)
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	60fb      	str	r3, [r7, #12]

	unsigned long long microsec;

	//72 comes from SystemCoreClock / CLOCKS_PER_SEC * 1000
	if(major_incr1 == major_incr2)
 8011d14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d18:	4690      	mov	r8, r2
 8011d1a:	4699      	mov	r9, r3
 8011d1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011d20:	4599      	cmp	r9, r3
 8011d22:	bf08      	it	eq
 8011d24:	4590      	cmpeq	r8, r2
 8011d26:	d13b      	bne.n	8011da0 <portGetTickCntMicro+0xbc>
	{
		microsec = major_incr1*1000 + 1000 - (uint64_t)(minor_incr1/72);
 8011d28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011d2c:	1c54      	adds	r4, r2, #1
 8011d2e:	f143 0500 	adc.w	r5, r3, #0
 8011d32:	4622      	mov	r2, r4
 8011d34:	462b      	mov	r3, r5
 8011d36:	f04f 0000 	mov.w	r0, #0
 8011d3a:	f04f 0100 	mov.w	r1, #0
 8011d3e:	0159      	lsls	r1, r3, #5
 8011d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011d44:	0150      	lsls	r0, r2, #5
 8011d46:	4602      	mov	r2, r0
 8011d48:	460b      	mov	r3, r1
 8011d4a:	1b12      	subs	r2, r2, r4
 8011d4c:	eb63 0305 	sbc.w	r3, r3, r5
 8011d50:	f04f 0000 	mov.w	r0, #0
 8011d54:	f04f 0100 	mov.w	r1, #0
 8011d58:	0099      	lsls	r1, r3, #2
 8011d5a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8011d5e:	0090      	lsls	r0, r2, #2
 8011d60:	4602      	mov	r2, r0
 8011d62:	460b      	mov	r3, r1
 8011d64:	1912      	adds	r2, r2, r4
 8011d66:	eb45 0303 	adc.w	r3, r5, r3
 8011d6a:	f04f 0000 	mov.w	r0, #0
 8011d6e:	f04f 0100 	mov.w	r1, #0
 8011d72:	00d9      	lsls	r1, r3, #3
 8011d74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011d78:	00d0      	lsls	r0, r2, #3
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	4610      	mov	r0, r2
 8011d80:	4619      	mov	r1, r3
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	4a2c      	ldr	r2, [pc, #176]	; (8011e38 <portGetTickCntMicro+0x154>)
 8011d86:	fba2 2303 	umull	r2, r3, r2, r3
 8011d8a:	091b      	lsrs	r3, r3, #4
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	f04f 0300 	mov.w	r3, #0
 8011d92:	ebb0 0a02 	subs.w	sl, r0, r2
 8011d96:	eb61 0b03 	sbc.w	fp, r1, r3
 8011d9a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8011d9e:	e03d      	b.n	8011e1c <portGetTickCntMicro+0x138>
	}
	else
	{
		microsec = major_incr2*1000 + 1000 - (uint64_t)(minor_incr2/72);
 8011da0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011da4:	1c50      	adds	r0, r2, #1
 8011da6:	f143 0100 	adc.w	r1, r3, #0
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	f04f 0400 	mov.w	r4, #0
 8011db2:	f04f 0500 	mov.w	r5, #0
 8011db6:	015d      	lsls	r5, r3, #5
 8011db8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8011dbc:	0154      	lsls	r4, r2, #5
 8011dbe:	4622      	mov	r2, r4
 8011dc0:	462b      	mov	r3, r5
 8011dc2:	1a12      	subs	r2, r2, r0
 8011dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8011dc8:	f04f 0400 	mov.w	r4, #0
 8011dcc:	f04f 0500 	mov.w	r5, #0
 8011dd0:	009d      	lsls	r5, r3, #2
 8011dd2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8011dd6:	0094      	lsls	r4, r2, #2
 8011dd8:	4622      	mov	r2, r4
 8011dda:	462b      	mov	r3, r5
 8011ddc:	1812      	adds	r2, r2, r0
 8011dde:	eb41 0303 	adc.w	r3, r1, r3
 8011de2:	f04f 0000 	mov.w	r0, #0
 8011de6:	f04f 0100 	mov.w	r1, #0
 8011dea:	00d9      	lsls	r1, r3, #3
 8011dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011df0:	00d0      	lsls	r0, r2, #3
 8011df2:	4602      	mov	r2, r0
 8011df4:	460b      	mov	r3, r1
 8011df6:	4610      	mov	r0, r2
 8011df8:	4619      	mov	r1, r3
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4a0e      	ldr	r2, [pc, #56]	; (8011e38 <portGetTickCntMicro+0x154>)
 8011dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8011e02:	091b      	lsrs	r3, r3, #4
 8011e04:	461a      	mov	r2, r3
 8011e06:	f04f 0300 	mov.w	r3, #0
 8011e0a:	1a84      	subs	r4, r0, r2
 8011e0c:	603c      	str	r4, [r7, #0]
 8011e0e:	eb61 0303 	sbc.w	r3, r1, r3
 8011e12:	607b      	str	r3, [r7, #4]
 8011e14:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011e18:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	}

	return microsec;
 8011e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8011e20:	4610      	mov	r0, r2
 8011e22:	4619      	mov	r1, r3
 8011e24:	3734      	adds	r7, #52	; 0x34
 8011e26:	46bd      	mov	sp, r7
 8011e28:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	200052f8 	.word	0x200052f8
 8011e34:	e000e010 	.word	0xe000e010
 8011e38:	38e38e39 	.word	0x38e38e39

08011e3c <SysTick_Configuration>:

 /* @fn    SysTick_Configuration
  * @brief SysTickTimer is configured to be clocked from HCLK (72MHz)
  * */
int SysTick_Configuration(void)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / CLOCKS_PER_SEC) !=0)
 8011e40:	4b0a      	ldr	r3, [pc, #40]	; (8011e6c <SysTick_Configuration+0x30>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	4a0a      	ldr	r2, [pc, #40]	; (8011e70 <SysTick_Configuration+0x34>)
 8011e46:	fba2 2303 	umull	r2, r3, r2, r3
 8011e4a:	099b      	lsrs	r3, r3, #6
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7ff ff1d 	bl	8011c8c <SysTick_Config>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d000      	beq.n	8011e5a <SysTick_Configuration+0x1e>
	{
		/* Capture error */
		while (1);
 8011e58:	e7fe      	b.n	8011e58 <SysTick_Configuration+0x1c>
	}
	NVIC_SetPriority (SysTick_IRQn, 5);
 8011e5a:	2105      	movs	r1, #5
 8011e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e60:	f7ff feea 	bl	8011c38 <NVIC_SetPriority>

	return 0;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	20000000 	.word	0x20000000
 8011e70:	10624dd3 	.word	0x10624dd3

08011e74 <usleep>:
/* @fn 	  usleep
 * @brief precise microseconds delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
	useconds_t i,j;

#pragma GCC ivdep
	for(i=0;i<usec;i++)
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	60fb      	str	r3, [r7, #12]
 8011e80:	e014      	b.n	8011eac <usleep+0x38>
	{

#pragma GCC ivdep
		for(j=0;j<2;j++)
 8011e82:	2300      	movs	r3, #0
 8011e84:	60bb      	str	r3, [r7, #8]
 8011e86:	e006      	b.n	8011e96 <usleep+0x22>
		{
			__NOP();
 8011e88:	f7ff fe9c 	bl	8011bc4 <__NOP>
			__NOP();
 8011e8c:	f7ff fe9a 	bl	8011bc4 <__NOP>
		for(j=0;j<2;j++)
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	3301      	adds	r3, #1
 8011e94:	60bb      	str	r3, [r7, #8]
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	bf94      	ite	ls
 8011e9c:	2301      	movls	r3, #1
 8011e9e:	2300      	movhi	r3, #0
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1f0      	bne.n	8011e88 <usleep+0x14>
	for(i=0;i<usec;i++)
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	60fb      	str	r3, [r7, #12]
 8011eac:	68fa      	ldr	r2, [r7, #12]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	bf34      	ite	cc
 8011eb4:	2301      	movcc	r3, #1
 8011eb6:	2300      	movcs	r3, #0
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1e1      	bne.n	8011e82 <usleep+0xe>
		}
	}
	return 0;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3710      	adds	r7, #16
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <Sleep>:

/* @fn 	  Sleep
 * @brief Sleep delay in ms using SysTicktimer
 * */
void Sleep(__IO uint32_t Delay)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	60fb      	str	r3, [r7, #12]
	tickstart = portGetTickCnt();
 8011ed4:	f7ff fefc 	bl	8011cd0 <portGetTickCnt>
 8011ed8:	60f8      	str	r0, [r7, #12]
	while((portGetTickCnt() - tickstart) < Delay)
 8011eda:	bf00      	nop
 8011edc:	f7ff fef8 	bl	8011cd0 <portGetTickCnt>
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	1ad2      	subs	r2, r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d3f7      	bcc.n	8011edc <Sleep+0x14>
	{
	}
}
 8011eec:	bf00      	nop
 8011eee:	bf00      	nop
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}

08011ef6 <peripherals_init>:
 *******************************************************************************/

/* @fn 	  peripherals_init
 * */
int peripherals_init (void)
{
 8011ef6:	b580      	push	{r7, lr}
 8011ef8:	af00      	add	r7, sp, #0
	RCC_Configuration();
 8011efa:	f000 f865 	bl	8011fc8 <RCC_Configuration>
	GPIO_Configuration();
 8011efe:	f000 f99f 	bl	8012240 <GPIO_Configuration>

	SysTick_Configuration();
 8011f02:	f7ff ff9b 	bl	8011e3c <SysTick_Configuration>
	NVIC_Configuration();
 8011f06:	f000 f817 	bl	8011f38 <NVIC_Configuration>
	
	return 0;
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <spi_peripheral_init>:


/* @fn 	  spi_peripheral_init
 * */
void spi_peripheral_init(uint8_t using_lcd)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	4603      	mov	r3, r0
 8011f18:	71fb      	strb	r3, [r7, #7]
	SPI1_Configuration();	//initialise SPI1 peripheral for DW1000 control
 8011f1a:	f000 f8eb 	bl	80120f4 <SPI1_Configuration>

	if (using_lcd)
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d005      	beq.n	8011f30 <spi_peripheral_init+0x20>
	{
		SPI2_Configuration();	//initialise SPI2 peripheral for LCD control
 8011f24:	f000 f91c 	bl	8012160 <SPI2_Configuration>

		port_LCD_RS_clear();
 8011f28:	f000 fae2 	bl	80124f0 <port_LCD_RS_clear>
		port_LCD_RW_clear();
 8011f2c:	f000 faec 	bl	8012508 <port_LCD_RW_clear>
	}
}
 8011f30:	bf00      	nop
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <NVIC_Configuration>:


/* @fn 	  NVIC_Configuration
 * */
int NVIC_Configuration(void)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Enable GPIO used as DECA IRQ for interrupt
	GPIO_InitStructure.GPIO_Pin = DECAIRQ;
 8011f3e:	2320      	movs	r3, #32
 8011f40:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = 	GPIO_Mode_IPD;	//IRQ pin should be Pull Down to prevent unnecessary EXT IRQ while DW1000 goes to sleep mode
 8011f42:	2328      	movs	r3, #40	; 0x28
 8011f44:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(DECAIRQ_GPIO, &GPIO_InitStructure);
 8011f46:	f107 030c 	add.w	r3, r7, #12
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4813      	ldr	r0, [pc, #76]	; (8011f9c <NVIC_Configuration+0x64>)
 8011f4e:	f7ef fb67 	bl	8001620 <GPIO_Init>

	/* Connect EXTI Line to GPIO Pin */
	GPIO_EXTILineConfig(DECAIRQ_EXTI_PORT, DECAIRQ_EXTI_PIN);
 8011f52:	2105      	movs	r1, #5
 8011f54:	2001      	movs	r0, #1
 8011f56:	f7ef fcc5 	bl	80018e4 <GPIO_EXTILineConfig>

	/* Configure EXTI line */
	EXTI_InitStructure.EXTI_Line = DECAIRQ_EXTI;
 8011f5a:	2320      	movs	r3, #32
 8011f5c:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8011f62:	2308      	movs	r3, #8
 8011f64:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = DECAIRQ_EXTI_USEIRQ;
 8011f66:	2301      	movs	r3, #1
 8011f68:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 8011f6a:	1d3b      	adds	r3, r7, #4
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ef faa3 	bl	80014b8 <EXTI_Init>

	/* Set NVIC Grouping to 16 groups of interrupt without sub-grouping */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8011f72:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8011f76:	f7ef fa2b 	bl	80013d0 <NVIC_PriorityGroupConfig>

	/* Enable and set EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = DECAIRQ_EXTI_IRQn;
 8011f7a:	2317      	movs	r3, #23
 8011f7c:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 15;
 8011f7e:	230f      	movs	r3, #15
 8011f80:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = DECAIRQ_EXTI_USEIRQ;
 8011f86:	2301      	movs	r3, #1
 8011f88:	70fb      	strb	r3, [r7, #3]

	NVIC_Init(&NVIC_InitStructure);
 8011f8a:	463b      	mov	r3, r7
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7ef fa31 	bl	80013f4 <NVIC_Init>

	return 0;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	40010c00 	.word	0x40010c00

08011fa0 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t EXTI_Line)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_GET_EXTI_LINE(EXTI_Line));

	return ((EXTI->IMR & EXTI_Line) == (uint32_t)RESET)?(RESET):(SET);
 8011fa8:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <EXTI_GetITEnStatus+0x24>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4013      	ands	r3, r2
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	bf14      	ite	ne
 8011fb4:	2301      	movne	r3, #1
 8011fb6:	2300      	moveq	r3, #0
 8011fb8:	b2db      	uxtb	r3, r3
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bc80      	pop	{r7}
 8011fc2:	4770      	bx	lr
 8011fc4:	40010400 	.word	0x40010400

08011fc8 <RCC_Configuration>:

/* @fn 	  RCC_Configuration
 * */
int RCC_Configuration(void)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
	ErrorStatus HSEStartUpStatus;
	RCC_ClocksTypeDef RCC_ClockFreq;

	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 8011fce:	f7ef fcc9 	bl	8001964 <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 8011fd2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011fd6:	f7ef fcfd 	bl	80019d4 <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8011fda:	f7ef fd29 	bl	8001a30 <RCC_WaitForHSEStartUp>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	75fb      	strb	r3, [r7, #23]

	if(HSEStartUpStatus != ERROR)
 8011fe2:	7dfb      	ldrb	r3, [r7, #23]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d042      	beq.n	801206e <RCC_Configuration+0xa6>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8011fe8:	2010      	movs	r0, #16
 8011fea:	f7ef fb01 	bl	80015f0 <FLASH_PrefetchBufferCmd>
		/****************************************************************/
		/* HSE= up to 25MHz (on EVB1000 is 12MHz),
		 * HCLK=72MHz, PCLK2=72MHz, PCLK1=36MHz 						*/
		/****************************************************************/
		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 8011fee:	2002      	movs	r0, #2
 8011ff0:	f7ef fae2 	bl	80015b8 <FLASH_SetLatency>
		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	f7ef fe03 	bl	8001c00 <RCC_HCLKConfig>
		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8011ffa:	2000      	movs	r0, #0
 8011ffc:	f7ef fe38 	bl	8001c70 <RCC_PCLK2Config>
		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8012000:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012004:	f7ef fe18 	bl	8001c38 <RCC_PCLK1Config>
		/*  ADCCLK = PCLK2/4 */
		RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8012008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801200c:	f7ef fe4c 	bl	8001ca8 <RCC_ADCCLKConfig>

		/* Configure PLLs *********************************************************/
		/* PLL2 configuration: PLL2CLK = (HSE / 4) * 8 = 24 MHz */
		RCC_PREDIV2Config(RCC_PREDIV2_Div4);
 8012010:	2030      	movs	r0, #48	; 0x30
 8012012:	f7ef fd83 	bl	8001b1c <RCC_PREDIV2Config>
		RCC_PLL2Config(RCC_PLL2Mul_8);
 8012016:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801201a:	f7ef fd9b 	bl	8001b54 <RCC_PLL2Config>

		/* Enable PLL2 */
		RCC_PLL2Cmd(ENABLE);
 801201e:	2001      	movs	r0, #1
 8012020:	f7ef fdb4 	bl	8001b8c <RCC_PLL2Cmd>

		/* Wait till PLL2 is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET){}
 8012024:	bf00      	nop
 8012026:	203b      	movs	r0, #59	; 0x3b
 8012028:	f7ef ffda 	bl	8001fe0 <RCC_GetFlagStatus>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0f9      	beq.n	8012026 <RCC_Configuration+0x5e>

		/* PLL1 configuration: PLLCLK = (PLL2 / 3) * 9 = 72 MHz */
		RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div3);
 8012032:	2102      	movs	r1, #2
 8012034:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012038:	f7ef fd50 	bl	8001adc <RCC_PREDIV1Config>

		RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
 801203c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8012040:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012044:	f7ef fd1c 	bl	8001a80 <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 8012048:	2001      	movs	r0, #1
 801204a:	f7ef fd37 	bl	8001abc <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET){}
 801204e:	bf00      	nop
 8012050:	2039      	movs	r0, #57	; 0x39
 8012052:	f7ef ffc5 	bl	8001fe0 <RCC_GetFlagStatus>
 8012056:	4603      	mov	r3, r0
 8012058:	2b00      	cmp	r3, #0
 801205a:	d0f9      	beq.n	8012050 <RCC_Configuration+0x88>

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 801205c:	2002      	movs	r0, #2
 801205e:	f7ef fda5 	bl	8001bac <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while (RCC_GetSYSCLKSource() != 0x08){}
 8012062:	bf00      	nop
 8012064:	f7ef fdbe 	bl	8001be4 <RCC_GetSYSCLKSource>
 8012068:	4603      	mov	r3, r0
 801206a:	2b08      	cmp	r3, #8
 801206c:	d1fa      	bne.n	8012064 <RCC_Configuration+0x9c>
	}

	RCC_GetClocksFreq(&RCC_ClockFreq);
 801206e:	463b      	mov	r3, r7
 8012070:	4618      	mov	r0, r3
 8012072:	f7ef fe35 	bl	8001ce0 <RCC_GetClocksFreq>

	/* Enable SPI1 clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8012076:	2101      	movs	r1, #1
 8012078:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801207c:	f7ef ff38 	bl	8001ef0 <RCC_APB2PeriphClockCmd>

	/* Enable SPI2 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8012080:	2101      	movs	r1, #1
 8012082:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012086:	f7ef ff51 	bl	8001f2c <RCC_APB1PeriphClockCmd>

	/* Enable GPIOs clocks */
	RCC_APB2PeriphClockCmd(
 801208a:	2101      	movs	r1, #1
 801208c:	207d      	movs	r0, #125	; 0x7d
 801208e:	f7ef ff2f 	bl	8001ef0 <RCC_APB2PeriphClockCmd>
						RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
						ENABLE);

	return 0;
 8012092:	2300      	movs	r3, #0
}
 8012094:	4618      	mov	r0, r3
 8012096:	3718      	adds	r7, #24
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <SPI1_ConfigRate>:

/* @fn 	SPI1_ConfigRate
 * 		sets the SPI rate of DW1000 SPI
 * */
void SPI1_ConfigRate(uint16_t scalingfactor)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	4603      	mov	r3, r0
 80120a4:	80fb      	strh	r3, [r7, #6]
	SPI_InitTypeDef SPI_InitStructure;

	SPI_I2S_DeInit(SPIx);
 80120a6:	4812      	ldr	r0, [pc, #72]	; (80120f0 <SPI1_ConfigRate+0x54>)
 80120a8:	f7f0 f824 	bl	80020f4 <SPI_I2S_DeInit>

	// SPIx Mode setup
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80120ac:	2300      	movs	r3, #0
 80120ae:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80120b0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80120b4:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80120b6:	2300      	movs	r3, #0
 80120b8:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80120ba:	2300      	movs	r3, #0
 80120bc:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80120be:	2300      	movs	r3, #0
 80120c0:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80120c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80120c6:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = scalingfactor;
 80120c8:	88fb      	ldrh	r3, [r7, #6]
 80120ca:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80120cc:	2300      	movs	r3, #0
 80120ce:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80120d0:	2307      	movs	r3, #7
 80120d2:	83bb      	strh	r3, [r7, #28]

	SPI_Init(SPIx, &SPI_InitStructure);
 80120d4:	f107 030c 	add.w	r3, r7, #12
 80120d8:	4619      	mov	r1, r3
 80120da:	4805      	ldr	r0, [pc, #20]	; (80120f0 <SPI1_ConfigRate+0x54>)
 80120dc:	f7f0 f844 	bl	8002168 <SPI_Init>

	// Enable SPIx
	SPI_Cmd(SPIx, ENABLE);
 80120e0:	2101      	movs	r1, #1
 80120e2:	4803      	ldr	r0, [pc, #12]	; (80120f0 <SPI1_ConfigRate+0x54>)
 80120e4:	f7f0 f883 	bl	80021ee <SPI_Cmd>
}
 80120e8:	bf00      	nop
 80120ea:	3720      	adds	r7, #32
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	40013000 	.word	0x40013000

080120f4 <SPI1_Configuration>:
 * 		connects GPIO pins to SPIx
 * 		and configures SPIx
 *
 * */
int SPI1_Configuration(void)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// SPIx SCK and MOSI pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_SCK | SPIx_MOSI;
 80120fa:	23a0      	movs	r3, #160	; 0xa0
 80120fc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80120fe:	2318      	movs	r3, #24
 8012100:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012102:	2303      	movs	r3, #3
 8012104:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);
 8012106:	1d3b      	adds	r3, r7, #4
 8012108:	4619      	mov	r1, r3
 801210a:	4813      	ldr	r0, [pc, #76]	; (8012158 <SPI1_Configuration+0x64>)
 801210c:	f7ef fa88 	bl	8001620 <GPIO_Init>

	// SPIx MISO pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_MISO;
 8012110:	2340      	movs	r3, #64	; 0x40
 8012112:	80bb      	strh	r3, [r7, #4]
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 8012114:	2348      	movs	r3, #72	; 0x48
 8012116:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(SPIx_GPIO, &GPIO_InitStructure);
 8012118:	1d3b      	adds	r3, r7, #4
 801211a:	4619      	mov	r1, r3
 801211c:	480e      	ldr	r0, [pc, #56]	; (8012158 <SPI1_Configuration+0x64>)
 801211e:	f7ef fa7f 	bl	8001620 <GPIO_Init>

	// SPIx CS pin setup
	GPIO_InitStructure.GPIO_Pin = SPIx_CS;
 8012122:	2310      	movs	r3, #16
 8012124:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8012126:	2310      	movs	r3, #16
 8012128:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801212a:	2303      	movs	r3, #3
 801212c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(SPIx_CS_GPIO, &GPIO_InitStructure);
 801212e:	1d3b      	adds	r3, r7, #4
 8012130:	4619      	mov	r1, r3
 8012132:	4809      	ldr	r0, [pc, #36]	; (8012158 <SPI1_Configuration+0x64>)
 8012134:	f7ef fa74 	bl	8001620 <GPIO_Init>

	// Disable SPIx SS Output
	SPI_SSOutputCmd(SPIx, DISABLE);
 8012138:	2100      	movs	r1, #0
 801213a:	4808      	ldr	r0, [pc, #32]	; (801215c <SPI1_Configuration+0x68>)
 801213c:	f7f0 f890 	bl	8002260 <SPI_SSOutputCmd>

	// Set CS high
	GPIO_SetBits(SPIx_CS_GPIO, SPIx_CS);
 8012140:	2110      	movs	r1, #16
 8012142:	4805      	ldr	r0, [pc, #20]	; (8012158 <SPI1_Configuration+0x64>)
 8012144:	f7ef fb41 	bl	80017ca <GPIO_SetBits>

	// Configure and Enable SPIx
	SPI1_ConfigRate(SPI_BaudRatePrescaler_32);
 8012148:	2020      	movs	r0, #32
 801214a:	f7ff ffa7 	bl	801209c <SPI1_ConfigRate>

    return 0;
 801214e:	2300      	movs	r3, #0
}
 8012150:	4618      	mov	r0, r3
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	40010800 	.word	0x40010800
 801215c:	40013000 	.word	0x40013000

08012160 <SPI2_Configuration>:


int SPI2_Configuration(void)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
	SPI_InitTypeDef SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	SPI_I2S_DeInit(SPIy);
 8012166:	4834      	ldr	r0, [pc, #208]	; (8012238 <SPI2_Configuration+0xd8>)
 8012168:	f7ef ffc4 	bl	80020f4 <SPI_I2S_DeInit>

	// SPIy Mode setup
//	SPI_InitStructure.SPI_Direction = SPI_Direction_1Line_Tx;
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801216c:	2300      	movs	r3, #0
 801216e:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8012170:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012174:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8012176:	2300      	movs	r3, #0
 8012178:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
 801217a:	2302      	movs	r3, #2
 801217c:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 801217e:	2301      	movs	r3, #1
 8012180:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8012182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012186:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8012188:	2330      	movs	r3, #48	; 0x30
 801218a:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 801218c:	2300      	movs	r3, #0
 801218e:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8012190:	2307      	movs	r3, #7
 8012192:	82bb      	strh	r3, [r7, #20]

	SPI_Init(SPIy, &SPI_InitStructure);
 8012194:	1d3b      	adds	r3, r7, #4
 8012196:	4619      	mov	r1, r3
 8012198:	4827      	ldr	r0, [pc, #156]	; (8012238 <SPI2_Configuration+0xd8>)
 801219a:	f7ef ffe5 	bl	8002168 <SPI_Init>

	// SPIy SCK and MOSI pin setup
	GPIO_InitStructure.GPIO_Pin = SPIy_SCK | SPIy_MOSI;
 801219e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80121a2:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80121a4:	2318      	movs	r3, #24
 80121a6:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80121a8:	2303      	movs	r3, #3
 80121aa:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIy_GPIO, &GPIO_InitStructure);
 80121ac:	463b      	mov	r3, r7
 80121ae:	4619      	mov	r1, r3
 80121b0:	4822      	ldr	r0, [pc, #136]	; (801223c <SPI2_Configuration+0xdc>)
 80121b2:	f7ef fa35 	bl	8001620 <GPIO_Init>

	// SPIy MISO pin setup
	GPIO_InitStructure.GPIO_Pin = SPIy_MISO;
 80121b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80121ba:	803b      	strh	r3, [r7, #0]
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
 80121bc:	2348      	movs	r3, #72	; 0x48
 80121be:	70fb      	strb	r3, [r7, #3]

	GPIO_Init(SPIy_GPIO, &GPIO_InitStructure);
 80121c0:	463b      	mov	r3, r7
 80121c2:	4619      	mov	r1, r3
 80121c4:	481d      	ldr	r0, [pc, #116]	; (801223c <SPI2_Configuration+0xdc>)
 80121c6:	f7ef fa2b 	bl	8001620 <GPIO_Init>

	// SPIy CS pin setup
	GPIO_InitStructure.GPIO_Pin = SPIy_CS;
 80121ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121ce:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80121d0:	2310      	movs	r3, #16
 80121d2:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80121d4:	2303      	movs	r3, #3
 80121d6:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIy_CS_GPIO, &GPIO_InitStructure);
 80121d8:	463b      	mov	r3, r7
 80121da:	4619      	mov	r1, r3
 80121dc:	4817      	ldr	r0, [pc, #92]	; (801223c <SPI2_Configuration+0xdc>)
 80121de:	f7ef fa1f 	bl	8001620 <GPIO_Init>

	// Disable SPIy SS Output
	SPI_SSOutputCmd(SPIy, DISABLE);
 80121e2:	2100      	movs	r1, #0
 80121e4:	4814      	ldr	r0, [pc, #80]	; (8012238 <SPI2_Configuration+0xd8>)
 80121e6:	f7f0 f83b 	bl	8002260 <SPI_SSOutputCmd>

	// Enable SPIy
	SPI_Cmd(SPIy, ENABLE);
 80121ea:	2101      	movs	r1, #1
 80121ec:	4812      	ldr	r0, [pc, #72]	; (8012238 <SPI2_Configuration+0xd8>)
 80121ee:	f7ef fffe 	bl	80021ee <SPI_Cmd>

	// Set CS high
	GPIO_SetBits(SPIy_CS_GPIO, SPIy_CS);
 80121f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121f6:	4811      	ldr	r0, [pc, #68]	; (801223c <SPI2_Configuration+0xdc>)
 80121f8:	f7ef fae7 	bl	80017ca <GPIO_SetBits>

	// LCD_RS pin setup
	GPIO_InitStructure.GPIO_Pin = LCD_RS;
 80121fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012200:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8012202:	2310      	movs	r3, #16
 8012204:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012206:	2303      	movs	r3, #3
 8012208:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIy_GPIO, &GPIO_InitStructure);
 801220a:	463b      	mov	r3, r7
 801220c:	4619      	mov	r1, r3
 801220e:	480b      	ldr	r0, [pc, #44]	; (801223c <SPI2_Configuration+0xdc>)
 8012210:	f7ef fa06 	bl	8001620 <GPIO_Init>

	// LCD_RW pin setup
	GPIO_InitStructure.GPIO_Pin = LCD_RW;
 8012214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012218:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 801221a:	2310      	movs	r3, #16
 801221c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801221e:	2303      	movs	r3, #3
 8012220:	70bb      	strb	r3, [r7, #2]

	GPIO_Init(SPIy_GPIO, &GPIO_InitStructure);
 8012222:	463b      	mov	r3, r7
 8012224:	4619      	mov	r1, r3
 8012226:	4805      	ldr	r0, [pc, #20]	; (801223c <SPI2_Configuration+0xdc>)
 8012228:	f7ef f9fa 	bl	8001620 <GPIO_Init>

    return 0;
 801222c:	2300      	movs	r3, #0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3718      	adds	r7, #24
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	40003800 	.word	0x40003800
 801223c:	40010c00 	.word	0x40010c00

08012240 <GPIO_Configuration>:

int GPIO_Configuration(void)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
	/* Configure all unused GPIO port pins in Analog Input mode (floating input
	* trigger OFF), this will reduce the power consumption and increase the device
	* immunity against EMI/EMC */

	// Enable GPIOs clocks
	RCC_APB2PeriphClockCmd(
 8012246:	2101      	movs	r1, #1
 8012248:	207d      	movs	r0, #125	; 0x7d
 801224a:	f7ef fe51 	bl	8001ef0 <RCC_APB2PeriphClockCmd>
						RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
						RCC_APB2Periph_GPIOE | RCC_APB2Periph_AFIO,
						ENABLE);

	// Set all GPIO pins as analog inputs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
 801224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012252:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8012254:	2300      	movs	r3, #0
 8012256:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012258:	1d3b      	adds	r3, r7, #4
 801225a:	4619      	mov	r1, r3
 801225c:	4823      	ldr	r0, [pc, #140]	; (80122ec <GPIO_Configuration+0xac>)
 801225e:	f7ef f9df 	bl	8001620 <GPIO_Init>
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8012262:	1d3b      	adds	r3, r7, #4
 8012264:	4619      	mov	r1, r3
 8012266:	4822      	ldr	r0, [pc, #136]	; (80122f0 <GPIO_Configuration+0xb0>)
 8012268:	f7ef f9da 	bl	8001620 <GPIO_Init>
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 801226c:	1d3b      	adds	r3, r7, #4
 801226e:	4619      	mov	r1, r3
 8012270:	4820      	ldr	r0, [pc, #128]	; (80122f4 <GPIO_Configuration+0xb4>)
 8012272:	f7ef f9d5 	bl	8001620 <GPIO_Init>
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8012276:	1d3b      	adds	r3, r7, #4
 8012278:	4619      	mov	r1, r3
 801227a:	481f      	ldr	r0, [pc, #124]	; (80122f8 <GPIO_Configuration+0xb8>)
 801227c:	f7ef f9d0 	bl	8001620 <GPIO_Init>
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8012280:	1d3b      	adds	r3, r7, #4
 8012282:	4619      	mov	r1, r3
 8012284:	481d      	ldr	r0, [pc, #116]	; (80122fc <GPIO_Configuration+0xbc>)
 8012286:	f7ef f9cb 	bl	8001620 <GPIO_Init>

	//Enable GPIO used for User button
	GPIO_InitStructure.GPIO_Pin = TA_BOOT1;
 801228a:	2304      	movs	r3, #4
 801228c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 801228e:	2304      	movs	r3, #4
 8012290:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(TA_BOOT1_GPIO, &GPIO_InitStructure);
 8012292:	1d3b      	adds	r3, r7, #4
 8012294:	4619      	mov	r1, r3
 8012296:	4816      	ldr	r0, [pc, #88]	; (80122f0 <GPIO_Configuration+0xb0>)
 8012298:	f7ef f9c2 	bl	8001620 <GPIO_Init>

	//Enable GPIO used for Response Delay setting
	GPIO_InitStructure.GPIO_Pin = TA_RESP_DLY | TA_SW1_3 | TA_SW1_4 | TA_SW1_5 | TA_SW1_6 | TA_SW1_7 | TA_SW1_8;
 801229c:	233f      	movs	r3, #63	; 0x3f
 801229e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80122a0:	2304      	movs	r3, #4
 80122a2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(TA_RESP_DLY_GPIO, &GPIO_InitStructure);
 80122a4:	1d3b      	adds	r3, r7, #4
 80122a6:	4619      	mov	r1, r3
 80122a8:	4812      	ldr	r0, [pc, #72]	; (80122f4 <GPIO_Configuration+0xb4>)
 80122aa:	f7ef f9b9 	bl	8001620 <GPIO_Init>

	//Enable GPIO used for SW1 switch setting
	GPIO_InitStructure.GPIO_Pin = TA_SW1_3 | TA_SW1_4 | TA_SW1_5 | TA_SW1_6 | TA_SW1_7 | TA_SW1_8;
 80122ae:	233f      	movs	r3, #63	; 0x3f
 80122b0:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80122b2:	2304      	movs	r3, #4
 80122b4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(TA_SW1_GPIO, &GPIO_InitStructure);
 80122b6:	1d3b      	adds	r3, r7, #4
 80122b8:	4619      	mov	r1, r3
 80122ba:	480e      	ldr	r0, [pc, #56]	; (80122f4 <GPIO_Configuration+0xb4>)
 80122bc:	f7ef f9b0 	bl	8001620 <GPIO_Init>

	// Enable GPIO used for LEDs
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_7;
 80122c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80122c4:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80122c6:	2310      	movs	r3, #16
 80122c8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80122ca:	2303      	movs	r3, #3
 80122cc:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80122ce:	1d3b      	adds	r3, r7, #4
 80122d0:	4619      	mov	r1, r3
 80122d2:	4808      	ldr	r0, [pc, #32]	; (80122f4 <GPIO_Configuration+0xb4>)
 80122d4:	f7ef f9a4 	bl	8001620 <GPIO_Init>
	GPIO_PinRemapConfig(GPIO_Remap_SPI1, DISABLE);
 80122d8:	2100      	movs	r1, #0
 80122da:	2001      	movs	r0, #1
 80122dc:	f7ef fa92 	bl	8001804 <GPIO_PinRemapConfig>

    return 0;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3708      	adds	r7, #8
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	40010800 	.word	0x40010800
 80122f0:	40010c00 	.word	0x40010c00
 80122f4:	40011000 	.word	0x40011000
 80122f8:	40011400 	.word	0x40011400
 80122fc:	40011800 	.word	0x40011800

08012300 <reset_DW1000>:
 * 			In general it is output, but it also can be used to reset the digital
 * 			part of DW1000 by driving this pin low.
 * 			Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable GPIO used for DW1000 reset
	GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
 8012306:	2301      	movs	r3, #1
 8012308:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 801230a:	2310      	movs	r3, #16
 801230c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801230e:	2303      	movs	r3, #3
 8012310:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
 8012312:	1d3b      	adds	r3, r7, #4
 8012314:	4619      	mov	r1, r3
 8012316:	480e      	ldr	r0, [pc, #56]	; (8012350 <reset_DW1000+0x50>)
 8012318:	f7ef f982 	bl	8001620 <GPIO_Init>

	//drive the RSTn pin low
	GPIO_ResetBits(DW1000_RSTn_GPIO, DW1000_RSTn);
 801231c:	2101      	movs	r1, #1
 801231e:	480c      	ldr	r0, [pc, #48]	; (8012350 <reset_DW1000+0x50>)
 8012320:	f7ef fa61 	bl	80017e6 <GPIO_ResetBits>

	usleep(1);
 8012324:	2001      	movs	r0, #1
 8012326:	f7ff fda5 	bl	8011e74 <usleep>

	//put the pin back to tri-state ... as input
	GPIO_InitStructure.GPIO_Pin = DW1000_RSTn;
 801232a:	2301      	movs	r3, #1
 801232c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 801232e:	2300      	movs	r3, #0
 8012330:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012332:	2303      	movs	r3, #3
 8012334:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(DW1000_RSTn_GPIO, &GPIO_InitStructure);
 8012336:	1d3b      	adds	r3, r7, #4
 8012338:	4619      	mov	r1, r3
 801233a:	4805      	ldr	r0, [pc, #20]	; (8012350 <reset_DW1000+0x50>)
 801233c:	f7ef f970 	bl	8001620 <GPIO_Init>

	Sleep(2);
 8012340:	2002      	movs	r0, #2
 8012342:	f7ff fdc1 	bl	8011ec8 <Sleep>
}
 8012346:	bf00      	nop
 8012348:	3708      	adds	r7, #8
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	40010800 	.word	0x40010800

08012354 <port_is_boot1_on>:
/* @fn		port_is_boot1_low
 * @brief	check the BOOT1 pin status.
 * @return  1 if ON and 0 for OFF
 * */
int port_is_boot1_on(uint16_t x)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	4603      	mov	r3, r0
 801235c:	80fb      	strh	r3, [r7, #6]
	return ((GPIO_ReadInputDataBit(TA_BOOT1_GPIO, TA_BOOT1))?(0):(1));
 801235e:	2104      	movs	r1, #4
 8012360:	4806      	ldr	r0, [pc, #24]	; (801237c <port_is_boot1_on+0x28>)
 8012362:	f7ef fa19 	bl	8001798 <GPIO_ReadInputDataBit>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	bf0c      	ite	eq
 801236c:	2301      	moveq	r3, #1
 801236e:	2300      	movne	r3, #0
 8012370:	b2db      	uxtb	r3, r3
}
 8012372:	4618      	mov	r0, r3
 8012374:	3708      	adds	r7, #8
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	40010c00 	.word	0x40010c00

08012380 <port_is_switch_on>:
 * @brief	check the switch status.
 * 			when switch (S1) is 'on' the pin is low
 * @return  1 if ON and 0 for OFF
 * */
int port_is_switch_on(uint16_t GPIOpin)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	80fb      	strh	r3, [r7, #6]
	return ((GPIO_ReadInputDataBit(TA_SW1_GPIO, GPIOpin))?(0):(1));
 801238a:	88fb      	ldrh	r3, [r7, #6]
 801238c:	4619      	mov	r1, r3
 801238e:	4806      	ldr	r0, [pc, #24]	; (80123a8 <port_is_switch_on+0x28>)
 8012390:	f7ef fa02 	bl	8001798 <GPIO_ReadInputDataBit>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	bf0c      	ite	eq
 801239a:	2301      	moveq	r3, #1
 801239c:	2300      	movne	r3, #0
 801239e:	b2db      	uxtb	r3, r3
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	40011000 	.word	0x40011000

080123ac <led_off>:

/* @fn		led_off
 * @brief	switch off the led from led_t enumeration
 * */
void led_off (led_t led)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	4603      	mov	r3, r0
 80123b4:	71fb      	strb	r3, [r7, #7]
	switch (led)
 80123b6:	79fb      	ldrb	r3, [r7, #7]
 80123b8:	2b04      	cmp	r3, #4
 80123ba:	d829      	bhi.n	8012410 <led_off+0x64>
 80123bc:	a201      	add	r2, pc, #4	; (adr r2, 80123c4 <led_off+0x18>)
 80123be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123c2:	bf00      	nop
 80123c4:	080123d9 	.word	0x080123d9
 80123c8:	080123e3 	.word	0x080123e3
 80123cc:	080123ed 	.word	0x080123ed
 80123d0:	080123f9 	.word	0x080123f9
 80123d4:	08012405 	.word	0x08012405
	{
	case LED_PC6:
		GPIO_ResetBits(GPIOC, GPIO_Pin_6);
 80123d8:	2140      	movs	r1, #64	; 0x40
 80123da:	4810      	ldr	r0, [pc, #64]	; (801241c <led_off+0x70>)
 80123dc:	f7ef fa03 	bl	80017e6 <GPIO_ResetBits>
		break;
 80123e0:	e017      	b.n	8012412 <led_off+0x66>
	case LED_PC7:
		GPIO_ResetBits(GPIOC, GPIO_Pin_7);
 80123e2:	2180      	movs	r1, #128	; 0x80
 80123e4:	480d      	ldr	r0, [pc, #52]	; (801241c <led_off+0x70>)
 80123e6:	f7ef f9fe 	bl	80017e6 <GPIO_ResetBits>
		break;
 80123ea:	e012      	b.n	8012412 <led_off+0x66>
	case LED_PC8:
		GPIO_ResetBits(GPIOC, GPIO_Pin_8);
 80123ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80123f0:	480a      	ldr	r0, [pc, #40]	; (801241c <led_off+0x70>)
 80123f2:	f7ef f9f8 	bl	80017e6 <GPIO_ResetBits>
		break;
 80123f6:	e00c      	b.n	8012412 <led_off+0x66>
	case LED_PC9:
		GPIO_ResetBits(GPIOC, GPIO_Pin_9);
 80123f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80123fc:	4807      	ldr	r0, [pc, #28]	; (801241c <led_off+0x70>)
 80123fe:	f7ef f9f2 	bl	80017e6 <GPIO_ResetBits>
		break;
 8012402:	e006      	b.n	8012412 <led_off+0x66>
	case LED_ALL:
		GPIO_ResetBits(GPIOC, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_7);
 8012404:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8012408:	4804      	ldr	r0, [pc, #16]	; (801241c <led_off+0x70>)
 801240a:	f7ef f9ec 	bl	80017e6 <GPIO_ResetBits>
		break;
 801240e:	e000      	b.n	8012412 <led_off+0x66>
	default:
		// do nothing for undefined led number
		break;
 8012410:	bf00      	nop
	}
}
 8012412:	bf00      	nop
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	40011000 	.word	0x40011000

08012420 <led_on>:

/* @fn		led_on
 * @brief	switch on the led from led_t enumeration
 * */
void led_on (led_t led)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
 8012426:	4603      	mov	r3, r0
 8012428:	71fb      	strb	r3, [r7, #7]
	switch (led)
 801242a:	79fb      	ldrb	r3, [r7, #7]
 801242c:	2b04      	cmp	r3, #4
 801242e:	d829      	bhi.n	8012484 <led_on+0x64>
 8012430:	a201      	add	r2, pc, #4	; (adr r2, 8012438 <led_on+0x18>)
 8012432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012436:	bf00      	nop
 8012438:	0801244d 	.word	0x0801244d
 801243c:	08012457 	.word	0x08012457
 8012440:	08012461 	.word	0x08012461
 8012444:	0801246d 	.word	0x0801246d
 8012448:	08012479 	.word	0x08012479
	{
	case LED_PC6:
		GPIO_SetBits(GPIOC, GPIO_Pin_6);
 801244c:	2140      	movs	r1, #64	; 0x40
 801244e:	4810      	ldr	r0, [pc, #64]	; (8012490 <led_on+0x70>)
 8012450:	f7ef f9bb 	bl	80017ca <GPIO_SetBits>
		break;
 8012454:	e017      	b.n	8012486 <led_on+0x66>
	case LED_PC7:
		GPIO_SetBits(GPIOC, GPIO_Pin_7);
 8012456:	2180      	movs	r1, #128	; 0x80
 8012458:	480d      	ldr	r0, [pc, #52]	; (8012490 <led_on+0x70>)
 801245a:	f7ef f9b6 	bl	80017ca <GPIO_SetBits>
		break;
 801245e:	e012      	b.n	8012486 <led_on+0x66>
	case LED_PC8:
		GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8012460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012464:	480a      	ldr	r0, [pc, #40]	; (8012490 <led_on+0x70>)
 8012466:	f7ef f9b0 	bl	80017ca <GPIO_SetBits>
		break;
 801246a:	e00c      	b.n	8012486 <led_on+0x66>
	case LED_PC9:
		GPIO_SetBits(GPIOC, GPIO_Pin_9);
 801246c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012470:	4807      	ldr	r0, [pc, #28]	; (8012490 <led_on+0x70>)
 8012472:	f7ef f9aa 	bl	80017ca <GPIO_SetBits>
		break;
 8012476:	e006      	b.n	8012486 <led_on+0x66>
	case LED_ALL:
		GPIO_SetBits(GPIOC, GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_6 | GPIO_Pin_7);
 8012478:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 801247c:	4804      	ldr	r0, [pc, #16]	; (8012490 <led_on+0x70>)
 801247e:	f7ef f9a4 	bl	80017ca <GPIO_SetBits>
		break;
 8012482:	e000      	b.n	8012486 <led_on+0x66>
	default:
		// do nothing for undefined led number
		break;
 8012484:	bf00      	nop
	}
}
 8012486:	bf00      	nop
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	40011000 	.word	0x40011000

08012494 <port_wakeup_dw1000>:

/* @fn		port_wakeup_dw1000
 * @brief	"slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	af00      	add	r7, sp, #0
    port_SPIx_clear_chip_select();
 8012498:	2110      	movs	r1, #16
 801249a:	4807      	ldr	r0, [pc, #28]	; (80124b8 <port_wakeup_dw1000+0x24>)
 801249c:	f7ef f9a3 	bl	80017e6 <GPIO_ResetBits>
    Sleep(1);
 80124a0:	2001      	movs	r0, #1
 80124a2:	f7ff fd11 	bl	8011ec8 <Sleep>
    port_SPIx_set_chip_select();
 80124a6:	2110      	movs	r1, #16
 80124a8:	4803      	ldr	r0, [pc, #12]	; (80124b8 <port_wakeup_dw1000+0x24>)
 80124aa:	f7ef f98e 	bl	80017ca <GPIO_SetBits>
    Sleep(7);						//wait 7ms for DW1000 XTAL to stabilise
 80124ae:	2007      	movs	r0, #7
 80124b0:	f7ff fd0a 	bl	8011ec8 <Sleep>
}
 80124b4:	bf00      	nop
 80124b6:	bd80      	pop	{r7, pc}
 80124b8:	40010800 	.word	0x40010800

080124bc <port_set_dw1000_slowrate>:
/* @fn		port_set_dw1000_slowrate
 * @brief	wrapper to set SPI_CLK for DW1000 to 2.25MHz
 * 			note: SPI1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	af00      	add	r7, sp, #0
    SPI1_ConfigRate(SPI_BaudRatePrescaler_32);
 80124c0:	2020      	movs	r0, #32
 80124c2:	f7ff fdeb 	bl	801209c <SPI1_ConfigRate>
}
 80124c6:	bf00      	nop
 80124c8:	bd80      	pop	{r7, pc}

080124ca <port_set_dw1000_fastrate>:
/* @fn		port_set_dw1000_fastrate
 * @brief	wrapper to set SPI_CLK for DW1000 to 18MHz
 * 			note: SPI1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	af00      	add	r7, sp, #0
    SPI1_ConfigRate(SPI_BaudRatePrescaler_4);
 80124ce:	2008      	movs	r0, #8
 80124d0:	f7ff fde4 	bl	801209c <SPI1_ConfigRate>
}
 80124d4:	bf00      	nop
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <port_LCD_RS_set>:

/* @fn		port_LCD_RS_set
 * @brief	wrapper to set LCD_RS pin
 * */
void port_LCD_RS_set(void)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	af00      	add	r7, sp, #0
	GPIO_SetBits(SPIy_GPIO,LCD_RS);
 80124dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80124e0:	4802      	ldr	r0, [pc, #8]	; (80124ec <port_LCD_RS_set+0x14>)
 80124e2:	f7ef f972 	bl	80017ca <GPIO_SetBits>
}
 80124e6:	bf00      	nop
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	40010c00 	.word	0x40010c00

080124f0 <port_LCD_RS_clear>:

/* @fn		port_LCD_RS_clear
 * @brief	wrapper to clear LCD_RS pin
 * */
void port_LCD_RS_clear(void)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SPIy_GPIO,LCD_RS);
 80124f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80124f8:	4802      	ldr	r0, [pc, #8]	; (8012504 <port_LCD_RS_clear+0x14>)
 80124fa:	f7ef f974 	bl	80017e6 <GPIO_ResetBits>
}
 80124fe:	bf00      	nop
 8012500:	bd80      	pop	{r7, pc}
 8012502:	bf00      	nop
 8012504:	40010c00 	.word	0x40010c00

08012508 <port_LCD_RW_clear>:

/* @fn		port_LCD_RW_clear
 * @brief	wrapper to clear LCD_RW pin
 * */
void port_LCD_RW_clear(void)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SPIy_GPIO,LCD_RW);
 801250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012510:	4802      	ldr	r0, [pc, #8]	; (801251c <port_LCD_RW_clear+0x14>)
 8012512:	f7ef f968 	bl	80017e6 <GPIO_ResetBits>
}
 8012516:	bf00      	nop
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	40010c00 	.word	0x40010c00

08012520 <process_dwRSTn_irq>:
/* @fn		process_dwRSTn_irq
 * @brief	call-back to signal to the APP that the DW_RESET pin is went high
 *
 * */
__INLINE void process_dwRSTn_irq(void)
{
 8012520:	b480      	push	{r7}
 8012522:	af00      	add	r7, sp, #0
	signalResetDone = 1;
 8012524:	4b03      	ldr	r3, [pc, #12]	; (8012534 <process_dwRSTn_irq+0x14>)
 8012526:	2201      	movs	r2, #1
 8012528:	601a      	str	r2, [r3, #0]
}
 801252a:	bf00      	nop
 801252c:	46bd      	mov	sp, r7
 801252e:	bc80      	pop	{r7}
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	20003c4c 	.word	0x20003c4c

08012538 <process_deca_irq>:
 * @brief	main call-back for processing of DW1000 IRQ
 * 			it re-enters the IRQ routing and processes all events.
 * 			After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
	int count = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	607b      	str	r3, [r7, #4]
	while(port_CheckEXT_IRQ() == 1)
 8012542:	e00b      	b.n	801255c <process_deca_irq+0x24>
	{
    	dwt_isr();
 8012544:	f7fe fe6e 	bl	8011224 <dwt_isr>

    	count++;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	3301      	adds	r3, #1
 801254c:	607b      	str	r3, [r7, #4]
    	if(count > 10000){ //IRQ line stuck high, take remedial action.
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f242 7210 	movw	r2, #10000	; 0x2710
 8012554:	4293      	cmp	r3, r2
 8012556:	dd01      	ble.n	801255c <process_deca_irq+0x24>
    		irq_stuck_callback();
 8012558:	f7fe fe5a 	bl	8011210 <irq_stuck_callback>
	while(port_CheckEXT_IRQ() == 1)
 801255c:	f000 f81e 	bl	801259c <port_CheckEXT_IRQ>
 8012560:	4603      	mov	r3, r0
 8012562:	2b01      	cmp	r3, #1
 8012564:	d0ee      	beq.n	8012544 <process_deca_irq+0xc>
    	}


    } //while DW1000 IRQ line active
}
 8012566:	bf00      	nop
 8012568:	bf00      	nop
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <port_DisableEXT_IRQ>:
/* @fn		port_DisableEXT_IRQ
 * @brief	wrapper to disable DW_IRQ pin IRQ
 * 			in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8012574:	2017      	movs	r0, #23
 8012576:	f7ff fb45 	bl	8011c04 <NVIC_DisableIRQ>
}
 801257a:	bf00      	nop
 801257c:	bd80      	pop	{r7, pc}

0801257e <port_EnableEXT_IRQ>:
/* @fn		port_EnableEXT_IRQ
 * @brief	wrapper to enable DW_IRQ pin IRQ
 * 			in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8012582:	2017      	movs	r0, #23
 8012584:	f7ff fb26 	bl	8011bd4 <NVIC_EnableIRQ>
}
 8012588:	bf00      	nop
 801258a:	bd80      	pop	{r7, pc}

0801258c <port_GetEXT_IRQStatus>:

/* @fn		port_GetEXT_IRQStatus
 * @brief	wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	af00      	add	r7, sp, #0
	return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8012590:	2017      	movs	r0, #23
 8012592:	f7ff fd05 	bl	8011fa0 <EXTI_GetITEnStatus>
 8012596:	4603      	mov	r3, r0
}
 8012598:	4618      	mov	r0, r3
 801259a:	bd80      	pop	{r7, pc}

0801259c <port_CheckEXT_IRQ>:

/* @fn		port_CheckEXT_IRQ
 * @brief	wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(DECAIRQ_GPIO, DECAIRQ);
 80125a0:	2120      	movs	r1, #32
 80125a2:	4803      	ldr	r0, [pc, #12]	; (80125b0 <port_CheckEXT_IRQ+0x14>)
 80125a4:	f7ef f8f8 	bl	8001798 <GPIO_ReadInputDataBit>
 80125a8:	4603      	mov	r3, r0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	40010c00 	.word	0x40010c00

080125b4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80125b4:	b480      	push	{r7}
 80125b6:	af00      	add	r7, sp, #0
}
 80125b8:	bf00      	nop
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bc80      	pop	{r7}
 80125be:	4770      	bx	lr

080125c0 <pop_registers_from_fault_stack>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void pop_registers_from_fault_stack(unsigned int * hardfault_args)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b08b      	sub	sp, #44	; 0x2c
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
	unsigned int stacked_r3;
	unsigned int stacked_r12;
	unsigned int stacked_lr;
	unsigned int stacked_pc;
	unsigned int stacked_psr;
	stacked_r0 = ((unsigned long) hardfault_args[0]);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_r1 = ((unsigned long) hardfault_args[1]);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	623b      	str	r3, [r7, #32]
	stacked_r2 = ((unsigned long) hardfault_args[2]);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	61fb      	str	r3, [r7, #28]
	stacked_r3 = ((unsigned long) hardfault_args[3]);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	61bb      	str	r3, [r7, #24]
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	691b      	ldr	r3, [r3, #16]
 80125e4:	617b      	str	r3, [r7, #20]
	stacked_lr = ((unsigned long) hardfault_args[5]);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	695b      	ldr	r3, [r3, #20]
 80125ea:	613b      	str	r3, [r7, #16]
	stacked_pc = ((unsigned long) hardfault_args[6]);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	699b      	ldr	r3, [r3, #24]
 80125f0:	60fb      	str	r3, [r7, #12]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	69db      	ldr	r3, [r3, #28]
 80125f6:	60bb      	str	r3, [r7, #8]
	/* Inspect stacked_pc to locate the offending instruction. */
	for( ;; )
 80125f8:	e7fe      	b.n	80125f8 <pop_registers_from_fault_stack+0x38>

080125fa <HardFault_Handler>:
		if (u == 0) return ;
	}
}

void HardFault_Handler(void)
{
 80125fa:	b480      	push	{r7}
 80125fc:	af00      	add	r7, sp, #0
	{ __asm volatile (  " tst lr, #4 \n"
 80125fe:	f01e 0f04 	tst.w	lr, #4
 8012602:	bf0c      	ite	eq
 8012604:	f3ef 8008 	mrseq	r0, MSP
 8012608:	f3ef 8009 	mrsne	r0, PSP
 801260c:	6981      	ldr	r1, [r0, #24]
 801260e:	4a00      	ldr	r2, [pc, #0]	; (8012610 <HardFault_Handler+0x16>)
 8012610:	4710      	bx	r2

08012612 <handler2_address_const>:
 8012612:	25c1      	.short	0x25c1
 8012614:	0801      	.short	0x0801

	/* Go to infinite loop when Hard Fault exception occurs */
	}

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8012616:	e7fe      	b.n	8012616 <handler2_address_const+0x4>

08012618 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8012618:	b480      	push	{r7}
 801261a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 801261c:	e7fe      	b.n	801261c <MemManage_Handler+0x4>

0801261e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 801261e:	b480      	push	{r7}
 8012620:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8012622:	e7fe      	b.n	8012622 <BusFault_Handler+0x4>

08012624 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8012624:	b480      	push	{r7}
 8012626:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8012628:	e7fe      	b.n	8012628 <UsageFault_Handler+0x4>

0801262a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 801262a:	b480      	push	{r7}
 801262c:	af00      	add	r7, sp, #0
}
 801262e:	bf00      	nop
 8012630:	46bd      	mov	sp, r7
 8012632:	bc80      	pop	{r7}
 8012634:	4770      	bx	lr

08012636 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8012636:	b480      	push	{r7}
 8012638:	af00      	add	r7, sp, #0
}
 801263a:	bf00      	nop
 801263c:	46bd      	mov	sp, r7
 801263e:	bc80      	pop	{r7}
 8012640:	4770      	bx	lr

08012642 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8012642:	b480      	push	{r7}
 8012644:	af00      	add	r7, sp, #0
}
 8012646:	bf00      	nop
 8012648:	46bd      	mov	sp, r7
 801264a:	bc80      	pop	{r7}
 801264c:	4770      	bx	lr

0801264e <RTC_IRQHandler>:
  * @brief  This function handles RTC global interrupt request.
  * @param  None
  * @retval None
  */
void RTC_IRQHandler(void)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	af00      	add	r7, sp, #0
  if (RTC_GetITStatus(RTC_IT_SEC) != RESET)
 8012652:	2001      	movs	r0, #1
 8012654:	f7ef fd10 	bl	8002078 <RTC_GetITStatus>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d004      	beq.n	8012668 <RTC_IRQHandler+0x1a>
  {
    /* Clear the RTC Second interrupt */
    RTC_ClearITPendingBit(RTC_IT_SEC);
 801265e:	2001      	movs	r0, #1
 8012660:	f7ef fd32 	bl	80020c8 <RTC_ClearITPendingBit>

    /* Wait until last write operation on RTC registers has finished */
    RTC_WaitForLastTask();
 8012664:	f7ef fcf6 	bl	8002054 <RTC_WaitForLastTask>
  }
}
 8012668:	bf00      	nop
 801266a:	bd80      	pop	{r7, pc}

0801266c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801266c:	b480      	push	{r7}
 801266e:	af00      	add	r7, sp, #0
	time32_incr++;
 8012670:	4b04      	ldr	r3, [pc, #16]	; (8012684 <SysTick_Handler+0x18>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	3301      	adds	r3, #1
 8012676:	4a03      	ldr	r2, [pc, #12]	; (8012684 <SysTick_Handler+0x18>)
 8012678:	6013      	str	r3, [r2, #0]
#ifdef FILESYSTEM_ENABLE
	fsd_service();
#endif
}
 801267a:	bf00      	nop
 801267c:	46bd      	mov	sp, r7
 801267e:	bc80      	pop	{r7}
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	200052f8 	.word	0x200052f8

08012688 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	af00      	add	r7, sp, #0
	/* Clear EXTI Line 13 Pending Bit */
	EXTI_ClearITPendingBit(EXTI_Line13);
 801268c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8012690:	f7ee ff84 	bl	800159c <EXTI_ClearITPendingBit>
}
 8012694:	bf00      	nop
 8012696:	bd80      	pop	{r7, pc}

08012698 <EXTI0_IRQHandler>:
  * @brief  This function handles ScenSor  interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	af00      	add	r7, sp, #0
	process_dwRSTn_irq();
 801269c:	f7ff ff40 	bl	8012520 <process_dwRSTn_irq>
    /* Clear EXTI Line 0 Pending Bit */
    EXTI_ClearITPendingBit(DECARSTIRQ_EXTI);
 80126a0:	2001      	movs	r0, #1
 80126a2:	f7ee ff7b 	bl	800159c <EXTI_ClearITPendingBit>
}
 80126a6:	bf00      	nop
 80126a8:	bd80      	pop	{r7, pc}

080126aa <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80126aa:	b580      	push	{r7, lr}
 80126ac:	af00      	add	r7, sp, #0
    process_deca_irq();
 80126ae:	f7ff ff43 	bl	8012538 <process_deca_irq>
    /* Clear EXTI Line 3 Pending Bit */
    EXTI_ClearITPendingBit(EXTI_Line3);
 80126b2:	2008      	movs	r0, #8
 80126b4:	f7ee ff72 	bl	800159c <EXTI_ClearITPendingBit>
}
 80126b8:	bf00      	nop
 80126ba:	bd80      	pop	{r7, pc}

080126bc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	af00      	add	r7, sp, #0
    process_deca_irq();
 80126c0:	f7ff ff3a 	bl	8012538 <process_deca_irq>
    /* Clear EXTI Line 8 Pending Bit */
    EXTI_ClearITPendingBit(DECAIRQ_EXTI);
 80126c4:	2020      	movs	r0, #32
 80126c6:	f7ee ff69 	bl	800159c <EXTI_ClearITPendingBit>
}
 80126ca:	bf00      	nop
 80126cc:	bd80      	pop	{r7, pc}
	...

080126d0 <OTG_FS_WKUP_IRQHandler>:

#ifdef USB_SUPPORT //this is set in the port.h file

#ifdef USE_USB_OTG_FS
void OTG_FS_WKUP_IRQHandler(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  if(USB_OTG_dev.cfg.low_power)
 80126d4:	4b0a      	ldr	r3, [pc, #40]	; (8012700 <OTG_FS_WKUP_IRQHandler+0x30>)
 80126d6:	7a9b      	ldrb	r3, [r3, #10]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00a      	beq.n	80126f2 <OTG_FS_WKUP_IRQHandler+0x22>
  {
    *(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
 80126dc:	4b09      	ldr	r3, [pc, #36]	; (8012704 <OTG_FS_WKUP_IRQHandler+0x34>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a08      	ldr	r2, [pc, #32]	; (8012704 <OTG_FS_WKUP_IRQHandler+0x34>)
 80126e2:	f023 0306 	bic.w	r3, r3, #6
 80126e6:	6013      	str	r3, [r2, #0]
    SystemInit();
 80126e8:	f7ee fd92 	bl	8001210 <SystemInit>
    USB_OTG_UngateClock(&USB_OTG_dev);
 80126ec:	4804      	ldr	r0, [pc, #16]	; (8012700 <OTG_FS_WKUP_IRQHandler+0x30>)
 80126ee:	f7f2 f896 	bl	800481e <USB_OTG_UngateClock>
  }
  EXTI_ClearITPendingBit(EXTI_Line18);
 80126f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80126f6:	f7ee ff51 	bl	800159c <EXTI_ClearITPendingBit>
}
 80126fa:	bf00      	nop
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	20007a18 	.word	0x20007a18
 8012704:	e000ed10 	.word	0xe000ed10

08012708 <OTG_FS_IRQHandler>:
#ifdef USE_USB_OTG_HS
void OTG_HS_IRQHandler(void)
#else
void OTG_FS_IRQHandler(void)
#endif
{
 8012708:	b580      	push	{r7, lr}
 801270a:	af00      	add	r7, sp, #0

 //ZS - taking out or plugging in the cable causes this interrupt to trigger
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 801270c:	4802      	ldr	r0, [pc, #8]	; (8012718 <OTG_FS_IRQHandler+0x10>)
 801270e:	f7f2 faf5 	bl	8004cfc <USBD_OTG_ISR_Handler>
}
 8012712:	bf00      	nop
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	20007a18 	.word	0x20007a18

0801271c <DW_VCP_Init>:
extern uint32_t APP_Rx_length;
extern uint32 inittestapplication(uint8 s1switch);
extern void setLCDline1(uint8 s1switch);


uint16_t DW_VCP_Init     (void) { return USBD_OK; }
 801271c:	b480      	push	{r7}
 801271e:	af00      	add	r7, sp, #0
 8012720:	2300      	movs	r3, #0
 8012722:	4618      	mov	r0, r3
 8012724:	46bd      	mov	sp, r7
 8012726:	bc80      	pop	{r7}
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop

0801272c <DW_VCP_DeInit>:
uint16_t DW_VCP_DeInit   (void) { return USBD_OK; }
 801272c:	b480      	push	{r7}
 801272e:	af00      	add	r7, sp, #0
 8012730:	2300      	movs	r3, #0
 8012732:	4618      	mov	r0, r3
 8012734:	46bd      	mov	sp, r7
 8012736:	bc80      	pop	{r7}
 8012738:	4770      	bx	lr
 801273a:	bf00      	nop

0801273c <DW_VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
uint16_t DW_VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
   return USBD_OK;
 8012748:	2300      	movs	r3, #0
}
 801274a:	4618      	mov	r0, r3
 801274c:	3714      	adds	r7, #20
 801274e:	46bd      	mov	sp, r7
 8012750:	bc80      	pop	{r7}
 8012752:	4770      	bx	lr

08012754 <DW_VCP_DataTx>:
{
	uint32_t i = 0;

	i = APP_Rx_ptr_in ;

	if ((APP_Rx_length+Len) < APP_RX_DATA_SIZE)
 8012754:	4b0e      	ldr	r3, [pc, #56]	; (8012790 <DW_VCP_DataTx+0x3c>)
{
 8012756:	b470      	push	{r4, r5, r6}
	if ((APP_Rx_length+Len) < APP_RX_DATA_SIZE)
 8012758:	681a      	ldr	r2, [r3, #0]
	i = APP_Rx_ptr_in ;
 801275a:	4e0e      	ldr	r6, [pc, #56]	; (8012794 <DW_VCP_DataTx+0x40>)
	if ((APP_Rx_length+Len) < APP_RX_DATA_SIZE)
 801275c:	440a      	add	r2, r1
 801275e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
	i = APP_Rx_ptr_in ;
 8012762:	6833      	ldr	r3, [r6, #0]
	if ((APP_Rx_length+Len) < APP_RX_DATA_SIZE)
 8012764:	d20f      	bcs.n	8012786 <DW_VCP_DataTx+0x32>
	{
		int l;
		/* Get the data to be sent */
		for (l = 0; l < Len; l++)
 8012766:	b171      	cbz	r1, 8012786 <DW_VCP_DataTx+0x32>
 8012768:	4401      	add	r1, r0
 801276a:	4d0b      	ldr	r5, [pc, #44]	; (8012798 <DW_VCP_DataTx+0x44>)
 801276c:	3901      	subs	r1, #1
 801276e:	3801      	subs	r0, #1
		{
			APP_Rx_Buffer[i++] = Buf[l];
 8012770:	1c5a      	adds	r2, r3, #1
 8012772:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			/* Increment the in pointer */
			if (i>=APP_RX_DATA_SIZE)
 8012776:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
			APP_Rx_Buffer[i++] = Buf[l];
 801277a:	54ec      	strb	r4, [r5, r3]
			if (i>=APP_RX_DATA_SIZE)
 801277c:	bf34      	ite	cc
 801277e:	4613      	movcc	r3, r2
 8012780:	2300      	movcs	r3, #0
		for (l = 0; l < Len; l++)
 8012782:	4281      	cmp	r1, r0
 8012784:	d1f4      	bne.n	8012770 <DW_VCP_DataTx+0x1c>
	}

	APP_Rx_ptr_in = i;

	return USBD_OK;
}
 8012786:	2000      	movs	r0, #0
	APP_Rx_ptr_in = i;
 8012788:	6033      	str	r3, [r6, #0]
}
 801278a:	bc70      	pop	{r4, r5, r6}
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	20000320 	.word	0x20000320
 8012794:	20000318 	.word	0x20000318
 8012798:	20003d00 	.word	0x20003d00

0801279c <DW_VCP_DataRx>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
//#pragma GCC optimize ("O3")
uint16_t DW_VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 801279c:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  // ZS: This is where PC (USB Tx) data is received
  for (i = 0; i < Len; i++)
 801279e:	468c      	mov	ip, r1
  {
	  if((i + local_buff_offset) < 10000)
 80127a0:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 8012888 <DW_VCP_DataRx+0xec>
  for (i = 0; i < Len; i++)
 80127a4:	2900      	cmp	r1, #0
 80127a6:	d053      	beq.n	8012850 <DW_VCP_DataRx+0xb4>
	  if((i + local_buff_offset) < 10000)
 80127a8:	f8be 2000 	ldrh.w	r2, [lr]
 80127ac:	f242 740f 	movw	r4, #9999	; 0x270f
 80127b0:	4613      	mov	r3, r2
 80127b2:	4932      	ldr	r1, [pc, #200]	; (801287c <DW_VCP_DataRx+0xe0>)
 80127b4:	4462      	add	r2, ip
	  {
		  local_buff[i + local_buff_offset] = Buf[i];
 80127b6:	1ac6      	subs	r6, r0, r3
	  if((i + local_buff_offset) < 10000)
 80127b8:	42a3      	cmp	r3, r4
		  local_buff[i + local_buff_offset] = Buf[i];
 80127ba:	bf9c      	itt	ls
 80127bc:	5cf5      	ldrbls	r5, [r6, r3]
 80127be:	54cd      	strbls	r5, [r1, r3]
 80127c0:	3301      	adds	r3, #1
  for (i = 0; i < Len; i++)
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d1f8      	bne.n	80127b8 <DW_VCP_DataRx+0x1c>
  }

  local_buff_length = Len + local_buff_offset;
  //

  if((local_buff[2] + (local_buff[3]<<8)) == local_buff_length)
 80127c6:	788c      	ldrb	r4, [r1, #2]
 80127c8:	78cb      	ldrb	r3, [r1, #3]
  local_buff_length = Len + local_buff_offset;
 80127ca:	4d2d      	ldr	r5, [pc, #180]	; (8012880 <DW_VCP_DataRx+0xe4>)
  if((local_buff[2] + (local_buff[3]<<8)) == local_buff_length)
 80127cc:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 80127d0:	429a      	cmp	r2, r3
  local_buff_length = Len + local_buff_offset;
 80127d2:	602a      	str	r2, [r5, #0]
  if((local_buff[2] + (local_buff[3]<<8)) == local_buff_length)
 80127d4:	d030      	beq.n	8012838 <DW_VCP_DataRx+0x9c>
	  local_buff_offset = 0;
	  local_have_data = 1;
  }
  else
  {
	   if((local_buff_length == 5) && (local_buff[0] == 100))
 80127d6:	2a05      	cmp	r2, #5
 80127d8:	d00d      	beq.n	80127f6 <DW_VCP_DataRx+0x5a>
	   {
		   local_buff_offset = 0;
		   local_have_data = 1;
	   }
	   else if((Len == 5) && (Buf[0] == 100)) //reset the buffer
 80127da:	f1bc 0f05 	cmp.w	ip, #5
 80127de:	d033      	beq.n	8012848 <DW_VCP_DataRx+0xac>
		   {
			   local_buff[i + local_buff_offset] = Buf[i];
		   }
	   }
	   //we have received a antenna calibration or tx power configuration command
	   else if(local_buff_length == 6)
 80127e0:	2a06      	cmp	r2, #6
 80127e2:	d021      	beq.n	8012828 <DW_VCP_DataRx+0x8c>
			   local_buff_offset = 0;
			   local_have_data = 1;
		   }
	   }
	   //we have received a S1 configuration command
	   else if((local_buff_length == 3) && (local_buff[0] == 0x6) && (local_buff[2] == 0x6))
 80127e4:	2a03      	cmp	r2, #3
 80127e6:	d102      	bne.n	80127ee <DW_VCP_DataRx+0x52>
 80127e8:	780b      	ldrb	r3, [r1, #0]
 80127ea:	2b06      	cmp	r3, #6
 80127ec:	d038      	beq.n	8012860 <DW_VCP_DataRx+0xc4>
	       local_buff_offset = 0;
	   	   local_have_data = 1;
	   }
	   else
	   {
		   local_buff_offset += Len;
 80127ee:	f8ae 2000 	strh.w	r2, [lr]
  }



  return USBD_OK;
}
 80127f2:	2000      	movs	r0, #0
 80127f4:	bd70      	pop	{r4, r5, r6, pc}
	   if((local_buff_length == 5) && (local_buff[0] == 100))
 80127f6:	780b      	ldrb	r3, [r1, #0]
 80127f8:	2b64      	cmp	r3, #100	; 0x64
 80127fa:	d01d      	beq.n	8012838 <DW_VCP_DataRx+0x9c>
	   else if((Len == 5) && (Buf[0] == 100)) //reset the buffer
 80127fc:	f1bc 0f05 	cmp.w	ip, #5
 8012800:	d1f5      	bne.n	80127ee <DW_VCP_DataRx+0x52>
 8012802:	7803      	ldrb	r3, [r0, #0]
 8012804:	2b64      	cmp	r3, #100	; 0x64
 8012806:	d1f2      	bne.n	80127ee <DW_VCP_DataRx+0x52>
		   local_buff_offset = 0;
 8012808:	2500      	movs	r5, #0
		   local_have_data = 1;
 801280a:	2401      	movs	r4, #1
 801280c:	1cc3      	adds	r3, r0, #3
 801280e:	4a1d      	ldr	r2, [pc, #116]	; (8012884 <DW_VCP_DataRx+0xe8>)
 8012810:	1a5b      	subs	r3, r3, r1
 8012812:	2b06      	cmp	r3, #6
		   local_buff_offset = 0;
 8012814:	f8ae 5000 	strh.w	r5, [lr]
		   local_have_data = 1;
 8012818:	6014      	str	r4, [r2, #0]
 801281a:	d924      	bls.n	8012866 <DW_VCP_DataRx+0xca>
			   local_buff[i + local_buff_offset] = Buf[i];
 801281c:	6802      	ldr	r2, [r0, #0]
 801281e:	7903      	ldrb	r3, [r0, #4]
 8012820:	600a      	str	r2, [r1, #0]
 8012822:	710b      	strb	r3, [r1, #4]
}
 8012824:	2000      	movs	r0, #0
 8012826:	bd70      	pop	{r4, r5, r6, pc}
		   if(((local_buff[0] == 0x5) && (local_buff[5] == 0x5))
 8012828:	780b      	ldrb	r3, [r1, #0]
 801282a:	2b05      	cmp	r3, #5
 801282c:	d014      	beq.n	8012858 <DW_VCP_DataRx+0xbc>
			   || ((local_buff[0] == 0x7) && (local_buff[5] == 0x7)))
 801282e:	2b07      	cmp	r3, #7
 8012830:	d1df      	bne.n	80127f2 <DW_VCP_DataRx+0x56>
 8012832:	794b      	ldrb	r3, [r1, #5]
 8012834:	2b07      	cmp	r3, #7
 8012836:	d1dc      	bne.n	80127f2 <DW_VCP_DataRx+0x56>
	  local_buff_offset = 0;
 8012838:	2100      	movs	r1, #0
	  local_have_data = 1;
 801283a:	2201      	movs	r2, #1
 801283c:	4b11      	ldr	r3, [pc, #68]	; (8012884 <DW_VCP_DataRx+0xe8>)
}
 801283e:	2000      	movs	r0, #0
	  local_buff_offset = 0;
 8012840:	f8ae 1000 	strh.w	r1, [lr]
	  local_have_data = 1;
 8012844:	601a      	str	r2, [r3, #0]
}
 8012846:	bd70      	pop	{r4, r5, r6, pc}
	   else if((Len == 5) && (Buf[0] == 100)) //reset the buffer
 8012848:	7803      	ldrb	r3, [r0, #0]
 801284a:	2b64      	cmp	r3, #100	; 0x64
 801284c:	d1c8      	bne.n	80127e0 <DW_VCP_DataRx+0x44>
 801284e:	e7db      	b.n	8012808 <DW_VCP_DataRx+0x6c>
 8012850:	490a      	ldr	r1, [pc, #40]	; (801287c <DW_VCP_DataRx+0xe0>)
 8012852:	f8be 2000 	ldrh.w	r2, [lr]
 8012856:	e7b6      	b.n	80127c6 <DW_VCP_DataRx+0x2a>
		   if(((local_buff[0] == 0x5) && (local_buff[5] == 0x5))
 8012858:	794b      	ldrb	r3, [r1, #5]
 801285a:	2b05      	cmp	r3, #5
 801285c:	d1c9      	bne.n	80127f2 <DW_VCP_DataRx+0x56>
 801285e:	e7eb      	b.n	8012838 <DW_VCP_DataRx+0x9c>
	   else if((local_buff_length == 3) && (local_buff[0] == 0x6) && (local_buff[2] == 0x6))
 8012860:	2c06      	cmp	r4, #6
 8012862:	d1c4      	bne.n	80127ee <DW_VCP_DataRx+0x52>
 8012864:	e7e8      	b.n	8012838 <DW_VCP_DataRx+0x9c>
			   local_buff[i + local_buff_offset] = Buf[i];
 8012866:	7803      	ldrb	r3, [r0, #0]
 8012868:	700b      	strb	r3, [r1, #0]
 801286a:	7843      	ldrb	r3, [r0, #1]
 801286c:	704b      	strb	r3, [r1, #1]
 801286e:	7883      	ldrb	r3, [r0, #2]
 8012870:	708b      	strb	r3, [r1, #2]
 8012872:	78c3      	ldrb	r3, [r0, #3]
 8012874:	70cb      	strb	r3, [r1, #3]
 8012876:	7903      	ldrb	r3, [r0, #4]
 8012878:	710b      	strb	r3, [r1, #4]
 801287a:	e7ba      	b.n	80127f2 <DW_VCP_DataRx+0x56>
 801287c:	2000800c 	.word	0x2000800c
 8012880:	20003c54 	.word	0x20003c54
 8012884:	20003c60 	.word	0x20003c60
 8012888:	20003c58 	.word	0x20003c58

0801288c <configSPIspeed>:



void configSPIspeed(int high)
{
	if(localSPIspeed != high)
 801288c:	4b05      	ldr	r3, [pc, #20]	; (80128a4 <configSPIspeed+0x18>)
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	4282      	cmp	r2, r0
 8012892:	d005      	beq.n	80128a0 <configSPIspeed+0x14>
	{
		localSPIspeed = high;
 8012894:	6018      	str	r0, [r3, #0]

		if(high)
 8012896:	b108      	cbz	r0, 801289c <configSPIspeed+0x10>
			port_set_dw1000_fastrate();  //max SPI
 8012898:	f7ff be17 	b.w	80124ca <port_set_dw1000_fastrate>
		else
			port_set_dw1000_slowrate();  //max SPI before PLLs configured is ~4M
 801289c:	f7ff be0e 	b.w	80124bc <port_set_dw1000_slowrate>
	}
}
 80128a0:	4770      	bx	lr
 80128a2:	bf00      	nop
 80128a4:	200000d0 	.word	0x200000d0

080128a8 <process_usbmessage>:
#pragma GCC optimize ("O3")
int process_usbmessage(void)
{
 80128a8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	int result = 0;
	switch(application_mode)
 80128ac:	4dab      	ldr	r5, [pc, #684]	; (8012b5c <process_usbmessage+0x2b4>)
 80128ae:	682c      	ldr	r4, [r5, #0]
 80128b0:	2c01      	cmp	r4, #1
 80128b2:	d006      	beq.n	80128c2 <process_usbmessage+0x1a>
 80128b4:	2c02      	cmp	r4, #2
 80128b6:	d046      	beq.n	8012946 <process_usbmessage+0x9e>
 80128b8:	b1cc      	cbz	r4, 80128ee <process_usbmessage+0x46>
 80128ba:	2400      	movs	r4, #0
		default:
			break;
	}

	return result;
}
 80128bc:	4620      	mov	r0, r4
 80128be:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
			if(local_buff_length)
 80128c2:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8012b68 <process_usbmessage+0x2c0>
 80128c6:	f8d8 3000 	ldr.w	r3, [r8]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d0f5      	beq.n	80128ba <process_usbmessage+0x12>
				if(local_buff[0] == 0x2)
 80128ce:	4ea4      	ldr	r6, [pc, #656]	; (8012b60 <process_usbmessage+0x2b8>)
 80128d0:	7834      	ldrb	r4, [r6, #0]
 80128d2:	2c02      	cmp	r4, #2
 80128d4:	f000 8092 	beq.w	80129fc <process_usbmessage+0x154>
				if((local_buff[0] == 100) && (result == 0)) //d (from "deca")
 80128d8:	2c64      	cmp	r4, #100	; 0x64
 80128da:	f000 808a 	beq.w	80129f2 <process_usbmessage+0x14a>
				if((local_buff[0] == 114) && (result == 0)) //r - flush the USB buffers...
 80128de:	2c72      	cmp	r4, #114	; 0x72
 80128e0:	d1eb      	bne.n	80128ba <process_usbmessage+0x12>
					DCD_EP_Flush(&USB_OTG_dev, CDC_IN_EP);
 80128e2:	2181      	movs	r1, #129	; 0x81
 80128e4:	489f      	ldr	r0, [pc, #636]	; (8012b64 <process_usbmessage+0x2bc>)
 80128e6:	f7f2 f9d2 	bl	8004c8e <DCD_EP_Flush>
					result = 0;
 80128ea:	2400      	movs	r4, #0
 80128ec:	e7e6      	b.n	80128bc <process_usbmessage+0x14>
			if(local_buff_length == 5)
 80128ee:	4b9e      	ldr	r3, [pc, #632]	; (8012b68 <process_usbmessage+0x2c0>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b05      	cmp	r3, #5
 80128f4:	d1e1      	bne.n	80128ba <process_usbmessage+0x12>
				if((local_buff[0] == 100) && (result == 0)) //d (from "deca")
 80128f6:	4b9a      	ldr	r3, [pc, #616]	; (8012b60 <process_usbmessage+0x2b8>)
 80128f8:	781a      	ldrb	r2, [r3, #0]
 80128fa:	2a64      	cmp	r2, #100	; 0x64
 80128fc:	d1dd      	bne.n	80128ba <process_usbmessage+0x12>
					if(local_buff[4] == 63)
 80128fe:	791b      	ldrb	r3, [r3, #4]
 8012900:	2b3f      	cmp	r3, #63	; 0x3f
 8012902:	d1da      	bne.n	80128ba <process_usbmessage+0x12>
						tx_buff[0] = 121;
 8012904:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8012b74 <process_usbmessage+0x2cc>
 8012908:	2379      	movs	r3, #121	; 0x79
 801290a:	4666      	mov	r6, ip
						application_mode = USB_TO_SPI;
 801290c:	f04f 0e01 	mov.w	lr, #1
						tx_buff[i+2] = 0;
 8012910:	f04f 0900 	mov.w	r9, #0
						tx_buff_length = i + 2;
 8012914:	f04f 0816 	mov.w	r8, #22
						memcpy(&tx_buff[1], SOFTWARE_VER_STRINGUSB, i);
 8012918:	4c94      	ldr	r4, [pc, #592]	; (8012b6c <process_usbmessage+0x2c4>)
						tx_buff[0] = 121;
 801291a:	f806 3b01 	strb.w	r3, [r6], #1
						memcpy(&tx_buff[1], SOFTWARE_VER_STRINGUSB, i);
 801291e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012920:	f8cc 0001 	str.w	r0, [ip, #1]
 8012924:	6820      	ldr	r0, [r4, #0]
 8012926:	6071      	str	r1, [r6, #4]
						tx_buff_length = i + 2;
 8012928:	4991      	ldr	r1, [pc, #580]	; (8012b70 <process_usbmessage+0x2c8>)
						memcpy(&tx_buff[1], SOFTWARE_VER_STRINGUSB, i);
 801292a:	6130      	str	r0, [r6, #16]
 801292c:	60b2      	str	r2, [r6, #8]
 801292e:	60f3      	str	r3, [r6, #12]
						led_on(LED_PC7); //turn on LED to indicate connection to PC application
 8012930:	4670      	mov	r0, lr
						result = 2;
 8012932:	2402      	movs	r4, #2
						application_mode = USB_TO_SPI;
 8012934:	f8c5 e000 	str.w	lr, [r5]
						tx_buff[i+2] = 0;
 8012938:	f88c 9016 	strb.w	r9, [ip, #22]
						tx_buff_length = i + 2;
 801293c:	f8c1 8000 	str.w	r8, [r1]
						led_on(LED_PC7); //turn on LED to indicate connection to PC application
 8012940:	f7ff fd6e 	bl	8012420 <led_on>
 8012944:	e7ba      	b.n	80128bc <process_usbmessage+0x14>
			if(local_buff_length && (result == 0))
 8012946:	4b88      	ldr	r3, [pc, #544]	; (8012b68 <process_usbmessage+0x2c0>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d0b5      	beq.n	80128ba <process_usbmessage+0x12>
				if((local_buff[0] == 0x5) && (local_buff[5] == 0x5))
 801294e:	4e84      	ldr	r6, [pc, #528]	; (8012b60 <process_usbmessage+0x2b8>)
 8012950:	7833      	ldrb	r3, [r6, #0]
 8012952:	2b05      	cmp	r3, #5
 8012954:	d038      	beq.n	80129c8 <process_usbmessage+0x120>
				if((local_buff[0] == 0x6) && (local_buff[2] == 0x6))
 8012956:	2b06      	cmp	r3, #6
 8012958:	d022      	beq.n	80129a0 <process_usbmessage+0xf8>
				if(local_buff[0] == 100) //d (from "deca")
 801295a:	2b64      	cmp	r3, #100	; 0x64
 801295c:	d1ad      	bne.n	80128ba <process_usbmessage+0x12>
					if(local_buff[4] == 63)
 801295e:	7933      	ldrb	r3, [r6, #4]
 8012960:	2b3f      	cmp	r3, #63	; 0x3f
 8012962:	f000 80a3 	beq.w	8012aac <process_usbmessage+0x204>
					if(local_buff[4] == 36) //"$"
 8012966:	2b24      	cmp	r3, #36	; 0x24
 8012968:	f000 8086 	beq.w	8012a78 <process_usbmessage+0x1d0>
					if(local_buff[4] == 33) //"!"
 801296c:	2b21      	cmp	r3, #33	; 0x21
 801296e:	d1a4      	bne.n	80128ba <process_usbmessage+0x12>
						uint32 partID = dwt_getpartid();
 8012970:	f7fd ff16 	bl	80107a0 <dwt_getpartid>
						tx_buff[10] = '\n';
 8012974:	260a      	movs	r6, #10
						uint32 partID = dwt_getpartid();
 8012976:	4605      	mov	r5, r0
						uint32 lotID = dwt_getlotid();
 8012978:	f7fd ff1c 	bl	80107b4 <dwt_getlotid>
						tx_buff[0] = 110;
 801297c:	f04f 0e6e 	mov.w	lr, #110	; 0x6e
						tx_buff[9] = '\r';
 8012980:	f04f 0c0d 	mov.w	ip, #13
						tx_buff_length = 11;
 8012984:	210b      	movs	r1, #11
						tx_buff[0] = 110;
 8012986:	4b7b      	ldr	r3, [pc, #492]	; (8012b74 <process_usbmessage+0x2cc>)
						tx_buff_length = 11;
 8012988:	4a79      	ldr	r2, [pc, #484]	; (8012b70 <process_usbmessage+0x2c8>)
						memcpy(&tx_buff[1], &partID, 4);
 801298a:	f8c3 5001 	str.w	r5, [r3, #1]
						memcpy(&tx_buff[5], &lotID, 4);
 801298e:	f8c3 0005 	str.w	r0, [r3, #5]
						tx_buff[0] = 110;
 8012992:	f883 e000 	strb.w	lr, [r3]
						tx_buff[9] = '\r';
 8012996:	f883 c009 	strb.w	ip, [r3, #9]
						tx_buff[10] = '\n';
 801299a:	729e      	strb	r6, [r3, #10]
						tx_buff_length = 11;
 801299c:	6011      	str	r1, [r2, #0]
 801299e:	e78d      	b.n	80128bc <process_usbmessage+0x14>
				if((local_buff[0] == 0x6) && (local_buff[2] == 0x6))
 80129a0:	78b3      	ldrb	r3, [r6, #2]
 80129a2:	2b06      	cmp	r3, #6
 80129a4:	d189      	bne.n	80128ba <process_usbmessage+0x12>
					uint8 switchS1 = local_buff[1];
 80129a6:	7875      	ldrb	r5, [r6, #1]
					port_DisableEXT_IRQ(); //disable IRQ until we configure the device
 80129a8:	f7ff fde2 	bl	8012570 <port_DisableEXT_IRQ>
					dwt_forcetrxoff();
 80129ac:	f7fe fe70 	bl	8011690 <dwt_forcetrxoff>
					inittestapplication(switchS1);
 80129b0:	4628      	mov	r0, r5
 80129b2:	f7f2 ff0d 	bl	80057d0 <inittestapplication>
					s1configswitch = switchS1;
 80129b6:	4b70      	ldr	r3, [pc, #448]	; (8012b78 <process_usbmessage+0x2d0>)
					setLCDline1(switchS1);
 80129b8:	4628      	mov	r0, r5
					s1configswitch = switchS1;
 80129ba:	601d      	str	r5, [r3, #0]
					setLCDline1(switchS1);
 80129bc:	f7f2 ffb6 	bl	800592c <setLCDline1>
					port_EnableEXT_IRQ(); //enable IRQ before starting
 80129c0:	f7ff fddd 	bl	801257e <port_EnableEXT_IRQ>
 80129c4:	7833      	ldrb	r3, [r6, #0]
 80129c6:	e7c8      	b.n	801295a <process_usbmessage+0xb2>
				if((local_buff[0] == 0x5) && (local_buff[5] == 0x5))
 80129c8:	7973      	ldrb	r3, [r6, #5]
 80129ca:	2b05      	cmp	r3, #5
 80129cc:	f47f af75 	bne.w	80128ba <process_usbmessage+0x12>
					uint16 txantennadelay = local_buff[1] + (local_buff[2]<<8);
 80129d0:	78b3      	ldrb	r3, [r6, #2]
					uint16 rxantennadelay = local_buff[3] + (local_buff[4]<<8);
 80129d2:	7932      	ldrb	r2, [r6, #4]
 80129d4:	78f1      	ldrb	r1, [r6, #3]
					uint16 txantennadelay = local_buff[1] + (local_buff[2]<<8);
 80129d6:	7870      	ldrb	r0, [r6, #1]
					uint16 rxantennadelay = local_buff[3] + (local_buff[4]<<8);
 80129d8:	eb01 2102 	add.w	r1, r1, r2, lsl #8
					uint16 txantennadelay = local_buff[1] + (local_buff[2]<<8);
 80129dc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
					instanceconfigantennadelays(txantennadelay, rxantennadelay);
 80129e0:	b289      	uxth	r1, r1
 80129e2:	b280      	uxth	r0, r0
 80129e4:	f7fa f8c6 	bl	800cb74 <instanceconfigantennadelays>
 80129e8:	7833      	ldrb	r3, [r6, #0]
 80129ea:	e7b4      	b.n	8012956 <process_usbmessage+0xae>
				if((local_buff[0] == 100) && (result == 0)) //d (from "deca")
 80129ec:	2c00      	cmp	r4, #0
 80129ee:	f47f af65 	bne.w	80128bc <process_usbmessage+0x14>
					if(local_buff[4] == 63)
 80129f2:	7933      	ldrb	r3, [r6, #4]
 80129f4:	2b3f      	cmp	r3, #63	; 0x3f
 80129f6:	f47f af60 	bne.w	80128ba <process_usbmessage+0x12>
 80129fa:	e783      	b.n	8012904 <process_usbmessage+0x5c>
					configSPIspeed(((local_buff[1]>>1) & 0x1));
 80129fc:	7870      	ldrb	r0, [r6, #1]
 80129fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8012a02:	f7ff ff43 	bl	801288c <configSPIspeed>
					if((local_buff[1] & 0x1) == 0) //SPI read
 8012a06:	7873      	ldrb	r3, [r6, #1]
 8012a08:	f013 0a01 	ands.w	sl, r3, #1
 8012a0c:	d11e      	bne.n	8012a4c <process_usbmessage+0x1a4>
						tx_buff[datalength+2] = 0x3;
 8012a0e:	2003      	movs	r0, #3
						int msglength = local_buff[2] + (local_buff[3]<<8);
 8012a10:	78f2      	ldrb	r2, [r6, #3]
 8012a12:	78b3      	ldrb	r3, [r6, #2]
						int datalength = local_buff[4] + (local_buff[5]<<8);
 8012a14:	7971      	ldrb	r1, [r6, #5]
						int msglength = local_buff[2] + (local_buff[3]<<8);
 8012a16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
						int datalength = local_buff[4] + (local_buff[5]<<8);
 8012a1a:	f896 9004 	ldrb.w	r9, [r6, #4]
						if((local_buff[msglength-1] != 0x3) || (datalength > 4093))
 8012a1e:	18f2      	adds	r2, r6, r3
						tx_buff[0] = 0x2;
 8012a20:	f8df b150 	ldr.w	fp, [pc, #336]	; 8012b74 <process_usbmessage+0x2cc>
						if((local_buff[msglength-1] != 0x3) || (datalength > 4093))
 8012a24:	f812 2c01 	ldrb.w	r2, [r2, #-1]
						int datalength = local_buff[4] + (local_buff[5]<<8);
 8012a28:	eb09 2901 	add.w	r9, r9, r1, lsl #8
						tx_buff[datalength+2] = 0x3;
 8012a2c:	eb0b 0109 	add.w	r1, fp, r9
						if((local_buff[msglength-1] != 0x3) || (datalength > 4093))
 8012a30:	4282      	cmp	r2, r0
						tx_buff[0] = 0x2;
 8012a32:	f88b 4000 	strb.w	r4, [fp]
						tx_buff[datalength+2] = 0x3;
 8012a36:	7088      	strb	r0, [r1, #2]
						if((local_buff[msglength-1] != 0x3) || (datalength > 4093))
 8012a38:	d051      	beq.n	8012ade <process_usbmessage+0x236>
							tx_buff[1] = 0x1; // if no ETX (0x3) indicate error
 8012a3a:	2301      	movs	r3, #1
						tx_buff_length = datalength + 3;
 8012a3c:	4a4c      	ldr	r2, [pc, #304]	; (8012b70 <process_usbmessage+0x2c8>)
 8012a3e:	f109 0103 	add.w	r1, r9, #3
 8012a42:	6011      	str	r1, [r2, #0]
							tx_buff[1] = 0x1; // if no ETX (0x3) indicate error
 8012a44:	f88b 3001 	strb.w	r3, [fp, #1]
							result = 2;
 8012a48:	2402      	movs	r4, #2
 8012a4a:	e737      	b.n	80128bc <process_usbmessage+0x14>
	int result = 0;
 8012a4c:	2400      	movs	r4, #0
						int msglength = local_buff[2] + (local_buff[3]<<8);
 8012a4e:	78f2      	ldrb	r2, [r6, #3]
 8012a50:	78b3      	ldrb	r3, [r6, #2]
						if(local_buff_length == msglength) //we got the whole message (sent from the PC)
 8012a52:	f8d8 8000 	ldr.w	r8, [r8]
						int msglength = local_buff[2] + (local_buff[3]<<8);
 8012a56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
						if(local_buff_length == msglength) //we got the whole message (sent from the PC)
 8012a5a:	4598      	cmp	r8, r3
 8012a5c:	d055      	beq.n	8012b0a <process_usbmessage+0x262>
							led_on(LED_PC6);
 8012a5e:	2000      	movs	r0, #0
 8012a60:	f7ff fcde 	bl	8012420 <led_on>
				if((local_buff[0] == 100) && (result == 0)) //d (from "deca")
 8012a64:	7833      	ldrb	r3, [r6, #0]
 8012a66:	2b64      	cmp	r3, #100	; 0x64
 8012a68:	d0c0      	beq.n	80129ec <process_usbmessage+0x144>
				if((local_buff[0] == 114) && (result == 0)) //r - flush the USB buffers...
 8012a6a:	2b72      	cmp	r3, #114	; 0x72
 8012a6c:	f47f af26 	bne.w	80128bc <process_usbmessage+0x14>
 8012a70:	2c00      	cmp	r4, #0
 8012a72:	f47f af23 	bne.w	80128bc <process_usbmessage+0x14>
 8012a76:	e734      	b.n	80128e2 <process_usbmessage+0x3a>
						tx_buff[0] = 110;
 8012a78:	4d3e      	ldr	r5, [pc, #248]	; (8012b74 <process_usbmessage+0x2cc>)
 8012a7a:	226e      	movs	r2, #110	; 0x6e
 8012a7c:	4628      	mov	r0, r5
						memcpy(&tx_buff[1], version, version_size);
 8012a7e:	493f      	ldr	r1, [pc, #252]	; (8012b7c <process_usbmessage+0x2d4>)
 8012a80:	4b3f      	ldr	r3, [pc, #252]	; (8012b80 <process_usbmessage+0x2d8>)
 8012a82:	680e      	ldr	r6, [r1, #0]
						tx_buff[0] = 110;
 8012a84:	f800 2b01 	strb.w	r2, [r0], #1
						memcpy(&tx_buff[1], version, version_size);
 8012a88:	6819      	ldr	r1, [r3, #0]
 8012a8a:	4632      	mov	r2, r6
 8012a8c:	f000 fad4 	bl	8013038 <memcpy>
						tx_buff[version_size+2] = '\r';
 8012a90:	200d      	movs	r0, #13
						tx_buff[version_size+3] = '\n';
 8012a92:	210a      	movs	r1, #10
						tx_buff[version_size+1] = s1configswitch & 0xff;
 8012a94:	4b38      	ldr	r3, [pc, #224]	; (8012b78 <process_usbmessage+0x2d0>)
						tx_buff_length = version_size + 4;
 8012a96:	4a36      	ldr	r2, [pc, #216]	; (8012b70 <process_usbmessage+0x2c8>)
						tx_buff[version_size+1] = s1configswitch & 0xff;
 8012a98:	f8d3 c000 	ldr.w	ip, [r3]
 8012a9c:	19ab      	adds	r3, r5, r6
						tx_buff_length = version_size + 4;
 8012a9e:	3604      	adds	r6, #4
						tx_buff[version_size+1] = s1configswitch & 0xff;
 8012aa0:	f883 c001 	strb.w	ip, [r3, #1]
						tx_buff[version_size+2] = '\r';
 8012aa4:	7098      	strb	r0, [r3, #2]
						tx_buff[version_size+3] = '\n';
 8012aa6:	70d9      	strb	r1, [r3, #3]
						tx_buff_length = version_size + 4;
 8012aa8:	6016      	str	r6, [r2, #0]
 8012aaa:	e707      	b.n	80128bc <process_usbmessage+0x14>
						tx_buff[0] = 110;
 8012aac:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8012b74 <process_usbmessage+0x2cc>
 8012ab0:	236e      	movs	r3, #110	; 0x6e
 8012ab2:	4666      	mov	r6, ip
						tx_buff[i+2] = 0;
 8012ab4:	f04f 0e00 	mov.w	lr, #0
						tx_buff_length = i + 2;
 8012ab8:	f04f 0816 	mov.w	r8, #22
						memcpy(&tx_buff[1], SOFTWARE_VER_STRINGUSB, i);
 8012abc:	4d2b      	ldr	r5, [pc, #172]	; (8012b6c <process_usbmessage+0x2c4>)
						tx_buff[0] = 110;
 8012abe:	f806 3b01 	strb.w	r3, [r6], #1
						memcpy(&tx_buff[1], SOFTWARE_VER_STRINGUSB, i);
 8012ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ac4:	f8cc 0001 	str.w	r0, [ip, #1]
 8012ac8:	6071      	str	r1, [r6, #4]
 8012aca:	6828      	ldr	r0, [r5, #0]
						tx_buff_length = i + 2;
 8012acc:	4928      	ldr	r1, [pc, #160]	; (8012b70 <process_usbmessage+0x2c8>)
						memcpy(&tx_buff[1], SOFTWARE_VER_STRINGUSB, i);
 8012ace:	60b2      	str	r2, [r6, #8]
 8012ad0:	60f3      	str	r3, [r6, #12]
 8012ad2:	6130      	str	r0, [r6, #16]
						tx_buff_length = i + 2;
 8012ad4:	f8c1 8000 	str.w	r8, [r1]
						tx_buff[i+2] = 0;
 8012ad8:	f88c e016 	strb.w	lr, [ip, #22]
 8012adc:	e6ee      	b.n	80128bc <process_usbmessage+0x14>
						if((local_buff[msglength-1] != 0x3) || (datalength > 4093))
 8012ade:	f640 72fd 	movw	r2, #4093	; 0xffd
 8012ae2:	4591      	cmp	r9, r2
 8012ae4:	dca9      	bgt.n	8012a3a <process_usbmessage+0x192>
							readfromspi(msglength-7, &local_buff[6], datalength, &tx_buff[2]);  // result is stored in the buffer
 8012ae6:	3b07      	subs	r3, #7
 8012ae8:	464a      	mov	r2, r9
 8012aea:	b298      	uxth	r0, r3
 8012aec:	1db1      	adds	r1, r6, #6
 8012aee:	f10b 0302 	add.w	r3, fp, #2
 8012af2:	f7fe ffb9 	bl	8011a68 <readfromspi>
						tx_buff_length = datalength + 3;
 8012af6:	491e      	ldr	r1, [pc, #120]	; (8012b70 <process_usbmessage+0x2c8>)
 8012af8:	7872      	ldrb	r2, [r6, #1]
 8012afa:	f109 0303 	add.w	r3, r9, #3
 8012afe:	600b      	str	r3, [r1, #0]
					if((local_buff[1] & 0x1) == 1) //SPI write
 8012b00:	07d3      	lsls	r3, r2, #31
							tx_buff[1] = 0x0; // no error
 8012b02:	f88b a001 	strb.w	sl, [fp, #1]
					if((local_buff[1] & 0x1) == 1) //SPI write
 8012b06:	d4a2      	bmi.n	8012a4e <process_usbmessage+0x1a6>
 8012b08:	e79e      	b.n	8012a48 <process_usbmessage+0x1a0>
							local_buff_offset = 0;
 8012b0a:	2500      	movs	r5, #0
 8012b0c:	4b1d      	ldr	r3, [pc, #116]	; (8012b84 <process_usbmessage+0x2dc>)
							led_off(LED_PC6);
 8012b0e:	4628      	mov	r0, r5
							local_buff_offset = 0;
 8012b10:	801d      	strh	r5, [r3, #0]
						int datalength = local_buff[4] + (local_buff[5]<<8);
 8012b12:	f896 9004 	ldrb.w	r9, [r6, #4]
 8012b16:	f896 a005 	ldrb.w	sl, [r6, #5]
							led_off(LED_PC6);
 8012b1a:	f7ff fc47 	bl	80123ac <led_off>
							tx_buff[2] = 0x3;
 8012b1e:	2203      	movs	r2, #3
							tx_buff[0] = 0x2;
 8012b20:	2102      	movs	r1, #2
							if(local_buff[msglength-1] != 0x3)
 8012b22:	eb06 0308 	add.w	r3, r6, r8
 8012b26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
							tx_buff[0] = 0x2;
 8012b2a:	4c12      	ldr	r4, [pc, #72]	; (8012b74 <process_usbmessage+0x2cc>)
							if(local_buff[msglength-1] != 0x3)
 8012b2c:	4293      	cmp	r3, r2
							tx_buff[0] = 0x2;
 8012b2e:	7021      	strb	r1, [r4, #0]
							tx_buff[2] = 0x3;
 8012b30:	70a2      	strb	r2, [r4, #2]
							if(local_buff[msglength-1] != 0x3)
 8012b32:	d005      	beq.n	8012b40 <process_usbmessage+0x298>
								tx_buff[1] = 0x1; // if no ETX (0x3) indicate error
 8012b34:	2301      	movs	r3, #1
 8012b36:	7063      	strb	r3, [r4, #1]
							tx_buff_length = 3;
 8012b38:	2103      	movs	r1, #3
 8012b3a:	4a0d      	ldr	r2, [pc, #52]	; (8012b70 <process_usbmessage+0x2c8>)
 8012b3c:	6011      	str	r1, [r2, #0]
 8012b3e:	e783      	b.n	8012a48 <process_usbmessage+0x1a0>
						int datalength = local_buff[4] + (local_buff[5]<<8);
 8012b40:	eb09 220a 	add.w	r2, r9, sl, lsl #8
						int headerlength = msglength - 7 - datalength;
 8012b44:	f1a8 0007 	sub.w	r0, r8, #7
 8012b48:	1a80      	subs	r0, r0, r2
								writetospi(headerlength, &local_buff[6], datalength, &local_buff[6+headerlength]);  // result is stored in the buffer
 8012b4a:	1d83      	adds	r3, r0, #6
 8012b4c:	490e      	ldr	r1, [pc, #56]	; (8012b88 <process_usbmessage+0x2e0>)
 8012b4e:	4433      	add	r3, r6
 8012b50:	b280      	uxth	r0, r0
 8012b52:	f7fe ff41 	bl	80119d8 <writetospi>
								tx_buff[1] = 0x0; // no error
 8012b56:	7065      	strb	r5, [r4, #1]
 8012b58:	e7ee      	b.n	8012b38 <process_usbmessage+0x290>
 8012b5a:	bf00      	nop
 8012b5c:	20003c50 	.word	0x20003c50
 8012b60:	2000800c 	.word	0x2000800c
 8012b64:	20007a18 	.word	0x20007a18
 8012b68:	20003c54 	.word	0x20003c54
 8012b6c:	08017d64 	.word	0x08017d64
 8012b70:	20003c5c 	.word	0x20003c5c
 8012b74:	20005308 	.word	0x20005308
 8012b78:	200052fc 	.word	0x200052fc
 8012b7c:	20005304 	.word	0x20005304
 8012b80:	20005300 	.word	0x20005300
 8012b84:	20003c58 	.word	0x20003c58
 8012b88:	20008012 	.word	0x20008012

08012b8c <send_usbmessage>:
#pragma GCC optimize ("O3")
void send_usbmessage(uint8 *string, int len)
{
 8012b8c:	b570      	push	{r4, r5, r6, lr}
	if(local_have_data == 0)
 8012b8e:	4d0b      	ldr	r5, [pc, #44]	; (8012bbc <send_usbmessage+0x30>)
 8012b90:	682b      	ldr	r3, [r5, #0]
 8012b92:	b103      	cbz	r3, 8012b96 <send_usbmessage+0xa>
		tx_buff[len+1] = '\n';
		tx_buff_length = len + 2;

		local_have_data = 2;
	}
}
 8012b94:	bd70      	pop	{r4, r5, r6, pc}
 8012b96:	460c      	mov	r4, r1
		memcpy(&tx_buff[0], string, len);
 8012b98:	4b09      	ldr	r3, [pc, #36]	; (8012bc0 <send_usbmessage+0x34>)
 8012b9a:	4601      	mov	r1, r0
 8012b9c:	4622      	mov	r2, r4
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f000 fa4a 	bl	8013038 <memcpy>
		tx_buff[len] = '\r';
 8012ba4:	260d      	movs	r6, #13
		memcpy(&tx_buff[0], string, len);
 8012ba6:	4603      	mov	r3, r0
		local_have_data = 2;
 8012ba8:	2202      	movs	r2, #2
		tx_buff[len+1] = '\n';
 8012baa:	200a      	movs	r0, #10
		tx_buff[len] = '\r';
 8012bac:	551e      	strb	r6, [r3, r4]
		tx_buff_length = len + 2;
 8012bae:	4905      	ldr	r1, [pc, #20]	; (8012bc4 <send_usbmessage+0x38>)
		tx_buff[len+1] = '\n';
 8012bb0:	4423      	add	r3, r4
 8012bb2:	7058      	strb	r0, [r3, #1]
		tx_buff_length = len + 2;
 8012bb4:	4414      	add	r4, r2
 8012bb6:	600c      	str	r4, [r1, #0]
		local_have_data = 2;
 8012bb8:	602a      	str	r2, [r5, #0]
}
 8012bba:	bd70      	pop	{r4, r5, r6, pc}
 8012bbc:	20003c60 	.word	0x20003c60
 8012bc0:	20005308 	.word	0x20005308
 8012bc4:	20003c5c 	.word	0x20003c5c

08012bc8 <usb_printconfig>:
**
**===========================================================================
*/

void usb_printconfig(int size, uint8* string, int s1switch)
{
 8012bc8:	b470      	push	{r4, r5, r6}
	application_mode = USB_PRINT_ONLY;
 8012bca:	2402      	movs	r4, #2

	s1configswitch = s1switch;
 8012bcc:	4b04      	ldr	r3, [pc, #16]	; (8012be0 <usb_printconfig+0x18>)
	version_size = size;
 8012bce:	4e05      	ldr	r6, [pc, #20]	; (8012be4 <usb_printconfig+0x1c>)
	version = string;
 8012bd0:	4d05      	ldr	r5, [pc, #20]	; (8012be8 <usb_printconfig+0x20>)
	s1configswitch = s1switch;
 8012bd2:	601a      	str	r2, [r3, #0]
	application_mode = USB_PRINT_ONLY;
 8012bd4:	4b05      	ldr	r3, [pc, #20]	; (8012bec <usb_printconfig+0x24>)
	version_size = size;
 8012bd6:	6030      	str	r0, [r6, #0]
	version = string;
 8012bd8:	6029      	str	r1, [r5, #0]
	application_mode = USB_PRINT_ONLY;
 8012bda:	601c      	str	r4, [r3, #0]
}
 8012bdc:	bc70      	pop	{r4, r5, r6}
 8012bde:	4770      	bx	lr
 8012be0:	200052fc 	.word	0x200052fc
 8012be4:	20005304 	.word	0x20005304
 8012be8:	20005300 	.word	0x20005300
 8012bec:	20003c50 	.word	0x20003c50

08012bf0 <usb_init>:


int usb_init(void)
{
 8012bf0:	b500      	push	{lr}
	uint32 devID = 0;

	memset(local_buff, 0, sizeof(local_buff));
 8012bf2:	f242 7210 	movw	r2, #10000	; 0x2710
{
 8012bf6:	b083      	sub	sp, #12
	memset(local_buff, 0, sizeof(local_buff));
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	4810      	ldr	r0, [pc, #64]	; (8012c3c <usb_init+0x4c>)
 8012bfc:	f000 fa2a 	bl	8013054 <memset>
	led_off(LED_ALL); //to display error....
 8012c00:	2004      	movs	r0, #4
 8012c02:	f7ff fbd3 	bl	80123ac <led_off>

	// enable/initialise the USB functionality
	USBD_Init(&USB_OTG_dev,USB_OTG_FS_CORE_ID,&USR_desc,&USBD_CDC_cb,&USR_cb);
 8012c06:	4a0e      	ldr	r2, [pc, #56]	; (8012c40 <usb_init+0x50>)
 8012c08:	2101      	movs	r1, #1
 8012c0a:	480e      	ldr	r0, [pc, #56]	; (8012c44 <usb_init+0x54>)
 8012c0c:	4b0e      	ldr	r3, [pc, #56]	; (8012c48 <usb_init+0x58>)
 8012c0e:	9200      	str	r2, [sp, #0]
 8012c10:	4a0e      	ldr	r2, [pc, #56]	; (8012c4c <usb_init+0x5c>)
 8012c12:	f7ef fd7d 	bl	8002710 <USBD_Init>

	port_set_dw1000_slowrate();  //max SPI before PLLs configured is ~4M
 8012c16:	f7ff fc51 	bl	80124bc <port_set_dw1000_slowrate>
    localSPIspeed = 0;
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	4b0c      	ldr	r3, [pc, #48]	; (8012c50 <usb_init+0x60>)
 8012c1e:	601a      	str	r2, [r3, #0]

    //this is called here to wake up the device (i.e. if it was in sleep mode before the restart)
    port_wakeup_dw1000();
 8012c20:	f7ff fc38 	bl	8012494 <port_wakeup_dw1000>

    devID = dwt_readdevid() ;
 8012c24:	f7fd fdd0 	bl	80107c8 <dwt_readdevid>
    if(DWT_DEVICE_ID != devID)
 8012c28:	4b0a      	ldr	r3, [pc, #40]	; (8012c54 <usb_init+0x64>)
 8012c2a:	4298      	cmp	r0, r3
 8012c2c:	d002      	beq.n	8012c34 <usb_init+0x44>
    {
        // SPI not working or Unsupported Device ID
    	led_on(LED_ALL); //to display error....
 8012c2e:	2004      	movs	r0, #4
 8012c30:	f7ff fbf6 	bl	8012420 <led_on>
    }

    return 0;
}
 8012c34:	2000      	movs	r0, #0
 8012c36:	b003      	add	sp, #12
 8012c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c3c:	2000800c 	.word	0x2000800c
 8012c40:	20000108 	.word	0x20000108
 8012c44:	20007a18 	.word	0x20007a18
 8012c48:	20000060 	.word	0x20000060
 8012c4c:	200000d4 	.word	0x200000d4
 8012c50:	200000d0 	.word	0x200000d0
 8012c54:	deca0130 	.word	0xdeca0130

08012c58 <usb_run>:


#pragma GCC optimize ("O3")
void usb_run(void)
{
 8012c58:	b510      	push	{r4, lr}

    // loop forever, doing nothing except giving a bit of a LED flash every so often
    {
    	//if(application_mode == STAND_ALONE)
		{
    		i++ ;
 8012c5a:	4c1c      	ldr	r4, [pc, #112]	; (8012ccc <usb_run+0x74>)
 8012c5c:	6823      	ldr	r3, [r4, #0]
 8012c5e:	3301      	adds	r3, #1
			if (i == 0x0D0000) led_on(LED_PC8);
 8012c60:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
    		i++ ;
 8012c64:	6023      	str	r3, [r4, #0]
			if (i == 0x0D0000) led_on(LED_PC8);
 8012c66:	d023      	beq.n	8012cb0 <usb_run+0x58>
			if (i == 0x0E0000) led_off(LED_PC8);
 8012c68:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8012c6c:	d01b      	beq.n	8012ca6 <usb_run+0x4e>
			if (i == 0x0F0000) led_on(LED_PC8);
 8012c6e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8012c72:	d013      	beq.n	8012c9c <usb_run+0x44>
			if (i == 0x100000)
 8012c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c78:	d00a      	beq.n	8012c90 <usb_run+0x38>
				i = 0;
				//send_usbmessage("test ", 5);
			}
		}

        if(local_have_data == 1)
 8012c7a:	4c15      	ldr	r4, [pc, #84]	; (8012cd0 <usb_run+0x78>)
 8012c7c:	6823      	ldr	r3, [r4, #0]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d002      	beq.n	8012c88 <usb_run+0x30>
        {
        	local_have_data = process_usbmessage();
        }
        else if(local_have_data == 2) //have data to send (over USB)
 8012c82:	2b02      	cmp	r3, #2
 8012c84:	d019      	beq.n	8012cba <usb_run+0x62>
        	DW_VCP_DataTx(tx_buff, tx_buff_length);
			local_have_data = 0;
        }

	  }
}
 8012c86:	bd10      	pop	{r4, pc}
        	local_have_data = process_usbmessage();
 8012c88:	f7ff fe0e 	bl	80128a8 <process_usbmessage>
 8012c8c:	6020      	str	r0, [r4, #0]
}
 8012c8e:	bd10      	pop	{r4, pc}
				led_off(LED_PC8);
 8012c90:	2002      	movs	r0, #2
 8012c92:	f7ff fb8b 	bl	80123ac <led_off>
				i = 0;
 8012c96:	2300      	movs	r3, #0
 8012c98:	6023      	str	r3, [r4, #0]
 8012c9a:	e7ee      	b.n	8012c7a <usb_run+0x22>
			if (i == 0x0F0000) led_on(LED_PC8);
 8012c9c:	2002      	movs	r0, #2
 8012c9e:	f7ff fbbf 	bl	8012420 <led_on>
 8012ca2:	6823      	ldr	r3, [r4, #0]
 8012ca4:	e7e6      	b.n	8012c74 <usb_run+0x1c>
			if (i == 0x0E0000) led_off(LED_PC8);
 8012ca6:	2002      	movs	r0, #2
 8012ca8:	f7ff fb80 	bl	80123ac <led_off>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	e7de      	b.n	8012c6e <usb_run+0x16>
			if (i == 0x0D0000) led_on(LED_PC8);
 8012cb0:	2002      	movs	r0, #2
 8012cb2:	f7ff fbb5 	bl	8012420 <led_on>
 8012cb6:	6823      	ldr	r3, [r4, #0]
 8012cb8:	e7d6      	b.n	8012c68 <usb_run+0x10>
        	DW_VCP_DataTx(tx_buff, tx_buff_length);
 8012cba:	4b06      	ldr	r3, [pc, #24]	; (8012cd4 <usb_run+0x7c>)
 8012cbc:	4806      	ldr	r0, [pc, #24]	; (8012cd8 <usb_run+0x80>)
 8012cbe:	6819      	ldr	r1, [r3, #0]
 8012cc0:	f7ff fd48 	bl	8012754 <DW_VCP_DataTx>
			local_have_data = 0;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	6023      	str	r3, [r4, #0]
}
 8012cc8:	bd10      	pop	{r4, pc}
 8012cca:	bf00      	nop
 8012ccc:	20003c64 	.word	0x20003c64
 8012cd0:	20003c60 	.word	0x20003c60
 8012cd4:	20003c5c 	.word	0x20003c5c
 8012cd8:	20005308 	.word	0x20005308

08012cdc <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	//USB GPIOA config
	//Vbus set as Input Floating for OTG
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8012ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ce8:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = 	GPIO_Mode_IN_FLOATING;
 8012cea:	2304      	movs	r3, #4
 8012cec:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012cee:	2303      	movs	r3, #3
 8012cf0:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012cf2:	f107 030c 	add.w	r3, r7, #12
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	4812      	ldr	r0, [pc, #72]	; (8012d44 <USB_OTG_BSP_Init+0x68>)
 8012cfa:	f7ee fc91 	bl	8001620 <GPIO_Init>
	//ID set as input pull up for OTG
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 ;
 8012cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d02:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = 	GPIO_Mode_IPU;
 8012d04:	2348      	movs	r3, #72	; 0x48
 8012d06:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012d08:	2303      	movs	r3, #3
 8012d0a:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012d0c:	f107 030c 	add.w	r3, r7, #12
 8012d10:	4619      	mov	r1, r3
 8012d12:	480c      	ldr	r0, [pc, #48]	; (8012d44 <USB_OTG_BSP_Init+0x68>)
 8012d14:	f7ee fc84 	bl	8001620 <GPIO_Init>
	// the DP and DM are controlled automatically
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
 8012d18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012d1c:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8012d1e:	2310      	movs	r3, #16
 8012d20:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8012d22:	2303      	movs	r3, #3
 8012d24:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8012d26:	f107 030c 	add.w	r3, r7, #12
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	4805      	ldr	r0, [pc, #20]	; (8012d44 <USB_OTG_BSP_Init+0x68>)
 8012d2e:	f7ee fc77 	bl	8001620 <GPIO_Init>


	// Enable USB clock (48Mbps)
	RCC_AHBPeriphClockCmd( RCC_AHBPeriph_OTG_FS, ENABLE) ;
 8012d32:	2101      	movs	r1, #1
 8012d34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012d38:	f7ef f8bc 	bl	8001eb4 <RCC_AHBPeriphClockCmd>
}
 8012d3c:	bf00      	nop
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	40010800 	.word	0x40010800

08012d48 <USB_OTG_BSP_EnableInterrupt>:
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8012d50:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8012d54:	f7ee fb3c 	bl	80013d0 <NVIC_PriorityGroupConfig>
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;
 8012d58:	2343      	movs	r3, #67	; 0x43
 8012d5a:	733b      	strb	r3, [r7, #12]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8012d60:	2303      	movs	r3, #3
 8012d62:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8012d64:	2301      	movs	r3, #1
 8012d66:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);
 8012d68:	f107 030c 	add.w	r3, r7, #12
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7ee fb41 	bl	80013f4 <NVIC_Init>
}
 8012d72:	bf00      	nop
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
	...

08012d7c <USB_OTG_BSP_uDelay>:
  *         This function provides delay time in micro sec
  * @param  usec : Value of delay required in micro sec
  * @retval None
  */
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b085      	sub	sp, #20
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]

  uint32_t count = 0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	60fb      	str	r3, [r7, #12]
  const uint32_t utime = (120 * usec / 7);
 8012d88:	687a      	ldr	r2, [r7, #4]
 8012d8a:	4613      	mov	r3, r2
 8012d8c:	011b      	lsls	r3, r3, #4
 8012d8e:	1a9b      	subs	r3, r3, r2
 8012d90:	00db      	lsls	r3, r3, #3
 8012d92:	461a      	mov	r2, r3
 8012d94:	4b0a      	ldr	r3, [pc, #40]	; (8012dc0 <USB_OTG_BSP_uDelay+0x44>)
 8012d96:	fba3 1302 	umull	r1, r3, r3, r2
 8012d9a:	1ad2      	subs	r2, r2, r3
 8012d9c:	0852      	lsrs	r2, r2, #1
 8012d9e:	4413      	add	r3, r2
 8012da0:	089b      	lsrs	r3, r3, #2
 8012da2:	60bb      	str	r3, [r7, #8]
  do
  {
    if ( ++count > utime )
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	3301      	adds	r3, #1
 8012da8:	60fb      	str	r3, [r7, #12]
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d800      	bhi.n	8012db4 <USB_OTG_BSP_uDelay+0x38>
 8012db2:	e7f7      	b.n	8012da4 <USB_OTG_BSP_uDelay+0x28>
    {
      return ;
 8012db4:	bf00      	nop
    }
  }
  while (1); 
  
}
 8012db6:	3714      	adds	r7, #20
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bc80      	pop	{r7}
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	24924925 	.word	0x24924925

08012dc4 <USB_OTG_BSP_mDelay>:
  *          This function provides delay time in milli sec
  * @param  msec : Value of delay required in milli sec
  * @retval None
  */
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]

    USB_OTG_BSP_uDelay(msec * 1000);    
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012dd2:	fb02 f303 	mul.w	r3, r2, r3
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7ff ffd0 	bl	8012d7c <USB_OTG_BSP_uDelay>

}
 8012ddc:	bf00      	nop
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	4603      	mov	r3, r0
 8012dec:	6039      	str	r1, [r7, #0]
 8012dee:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	2212      	movs	r2, #18
 8012df4:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8012df6:	4b03      	ldr	r3, [pc, #12]	; (8012e04 <USBD_USR_DeviceDescriptor+0x20>)
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bc80      	pop	{r7}
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	200000f0 	.word	0x200000f0

08012e08 <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	4603      	mov	r3, r0
 8012e10:	6039      	str	r1, [r7, #0]
 8012e12:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	2204      	movs	r2, #4
 8012e18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012e1a:	4b03      	ldr	r3, [pc, #12]	; (8012e28 <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	370c      	adds	r7, #12
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bc80      	pop	{r7}
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop
 8012e28:	20000104 	.word	0x20000104

08012e2c <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	4603      	mov	r3, r0
 8012e34:	6039      	str	r1, [r7, #0]
 8012e36:	71fb      	strb	r3, [r7, #7]
 
  
  if(speed == 0)
 8012e38:	79fb      	ldrb	r3, [r7, #7]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d105      	bne.n	8012e4a <USBD_USR_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8012e3e:	683a      	ldr	r2, [r7, #0]
 8012e40:	4907      	ldr	r1, [pc, #28]	; (8012e60 <USBD_USR_ProductStrDescriptor+0x34>)
 8012e42:	4808      	ldr	r0, [pc, #32]	; (8012e64 <USBD_USR_ProductStrDescriptor+0x38>)
 8012e44:	f7f0 fb9e 	bl	8003584 <USBD_GetString>
 8012e48:	e004      	b.n	8012e54 <USBD_USR_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8012e4a:	683a      	ldr	r2, [r7, #0]
 8012e4c:	4904      	ldr	r1, [pc, #16]	; (8012e60 <USBD_USR_ProductStrDescriptor+0x34>)
 8012e4e:	4806      	ldr	r0, [pc, #24]	; (8012e68 <USBD_USR_ProductStrDescriptor+0x3c>)
 8012e50:	f7f0 fb98 	bl	8003584 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e54:	4b02      	ldr	r3, [pc, #8]	; (8012e60 <USBD_USR_ProductStrDescriptor+0x34>)
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	20004d04 	.word	0x20004d04
 8012e64:	08017b90 	.word	0x08017b90
 8012e68:	08017bb4 	.word	0x08017bb4

08012e6c <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	4603      	mov	r3, r0
 8012e74:	6039      	str	r1, [r7, #0]
 8012e76:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e78:	683a      	ldr	r2, [r7, #0]
 8012e7a:	4904      	ldr	r1, [pc, #16]	; (8012e8c <USBD_USR_ManufacturerStrDescriptor+0x20>)
 8012e7c:	4804      	ldr	r0, [pc, #16]	; (8012e90 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 8012e7e:	f7f0 fb81 	bl	8003584 <USBD_GetString>
  return USBD_StrDesc;
 8012e82:	4b02      	ldr	r3, [pc, #8]	; (8012e8c <USBD_USR_ManufacturerStrDescriptor+0x20>)
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3708      	adds	r7, #8
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	20004d04 	.word	0x20004d04
 8012e90:	08017bd8 	.word	0x08017bd8

08012e94 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	6039      	str	r1, [r7, #0]
 8012e9e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 8012ea0:	79fb      	ldrb	r3, [r7, #7]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d105      	bne.n	8012eb2 <USBD_USR_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8012ea6:	683a      	ldr	r2, [r7, #0]
 8012ea8:	4907      	ldr	r1, [pc, #28]	; (8012ec8 <USBD_USR_SerialStrDescriptor+0x34>)
 8012eaa:	4808      	ldr	r0, [pc, #32]	; (8012ecc <USBD_USR_SerialStrDescriptor+0x38>)
 8012eac:	f7f0 fb6a 	bl	8003584 <USBD_GetString>
 8012eb0:	e004      	b.n	8012ebc <USBD_USR_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);    
 8012eb2:	683a      	ldr	r2, [r7, #0]
 8012eb4:	4904      	ldr	r1, [pc, #16]	; (8012ec8 <USBD_USR_SerialStrDescriptor+0x34>)
 8012eb6:	4806      	ldr	r0, [pc, #24]	; (8012ed0 <USBD_USR_SerialStrDescriptor+0x3c>)
 8012eb8:	f7f0 fb64 	bl	8003584 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ebc:	4b02      	ldr	r3, [pc, #8]	; (8012ec8 <USBD_USR_SerialStrDescriptor+0x34>)
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20004d04 	.word	0x20004d04
 8012ecc:	08017bec 	.word	0x08017bec
 8012ed0:	08017bfc 	.word	0x08017bfc

08012ed4 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	4603      	mov	r3, r0
 8012edc:	6039      	str	r1, [r7, #0]
 8012ede:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 8012ee0:	79fb      	ldrb	r3, [r7, #7]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d105      	bne.n	8012ef2 <USBD_USR_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8012ee6:	683a      	ldr	r2, [r7, #0]
 8012ee8:	4907      	ldr	r1, [pc, #28]	; (8012f08 <USBD_USR_ConfigStrDescriptor+0x34>)
 8012eea:	4808      	ldr	r0, [pc, #32]	; (8012f0c <USBD_USR_ConfigStrDescriptor+0x38>)
 8012eec:	f7f0 fb4a 	bl	8003584 <USBD_GetString>
 8012ef0:	e004      	b.n	8012efc <USBD_USR_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8012ef2:	683a      	ldr	r2, [r7, #0]
 8012ef4:	4904      	ldr	r1, [pc, #16]	; (8012f08 <USBD_USR_ConfigStrDescriptor+0x34>)
 8012ef6:	4805      	ldr	r0, [pc, #20]	; (8012f0c <USBD_USR_ConfigStrDescriptor+0x38>)
 8012ef8:	f7f0 fb44 	bl	8003584 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8012efc:	4b02      	ldr	r3, [pc, #8]	; (8012f08 <USBD_USR_ConfigStrDescriptor+0x34>)
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3708      	adds	r7, #8
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20004d04 	.word	0x20004d04
 8012f0c:	08017c0c 	.word	0x08017c0c

08012f10 <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	4603      	mov	r3, r0
 8012f18:	6039      	str	r1, [r7, #0]
 8012f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f1c:	79fb      	ldrb	r3, [r7, #7]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d105      	bne.n	8012f2e <USBD_USR_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8012f22:	683a      	ldr	r2, [r7, #0]
 8012f24:	4907      	ldr	r1, [pc, #28]	; (8012f44 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8012f26:	4808      	ldr	r0, [pc, #32]	; (8012f48 <USBD_USR_InterfaceStrDescriptor+0x38>)
 8012f28:	f7f0 fb2c 	bl	8003584 <USBD_GetString>
 8012f2c:	e004      	b.n	8012f38 <USBD_USR_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	4904      	ldr	r1, [pc, #16]	; (8012f44 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8012f32:	4805      	ldr	r0, [pc, #20]	; (8012f48 <USBD_USR_InterfaceStrDescriptor+0x38>)
 8012f34:	f7f0 fb26 	bl	8003584 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8012f38:	4b02      	ldr	r3, [pc, #8]	; (8012f44 <USBD_USR_InterfaceStrDescriptor+0x34>)
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	20004d04 	.word	0x20004d04
 8012f48:	08017c18 	.word	0x08017c18

08012f4c <USBD_USR_Init>:
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
void USBD_USR_Init(void)
{  
 8012f4c:	b480      	push	{r7}
 8012f4e:	af00      	add	r7, sp, #0
  LCD_LOG_SetHeader(" USB OTG FS VCP Device");
#endif
  LCD_UsrLog("> USB device library started.\n"); 
  LCD_LOG_SetFooter ("     USB Device Library v1.1.0" );
#endif
}
 8012f50:	bf00      	nop
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bc80      	pop	{r7}
 8012f56:	4770      	bx	lr

08012f58 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
void USBD_USR_DeviceReset(uint8_t speed )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	4603      	mov	r3, r0
 8012f60:	71fb      	strb	r3, [r7, #7]
 switch (speed)
 8012f62:	79fb      	ldrb	r3, [r7, #7]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d001      	beq.n	8012f6c <USBD_USR_DeviceReset+0x14>
 8012f68:	2b01      	cmp	r3, #1
     LCD_LOG_SetFooter ("     USB Device Library v1.1.0 [HS]" );
     break;

  case USB_OTG_SPEED_FULL: 
     LCD_LOG_SetFooter ("     USB Device Library v1.1.0 [FS]" );
     break;
 8012f6a:	e000      	b.n	8012f6e <USBD_USR_DeviceReset+0x16>
     break;
 8012f6c:	bf00      	nop
 default:
     LCD_LOG_SetFooter ("     USB Device Library v1.1.0 [??]" );
 }
}
 8012f6e:	bf00      	nop
 8012f70:	370c      	adds	r7, #12
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bc80      	pop	{r7}
 8012f76:	4770      	bx	lr

08012f78 <USBD_USR_DeviceConfigured>:
*         Displays the message on LCD on device configuration Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConfigured (void)
{
 8012f78:	b480      	push	{r7}
 8012f7a:	af00      	add	r7, sp, #0
  LCD_UsrLog("> VCP Interface configured.\n");
}
 8012f7c:	bf00      	nop
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bc80      	pop	{r7}
 8012f82:	4770      	bx	lr

08012f84 <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceSuspended(void)
{
 8012f84:	b480      	push	{r7}
 8012f86:	af00      	add	r7, sp, #0
  LCD_UsrLog("> USB Device in Suspend Mode.\n");
  /* Users can do their application actions here for the USB-Reset */
}
 8012f88:	bf00      	nop
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bc80      	pop	{r7}
 8012f8e:	4770      	bx	lr

08012f90 <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceResumed(void)
{
 8012f90:	b480      	push	{r7}
 8012f92:	af00      	add	r7, sp, #0
    LCD_UsrLog("> USB Device in Idle Mode.\n");
  /* Users can do their application actions here for the USB-Reset */
}
 8012f94:	bf00      	nop
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bc80      	pop	{r7}
 8012f9a:	4770      	bx	lr

08012f9c <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConnected (void)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	af00      	add	r7, sp, #0
  LCD_UsrLog("> USB Device Connected.\n");
}
 8012fa0:	bf00      	nop
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bc80      	pop	{r7}
 8012fa6:	4770      	bx	lr

08012fa8 <USBD_USR_DeviceDisconnected>:
*         Displays the message on LCD on device disconnection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceDisconnected (void)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	af00      	add	r7, sp, #0
  LCD_UsrLog("> USB Device Disconnected.\n");
}
 8012fac:	bf00      	nop
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bc80      	pop	{r7}
 8012fb2:	4770      	bx	lr

08012fb4 <__libc_init_array>:
 8012fb4:	b570      	push	{r4, r5, r6, lr}
 8012fb6:	2600      	movs	r6, #0
 8012fb8:	4d0c      	ldr	r5, [pc, #48]	; (8012fec <__libc_init_array+0x38>)
 8012fba:	4c0d      	ldr	r4, [pc, #52]	; (8012ff0 <__libc_init_array+0x3c>)
 8012fbc:	1b64      	subs	r4, r4, r5
 8012fbe:	10a4      	asrs	r4, r4, #2
 8012fc0:	42a6      	cmp	r6, r4
 8012fc2:	d109      	bne.n	8012fd8 <__libc_init_array+0x24>
 8012fc4:	f004 fb44 	bl	8017650 <_init>
 8012fc8:	2600      	movs	r6, #0
 8012fca:	4d0a      	ldr	r5, [pc, #40]	; (8012ff4 <__libc_init_array+0x40>)
 8012fcc:	4c0a      	ldr	r4, [pc, #40]	; (8012ff8 <__libc_init_array+0x44>)
 8012fce:	1b64      	subs	r4, r4, r5
 8012fd0:	10a4      	asrs	r4, r4, #2
 8012fd2:	42a6      	cmp	r6, r4
 8012fd4:	d105      	bne.n	8012fe2 <__libc_init_array+0x2e>
 8012fd6:	bd70      	pop	{r4, r5, r6, pc}
 8012fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fdc:	4798      	blx	r3
 8012fde:	3601      	adds	r6, #1
 8012fe0:	e7ee      	b.n	8012fc0 <__libc_init_array+0xc>
 8012fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fe6:	4798      	blx	r3
 8012fe8:	3601      	adds	r6, #1
 8012fea:	e7f2      	b.n	8012fd2 <__libc_init_array+0x1e>
 8012fec:	08018238 	.word	0x08018238
 8012ff0:	08018238 	.word	0x08018238
 8012ff4:	08018238 	.word	0x08018238
 8012ff8:	0801823c 	.word	0x0801823c

08012ffc <malloc>:
 8012ffc:	4b02      	ldr	r3, [pc, #8]	; (8013008 <malloc+0xc>)
 8012ffe:	4601      	mov	r1, r0
 8013000:	6818      	ldr	r0, [r3, #0]
 8013002:	f000 b87b 	b.w	80130fc <_malloc_r>
 8013006:	bf00      	nop
 8013008:	20000124 	.word	0x20000124

0801300c <free>:
 801300c:	4b02      	ldr	r3, [pc, #8]	; (8013018 <free+0xc>)
 801300e:	4601      	mov	r1, r0
 8013010:	6818      	ldr	r0, [r3, #0]
 8013012:	f000 b827 	b.w	8013064 <_free_r>
 8013016:	bf00      	nop
 8013018:	20000124 	.word	0x20000124

0801301c <memcmp>:
 801301c:	b530      	push	{r4, r5, lr}
 801301e:	2400      	movs	r4, #0
 8013020:	3901      	subs	r1, #1
 8013022:	42a2      	cmp	r2, r4
 8013024:	d101      	bne.n	801302a <memcmp+0xe>
 8013026:	2000      	movs	r0, #0
 8013028:	e005      	b.n	8013036 <memcmp+0x1a>
 801302a:	5d03      	ldrb	r3, [r0, r4]
 801302c:	3401      	adds	r4, #1
 801302e:	5d0d      	ldrb	r5, [r1, r4]
 8013030:	42ab      	cmp	r3, r5
 8013032:	d0f6      	beq.n	8013022 <memcmp+0x6>
 8013034:	1b58      	subs	r0, r3, r5
 8013036:	bd30      	pop	{r4, r5, pc}

08013038 <memcpy>:
 8013038:	440a      	add	r2, r1
 801303a:	4291      	cmp	r1, r2
 801303c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013040:	d100      	bne.n	8013044 <memcpy+0xc>
 8013042:	4770      	bx	lr
 8013044:	b510      	push	{r4, lr}
 8013046:	f811 4b01 	ldrb.w	r4, [r1], #1
 801304a:	4291      	cmp	r1, r2
 801304c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013050:	d1f9      	bne.n	8013046 <memcpy+0xe>
 8013052:	bd10      	pop	{r4, pc}

08013054 <memset>:
 8013054:	4603      	mov	r3, r0
 8013056:	4402      	add	r2, r0
 8013058:	4293      	cmp	r3, r2
 801305a:	d100      	bne.n	801305e <memset+0xa>
 801305c:	4770      	bx	lr
 801305e:	f803 1b01 	strb.w	r1, [r3], #1
 8013062:	e7f9      	b.n	8013058 <memset+0x4>

08013064 <_free_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	4605      	mov	r5, r0
 8013068:	2900      	cmp	r1, #0
 801306a:	d043      	beq.n	80130f4 <_free_r+0x90>
 801306c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013070:	1f0c      	subs	r4, r1, #4
 8013072:	2b00      	cmp	r3, #0
 8013074:	bfb8      	it	lt
 8013076:	18e4      	addlt	r4, r4, r3
 8013078:	f001 fc58 	bl	801492c <__malloc_lock>
 801307c:	4a1e      	ldr	r2, [pc, #120]	; (80130f8 <_free_r+0x94>)
 801307e:	6813      	ldr	r3, [r2, #0]
 8013080:	4610      	mov	r0, r2
 8013082:	b933      	cbnz	r3, 8013092 <_free_r+0x2e>
 8013084:	6063      	str	r3, [r4, #4]
 8013086:	6014      	str	r4, [r2, #0]
 8013088:	4628      	mov	r0, r5
 801308a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801308e:	f001 bc53 	b.w	8014938 <__malloc_unlock>
 8013092:	42a3      	cmp	r3, r4
 8013094:	d90a      	bls.n	80130ac <_free_r+0x48>
 8013096:	6821      	ldr	r1, [r4, #0]
 8013098:	1862      	adds	r2, r4, r1
 801309a:	4293      	cmp	r3, r2
 801309c:	bf01      	itttt	eq
 801309e:	681a      	ldreq	r2, [r3, #0]
 80130a0:	685b      	ldreq	r3, [r3, #4]
 80130a2:	1852      	addeq	r2, r2, r1
 80130a4:	6022      	streq	r2, [r4, #0]
 80130a6:	6063      	str	r3, [r4, #4]
 80130a8:	6004      	str	r4, [r0, #0]
 80130aa:	e7ed      	b.n	8013088 <_free_r+0x24>
 80130ac:	461a      	mov	r2, r3
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	b10b      	cbz	r3, 80130b6 <_free_r+0x52>
 80130b2:	42a3      	cmp	r3, r4
 80130b4:	d9fa      	bls.n	80130ac <_free_r+0x48>
 80130b6:	6811      	ldr	r1, [r2, #0]
 80130b8:	1850      	adds	r0, r2, r1
 80130ba:	42a0      	cmp	r0, r4
 80130bc:	d10b      	bne.n	80130d6 <_free_r+0x72>
 80130be:	6820      	ldr	r0, [r4, #0]
 80130c0:	4401      	add	r1, r0
 80130c2:	1850      	adds	r0, r2, r1
 80130c4:	4283      	cmp	r3, r0
 80130c6:	6011      	str	r1, [r2, #0]
 80130c8:	d1de      	bne.n	8013088 <_free_r+0x24>
 80130ca:	6818      	ldr	r0, [r3, #0]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	4401      	add	r1, r0
 80130d0:	6011      	str	r1, [r2, #0]
 80130d2:	6053      	str	r3, [r2, #4]
 80130d4:	e7d8      	b.n	8013088 <_free_r+0x24>
 80130d6:	d902      	bls.n	80130de <_free_r+0x7a>
 80130d8:	230c      	movs	r3, #12
 80130da:	602b      	str	r3, [r5, #0]
 80130dc:	e7d4      	b.n	8013088 <_free_r+0x24>
 80130de:	6820      	ldr	r0, [r4, #0]
 80130e0:	1821      	adds	r1, r4, r0
 80130e2:	428b      	cmp	r3, r1
 80130e4:	bf01      	itttt	eq
 80130e6:	6819      	ldreq	r1, [r3, #0]
 80130e8:	685b      	ldreq	r3, [r3, #4]
 80130ea:	1809      	addeq	r1, r1, r0
 80130ec:	6021      	streq	r1, [r4, #0]
 80130ee:	6063      	str	r3, [r4, #4]
 80130f0:	6054      	str	r4, [r2, #4]
 80130f2:	e7c9      	b.n	8013088 <_free_r+0x24>
 80130f4:	bd38      	pop	{r3, r4, r5, pc}
 80130f6:	bf00      	nop
 80130f8:	20003c68 	.word	0x20003c68

080130fc <_malloc_r>:
 80130fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130fe:	1ccd      	adds	r5, r1, #3
 8013100:	f025 0503 	bic.w	r5, r5, #3
 8013104:	3508      	adds	r5, #8
 8013106:	2d0c      	cmp	r5, #12
 8013108:	bf38      	it	cc
 801310a:	250c      	movcc	r5, #12
 801310c:	2d00      	cmp	r5, #0
 801310e:	4606      	mov	r6, r0
 8013110:	db01      	blt.n	8013116 <_malloc_r+0x1a>
 8013112:	42a9      	cmp	r1, r5
 8013114:	d903      	bls.n	801311e <_malloc_r+0x22>
 8013116:	230c      	movs	r3, #12
 8013118:	6033      	str	r3, [r6, #0]
 801311a:	2000      	movs	r0, #0
 801311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801311e:	f001 fc05 	bl	801492c <__malloc_lock>
 8013122:	4921      	ldr	r1, [pc, #132]	; (80131a8 <_malloc_r+0xac>)
 8013124:	680a      	ldr	r2, [r1, #0]
 8013126:	4614      	mov	r4, r2
 8013128:	b99c      	cbnz	r4, 8013152 <_malloc_r+0x56>
 801312a:	4f20      	ldr	r7, [pc, #128]	; (80131ac <_malloc_r+0xb0>)
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	b923      	cbnz	r3, 801313a <_malloc_r+0x3e>
 8013130:	4621      	mov	r1, r4
 8013132:	4630      	mov	r0, r6
 8013134:	f000 fd0a 	bl	8013b4c <_sbrk_r>
 8013138:	6038      	str	r0, [r7, #0]
 801313a:	4629      	mov	r1, r5
 801313c:	4630      	mov	r0, r6
 801313e:	f000 fd05 	bl	8013b4c <_sbrk_r>
 8013142:	1c43      	adds	r3, r0, #1
 8013144:	d123      	bne.n	801318e <_malloc_r+0x92>
 8013146:	230c      	movs	r3, #12
 8013148:	4630      	mov	r0, r6
 801314a:	6033      	str	r3, [r6, #0]
 801314c:	f001 fbf4 	bl	8014938 <__malloc_unlock>
 8013150:	e7e3      	b.n	801311a <_malloc_r+0x1e>
 8013152:	6823      	ldr	r3, [r4, #0]
 8013154:	1b5b      	subs	r3, r3, r5
 8013156:	d417      	bmi.n	8013188 <_malloc_r+0x8c>
 8013158:	2b0b      	cmp	r3, #11
 801315a:	d903      	bls.n	8013164 <_malloc_r+0x68>
 801315c:	6023      	str	r3, [r4, #0]
 801315e:	441c      	add	r4, r3
 8013160:	6025      	str	r5, [r4, #0]
 8013162:	e004      	b.n	801316e <_malloc_r+0x72>
 8013164:	6863      	ldr	r3, [r4, #4]
 8013166:	42a2      	cmp	r2, r4
 8013168:	bf0c      	ite	eq
 801316a:	600b      	streq	r3, [r1, #0]
 801316c:	6053      	strne	r3, [r2, #4]
 801316e:	4630      	mov	r0, r6
 8013170:	f001 fbe2 	bl	8014938 <__malloc_unlock>
 8013174:	f104 000b 	add.w	r0, r4, #11
 8013178:	1d23      	adds	r3, r4, #4
 801317a:	f020 0007 	bic.w	r0, r0, #7
 801317e:	1ac2      	subs	r2, r0, r3
 8013180:	d0cc      	beq.n	801311c <_malloc_r+0x20>
 8013182:	1a1b      	subs	r3, r3, r0
 8013184:	50a3      	str	r3, [r4, r2]
 8013186:	e7c9      	b.n	801311c <_malloc_r+0x20>
 8013188:	4622      	mov	r2, r4
 801318a:	6864      	ldr	r4, [r4, #4]
 801318c:	e7cc      	b.n	8013128 <_malloc_r+0x2c>
 801318e:	1cc4      	adds	r4, r0, #3
 8013190:	f024 0403 	bic.w	r4, r4, #3
 8013194:	42a0      	cmp	r0, r4
 8013196:	d0e3      	beq.n	8013160 <_malloc_r+0x64>
 8013198:	1a21      	subs	r1, r4, r0
 801319a:	4630      	mov	r0, r6
 801319c:	f000 fcd6 	bl	8013b4c <_sbrk_r>
 80131a0:	3001      	adds	r0, #1
 80131a2:	d1dd      	bne.n	8013160 <_malloc_r+0x64>
 80131a4:	e7cf      	b.n	8013146 <_malloc_r+0x4a>
 80131a6:	bf00      	nop
 80131a8:	20003c68 	.word	0x20003c68
 80131ac:	20003c6c 	.word	0x20003c6c

080131b0 <__cvt>:
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131b6:	461f      	mov	r7, r3
 80131b8:	bfbb      	ittet	lt
 80131ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80131be:	461f      	movlt	r7, r3
 80131c0:	2300      	movge	r3, #0
 80131c2:	232d      	movlt	r3, #45	; 0x2d
 80131c4:	b088      	sub	sp, #32
 80131c6:	4614      	mov	r4, r2
 80131c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80131ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80131cc:	7013      	strb	r3, [r2, #0]
 80131ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80131d4:	f023 0820 	bic.w	r8, r3, #32
 80131d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80131dc:	d005      	beq.n	80131ea <__cvt+0x3a>
 80131de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80131e2:	d100      	bne.n	80131e6 <__cvt+0x36>
 80131e4:	3501      	adds	r5, #1
 80131e6:	2302      	movs	r3, #2
 80131e8:	e000      	b.n	80131ec <__cvt+0x3c>
 80131ea:	2303      	movs	r3, #3
 80131ec:	aa07      	add	r2, sp, #28
 80131ee:	9204      	str	r2, [sp, #16]
 80131f0:	aa06      	add	r2, sp, #24
 80131f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80131f6:	e9cd 3500 	strd	r3, r5, [sp]
 80131fa:	4622      	mov	r2, r4
 80131fc:	463b      	mov	r3, r7
 80131fe:	f000 fd83 	bl	8013d08 <_dtoa_r>
 8013202:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013206:	4606      	mov	r6, r0
 8013208:	d102      	bne.n	8013210 <__cvt+0x60>
 801320a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801320c:	07db      	lsls	r3, r3, #31
 801320e:	d522      	bpl.n	8013256 <__cvt+0xa6>
 8013210:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013214:	eb06 0905 	add.w	r9, r6, r5
 8013218:	d110      	bne.n	801323c <__cvt+0x8c>
 801321a:	7833      	ldrb	r3, [r6, #0]
 801321c:	2b30      	cmp	r3, #48	; 0x30
 801321e:	d10a      	bne.n	8013236 <__cvt+0x86>
 8013220:	2200      	movs	r2, #0
 8013222:	2300      	movs	r3, #0
 8013224:	4620      	mov	r0, r4
 8013226:	4639      	mov	r1, r7
 8013228:	f7ed fc2a 	bl	8000a80 <__aeabi_dcmpeq>
 801322c:	b918      	cbnz	r0, 8013236 <__cvt+0x86>
 801322e:	f1c5 0501 	rsb	r5, r5, #1
 8013232:	f8ca 5000 	str.w	r5, [sl]
 8013236:	f8da 3000 	ldr.w	r3, [sl]
 801323a:	4499      	add	r9, r3
 801323c:	2200      	movs	r2, #0
 801323e:	2300      	movs	r3, #0
 8013240:	4620      	mov	r0, r4
 8013242:	4639      	mov	r1, r7
 8013244:	f7ed fc1c 	bl	8000a80 <__aeabi_dcmpeq>
 8013248:	b108      	cbz	r0, 801324e <__cvt+0x9e>
 801324a:	f8cd 901c 	str.w	r9, [sp, #28]
 801324e:	2230      	movs	r2, #48	; 0x30
 8013250:	9b07      	ldr	r3, [sp, #28]
 8013252:	454b      	cmp	r3, r9
 8013254:	d307      	bcc.n	8013266 <__cvt+0xb6>
 8013256:	4630      	mov	r0, r6
 8013258:	9b07      	ldr	r3, [sp, #28]
 801325a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801325c:	1b9b      	subs	r3, r3, r6
 801325e:	6013      	str	r3, [r2, #0]
 8013260:	b008      	add	sp, #32
 8013262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013266:	1c59      	adds	r1, r3, #1
 8013268:	9107      	str	r1, [sp, #28]
 801326a:	701a      	strb	r2, [r3, #0]
 801326c:	e7f0      	b.n	8013250 <__cvt+0xa0>

0801326e <__exponent>:
 801326e:	4603      	mov	r3, r0
 8013270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013272:	2900      	cmp	r1, #0
 8013274:	f803 2b02 	strb.w	r2, [r3], #2
 8013278:	bfb6      	itet	lt
 801327a:	222d      	movlt	r2, #45	; 0x2d
 801327c:	222b      	movge	r2, #43	; 0x2b
 801327e:	4249      	neglt	r1, r1
 8013280:	2909      	cmp	r1, #9
 8013282:	7042      	strb	r2, [r0, #1]
 8013284:	dd2b      	ble.n	80132de <__exponent+0x70>
 8013286:	f10d 0407 	add.w	r4, sp, #7
 801328a:	46a4      	mov	ip, r4
 801328c:	270a      	movs	r7, #10
 801328e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013292:	460a      	mov	r2, r1
 8013294:	46a6      	mov	lr, r4
 8013296:	fb07 1516 	mls	r5, r7, r6, r1
 801329a:	2a63      	cmp	r2, #99	; 0x63
 801329c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80132a0:	4631      	mov	r1, r6
 80132a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80132a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80132aa:	dcf0      	bgt.n	801328e <__exponent+0x20>
 80132ac:	3130      	adds	r1, #48	; 0x30
 80132ae:	f1ae 0502 	sub.w	r5, lr, #2
 80132b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80132b6:	4629      	mov	r1, r5
 80132b8:	1c44      	adds	r4, r0, #1
 80132ba:	4561      	cmp	r1, ip
 80132bc:	d30a      	bcc.n	80132d4 <__exponent+0x66>
 80132be:	f10d 0209 	add.w	r2, sp, #9
 80132c2:	eba2 020e 	sub.w	r2, r2, lr
 80132c6:	4565      	cmp	r5, ip
 80132c8:	bf88      	it	hi
 80132ca:	2200      	movhi	r2, #0
 80132cc:	4413      	add	r3, r2
 80132ce:	1a18      	subs	r0, r3, r0
 80132d0:	b003      	add	sp, #12
 80132d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80132dc:	e7ed      	b.n	80132ba <__exponent+0x4c>
 80132de:	2330      	movs	r3, #48	; 0x30
 80132e0:	3130      	adds	r1, #48	; 0x30
 80132e2:	7083      	strb	r3, [r0, #2]
 80132e4:	70c1      	strb	r1, [r0, #3]
 80132e6:	1d03      	adds	r3, r0, #4
 80132e8:	e7f1      	b.n	80132ce <__exponent+0x60>
	...

080132ec <_printf_float>:
 80132ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f0:	b091      	sub	sp, #68	; 0x44
 80132f2:	460c      	mov	r4, r1
 80132f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80132f8:	4616      	mov	r6, r2
 80132fa:	461f      	mov	r7, r3
 80132fc:	4605      	mov	r5, r0
 80132fe:	f001 fb03 	bl	8014908 <_localeconv_r>
 8013302:	6803      	ldr	r3, [r0, #0]
 8013304:	4618      	mov	r0, r3
 8013306:	9309      	str	r3, [sp, #36]	; 0x24
 8013308:	f7ec ff8e 	bl	8000228 <strlen>
 801330c:	2300      	movs	r3, #0
 801330e:	930e      	str	r3, [sp, #56]	; 0x38
 8013310:	f8d8 3000 	ldr.w	r3, [r8]
 8013314:	900a      	str	r0, [sp, #40]	; 0x28
 8013316:	3307      	adds	r3, #7
 8013318:	f023 0307 	bic.w	r3, r3, #7
 801331c:	f103 0208 	add.w	r2, r3, #8
 8013320:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013324:	f8d4 b000 	ldr.w	fp, [r4]
 8013328:	f8c8 2000 	str.w	r2, [r8]
 801332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013330:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013334:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8013338:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801333c:	930b      	str	r3, [sp, #44]	; 0x2c
 801333e:	f04f 32ff 	mov.w	r2, #4294967295
 8013342:	4640      	mov	r0, r8
 8013344:	4b9c      	ldr	r3, [pc, #624]	; (80135b8 <_printf_float+0x2cc>)
 8013346:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013348:	f7ed fbcc 	bl	8000ae4 <__aeabi_dcmpun>
 801334c:	bb70      	cbnz	r0, 80133ac <_printf_float+0xc0>
 801334e:	f04f 32ff 	mov.w	r2, #4294967295
 8013352:	4640      	mov	r0, r8
 8013354:	4b98      	ldr	r3, [pc, #608]	; (80135b8 <_printf_float+0x2cc>)
 8013356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013358:	f7ed fba6 	bl	8000aa8 <__aeabi_dcmple>
 801335c:	bb30      	cbnz	r0, 80133ac <_printf_float+0xc0>
 801335e:	2200      	movs	r2, #0
 8013360:	2300      	movs	r3, #0
 8013362:	4640      	mov	r0, r8
 8013364:	4651      	mov	r1, sl
 8013366:	f7ed fb95 	bl	8000a94 <__aeabi_dcmplt>
 801336a:	b110      	cbz	r0, 8013372 <_printf_float+0x86>
 801336c:	232d      	movs	r3, #45	; 0x2d
 801336e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013372:	4b92      	ldr	r3, [pc, #584]	; (80135bc <_printf_float+0x2d0>)
 8013374:	4892      	ldr	r0, [pc, #584]	; (80135c0 <_printf_float+0x2d4>)
 8013376:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801337a:	bf94      	ite	ls
 801337c:	4698      	movls	r8, r3
 801337e:	4680      	movhi	r8, r0
 8013380:	2303      	movs	r3, #3
 8013382:	f04f 0a00 	mov.w	sl, #0
 8013386:	6123      	str	r3, [r4, #16]
 8013388:	f02b 0304 	bic.w	r3, fp, #4
 801338c:	6023      	str	r3, [r4, #0]
 801338e:	4633      	mov	r3, r6
 8013390:	4621      	mov	r1, r4
 8013392:	4628      	mov	r0, r5
 8013394:	9700      	str	r7, [sp, #0]
 8013396:	aa0f      	add	r2, sp, #60	; 0x3c
 8013398:	f000 f9d4 	bl	8013744 <_printf_common>
 801339c:	3001      	adds	r0, #1
 801339e:	f040 8090 	bne.w	80134c2 <_printf_float+0x1d6>
 80133a2:	f04f 30ff 	mov.w	r0, #4294967295
 80133a6:	b011      	add	sp, #68	; 0x44
 80133a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ac:	4642      	mov	r2, r8
 80133ae:	4653      	mov	r3, sl
 80133b0:	4640      	mov	r0, r8
 80133b2:	4651      	mov	r1, sl
 80133b4:	f7ed fb96 	bl	8000ae4 <__aeabi_dcmpun>
 80133b8:	b148      	cbz	r0, 80133ce <_printf_float+0xe2>
 80133ba:	f1ba 0f00 	cmp.w	sl, #0
 80133be:	bfb8      	it	lt
 80133c0:	232d      	movlt	r3, #45	; 0x2d
 80133c2:	4880      	ldr	r0, [pc, #512]	; (80135c4 <_printf_float+0x2d8>)
 80133c4:	bfb8      	it	lt
 80133c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80133ca:	4b7f      	ldr	r3, [pc, #508]	; (80135c8 <_printf_float+0x2dc>)
 80133cc:	e7d3      	b.n	8013376 <_printf_float+0x8a>
 80133ce:	6863      	ldr	r3, [r4, #4]
 80133d0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	d142      	bne.n	801345e <_printf_float+0x172>
 80133d8:	2306      	movs	r3, #6
 80133da:	6063      	str	r3, [r4, #4]
 80133dc:	2200      	movs	r2, #0
 80133de:	9206      	str	r2, [sp, #24]
 80133e0:	aa0e      	add	r2, sp, #56	; 0x38
 80133e2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80133e6:	aa0d      	add	r2, sp, #52	; 0x34
 80133e8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80133ec:	9203      	str	r2, [sp, #12]
 80133ee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80133f2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80133f6:	6023      	str	r3, [r4, #0]
 80133f8:	6863      	ldr	r3, [r4, #4]
 80133fa:	4642      	mov	r2, r8
 80133fc:	9300      	str	r3, [sp, #0]
 80133fe:	4628      	mov	r0, r5
 8013400:	4653      	mov	r3, sl
 8013402:	910b      	str	r1, [sp, #44]	; 0x2c
 8013404:	f7ff fed4 	bl	80131b0 <__cvt>
 8013408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801340a:	4680      	mov	r8, r0
 801340c:	2947      	cmp	r1, #71	; 0x47
 801340e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013410:	d108      	bne.n	8013424 <_printf_float+0x138>
 8013412:	1cc8      	adds	r0, r1, #3
 8013414:	db02      	blt.n	801341c <_printf_float+0x130>
 8013416:	6863      	ldr	r3, [r4, #4]
 8013418:	4299      	cmp	r1, r3
 801341a:	dd40      	ble.n	801349e <_printf_float+0x1b2>
 801341c:	f1a9 0902 	sub.w	r9, r9, #2
 8013420:	fa5f f989 	uxtb.w	r9, r9
 8013424:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013428:	d81f      	bhi.n	801346a <_printf_float+0x17e>
 801342a:	464a      	mov	r2, r9
 801342c:	3901      	subs	r1, #1
 801342e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013432:	910d      	str	r1, [sp, #52]	; 0x34
 8013434:	f7ff ff1b 	bl	801326e <__exponent>
 8013438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801343a:	4682      	mov	sl, r0
 801343c:	1813      	adds	r3, r2, r0
 801343e:	2a01      	cmp	r2, #1
 8013440:	6123      	str	r3, [r4, #16]
 8013442:	dc02      	bgt.n	801344a <_printf_float+0x15e>
 8013444:	6822      	ldr	r2, [r4, #0]
 8013446:	07d2      	lsls	r2, r2, #31
 8013448:	d501      	bpl.n	801344e <_printf_float+0x162>
 801344a:	3301      	adds	r3, #1
 801344c:	6123      	str	r3, [r4, #16]
 801344e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8013452:	2b00      	cmp	r3, #0
 8013454:	d09b      	beq.n	801338e <_printf_float+0xa2>
 8013456:	232d      	movs	r3, #45	; 0x2d
 8013458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801345c:	e797      	b.n	801338e <_printf_float+0xa2>
 801345e:	2947      	cmp	r1, #71	; 0x47
 8013460:	d1bc      	bne.n	80133dc <_printf_float+0xf0>
 8013462:	2b00      	cmp	r3, #0
 8013464:	d1ba      	bne.n	80133dc <_printf_float+0xf0>
 8013466:	2301      	movs	r3, #1
 8013468:	e7b7      	b.n	80133da <_printf_float+0xee>
 801346a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801346e:	d118      	bne.n	80134a2 <_printf_float+0x1b6>
 8013470:	2900      	cmp	r1, #0
 8013472:	6863      	ldr	r3, [r4, #4]
 8013474:	dd0b      	ble.n	801348e <_printf_float+0x1a2>
 8013476:	6121      	str	r1, [r4, #16]
 8013478:	b913      	cbnz	r3, 8013480 <_printf_float+0x194>
 801347a:	6822      	ldr	r2, [r4, #0]
 801347c:	07d0      	lsls	r0, r2, #31
 801347e:	d502      	bpl.n	8013486 <_printf_float+0x19a>
 8013480:	3301      	adds	r3, #1
 8013482:	440b      	add	r3, r1
 8013484:	6123      	str	r3, [r4, #16]
 8013486:	f04f 0a00 	mov.w	sl, #0
 801348a:	65a1      	str	r1, [r4, #88]	; 0x58
 801348c:	e7df      	b.n	801344e <_printf_float+0x162>
 801348e:	b913      	cbnz	r3, 8013496 <_printf_float+0x1aa>
 8013490:	6822      	ldr	r2, [r4, #0]
 8013492:	07d2      	lsls	r2, r2, #31
 8013494:	d501      	bpl.n	801349a <_printf_float+0x1ae>
 8013496:	3302      	adds	r3, #2
 8013498:	e7f4      	b.n	8013484 <_printf_float+0x198>
 801349a:	2301      	movs	r3, #1
 801349c:	e7f2      	b.n	8013484 <_printf_float+0x198>
 801349e:	f04f 0967 	mov.w	r9, #103	; 0x67
 80134a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134a4:	4299      	cmp	r1, r3
 80134a6:	db05      	blt.n	80134b4 <_printf_float+0x1c8>
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	6121      	str	r1, [r4, #16]
 80134ac:	07d8      	lsls	r0, r3, #31
 80134ae:	d5ea      	bpl.n	8013486 <_printf_float+0x19a>
 80134b0:	1c4b      	adds	r3, r1, #1
 80134b2:	e7e7      	b.n	8013484 <_printf_float+0x198>
 80134b4:	2900      	cmp	r1, #0
 80134b6:	bfcc      	ite	gt
 80134b8:	2201      	movgt	r2, #1
 80134ba:	f1c1 0202 	rsble	r2, r1, #2
 80134be:	4413      	add	r3, r2
 80134c0:	e7e0      	b.n	8013484 <_printf_float+0x198>
 80134c2:	6823      	ldr	r3, [r4, #0]
 80134c4:	055a      	lsls	r2, r3, #21
 80134c6:	d407      	bmi.n	80134d8 <_printf_float+0x1ec>
 80134c8:	6923      	ldr	r3, [r4, #16]
 80134ca:	4642      	mov	r2, r8
 80134cc:	4631      	mov	r1, r6
 80134ce:	4628      	mov	r0, r5
 80134d0:	47b8      	blx	r7
 80134d2:	3001      	adds	r0, #1
 80134d4:	d12b      	bne.n	801352e <_printf_float+0x242>
 80134d6:	e764      	b.n	80133a2 <_printf_float+0xb6>
 80134d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80134dc:	f240 80dd 	bls.w	801369a <_printf_float+0x3ae>
 80134e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134e4:	2200      	movs	r2, #0
 80134e6:	2300      	movs	r3, #0
 80134e8:	f7ed faca 	bl	8000a80 <__aeabi_dcmpeq>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d033      	beq.n	8013558 <_printf_float+0x26c>
 80134f0:	2301      	movs	r3, #1
 80134f2:	4631      	mov	r1, r6
 80134f4:	4628      	mov	r0, r5
 80134f6:	4a35      	ldr	r2, [pc, #212]	; (80135cc <_printf_float+0x2e0>)
 80134f8:	47b8      	blx	r7
 80134fa:	3001      	adds	r0, #1
 80134fc:	f43f af51 	beq.w	80133a2 <_printf_float+0xb6>
 8013500:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013504:	429a      	cmp	r2, r3
 8013506:	db02      	blt.n	801350e <_printf_float+0x222>
 8013508:	6823      	ldr	r3, [r4, #0]
 801350a:	07d8      	lsls	r0, r3, #31
 801350c:	d50f      	bpl.n	801352e <_printf_float+0x242>
 801350e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013512:	4631      	mov	r1, r6
 8013514:	4628      	mov	r0, r5
 8013516:	47b8      	blx	r7
 8013518:	3001      	adds	r0, #1
 801351a:	f43f af42 	beq.w	80133a2 <_printf_float+0xb6>
 801351e:	f04f 0800 	mov.w	r8, #0
 8013522:	f104 091a 	add.w	r9, r4, #26
 8013526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013528:	3b01      	subs	r3, #1
 801352a:	4543      	cmp	r3, r8
 801352c:	dc09      	bgt.n	8013542 <_printf_float+0x256>
 801352e:	6823      	ldr	r3, [r4, #0]
 8013530:	079b      	lsls	r3, r3, #30
 8013532:	f100 8102 	bmi.w	801373a <_printf_float+0x44e>
 8013536:	68e0      	ldr	r0, [r4, #12]
 8013538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801353a:	4298      	cmp	r0, r3
 801353c:	bfb8      	it	lt
 801353e:	4618      	movlt	r0, r3
 8013540:	e731      	b.n	80133a6 <_printf_float+0xba>
 8013542:	2301      	movs	r3, #1
 8013544:	464a      	mov	r2, r9
 8013546:	4631      	mov	r1, r6
 8013548:	4628      	mov	r0, r5
 801354a:	47b8      	blx	r7
 801354c:	3001      	adds	r0, #1
 801354e:	f43f af28 	beq.w	80133a2 <_printf_float+0xb6>
 8013552:	f108 0801 	add.w	r8, r8, #1
 8013556:	e7e6      	b.n	8013526 <_printf_float+0x23a>
 8013558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801355a:	2b00      	cmp	r3, #0
 801355c:	dc38      	bgt.n	80135d0 <_printf_float+0x2e4>
 801355e:	2301      	movs	r3, #1
 8013560:	4631      	mov	r1, r6
 8013562:	4628      	mov	r0, r5
 8013564:	4a19      	ldr	r2, [pc, #100]	; (80135cc <_printf_float+0x2e0>)
 8013566:	47b8      	blx	r7
 8013568:	3001      	adds	r0, #1
 801356a:	f43f af1a 	beq.w	80133a2 <_printf_float+0xb6>
 801356e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013572:	4313      	orrs	r3, r2
 8013574:	d102      	bne.n	801357c <_printf_float+0x290>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	07d9      	lsls	r1, r3, #31
 801357a:	d5d8      	bpl.n	801352e <_printf_float+0x242>
 801357c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013580:	4631      	mov	r1, r6
 8013582:	4628      	mov	r0, r5
 8013584:	47b8      	blx	r7
 8013586:	3001      	adds	r0, #1
 8013588:	f43f af0b 	beq.w	80133a2 <_printf_float+0xb6>
 801358c:	f04f 0900 	mov.w	r9, #0
 8013590:	f104 0a1a 	add.w	sl, r4, #26
 8013594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013596:	425b      	negs	r3, r3
 8013598:	454b      	cmp	r3, r9
 801359a:	dc01      	bgt.n	80135a0 <_printf_float+0x2b4>
 801359c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801359e:	e794      	b.n	80134ca <_printf_float+0x1de>
 80135a0:	2301      	movs	r3, #1
 80135a2:	4652      	mov	r2, sl
 80135a4:	4631      	mov	r1, r6
 80135a6:	4628      	mov	r0, r5
 80135a8:	47b8      	blx	r7
 80135aa:	3001      	adds	r0, #1
 80135ac:	f43f aef9 	beq.w	80133a2 <_printf_float+0xb6>
 80135b0:	f109 0901 	add.w	r9, r9, #1
 80135b4:	e7ee      	b.n	8013594 <_printf_float+0x2a8>
 80135b6:	bf00      	nop
 80135b8:	7fefffff 	.word	0x7fefffff
 80135bc:	08017d7c 	.word	0x08017d7c
 80135c0:	08017d80 	.word	0x08017d80
 80135c4:	08017d88 	.word	0x08017d88
 80135c8:	08017d84 	.word	0x08017d84
 80135cc:	08017d8c 	.word	0x08017d8c
 80135d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135d4:	429a      	cmp	r2, r3
 80135d6:	bfa8      	it	ge
 80135d8:	461a      	movge	r2, r3
 80135da:	2a00      	cmp	r2, #0
 80135dc:	4691      	mov	r9, r2
 80135de:	dc37      	bgt.n	8013650 <_printf_float+0x364>
 80135e0:	f04f 0b00 	mov.w	fp, #0
 80135e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135e8:	f104 021a 	add.w	r2, r4, #26
 80135ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80135f0:	ebaa 0309 	sub.w	r3, sl, r9
 80135f4:	455b      	cmp	r3, fp
 80135f6:	dc33      	bgt.n	8013660 <_printf_float+0x374>
 80135f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80135fc:	429a      	cmp	r2, r3
 80135fe:	db3b      	blt.n	8013678 <_printf_float+0x38c>
 8013600:	6823      	ldr	r3, [r4, #0]
 8013602:	07da      	lsls	r2, r3, #31
 8013604:	d438      	bmi.n	8013678 <_printf_float+0x38c>
 8013606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013608:	990d      	ldr	r1, [sp, #52]	; 0x34
 801360a:	eba2 030a 	sub.w	r3, r2, sl
 801360e:	eba2 0901 	sub.w	r9, r2, r1
 8013612:	4599      	cmp	r9, r3
 8013614:	bfa8      	it	ge
 8013616:	4699      	movge	r9, r3
 8013618:	f1b9 0f00 	cmp.w	r9, #0
 801361c:	dc34      	bgt.n	8013688 <_printf_float+0x39c>
 801361e:	f04f 0800 	mov.w	r8, #0
 8013622:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013626:	f104 0a1a 	add.w	sl, r4, #26
 801362a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801362e:	1a9b      	subs	r3, r3, r2
 8013630:	eba3 0309 	sub.w	r3, r3, r9
 8013634:	4543      	cmp	r3, r8
 8013636:	f77f af7a 	ble.w	801352e <_printf_float+0x242>
 801363a:	2301      	movs	r3, #1
 801363c:	4652      	mov	r2, sl
 801363e:	4631      	mov	r1, r6
 8013640:	4628      	mov	r0, r5
 8013642:	47b8      	blx	r7
 8013644:	3001      	adds	r0, #1
 8013646:	f43f aeac 	beq.w	80133a2 <_printf_float+0xb6>
 801364a:	f108 0801 	add.w	r8, r8, #1
 801364e:	e7ec      	b.n	801362a <_printf_float+0x33e>
 8013650:	4613      	mov	r3, r2
 8013652:	4631      	mov	r1, r6
 8013654:	4642      	mov	r2, r8
 8013656:	4628      	mov	r0, r5
 8013658:	47b8      	blx	r7
 801365a:	3001      	adds	r0, #1
 801365c:	d1c0      	bne.n	80135e0 <_printf_float+0x2f4>
 801365e:	e6a0      	b.n	80133a2 <_printf_float+0xb6>
 8013660:	2301      	movs	r3, #1
 8013662:	4631      	mov	r1, r6
 8013664:	4628      	mov	r0, r5
 8013666:	920b      	str	r2, [sp, #44]	; 0x2c
 8013668:	47b8      	blx	r7
 801366a:	3001      	adds	r0, #1
 801366c:	f43f ae99 	beq.w	80133a2 <_printf_float+0xb6>
 8013670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013672:	f10b 0b01 	add.w	fp, fp, #1
 8013676:	e7b9      	b.n	80135ec <_printf_float+0x300>
 8013678:	4631      	mov	r1, r6
 801367a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801367e:	4628      	mov	r0, r5
 8013680:	47b8      	blx	r7
 8013682:	3001      	adds	r0, #1
 8013684:	d1bf      	bne.n	8013606 <_printf_float+0x31a>
 8013686:	e68c      	b.n	80133a2 <_printf_float+0xb6>
 8013688:	464b      	mov	r3, r9
 801368a:	4631      	mov	r1, r6
 801368c:	4628      	mov	r0, r5
 801368e:	eb08 020a 	add.w	r2, r8, sl
 8013692:	47b8      	blx	r7
 8013694:	3001      	adds	r0, #1
 8013696:	d1c2      	bne.n	801361e <_printf_float+0x332>
 8013698:	e683      	b.n	80133a2 <_printf_float+0xb6>
 801369a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801369c:	2a01      	cmp	r2, #1
 801369e:	dc01      	bgt.n	80136a4 <_printf_float+0x3b8>
 80136a0:	07db      	lsls	r3, r3, #31
 80136a2:	d537      	bpl.n	8013714 <_printf_float+0x428>
 80136a4:	2301      	movs	r3, #1
 80136a6:	4642      	mov	r2, r8
 80136a8:	4631      	mov	r1, r6
 80136aa:	4628      	mov	r0, r5
 80136ac:	47b8      	blx	r7
 80136ae:	3001      	adds	r0, #1
 80136b0:	f43f ae77 	beq.w	80133a2 <_printf_float+0xb6>
 80136b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136b8:	4631      	mov	r1, r6
 80136ba:	4628      	mov	r0, r5
 80136bc:	47b8      	blx	r7
 80136be:	3001      	adds	r0, #1
 80136c0:	f43f ae6f 	beq.w	80133a2 <_printf_float+0xb6>
 80136c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136c8:	2200      	movs	r2, #0
 80136ca:	2300      	movs	r3, #0
 80136cc:	f7ed f9d8 	bl	8000a80 <__aeabi_dcmpeq>
 80136d0:	b9d8      	cbnz	r0, 801370a <_printf_float+0x41e>
 80136d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136d4:	f108 0201 	add.w	r2, r8, #1
 80136d8:	3b01      	subs	r3, #1
 80136da:	4631      	mov	r1, r6
 80136dc:	4628      	mov	r0, r5
 80136de:	47b8      	blx	r7
 80136e0:	3001      	adds	r0, #1
 80136e2:	d10e      	bne.n	8013702 <_printf_float+0x416>
 80136e4:	e65d      	b.n	80133a2 <_printf_float+0xb6>
 80136e6:	2301      	movs	r3, #1
 80136e8:	464a      	mov	r2, r9
 80136ea:	4631      	mov	r1, r6
 80136ec:	4628      	mov	r0, r5
 80136ee:	47b8      	blx	r7
 80136f0:	3001      	adds	r0, #1
 80136f2:	f43f ae56 	beq.w	80133a2 <_printf_float+0xb6>
 80136f6:	f108 0801 	add.w	r8, r8, #1
 80136fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136fc:	3b01      	subs	r3, #1
 80136fe:	4543      	cmp	r3, r8
 8013700:	dcf1      	bgt.n	80136e6 <_printf_float+0x3fa>
 8013702:	4653      	mov	r3, sl
 8013704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013708:	e6e0      	b.n	80134cc <_printf_float+0x1e0>
 801370a:	f04f 0800 	mov.w	r8, #0
 801370e:	f104 091a 	add.w	r9, r4, #26
 8013712:	e7f2      	b.n	80136fa <_printf_float+0x40e>
 8013714:	2301      	movs	r3, #1
 8013716:	4642      	mov	r2, r8
 8013718:	e7df      	b.n	80136da <_printf_float+0x3ee>
 801371a:	2301      	movs	r3, #1
 801371c:	464a      	mov	r2, r9
 801371e:	4631      	mov	r1, r6
 8013720:	4628      	mov	r0, r5
 8013722:	47b8      	blx	r7
 8013724:	3001      	adds	r0, #1
 8013726:	f43f ae3c 	beq.w	80133a2 <_printf_float+0xb6>
 801372a:	f108 0801 	add.w	r8, r8, #1
 801372e:	68e3      	ldr	r3, [r4, #12]
 8013730:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013732:	1a5b      	subs	r3, r3, r1
 8013734:	4543      	cmp	r3, r8
 8013736:	dcf0      	bgt.n	801371a <_printf_float+0x42e>
 8013738:	e6fd      	b.n	8013536 <_printf_float+0x24a>
 801373a:	f04f 0800 	mov.w	r8, #0
 801373e:	f104 0919 	add.w	r9, r4, #25
 8013742:	e7f4      	b.n	801372e <_printf_float+0x442>

08013744 <_printf_common>:
 8013744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013748:	4616      	mov	r6, r2
 801374a:	4699      	mov	r9, r3
 801374c:	688a      	ldr	r2, [r1, #8]
 801374e:	690b      	ldr	r3, [r1, #16]
 8013750:	4607      	mov	r7, r0
 8013752:	4293      	cmp	r3, r2
 8013754:	bfb8      	it	lt
 8013756:	4613      	movlt	r3, r2
 8013758:	6033      	str	r3, [r6, #0]
 801375a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801375e:	460c      	mov	r4, r1
 8013760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013764:	b10a      	cbz	r2, 801376a <_printf_common+0x26>
 8013766:	3301      	adds	r3, #1
 8013768:	6033      	str	r3, [r6, #0]
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	0699      	lsls	r1, r3, #26
 801376e:	bf42      	ittt	mi
 8013770:	6833      	ldrmi	r3, [r6, #0]
 8013772:	3302      	addmi	r3, #2
 8013774:	6033      	strmi	r3, [r6, #0]
 8013776:	6825      	ldr	r5, [r4, #0]
 8013778:	f015 0506 	ands.w	r5, r5, #6
 801377c:	d106      	bne.n	801378c <_printf_common+0x48>
 801377e:	f104 0a19 	add.w	sl, r4, #25
 8013782:	68e3      	ldr	r3, [r4, #12]
 8013784:	6832      	ldr	r2, [r6, #0]
 8013786:	1a9b      	subs	r3, r3, r2
 8013788:	42ab      	cmp	r3, r5
 801378a:	dc28      	bgt.n	80137de <_printf_common+0x9a>
 801378c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013790:	1e13      	subs	r3, r2, #0
 8013792:	6822      	ldr	r2, [r4, #0]
 8013794:	bf18      	it	ne
 8013796:	2301      	movne	r3, #1
 8013798:	0692      	lsls	r2, r2, #26
 801379a:	d42d      	bmi.n	80137f8 <_printf_common+0xb4>
 801379c:	4649      	mov	r1, r9
 801379e:	4638      	mov	r0, r7
 80137a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80137a4:	47c0      	blx	r8
 80137a6:	3001      	adds	r0, #1
 80137a8:	d020      	beq.n	80137ec <_printf_common+0xa8>
 80137aa:	6823      	ldr	r3, [r4, #0]
 80137ac:	68e5      	ldr	r5, [r4, #12]
 80137ae:	f003 0306 	and.w	r3, r3, #6
 80137b2:	2b04      	cmp	r3, #4
 80137b4:	bf18      	it	ne
 80137b6:	2500      	movne	r5, #0
 80137b8:	6832      	ldr	r2, [r6, #0]
 80137ba:	f04f 0600 	mov.w	r6, #0
 80137be:	68a3      	ldr	r3, [r4, #8]
 80137c0:	bf08      	it	eq
 80137c2:	1aad      	subeq	r5, r5, r2
 80137c4:	6922      	ldr	r2, [r4, #16]
 80137c6:	bf08      	it	eq
 80137c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137cc:	4293      	cmp	r3, r2
 80137ce:	bfc4      	itt	gt
 80137d0:	1a9b      	subgt	r3, r3, r2
 80137d2:	18ed      	addgt	r5, r5, r3
 80137d4:	341a      	adds	r4, #26
 80137d6:	42b5      	cmp	r5, r6
 80137d8:	d11a      	bne.n	8013810 <_printf_common+0xcc>
 80137da:	2000      	movs	r0, #0
 80137dc:	e008      	b.n	80137f0 <_printf_common+0xac>
 80137de:	2301      	movs	r3, #1
 80137e0:	4652      	mov	r2, sl
 80137e2:	4649      	mov	r1, r9
 80137e4:	4638      	mov	r0, r7
 80137e6:	47c0      	blx	r8
 80137e8:	3001      	adds	r0, #1
 80137ea:	d103      	bne.n	80137f4 <_printf_common+0xb0>
 80137ec:	f04f 30ff 	mov.w	r0, #4294967295
 80137f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f4:	3501      	adds	r5, #1
 80137f6:	e7c4      	b.n	8013782 <_printf_common+0x3e>
 80137f8:	2030      	movs	r0, #48	; 0x30
 80137fa:	18e1      	adds	r1, r4, r3
 80137fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013800:	1c5a      	adds	r2, r3, #1
 8013802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013806:	4422      	add	r2, r4
 8013808:	3302      	adds	r3, #2
 801380a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801380e:	e7c5      	b.n	801379c <_printf_common+0x58>
 8013810:	2301      	movs	r3, #1
 8013812:	4622      	mov	r2, r4
 8013814:	4649      	mov	r1, r9
 8013816:	4638      	mov	r0, r7
 8013818:	47c0      	blx	r8
 801381a:	3001      	adds	r0, #1
 801381c:	d0e6      	beq.n	80137ec <_printf_common+0xa8>
 801381e:	3601      	adds	r6, #1
 8013820:	e7d9      	b.n	80137d6 <_printf_common+0x92>
	...

08013824 <_printf_i>:
 8013824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013828:	460c      	mov	r4, r1
 801382a:	7e27      	ldrb	r7, [r4, #24]
 801382c:	4691      	mov	r9, r2
 801382e:	2f78      	cmp	r7, #120	; 0x78
 8013830:	4680      	mov	r8, r0
 8013832:	469a      	mov	sl, r3
 8013834:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801383a:	d807      	bhi.n	801384c <_printf_i+0x28>
 801383c:	2f62      	cmp	r7, #98	; 0x62
 801383e:	d80a      	bhi.n	8013856 <_printf_i+0x32>
 8013840:	2f00      	cmp	r7, #0
 8013842:	f000 80d9 	beq.w	80139f8 <_printf_i+0x1d4>
 8013846:	2f58      	cmp	r7, #88	; 0x58
 8013848:	f000 80a4 	beq.w	8013994 <_printf_i+0x170>
 801384c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013854:	e03a      	b.n	80138cc <_printf_i+0xa8>
 8013856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801385a:	2b15      	cmp	r3, #21
 801385c:	d8f6      	bhi.n	801384c <_printf_i+0x28>
 801385e:	a001      	add	r0, pc, #4	; (adr r0, 8013864 <_printf_i+0x40>)
 8013860:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013864:	080138bd 	.word	0x080138bd
 8013868:	080138d1 	.word	0x080138d1
 801386c:	0801384d 	.word	0x0801384d
 8013870:	0801384d 	.word	0x0801384d
 8013874:	0801384d 	.word	0x0801384d
 8013878:	0801384d 	.word	0x0801384d
 801387c:	080138d1 	.word	0x080138d1
 8013880:	0801384d 	.word	0x0801384d
 8013884:	0801384d 	.word	0x0801384d
 8013888:	0801384d 	.word	0x0801384d
 801388c:	0801384d 	.word	0x0801384d
 8013890:	080139df 	.word	0x080139df
 8013894:	08013901 	.word	0x08013901
 8013898:	080139c1 	.word	0x080139c1
 801389c:	0801384d 	.word	0x0801384d
 80138a0:	0801384d 	.word	0x0801384d
 80138a4:	08013a01 	.word	0x08013a01
 80138a8:	0801384d 	.word	0x0801384d
 80138ac:	08013901 	.word	0x08013901
 80138b0:	0801384d 	.word	0x0801384d
 80138b4:	0801384d 	.word	0x0801384d
 80138b8:	080139c9 	.word	0x080139c9
 80138bc:	680b      	ldr	r3, [r1, #0]
 80138be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80138c2:	1d1a      	adds	r2, r3, #4
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	600a      	str	r2, [r1, #0]
 80138c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138cc:	2301      	movs	r3, #1
 80138ce:	e0a4      	b.n	8013a1a <_printf_i+0x1f6>
 80138d0:	6825      	ldr	r5, [r4, #0]
 80138d2:	6808      	ldr	r0, [r1, #0]
 80138d4:	062e      	lsls	r6, r5, #24
 80138d6:	f100 0304 	add.w	r3, r0, #4
 80138da:	d50a      	bpl.n	80138f2 <_printf_i+0xce>
 80138dc:	6805      	ldr	r5, [r0, #0]
 80138de:	600b      	str	r3, [r1, #0]
 80138e0:	2d00      	cmp	r5, #0
 80138e2:	da03      	bge.n	80138ec <_printf_i+0xc8>
 80138e4:	232d      	movs	r3, #45	; 0x2d
 80138e6:	426d      	negs	r5, r5
 80138e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138ec:	230a      	movs	r3, #10
 80138ee:	485e      	ldr	r0, [pc, #376]	; (8013a68 <_printf_i+0x244>)
 80138f0:	e019      	b.n	8013926 <_printf_i+0x102>
 80138f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80138f6:	6805      	ldr	r5, [r0, #0]
 80138f8:	600b      	str	r3, [r1, #0]
 80138fa:	bf18      	it	ne
 80138fc:	b22d      	sxthne	r5, r5
 80138fe:	e7ef      	b.n	80138e0 <_printf_i+0xbc>
 8013900:	680b      	ldr	r3, [r1, #0]
 8013902:	6825      	ldr	r5, [r4, #0]
 8013904:	1d18      	adds	r0, r3, #4
 8013906:	6008      	str	r0, [r1, #0]
 8013908:	0628      	lsls	r0, r5, #24
 801390a:	d501      	bpl.n	8013910 <_printf_i+0xec>
 801390c:	681d      	ldr	r5, [r3, #0]
 801390e:	e002      	b.n	8013916 <_printf_i+0xf2>
 8013910:	0669      	lsls	r1, r5, #25
 8013912:	d5fb      	bpl.n	801390c <_printf_i+0xe8>
 8013914:	881d      	ldrh	r5, [r3, #0]
 8013916:	2f6f      	cmp	r7, #111	; 0x6f
 8013918:	bf0c      	ite	eq
 801391a:	2308      	moveq	r3, #8
 801391c:	230a      	movne	r3, #10
 801391e:	4852      	ldr	r0, [pc, #328]	; (8013a68 <_printf_i+0x244>)
 8013920:	2100      	movs	r1, #0
 8013922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013926:	6866      	ldr	r6, [r4, #4]
 8013928:	2e00      	cmp	r6, #0
 801392a:	bfa8      	it	ge
 801392c:	6821      	ldrge	r1, [r4, #0]
 801392e:	60a6      	str	r6, [r4, #8]
 8013930:	bfa4      	itt	ge
 8013932:	f021 0104 	bicge.w	r1, r1, #4
 8013936:	6021      	strge	r1, [r4, #0]
 8013938:	b90d      	cbnz	r5, 801393e <_printf_i+0x11a>
 801393a:	2e00      	cmp	r6, #0
 801393c:	d04d      	beq.n	80139da <_printf_i+0x1b6>
 801393e:	4616      	mov	r6, r2
 8013940:	fbb5 f1f3 	udiv	r1, r5, r3
 8013944:	fb03 5711 	mls	r7, r3, r1, r5
 8013948:	5dc7      	ldrb	r7, [r0, r7]
 801394a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801394e:	462f      	mov	r7, r5
 8013950:	42bb      	cmp	r3, r7
 8013952:	460d      	mov	r5, r1
 8013954:	d9f4      	bls.n	8013940 <_printf_i+0x11c>
 8013956:	2b08      	cmp	r3, #8
 8013958:	d10b      	bne.n	8013972 <_printf_i+0x14e>
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	07df      	lsls	r7, r3, #31
 801395e:	d508      	bpl.n	8013972 <_printf_i+0x14e>
 8013960:	6923      	ldr	r3, [r4, #16]
 8013962:	6861      	ldr	r1, [r4, #4]
 8013964:	4299      	cmp	r1, r3
 8013966:	bfde      	ittt	le
 8013968:	2330      	movle	r3, #48	; 0x30
 801396a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801396e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013972:	1b92      	subs	r2, r2, r6
 8013974:	6122      	str	r2, [r4, #16]
 8013976:	464b      	mov	r3, r9
 8013978:	4621      	mov	r1, r4
 801397a:	4640      	mov	r0, r8
 801397c:	f8cd a000 	str.w	sl, [sp]
 8013980:	aa03      	add	r2, sp, #12
 8013982:	f7ff fedf 	bl	8013744 <_printf_common>
 8013986:	3001      	adds	r0, #1
 8013988:	d14c      	bne.n	8013a24 <_printf_i+0x200>
 801398a:	f04f 30ff 	mov.w	r0, #4294967295
 801398e:	b004      	add	sp, #16
 8013990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013994:	4834      	ldr	r0, [pc, #208]	; (8013a68 <_printf_i+0x244>)
 8013996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801399a:	680e      	ldr	r6, [r1, #0]
 801399c:	6823      	ldr	r3, [r4, #0]
 801399e:	f856 5b04 	ldr.w	r5, [r6], #4
 80139a2:	061f      	lsls	r7, r3, #24
 80139a4:	600e      	str	r6, [r1, #0]
 80139a6:	d514      	bpl.n	80139d2 <_printf_i+0x1ae>
 80139a8:	07d9      	lsls	r1, r3, #31
 80139aa:	bf44      	itt	mi
 80139ac:	f043 0320 	orrmi.w	r3, r3, #32
 80139b0:	6023      	strmi	r3, [r4, #0]
 80139b2:	b91d      	cbnz	r5, 80139bc <_printf_i+0x198>
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	f023 0320 	bic.w	r3, r3, #32
 80139ba:	6023      	str	r3, [r4, #0]
 80139bc:	2310      	movs	r3, #16
 80139be:	e7af      	b.n	8013920 <_printf_i+0xfc>
 80139c0:	6823      	ldr	r3, [r4, #0]
 80139c2:	f043 0320 	orr.w	r3, r3, #32
 80139c6:	6023      	str	r3, [r4, #0]
 80139c8:	2378      	movs	r3, #120	; 0x78
 80139ca:	4828      	ldr	r0, [pc, #160]	; (8013a6c <_printf_i+0x248>)
 80139cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80139d0:	e7e3      	b.n	801399a <_printf_i+0x176>
 80139d2:	065e      	lsls	r6, r3, #25
 80139d4:	bf48      	it	mi
 80139d6:	b2ad      	uxthmi	r5, r5
 80139d8:	e7e6      	b.n	80139a8 <_printf_i+0x184>
 80139da:	4616      	mov	r6, r2
 80139dc:	e7bb      	b.n	8013956 <_printf_i+0x132>
 80139de:	680b      	ldr	r3, [r1, #0]
 80139e0:	6826      	ldr	r6, [r4, #0]
 80139e2:	1d1d      	adds	r5, r3, #4
 80139e4:	6960      	ldr	r0, [r4, #20]
 80139e6:	600d      	str	r5, [r1, #0]
 80139e8:	0635      	lsls	r5, r6, #24
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	d501      	bpl.n	80139f2 <_printf_i+0x1ce>
 80139ee:	6018      	str	r0, [r3, #0]
 80139f0:	e002      	b.n	80139f8 <_printf_i+0x1d4>
 80139f2:	0671      	lsls	r1, r6, #25
 80139f4:	d5fb      	bpl.n	80139ee <_printf_i+0x1ca>
 80139f6:	8018      	strh	r0, [r3, #0]
 80139f8:	2300      	movs	r3, #0
 80139fa:	4616      	mov	r6, r2
 80139fc:	6123      	str	r3, [r4, #16]
 80139fe:	e7ba      	b.n	8013976 <_printf_i+0x152>
 8013a00:	680b      	ldr	r3, [r1, #0]
 8013a02:	1d1a      	adds	r2, r3, #4
 8013a04:	600a      	str	r2, [r1, #0]
 8013a06:	681e      	ldr	r6, [r3, #0]
 8013a08:	2100      	movs	r1, #0
 8013a0a:	4630      	mov	r0, r6
 8013a0c:	6862      	ldr	r2, [r4, #4]
 8013a0e:	f000 ff7f 	bl	8014910 <memchr>
 8013a12:	b108      	cbz	r0, 8013a18 <_printf_i+0x1f4>
 8013a14:	1b80      	subs	r0, r0, r6
 8013a16:	6060      	str	r0, [r4, #4]
 8013a18:	6863      	ldr	r3, [r4, #4]
 8013a1a:	6123      	str	r3, [r4, #16]
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a22:	e7a8      	b.n	8013976 <_printf_i+0x152>
 8013a24:	4632      	mov	r2, r6
 8013a26:	4649      	mov	r1, r9
 8013a28:	4640      	mov	r0, r8
 8013a2a:	6923      	ldr	r3, [r4, #16]
 8013a2c:	47d0      	blx	sl
 8013a2e:	3001      	adds	r0, #1
 8013a30:	d0ab      	beq.n	801398a <_printf_i+0x166>
 8013a32:	6823      	ldr	r3, [r4, #0]
 8013a34:	079b      	lsls	r3, r3, #30
 8013a36:	d413      	bmi.n	8013a60 <_printf_i+0x23c>
 8013a38:	68e0      	ldr	r0, [r4, #12]
 8013a3a:	9b03      	ldr	r3, [sp, #12]
 8013a3c:	4298      	cmp	r0, r3
 8013a3e:	bfb8      	it	lt
 8013a40:	4618      	movlt	r0, r3
 8013a42:	e7a4      	b.n	801398e <_printf_i+0x16a>
 8013a44:	2301      	movs	r3, #1
 8013a46:	4632      	mov	r2, r6
 8013a48:	4649      	mov	r1, r9
 8013a4a:	4640      	mov	r0, r8
 8013a4c:	47d0      	blx	sl
 8013a4e:	3001      	adds	r0, #1
 8013a50:	d09b      	beq.n	801398a <_printf_i+0x166>
 8013a52:	3501      	adds	r5, #1
 8013a54:	68e3      	ldr	r3, [r4, #12]
 8013a56:	9903      	ldr	r1, [sp, #12]
 8013a58:	1a5b      	subs	r3, r3, r1
 8013a5a:	42ab      	cmp	r3, r5
 8013a5c:	dcf2      	bgt.n	8013a44 <_printf_i+0x220>
 8013a5e:	e7eb      	b.n	8013a38 <_printf_i+0x214>
 8013a60:	2500      	movs	r5, #0
 8013a62:	f104 0619 	add.w	r6, r4, #25
 8013a66:	e7f5      	b.n	8013a54 <_printf_i+0x230>
 8013a68:	08017d8e 	.word	0x08017d8e
 8013a6c:	08017d9f 	.word	0x08017d9f

08013a70 <srand>:
 8013a70:	b538      	push	{r3, r4, r5, lr}
 8013a72:	4b10      	ldr	r3, [pc, #64]	; (8013ab4 <srand+0x44>)
 8013a74:	4604      	mov	r4, r0
 8013a76:	681d      	ldr	r5, [r3, #0]
 8013a78:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013a7a:	b9b3      	cbnz	r3, 8013aaa <srand+0x3a>
 8013a7c:	2018      	movs	r0, #24
 8013a7e:	f7ff fabd 	bl	8012ffc <malloc>
 8013a82:	4602      	mov	r2, r0
 8013a84:	63a8      	str	r0, [r5, #56]	; 0x38
 8013a86:	b920      	cbnz	r0, 8013a92 <srand+0x22>
 8013a88:	2142      	movs	r1, #66	; 0x42
 8013a8a:	4b0b      	ldr	r3, [pc, #44]	; (8013ab8 <srand+0x48>)
 8013a8c:	480b      	ldr	r0, [pc, #44]	; (8013abc <srand+0x4c>)
 8013a8e:	f000 f88d 	bl	8013bac <__assert_func>
 8013a92:	490b      	ldr	r1, [pc, #44]	; (8013ac0 <srand+0x50>)
 8013a94:	4b0b      	ldr	r3, [pc, #44]	; (8013ac4 <srand+0x54>)
 8013a96:	e9c0 1300 	strd	r1, r3, [r0]
 8013a9a:	4b0b      	ldr	r3, [pc, #44]	; (8013ac8 <srand+0x58>)
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	6083      	str	r3, [r0, #8]
 8013aa0:	230b      	movs	r3, #11
 8013aa2:	8183      	strh	r3, [r0, #12]
 8013aa4:	2001      	movs	r0, #1
 8013aa6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013aae:	611c      	str	r4, [r3, #16]
 8013ab0:	615a      	str	r2, [r3, #20]
 8013ab2:	bd38      	pop	{r3, r4, r5, pc}
 8013ab4:	20000124 	.word	0x20000124
 8013ab8:	08017db0 	.word	0x08017db0
 8013abc:	08017dc7 	.word	0x08017dc7
 8013ac0:	abcd330e 	.word	0xabcd330e
 8013ac4:	e66d1234 	.word	0xe66d1234
 8013ac8:	0005deec 	.word	0x0005deec

08013acc <rand>:
 8013acc:	4b17      	ldr	r3, [pc, #92]	; (8013b2c <rand+0x60>)
 8013ace:	b510      	push	{r4, lr}
 8013ad0:	681c      	ldr	r4, [r3, #0]
 8013ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ad4:	b9b3      	cbnz	r3, 8013b04 <rand+0x38>
 8013ad6:	2018      	movs	r0, #24
 8013ad8:	f7ff fa90 	bl	8012ffc <malloc>
 8013adc:	4602      	mov	r2, r0
 8013ade:	63a0      	str	r0, [r4, #56]	; 0x38
 8013ae0:	b920      	cbnz	r0, 8013aec <rand+0x20>
 8013ae2:	214e      	movs	r1, #78	; 0x4e
 8013ae4:	4b12      	ldr	r3, [pc, #72]	; (8013b30 <rand+0x64>)
 8013ae6:	4813      	ldr	r0, [pc, #76]	; (8013b34 <rand+0x68>)
 8013ae8:	f000 f860 	bl	8013bac <__assert_func>
 8013aec:	4912      	ldr	r1, [pc, #72]	; (8013b38 <rand+0x6c>)
 8013aee:	4b13      	ldr	r3, [pc, #76]	; (8013b3c <rand+0x70>)
 8013af0:	e9c0 1300 	strd	r1, r3, [r0]
 8013af4:	4b12      	ldr	r3, [pc, #72]	; (8013b40 <rand+0x74>)
 8013af6:	2100      	movs	r1, #0
 8013af8:	6083      	str	r3, [r0, #8]
 8013afa:	230b      	movs	r3, #11
 8013afc:	8183      	strh	r3, [r0, #12]
 8013afe:	2001      	movs	r0, #1
 8013b00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013b04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013b06:	480f      	ldr	r0, [pc, #60]	; (8013b44 <rand+0x78>)
 8013b08:	690a      	ldr	r2, [r1, #16]
 8013b0a:	694b      	ldr	r3, [r1, #20]
 8013b0c:	4350      	muls	r0, r2
 8013b0e:	4c0e      	ldr	r4, [pc, #56]	; (8013b48 <rand+0x7c>)
 8013b10:	fb04 0003 	mla	r0, r4, r3, r0
 8013b14:	fba2 3404 	umull	r3, r4, r2, r4
 8013b18:	1c5a      	adds	r2, r3, #1
 8013b1a:	4404      	add	r4, r0
 8013b1c:	f144 0000 	adc.w	r0, r4, #0
 8013b20:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013b24:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013b28:	bd10      	pop	{r4, pc}
 8013b2a:	bf00      	nop
 8013b2c:	20000124 	.word	0x20000124
 8013b30:	08017db0 	.word	0x08017db0
 8013b34:	08017dc7 	.word	0x08017dc7
 8013b38:	abcd330e 	.word	0xabcd330e
 8013b3c:	e66d1234 	.word	0xe66d1234
 8013b40:	0005deec 	.word	0x0005deec
 8013b44:	5851f42d 	.word	0x5851f42d
 8013b48:	4c957f2d 	.word	0x4c957f2d

08013b4c <_sbrk_r>:
 8013b4c:	b538      	push	{r3, r4, r5, lr}
 8013b4e:	2300      	movs	r3, #0
 8013b50:	4d05      	ldr	r5, [pc, #20]	; (8013b68 <_sbrk_r+0x1c>)
 8013b52:	4604      	mov	r4, r0
 8013b54:	4608      	mov	r0, r1
 8013b56:	602b      	str	r3, [r5, #0]
 8013b58:	f003 fd62 	bl	8017620 <_sbrk>
 8013b5c:	1c43      	adds	r3, r0, #1
 8013b5e:	d102      	bne.n	8013b66 <_sbrk_r+0x1a>
 8013b60:	682b      	ldr	r3, [r5, #0]
 8013b62:	b103      	cbz	r3, 8013b66 <_sbrk_r+0x1a>
 8013b64:	6023      	str	r3, [r4, #0]
 8013b66:	bd38      	pop	{r3, r4, r5, pc}
 8013b68:	2000a71c 	.word	0x2000a71c

08013b6c <siprintf>:
 8013b6c:	b40e      	push	{r1, r2, r3}
 8013b6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b72:	b500      	push	{lr}
 8013b74:	b09c      	sub	sp, #112	; 0x70
 8013b76:	ab1d      	add	r3, sp, #116	; 0x74
 8013b78:	9002      	str	r0, [sp, #8]
 8013b7a:	9006      	str	r0, [sp, #24]
 8013b7c:	9107      	str	r1, [sp, #28]
 8013b7e:	9104      	str	r1, [sp, #16]
 8013b80:	4808      	ldr	r0, [pc, #32]	; (8013ba4 <siprintf+0x38>)
 8013b82:	4909      	ldr	r1, [pc, #36]	; (8013ba8 <siprintf+0x3c>)
 8013b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b88:	9105      	str	r1, [sp, #20]
 8013b8a:	6800      	ldr	r0, [r0, #0]
 8013b8c:	a902      	add	r1, sp, #8
 8013b8e:	9301      	str	r3, [sp, #4]
 8013b90:	f001 fac4 	bl	801511c <_svfiprintf_r>
 8013b94:	2200      	movs	r2, #0
 8013b96:	9b02      	ldr	r3, [sp, #8]
 8013b98:	701a      	strb	r2, [r3, #0]
 8013b9a:	b01c      	add	sp, #112	; 0x70
 8013b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ba0:	b003      	add	sp, #12
 8013ba2:	4770      	bx	lr
 8013ba4:	20000124 	.word	0x20000124
 8013ba8:	ffff0208 	.word	0xffff0208

08013bac <__assert_func>:
 8013bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bae:	4614      	mov	r4, r2
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	4b09      	ldr	r3, [pc, #36]	; (8013bd8 <__assert_func+0x2c>)
 8013bb4:	4605      	mov	r5, r0
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	68d8      	ldr	r0, [r3, #12]
 8013bba:	b14c      	cbz	r4, 8013bd0 <__assert_func+0x24>
 8013bbc:	4b07      	ldr	r3, [pc, #28]	; (8013bdc <__assert_func+0x30>)
 8013bbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013bc2:	9100      	str	r1, [sp, #0]
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	4906      	ldr	r1, [pc, #24]	; (8013be0 <__assert_func+0x34>)
 8013bc8:	f000 fe8c 	bl	80148e4 <fiprintf>
 8013bcc:	f001 fdbe 	bl	801574c <abort>
 8013bd0:	4b04      	ldr	r3, [pc, #16]	; (8013be4 <__assert_func+0x38>)
 8013bd2:	461c      	mov	r4, r3
 8013bd4:	e7f3      	b.n	8013bbe <__assert_func+0x12>
 8013bd6:	bf00      	nop
 8013bd8:	20000124 	.word	0x20000124
 8013bdc:	08017e26 	.word	0x08017e26
 8013be0:	08017e33 	.word	0x08017e33
 8013be4:	08017e61 	.word	0x08017e61

08013be8 <quorem>:
 8013be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bec:	6903      	ldr	r3, [r0, #16]
 8013bee:	690c      	ldr	r4, [r1, #16]
 8013bf0:	4607      	mov	r7, r0
 8013bf2:	42a3      	cmp	r3, r4
 8013bf4:	f2c0 8083 	blt.w	8013cfe <quorem+0x116>
 8013bf8:	3c01      	subs	r4, #1
 8013bfa:	f100 0514 	add.w	r5, r0, #20
 8013bfe:	f101 0814 	add.w	r8, r1, #20
 8013c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c06:	9301      	str	r3, [sp, #4]
 8013c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c10:	3301      	adds	r3, #1
 8013c12:	429a      	cmp	r2, r3
 8013c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013c1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013c20:	d332      	bcc.n	8013c88 <quorem+0xa0>
 8013c22:	f04f 0e00 	mov.w	lr, #0
 8013c26:	4640      	mov	r0, r8
 8013c28:	46ac      	mov	ip, r5
 8013c2a:	46f2      	mov	sl, lr
 8013c2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c30:	b293      	uxth	r3, r2
 8013c32:	fb06 e303 	mla	r3, r6, r3, lr
 8013c36:	0c12      	lsrs	r2, r2, #16
 8013c38:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013c3c:	fb06 e202 	mla	r2, r6, r2, lr
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	ebaa 0303 	sub.w	r3, sl, r3
 8013c46:	f8dc a000 	ldr.w	sl, [ip]
 8013c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013c4e:	fa1f fa8a 	uxth.w	sl, sl
 8013c52:	4453      	add	r3, sl
 8013c54:	fa1f fa82 	uxth.w	sl, r2
 8013c58:	f8dc 2000 	ldr.w	r2, [ip]
 8013c5c:	4581      	cmp	r9, r0
 8013c5e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013c62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013c70:	f84c 3b04 	str.w	r3, [ip], #4
 8013c74:	d2da      	bcs.n	8013c2c <quorem+0x44>
 8013c76:	f855 300b 	ldr.w	r3, [r5, fp]
 8013c7a:	b92b      	cbnz	r3, 8013c88 <quorem+0xa0>
 8013c7c:	9b01      	ldr	r3, [sp, #4]
 8013c7e:	3b04      	subs	r3, #4
 8013c80:	429d      	cmp	r5, r3
 8013c82:	461a      	mov	r2, r3
 8013c84:	d32f      	bcc.n	8013ce6 <quorem+0xfe>
 8013c86:	613c      	str	r4, [r7, #16]
 8013c88:	4638      	mov	r0, r7
 8013c8a:	f001 f8d5 	bl	8014e38 <__mcmp>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	db25      	blt.n	8013cde <quorem+0xf6>
 8013c92:	4628      	mov	r0, r5
 8013c94:	f04f 0c00 	mov.w	ip, #0
 8013c98:	3601      	adds	r6, #1
 8013c9a:	f858 1b04 	ldr.w	r1, [r8], #4
 8013c9e:	f8d0 e000 	ldr.w	lr, [r0]
 8013ca2:	b28b      	uxth	r3, r1
 8013ca4:	ebac 0303 	sub.w	r3, ip, r3
 8013ca8:	fa1f f28e 	uxth.w	r2, lr
 8013cac:	4413      	add	r3, r2
 8013cae:	0c0a      	lsrs	r2, r1, #16
 8013cb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013cb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013cbe:	45c1      	cmp	r9, r8
 8013cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013cc4:	f840 3b04 	str.w	r3, [r0], #4
 8013cc8:	d2e7      	bcs.n	8013c9a <quorem+0xb2>
 8013cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013cd2:	b922      	cbnz	r2, 8013cde <quorem+0xf6>
 8013cd4:	3b04      	subs	r3, #4
 8013cd6:	429d      	cmp	r5, r3
 8013cd8:	461a      	mov	r2, r3
 8013cda:	d30a      	bcc.n	8013cf2 <quorem+0x10a>
 8013cdc:	613c      	str	r4, [r7, #16]
 8013cde:	4630      	mov	r0, r6
 8013ce0:	b003      	add	sp, #12
 8013ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce6:	6812      	ldr	r2, [r2, #0]
 8013ce8:	3b04      	subs	r3, #4
 8013cea:	2a00      	cmp	r2, #0
 8013cec:	d1cb      	bne.n	8013c86 <quorem+0x9e>
 8013cee:	3c01      	subs	r4, #1
 8013cf0:	e7c6      	b.n	8013c80 <quorem+0x98>
 8013cf2:	6812      	ldr	r2, [r2, #0]
 8013cf4:	3b04      	subs	r3, #4
 8013cf6:	2a00      	cmp	r2, #0
 8013cf8:	d1f0      	bne.n	8013cdc <quorem+0xf4>
 8013cfa:	3c01      	subs	r4, #1
 8013cfc:	e7eb      	b.n	8013cd6 <quorem+0xee>
 8013cfe:	2000      	movs	r0, #0
 8013d00:	e7ee      	b.n	8013ce0 <quorem+0xf8>
 8013d02:	0000      	movs	r0, r0
 8013d04:	0000      	movs	r0, r0
	...

08013d08 <_dtoa_r>:
 8013d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d0c:	4616      	mov	r6, r2
 8013d0e:	461f      	mov	r7, r3
 8013d10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013d12:	b099      	sub	sp, #100	; 0x64
 8013d14:	4605      	mov	r5, r0
 8013d16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013d1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8013d1e:	b974      	cbnz	r4, 8013d3e <_dtoa_r+0x36>
 8013d20:	2010      	movs	r0, #16
 8013d22:	f7ff f96b 	bl	8012ffc <malloc>
 8013d26:	4602      	mov	r2, r0
 8013d28:	6268      	str	r0, [r5, #36]	; 0x24
 8013d2a:	b920      	cbnz	r0, 8013d36 <_dtoa_r+0x2e>
 8013d2c:	21ea      	movs	r1, #234	; 0xea
 8013d2e:	4bae      	ldr	r3, [pc, #696]	; (8013fe8 <_dtoa_r+0x2e0>)
 8013d30:	48ae      	ldr	r0, [pc, #696]	; (8013fec <_dtoa_r+0x2e4>)
 8013d32:	f7ff ff3b 	bl	8013bac <__assert_func>
 8013d36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d3a:	6004      	str	r4, [r0, #0]
 8013d3c:	60c4      	str	r4, [r0, #12]
 8013d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d40:	6819      	ldr	r1, [r3, #0]
 8013d42:	b151      	cbz	r1, 8013d5a <_dtoa_r+0x52>
 8013d44:	685a      	ldr	r2, [r3, #4]
 8013d46:	2301      	movs	r3, #1
 8013d48:	4093      	lsls	r3, r2
 8013d4a:	604a      	str	r2, [r1, #4]
 8013d4c:	608b      	str	r3, [r1, #8]
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f000 fe38 	bl	80149c4 <_Bfree>
 8013d54:	2200      	movs	r2, #0
 8013d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d58:	601a      	str	r2, [r3, #0]
 8013d5a:	1e3b      	subs	r3, r7, #0
 8013d5c:	bfaf      	iteee	ge
 8013d5e:	2300      	movge	r3, #0
 8013d60:	2201      	movlt	r2, #1
 8013d62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013d66:	9305      	strlt	r3, [sp, #20]
 8013d68:	bfa8      	it	ge
 8013d6a:	f8c8 3000 	strge.w	r3, [r8]
 8013d6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013d72:	4b9f      	ldr	r3, [pc, #636]	; (8013ff0 <_dtoa_r+0x2e8>)
 8013d74:	bfb8      	it	lt
 8013d76:	f8c8 2000 	strlt.w	r2, [r8]
 8013d7a:	ea33 0309 	bics.w	r3, r3, r9
 8013d7e:	d119      	bne.n	8013db4 <_dtoa_r+0xac>
 8013d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8013d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013d86:	6013      	str	r3, [r2, #0]
 8013d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d8c:	4333      	orrs	r3, r6
 8013d8e:	f000 8580 	beq.w	8014892 <_dtoa_r+0xb8a>
 8013d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d94:	b953      	cbnz	r3, 8013dac <_dtoa_r+0xa4>
 8013d96:	4b97      	ldr	r3, [pc, #604]	; (8013ff4 <_dtoa_r+0x2ec>)
 8013d98:	e022      	b.n	8013de0 <_dtoa_r+0xd8>
 8013d9a:	4b97      	ldr	r3, [pc, #604]	; (8013ff8 <_dtoa_r+0x2f0>)
 8013d9c:	9308      	str	r3, [sp, #32]
 8013d9e:	3308      	adds	r3, #8
 8013da0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	9808      	ldr	r0, [sp, #32]
 8013da6:	b019      	add	sp, #100	; 0x64
 8013da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dac:	4b91      	ldr	r3, [pc, #580]	; (8013ff4 <_dtoa_r+0x2ec>)
 8013dae:	9308      	str	r3, [sp, #32]
 8013db0:	3303      	adds	r3, #3
 8013db2:	e7f5      	b.n	8013da0 <_dtoa_r+0x98>
 8013db4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013db8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8013dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	f7ec fe5c 	bl	8000a80 <__aeabi_dcmpeq>
 8013dc8:	4680      	mov	r8, r0
 8013dca:	b158      	cbz	r0, 8013de4 <_dtoa_r+0xdc>
 8013dcc:	2301      	movs	r3, #1
 8013dce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013dd0:	6013      	str	r3, [r2, #0]
 8013dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	f000 8559 	beq.w	801488c <_dtoa_r+0xb84>
 8013dda:	4888      	ldr	r0, [pc, #544]	; (8013ffc <_dtoa_r+0x2f4>)
 8013ddc:	6018      	str	r0, [r3, #0]
 8013dde:	1e43      	subs	r3, r0, #1
 8013de0:	9308      	str	r3, [sp, #32]
 8013de2:	e7df      	b.n	8013da4 <_dtoa_r+0x9c>
 8013de4:	ab16      	add	r3, sp, #88	; 0x58
 8013de6:	9301      	str	r3, [sp, #4]
 8013de8:	ab17      	add	r3, sp, #92	; 0x5c
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	4628      	mov	r0, r5
 8013dee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013df2:	f001 f8cd 	bl	8014f90 <__d2b>
 8013df6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013dfa:	4682      	mov	sl, r0
 8013dfc:	2c00      	cmp	r4, #0
 8013dfe:	d07e      	beq.n	8013efe <_dtoa_r+0x1f6>
 8013e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8013e12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013e16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	4b78      	ldr	r3, [pc, #480]	; (8014000 <_dtoa_r+0x2f8>)
 8013e1e:	f7ec fa0f 	bl	8000240 <__aeabi_dsub>
 8013e22:	a36b      	add	r3, pc, #428	; (adr r3, 8013fd0 <_dtoa_r+0x2c8>)
 8013e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e28:	f7ec fbc2 	bl	80005b0 <__aeabi_dmul>
 8013e2c:	a36a      	add	r3, pc, #424	; (adr r3, 8013fd8 <_dtoa_r+0x2d0>)
 8013e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e32:	f7ec fa07 	bl	8000244 <__adddf3>
 8013e36:	4606      	mov	r6, r0
 8013e38:	4620      	mov	r0, r4
 8013e3a:	460f      	mov	r7, r1
 8013e3c:	f7ec fb4e 	bl	80004dc <__aeabi_i2d>
 8013e40:	a367      	add	r3, pc, #412	; (adr r3, 8013fe0 <_dtoa_r+0x2d8>)
 8013e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e46:	f7ec fbb3 	bl	80005b0 <__aeabi_dmul>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	4630      	mov	r0, r6
 8013e50:	4639      	mov	r1, r7
 8013e52:	f7ec f9f7 	bl	8000244 <__adddf3>
 8013e56:	4606      	mov	r6, r0
 8013e58:	460f      	mov	r7, r1
 8013e5a:	f7ec fe59 	bl	8000b10 <__aeabi_d2iz>
 8013e5e:	2200      	movs	r2, #0
 8013e60:	4681      	mov	r9, r0
 8013e62:	2300      	movs	r3, #0
 8013e64:	4630      	mov	r0, r6
 8013e66:	4639      	mov	r1, r7
 8013e68:	f7ec fe14 	bl	8000a94 <__aeabi_dcmplt>
 8013e6c:	b148      	cbz	r0, 8013e82 <_dtoa_r+0x17a>
 8013e6e:	4648      	mov	r0, r9
 8013e70:	f7ec fb34 	bl	80004dc <__aeabi_i2d>
 8013e74:	4632      	mov	r2, r6
 8013e76:	463b      	mov	r3, r7
 8013e78:	f7ec fe02 	bl	8000a80 <__aeabi_dcmpeq>
 8013e7c:	b908      	cbnz	r0, 8013e82 <_dtoa_r+0x17a>
 8013e7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8013e82:	f1b9 0f16 	cmp.w	r9, #22
 8013e86:	d857      	bhi.n	8013f38 <_dtoa_r+0x230>
 8013e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e8c:	4b5d      	ldr	r3, [pc, #372]	; (8014004 <_dtoa_r+0x2fc>)
 8013e8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e96:	f7ec fdfd 	bl	8000a94 <__aeabi_dcmplt>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d04e      	beq.n	8013f3c <_dtoa_r+0x234>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	f109 39ff 	add.w	r9, r9, #4294967295
 8013ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ea6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013ea8:	1b1c      	subs	r4, r3, r4
 8013eaa:	1e63      	subs	r3, r4, #1
 8013eac:	9309      	str	r3, [sp, #36]	; 0x24
 8013eae:	bf49      	itett	mi
 8013eb0:	f1c4 0301 	rsbmi	r3, r4, #1
 8013eb4:	2300      	movpl	r3, #0
 8013eb6:	9306      	strmi	r3, [sp, #24]
 8013eb8:	2300      	movmi	r3, #0
 8013eba:	bf54      	ite	pl
 8013ebc:	9306      	strpl	r3, [sp, #24]
 8013ebe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013ec0:	f1b9 0f00 	cmp.w	r9, #0
 8013ec4:	db3c      	blt.n	8013f40 <_dtoa_r+0x238>
 8013ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ec8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013ecc:	444b      	add	r3, r9
 8013ece:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8013ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ed6:	2b09      	cmp	r3, #9
 8013ed8:	d86c      	bhi.n	8013fb4 <_dtoa_r+0x2ac>
 8013eda:	2b05      	cmp	r3, #5
 8013edc:	bfc4      	itt	gt
 8013ede:	3b04      	subgt	r3, #4
 8013ee0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013ee2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ee4:	bfc8      	it	gt
 8013ee6:	2400      	movgt	r4, #0
 8013ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8013eec:	bfd8      	it	le
 8013eee:	2401      	movle	r4, #1
 8013ef0:	2b03      	cmp	r3, #3
 8013ef2:	f200 808b 	bhi.w	801400c <_dtoa_r+0x304>
 8013ef6:	e8df f003 	tbb	[pc, r3]
 8013efa:	4f2d      	.short	0x4f2d
 8013efc:	5b4d      	.short	0x5b4d
 8013efe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013f02:	441c      	add	r4, r3
 8013f04:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013f08:	2b20      	cmp	r3, #32
 8013f0a:	bfc3      	ittte	gt
 8013f0c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013f10:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8013f14:	fa09 f303 	lslgt.w	r3, r9, r3
 8013f18:	f1c3 0320 	rsble	r3, r3, #32
 8013f1c:	bfc6      	itte	gt
 8013f1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013f22:	4318      	orrgt	r0, r3
 8013f24:	fa06 f003 	lslle.w	r0, r6, r3
 8013f28:	f7ec fac8 	bl	80004bc <__aeabi_ui2d>
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8013f32:	3c01      	subs	r4, #1
 8013f34:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f36:	e770      	b.n	8013e1a <_dtoa_r+0x112>
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e7b3      	b.n	8013ea4 <_dtoa_r+0x19c>
 8013f3c:	900f      	str	r0, [sp, #60]	; 0x3c
 8013f3e:	e7b2      	b.n	8013ea6 <_dtoa_r+0x19e>
 8013f40:	9b06      	ldr	r3, [sp, #24]
 8013f42:	eba3 0309 	sub.w	r3, r3, r9
 8013f46:	9306      	str	r3, [sp, #24]
 8013f48:	f1c9 0300 	rsb	r3, r9, #0
 8013f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8013f4e:	2300      	movs	r3, #0
 8013f50:	930e      	str	r3, [sp, #56]	; 0x38
 8013f52:	e7bf      	b.n	8013ed4 <_dtoa_r+0x1cc>
 8013f54:	2300      	movs	r3, #0
 8013f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	dc59      	bgt.n	8014012 <_dtoa_r+0x30a>
 8013f5e:	f04f 0b01 	mov.w	fp, #1
 8013f62:	465b      	mov	r3, fp
 8013f64:	f8cd b008 	str.w	fp, [sp, #8]
 8013f68:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013f70:	6042      	str	r2, [r0, #4]
 8013f72:	2204      	movs	r2, #4
 8013f74:	f102 0614 	add.w	r6, r2, #20
 8013f78:	429e      	cmp	r6, r3
 8013f7a:	6841      	ldr	r1, [r0, #4]
 8013f7c:	d94f      	bls.n	801401e <_dtoa_r+0x316>
 8013f7e:	4628      	mov	r0, r5
 8013f80:	f000 fce0 	bl	8014944 <_Balloc>
 8013f84:	9008      	str	r0, [sp, #32]
 8013f86:	2800      	cmp	r0, #0
 8013f88:	d14d      	bne.n	8014026 <_dtoa_r+0x31e>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013f90:	4b1d      	ldr	r3, [pc, #116]	; (8014008 <_dtoa_r+0x300>)
 8013f92:	e6cd      	b.n	8013d30 <_dtoa_r+0x28>
 8013f94:	2301      	movs	r3, #1
 8013f96:	e7de      	b.n	8013f56 <_dtoa_r+0x24e>
 8013f98:	2300      	movs	r3, #0
 8013f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f9e:	eb09 0b03 	add.w	fp, r9, r3
 8013fa2:	f10b 0301 	add.w	r3, fp, #1
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	9302      	str	r3, [sp, #8]
 8013faa:	bfb8      	it	lt
 8013fac:	2301      	movlt	r3, #1
 8013fae:	e7dd      	b.n	8013f6c <_dtoa_r+0x264>
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	e7f2      	b.n	8013f9a <_dtoa_r+0x292>
 8013fb4:	2401      	movs	r4, #1
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8013fba:	9322      	str	r3, [sp, #136]	; 0x88
 8013fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	2312      	movs	r3, #18
 8013fc4:	f8cd b008 	str.w	fp, [sp, #8]
 8013fc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8013fca:	e7cf      	b.n	8013f6c <_dtoa_r+0x264>
 8013fcc:	f3af 8000 	nop.w
 8013fd0:	636f4361 	.word	0x636f4361
 8013fd4:	3fd287a7 	.word	0x3fd287a7
 8013fd8:	8b60c8b3 	.word	0x8b60c8b3
 8013fdc:	3fc68a28 	.word	0x3fc68a28
 8013fe0:	509f79fb 	.word	0x509f79fb
 8013fe4:	3fd34413 	.word	0x3fd34413
 8013fe8:	08017db0 	.word	0x08017db0
 8013fec:	08017e6f 	.word	0x08017e6f
 8013ff0:	7ff00000 	.word	0x7ff00000
 8013ff4:	08017e6b 	.word	0x08017e6b
 8013ff8:	08017e62 	.word	0x08017e62
 8013ffc:	08017d8d 	.word	0x08017d8d
 8014000:	3ff80000 	.word	0x3ff80000
 8014004:	08017f68 	.word	0x08017f68
 8014008:	08017ece 	.word	0x08017ece
 801400c:	2301      	movs	r3, #1
 801400e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014010:	e7d4      	b.n	8013fbc <_dtoa_r+0x2b4>
 8014012:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014016:	465b      	mov	r3, fp
 8014018:	f8cd b008 	str.w	fp, [sp, #8]
 801401c:	e7a6      	b.n	8013f6c <_dtoa_r+0x264>
 801401e:	3101      	adds	r1, #1
 8014020:	6041      	str	r1, [r0, #4]
 8014022:	0052      	lsls	r2, r2, #1
 8014024:	e7a6      	b.n	8013f74 <_dtoa_r+0x26c>
 8014026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014028:	9a08      	ldr	r2, [sp, #32]
 801402a:	601a      	str	r2, [r3, #0]
 801402c:	9b02      	ldr	r3, [sp, #8]
 801402e:	2b0e      	cmp	r3, #14
 8014030:	f200 80a8 	bhi.w	8014184 <_dtoa_r+0x47c>
 8014034:	2c00      	cmp	r4, #0
 8014036:	f000 80a5 	beq.w	8014184 <_dtoa_r+0x47c>
 801403a:	f1b9 0f00 	cmp.w	r9, #0
 801403e:	dd34      	ble.n	80140aa <_dtoa_r+0x3a2>
 8014040:	4a9a      	ldr	r2, [pc, #616]	; (80142ac <_dtoa_r+0x5a4>)
 8014042:	f009 030f 	and.w	r3, r9, #15
 8014046:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801404a:	f419 7f80 	tst.w	r9, #256	; 0x100
 801404e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014052:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014056:	ea4f 1429 	mov.w	r4, r9, asr #4
 801405a:	d016      	beq.n	801408a <_dtoa_r+0x382>
 801405c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014060:	4b93      	ldr	r3, [pc, #588]	; (80142b0 <_dtoa_r+0x5a8>)
 8014062:	2703      	movs	r7, #3
 8014064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014068:	f7ec fbcc 	bl	8000804 <__aeabi_ddiv>
 801406c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014070:	f004 040f 	and.w	r4, r4, #15
 8014074:	4e8e      	ldr	r6, [pc, #568]	; (80142b0 <_dtoa_r+0x5a8>)
 8014076:	b954      	cbnz	r4, 801408e <_dtoa_r+0x386>
 8014078:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801407c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014080:	f7ec fbc0 	bl	8000804 <__aeabi_ddiv>
 8014084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014088:	e029      	b.n	80140de <_dtoa_r+0x3d6>
 801408a:	2702      	movs	r7, #2
 801408c:	e7f2      	b.n	8014074 <_dtoa_r+0x36c>
 801408e:	07e1      	lsls	r1, r4, #31
 8014090:	d508      	bpl.n	80140a4 <_dtoa_r+0x39c>
 8014092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014096:	e9d6 2300 	ldrd	r2, r3, [r6]
 801409a:	f7ec fa89 	bl	80005b0 <__aeabi_dmul>
 801409e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80140a2:	3701      	adds	r7, #1
 80140a4:	1064      	asrs	r4, r4, #1
 80140a6:	3608      	adds	r6, #8
 80140a8:	e7e5      	b.n	8014076 <_dtoa_r+0x36e>
 80140aa:	f000 80a5 	beq.w	80141f8 <_dtoa_r+0x4f0>
 80140ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80140b2:	f1c9 0400 	rsb	r4, r9, #0
 80140b6:	4b7d      	ldr	r3, [pc, #500]	; (80142ac <_dtoa_r+0x5a4>)
 80140b8:	f004 020f 	and.w	r2, r4, #15
 80140bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c4:	f7ec fa74 	bl	80005b0 <__aeabi_dmul>
 80140c8:	2702      	movs	r7, #2
 80140ca:	2300      	movs	r3, #0
 80140cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140d0:	4e77      	ldr	r6, [pc, #476]	; (80142b0 <_dtoa_r+0x5a8>)
 80140d2:	1124      	asrs	r4, r4, #4
 80140d4:	2c00      	cmp	r4, #0
 80140d6:	f040 8084 	bne.w	80141e2 <_dtoa_r+0x4da>
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d1d2      	bne.n	8014084 <_dtoa_r+0x37c>
 80140de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	f000 808b 	beq.w	80141fc <_dtoa_r+0x4f4>
 80140e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80140ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80140ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140f2:	2200      	movs	r2, #0
 80140f4:	4b6f      	ldr	r3, [pc, #444]	; (80142b4 <_dtoa_r+0x5ac>)
 80140f6:	f7ec fccd 	bl	8000a94 <__aeabi_dcmplt>
 80140fa:	2800      	cmp	r0, #0
 80140fc:	d07e      	beq.n	80141fc <_dtoa_r+0x4f4>
 80140fe:	9b02      	ldr	r3, [sp, #8]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d07b      	beq.n	80141fc <_dtoa_r+0x4f4>
 8014104:	f1bb 0f00 	cmp.w	fp, #0
 8014108:	dd38      	ble.n	801417c <_dtoa_r+0x474>
 801410a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801410e:	2200      	movs	r2, #0
 8014110:	4b69      	ldr	r3, [pc, #420]	; (80142b8 <_dtoa_r+0x5b0>)
 8014112:	f7ec fa4d 	bl	80005b0 <__aeabi_dmul>
 8014116:	465c      	mov	r4, fp
 8014118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801411c:	f109 38ff 	add.w	r8, r9, #4294967295
 8014120:	3701      	adds	r7, #1
 8014122:	4638      	mov	r0, r7
 8014124:	f7ec f9da 	bl	80004dc <__aeabi_i2d>
 8014128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801412c:	f7ec fa40 	bl	80005b0 <__aeabi_dmul>
 8014130:	2200      	movs	r2, #0
 8014132:	4b62      	ldr	r3, [pc, #392]	; (80142bc <_dtoa_r+0x5b4>)
 8014134:	f7ec f886 	bl	8000244 <__adddf3>
 8014138:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801413c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014140:	9611      	str	r6, [sp, #68]	; 0x44
 8014142:	2c00      	cmp	r4, #0
 8014144:	d15d      	bne.n	8014202 <_dtoa_r+0x4fa>
 8014146:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801414a:	2200      	movs	r2, #0
 801414c:	4b5c      	ldr	r3, [pc, #368]	; (80142c0 <_dtoa_r+0x5b8>)
 801414e:	f7ec f877 	bl	8000240 <__aeabi_dsub>
 8014152:	4602      	mov	r2, r0
 8014154:	460b      	mov	r3, r1
 8014156:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801415a:	4633      	mov	r3, r6
 801415c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801415e:	f7ec fcb7 	bl	8000ad0 <__aeabi_dcmpgt>
 8014162:	2800      	cmp	r0, #0
 8014164:	f040 829e 	bne.w	80146a4 <_dtoa_r+0x99c>
 8014168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801416c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801416e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014172:	f7ec fc8f 	bl	8000a94 <__aeabi_dcmplt>
 8014176:	2800      	cmp	r0, #0
 8014178:	f040 8292 	bne.w	80146a0 <_dtoa_r+0x998>
 801417c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014180:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014184:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014186:	2b00      	cmp	r3, #0
 8014188:	f2c0 8153 	blt.w	8014432 <_dtoa_r+0x72a>
 801418c:	f1b9 0f0e 	cmp.w	r9, #14
 8014190:	f300 814f 	bgt.w	8014432 <_dtoa_r+0x72a>
 8014194:	4b45      	ldr	r3, [pc, #276]	; (80142ac <_dtoa_r+0x5a4>)
 8014196:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801419a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801419e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80141a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	f280 80db 	bge.w	8014360 <_dtoa_r+0x658>
 80141aa:	9b02      	ldr	r3, [sp, #8]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f300 80d7 	bgt.w	8014360 <_dtoa_r+0x658>
 80141b2:	f040 8274 	bne.w	801469e <_dtoa_r+0x996>
 80141b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80141ba:	2200      	movs	r2, #0
 80141bc:	4b40      	ldr	r3, [pc, #256]	; (80142c0 <_dtoa_r+0x5b8>)
 80141be:	f7ec f9f7 	bl	80005b0 <__aeabi_dmul>
 80141c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141c6:	f7ec fc79 	bl	8000abc <__aeabi_dcmpge>
 80141ca:	9c02      	ldr	r4, [sp, #8]
 80141cc:	4626      	mov	r6, r4
 80141ce:	2800      	cmp	r0, #0
 80141d0:	f040 824a 	bne.w	8014668 <_dtoa_r+0x960>
 80141d4:	2331      	movs	r3, #49	; 0x31
 80141d6:	9f08      	ldr	r7, [sp, #32]
 80141d8:	f109 0901 	add.w	r9, r9, #1
 80141dc:	f807 3b01 	strb.w	r3, [r7], #1
 80141e0:	e246      	b.n	8014670 <_dtoa_r+0x968>
 80141e2:	07e2      	lsls	r2, r4, #31
 80141e4:	d505      	bpl.n	80141f2 <_dtoa_r+0x4ea>
 80141e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80141ea:	f7ec f9e1 	bl	80005b0 <__aeabi_dmul>
 80141ee:	2301      	movs	r3, #1
 80141f0:	3701      	adds	r7, #1
 80141f2:	1064      	asrs	r4, r4, #1
 80141f4:	3608      	adds	r6, #8
 80141f6:	e76d      	b.n	80140d4 <_dtoa_r+0x3cc>
 80141f8:	2702      	movs	r7, #2
 80141fa:	e770      	b.n	80140de <_dtoa_r+0x3d6>
 80141fc:	46c8      	mov	r8, r9
 80141fe:	9c02      	ldr	r4, [sp, #8]
 8014200:	e78f      	b.n	8014122 <_dtoa_r+0x41a>
 8014202:	9908      	ldr	r1, [sp, #32]
 8014204:	4b29      	ldr	r3, [pc, #164]	; (80142ac <_dtoa_r+0x5a4>)
 8014206:	4421      	add	r1, r4
 8014208:	9112      	str	r1, [sp, #72]	; 0x48
 801420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801420c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014210:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014214:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014218:	2900      	cmp	r1, #0
 801421a:	d055      	beq.n	80142c8 <_dtoa_r+0x5c0>
 801421c:	2000      	movs	r0, #0
 801421e:	4929      	ldr	r1, [pc, #164]	; (80142c4 <_dtoa_r+0x5bc>)
 8014220:	f7ec faf0 	bl	8000804 <__aeabi_ddiv>
 8014224:	463b      	mov	r3, r7
 8014226:	4632      	mov	r2, r6
 8014228:	f7ec f80a 	bl	8000240 <__aeabi_dsub>
 801422c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014230:	9f08      	ldr	r7, [sp, #32]
 8014232:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014236:	f7ec fc6b 	bl	8000b10 <__aeabi_d2iz>
 801423a:	4604      	mov	r4, r0
 801423c:	f7ec f94e 	bl	80004dc <__aeabi_i2d>
 8014240:	4602      	mov	r2, r0
 8014242:	460b      	mov	r3, r1
 8014244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014248:	f7eb fffa 	bl	8000240 <__aeabi_dsub>
 801424c:	4602      	mov	r2, r0
 801424e:	460b      	mov	r3, r1
 8014250:	3430      	adds	r4, #48	; 0x30
 8014252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014256:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801425a:	f807 4b01 	strb.w	r4, [r7], #1
 801425e:	f7ec fc19 	bl	8000a94 <__aeabi_dcmplt>
 8014262:	2800      	cmp	r0, #0
 8014264:	d174      	bne.n	8014350 <_dtoa_r+0x648>
 8014266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801426a:	2000      	movs	r0, #0
 801426c:	4911      	ldr	r1, [pc, #68]	; (80142b4 <_dtoa_r+0x5ac>)
 801426e:	f7eb ffe7 	bl	8000240 <__aeabi_dsub>
 8014272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014276:	f7ec fc0d 	bl	8000a94 <__aeabi_dcmplt>
 801427a:	2800      	cmp	r0, #0
 801427c:	f040 80b6 	bne.w	80143ec <_dtoa_r+0x6e4>
 8014280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014282:	429f      	cmp	r7, r3
 8014284:	f43f af7a 	beq.w	801417c <_dtoa_r+0x474>
 8014288:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801428c:	2200      	movs	r2, #0
 801428e:	4b0a      	ldr	r3, [pc, #40]	; (80142b8 <_dtoa_r+0x5b0>)
 8014290:	f7ec f98e 	bl	80005b0 <__aeabi_dmul>
 8014294:	2200      	movs	r2, #0
 8014296:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801429a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801429e:	4b06      	ldr	r3, [pc, #24]	; (80142b8 <_dtoa_r+0x5b0>)
 80142a0:	f7ec f986 	bl	80005b0 <__aeabi_dmul>
 80142a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142a8:	e7c3      	b.n	8014232 <_dtoa_r+0x52a>
 80142aa:	bf00      	nop
 80142ac:	08017f68 	.word	0x08017f68
 80142b0:	08017f40 	.word	0x08017f40
 80142b4:	3ff00000 	.word	0x3ff00000
 80142b8:	40240000 	.word	0x40240000
 80142bc:	401c0000 	.word	0x401c0000
 80142c0:	40140000 	.word	0x40140000
 80142c4:	3fe00000 	.word	0x3fe00000
 80142c8:	4630      	mov	r0, r6
 80142ca:	4639      	mov	r1, r7
 80142cc:	f7ec f970 	bl	80005b0 <__aeabi_dmul>
 80142d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80142d6:	9c08      	ldr	r4, [sp, #32]
 80142d8:	9314      	str	r3, [sp, #80]	; 0x50
 80142da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142de:	f7ec fc17 	bl	8000b10 <__aeabi_d2iz>
 80142e2:	9015      	str	r0, [sp, #84]	; 0x54
 80142e4:	f7ec f8fa 	bl	80004dc <__aeabi_i2d>
 80142e8:	4602      	mov	r2, r0
 80142ea:	460b      	mov	r3, r1
 80142ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142f0:	f7eb ffa6 	bl	8000240 <__aeabi_dsub>
 80142f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142f6:	4606      	mov	r6, r0
 80142f8:	3330      	adds	r3, #48	; 0x30
 80142fa:	f804 3b01 	strb.w	r3, [r4], #1
 80142fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014300:	460f      	mov	r7, r1
 8014302:	429c      	cmp	r4, r3
 8014304:	f04f 0200 	mov.w	r2, #0
 8014308:	d124      	bne.n	8014354 <_dtoa_r+0x64c>
 801430a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801430e:	4bb3      	ldr	r3, [pc, #716]	; (80145dc <_dtoa_r+0x8d4>)
 8014310:	f7eb ff98 	bl	8000244 <__adddf3>
 8014314:	4602      	mov	r2, r0
 8014316:	460b      	mov	r3, r1
 8014318:	4630      	mov	r0, r6
 801431a:	4639      	mov	r1, r7
 801431c:	f7ec fbd8 	bl	8000ad0 <__aeabi_dcmpgt>
 8014320:	2800      	cmp	r0, #0
 8014322:	d162      	bne.n	80143ea <_dtoa_r+0x6e2>
 8014324:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014328:	2000      	movs	r0, #0
 801432a:	49ac      	ldr	r1, [pc, #688]	; (80145dc <_dtoa_r+0x8d4>)
 801432c:	f7eb ff88 	bl	8000240 <__aeabi_dsub>
 8014330:	4602      	mov	r2, r0
 8014332:	460b      	mov	r3, r1
 8014334:	4630      	mov	r0, r6
 8014336:	4639      	mov	r1, r7
 8014338:	f7ec fbac 	bl	8000a94 <__aeabi_dcmplt>
 801433c:	2800      	cmp	r0, #0
 801433e:	f43f af1d 	beq.w	801417c <_dtoa_r+0x474>
 8014342:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014344:	1e7b      	subs	r3, r7, #1
 8014346:	9314      	str	r3, [sp, #80]	; 0x50
 8014348:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801434c:	2b30      	cmp	r3, #48	; 0x30
 801434e:	d0f8      	beq.n	8014342 <_dtoa_r+0x63a>
 8014350:	46c1      	mov	r9, r8
 8014352:	e03a      	b.n	80143ca <_dtoa_r+0x6c2>
 8014354:	4ba2      	ldr	r3, [pc, #648]	; (80145e0 <_dtoa_r+0x8d8>)
 8014356:	f7ec f92b 	bl	80005b0 <__aeabi_dmul>
 801435a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801435e:	e7bc      	b.n	80142da <_dtoa_r+0x5d2>
 8014360:	9f08      	ldr	r7, [sp, #32]
 8014362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801436a:	f7ec fa4b 	bl	8000804 <__aeabi_ddiv>
 801436e:	f7ec fbcf 	bl	8000b10 <__aeabi_d2iz>
 8014372:	4604      	mov	r4, r0
 8014374:	f7ec f8b2 	bl	80004dc <__aeabi_i2d>
 8014378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801437c:	f7ec f918 	bl	80005b0 <__aeabi_dmul>
 8014380:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014384:	460b      	mov	r3, r1
 8014386:	4602      	mov	r2, r0
 8014388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801438c:	f7eb ff58 	bl	8000240 <__aeabi_dsub>
 8014390:	f807 6b01 	strb.w	r6, [r7], #1
 8014394:	9e08      	ldr	r6, [sp, #32]
 8014396:	9b02      	ldr	r3, [sp, #8]
 8014398:	1bbe      	subs	r6, r7, r6
 801439a:	42b3      	cmp	r3, r6
 801439c:	d13a      	bne.n	8014414 <_dtoa_r+0x70c>
 801439e:	4602      	mov	r2, r0
 80143a0:	460b      	mov	r3, r1
 80143a2:	f7eb ff4f 	bl	8000244 <__adddf3>
 80143a6:	4602      	mov	r2, r0
 80143a8:	460b      	mov	r3, r1
 80143aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80143ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143b2:	f7ec fb8d 	bl	8000ad0 <__aeabi_dcmpgt>
 80143b6:	bb58      	cbnz	r0, 8014410 <_dtoa_r+0x708>
 80143b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143c0:	f7ec fb5e 	bl	8000a80 <__aeabi_dcmpeq>
 80143c4:	b108      	cbz	r0, 80143ca <_dtoa_r+0x6c2>
 80143c6:	07e1      	lsls	r1, r4, #31
 80143c8:	d422      	bmi.n	8014410 <_dtoa_r+0x708>
 80143ca:	4628      	mov	r0, r5
 80143cc:	4651      	mov	r1, sl
 80143ce:	f000 faf9 	bl	80149c4 <_Bfree>
 80143d2:	2300      	movs	r3, #0
 80143d4:	703b      	strb	r3, [r7, #0]
 80143d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80143d8:	f109 0001 	add.w	r0, r9, #1
 80143dc:	6018      	str	r0, [r3, #0]
 80143de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f43f acdf 	beq.w	8013da4 <_dtoa_r+0x9c>
 80143e6:	601f      	str	r7, [r3, #0]
 80143e8:	e4dc      	b.n	8013da4 <_dtoa_r+0x9c>
 80143ea:	4627      	mov	r7, r4
 80143ec:	463b      	mov	r3, r7
 80143ee:	461f      	mov	r7, r3
 80143f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143f4:	2a39      	cmp	r2, #57	; 0x39
 80143f6:	d107      	bne.n	8014408 <_dtoa_r+0x700>
 80143f8:	9a08      	ldr	r2, [sp, #32]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d1f7      	bne.n	80143ee <_dtoa_r+0x6e6>
 80143fe:	2230      	movs	r2, #48	; 0x30
 8014400:	9908      	ldr	r1, [sp, #32]
 8014402:	f108 0801 	add.w	r8, r8, #1
 8014406:	700a      	strb	r2, [r1, #0]
 8014408:	781a      	ldrb	r2, [r3, #0]
 801440a:	3201      	adds	r2, #1
 801440c:	701a      	strb	r2, [r3, #0]
 801440e:	e79f      	b.n	8014350 <_dtoa_r+0x648>
 8014410:	46c8      	mov	r8, r9
 8014412:	e7eb      	b.n	80143ec <_dtoa_r+0x6e4>
 8014414:	2200      	movs	r2, #0
 8014416:	4b72      	ldr	r3, [pc, #456]	; (80145e0 <_dtoa_r+0x8d8>)
 8014418:	f7ec f8ca 	bl	80005b0 <__aeabi_dmul>
 801441c:	4602      	mov	r2, r0
 801441e:	460b      	mov	r3, r1
 8014420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014424:	2200      	movs	r2, #0
 8014426:	2300      	movs	r3, #0
 8014428:	f7ec fb2a 	bl	8000a80 <__aeabi_dcmpeq>
 801442c:	2800      	cmp	r0, #0
 801442e:	d098      	beq.n	8014362 <_dtoa_r+0x65a>
 8014430:	e7cb      	b.n	80143ca <_dtoa_r+0x6c2>
 8014432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014434:	2a00      	cmp	r2, #0
 8014436:	f000 80cd 	beq.w	80145d4 <_dtoa_r+0x8cc>
 801443a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801443c:	2a01      	cmp	r2, #1
 801443e:	f300 80af 	bgt.w	80145a0 <_dtoa_r+0x898>
 8014442:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014444:	2a00      	cmp	r2, #0
 8014446:	f000 80a7 	beq.w	8014598 <_dtoa_r+0x890>
 801444a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801444e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014450:	9f06      	ldr	r7, [sp, #24]
 8014452:	9a06      	ldr	r2, [sp, #24]
 8014454:	2101      	movs	r1, #1
 8014456:	441a      	add	r2, r3
 8014458:	9206      	str	r2, [sp, #24]
 801445a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801445c:	4628      	mov	r0, r5
 801445e:	441a      	add	r2, r3
 8014460:	9209      	str	r2, [sp, #36]	; 0x24
 8014462:	f000 fb69 	bl	8014b38 <__i2b>
 8014466:	4606      	mov	r6, r0
 8014468:	2f00      	cmp	r7, #0
 801446a:	dd0c      	ble.n	8014486 <_dtoa_r+0x77e>
 801446c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801446e:	2b00      	cmp	r3, #0
 8014470:	dd09      	ble.n	8014486 <_dtoa_r+0x77e>
 8014472:	42bb      	cmp	r3, r7
 8014474:	bfa8      	it	ge
 8014476:	463b      	movge	r3, r7
 8014478:	9a06      	ldr	r2, [sp, #24]
 801447a:	1aff      	subs	r7, r7, r3
 801447c:	1ad2      	subs	r2, r2, r3
 801447e:	9206      	str	r2, [sp, #24]
 8014480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	9309      	str	r3, [sp, #36]	; 0x24
 8014486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014488:	b1f3      	cbz	r3, 80144c8 <_dtoa_r+0x7c0>
 801448a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801448c:	2b00      	cmp	r3, #0
 801448e:	f000 80a9 	beq.w	80145e4 <_dtoa_r+0x8dc>
 8014492:	2c00      	cmp	r4, #0
 8014494:	dd10      	ble.n	80144b8 <_dtoa_r+0x7b0>
 8014496:	4631      	mov	r1, r6
 8014498:	4622      	mov	r2, r4
 801449a:	4628      	mov	r0, r5
 801449c:	f000 fc06 	bl	8014cac <__pow5mult>
 80144a0:	4652      	mov	r2, sl
 80144a2:	4601      	mov	r1, r0
 80144a4:	4606      	mov	r6, r0
 80144a6:	4628      	mov	r0, r5
 80144a8:	f000 fb5c 	bl	8014b64 <__multiply>
 80144ac:	4680      	mov	r8, r0
 80144ae:	4651      	mov	r1, sl
 80144b0:	4628      	mov	r0, r5
 80144b2:	f000 fa87 	bl	80149c4 <_Bfree>
 80144b6:	46c2      	mov	sl, r8
 80144b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ba:	1b1a      	subs	r2, r3, r4
 80144bc:	d004      	beq.n	80144c8 <_dtoa_r+0x7c0>
 80144be:	4651      	mov	r1, sl
 80144c0:	4628      	mov	r0, r5
 80144c2:	f000 fbf3 	bl	8014cac <__pow5mult>
 80144c6:	4682      	mov	sl, r0
 80144c8:	2101      	movs	r1, #1
 80144ca:	4628      	mov	r0, r5
 80144cc:	f000 fb34 	bl	8014b38 <__i2b>
 80144d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144d2:	4604      	mov	r4, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f340 8087 	ble.w	80145e8 <_dtoa_r+0x8e0>
 80144da:	461a      	mov	r2, r3
 80144dc:	4601      	mov	r1, r0
 80144de:	4628      	mov	r0, r5
 80144e0:	f000 fbe4 	bl	8014cac <__pow5mult>
 80144e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80144e6:	4604      	mov	r4, r0
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	f340 8080 	ble.w	80145ee <_dtoa_r+0x8e6>
 80144ee:	f04f 0800 	mov.w	r8, #0
 80144f2:	6923      	ldr	r3, [r4, #16]
 80144f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80144f8:	6918      	ldr	r0, [r3, #16]
 80144fa:	f000 facf 	bl	8014a9c <__hi0bits>
 80144fe:	f1c0 0020 	rsb	r0, r0, #32
 8014502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014504:	4418      	add	r0, r3
 8014506:	f010 001f 	ands.w	r0, r0, #31
 801450a:	f000 8092 	beq.w	8014632 <_dtoa_r+0x92a>
 801450e:	f1c0 0320 	rsb	r3, r0, #32
 8014512:	2b04      	cmp	r3, #4
 8014514:	f340 808a 	ble.w	801462c <_dtoa_r+0x924>
 8014518:	f1c0 001c 	rsb	r0, r0, #28
 801451c:	9b06      	ldr	r3, [sp, #24]
 801451e:	4407      	add	r7, r0
 8014520:	4403      	add	r3, r0
 8014522:	9306      	str	r3, [sp, #24]
 8014524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014526:	4403      	add	r3, r0
 8014528:	9309      	str	r3, [sp, #36]	; 0x24
 801452a:	9b06      	ldr	r3, [sp, #24]
 801452c:	2b00      	cmp	r3, #0
 801452e:	dd05      	ble.n	801453c <_dtoa_r+0x834>
 8014530:	4651      	mov	r1, sl
 8014532:	461a      	mov	r2, r3
 8014534:	4628      	mov	r0, r5
 8014536:	f000 fc13 	bl	8014d60 <__lshift>
 801453a:	4682      	mov	sl, r0
 801453c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801453e:	2b00      	cmp	r3, #0
 8014540:	dd05      	ble.n	801454e <_dtoa_r+0x846>
 8014542:	4621      	mov	r1, r4
 8014544:	461a      	mov	r2, r3
 8014546:	4628      	mov	r0, r5
 8014548:	f000 fc0a 	bl	8014d60 <__lshift>
 801454c:	4604      	mov	r4, r0
 801454e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014550:	2b00      	cmp	r3, #0
 8014552:	d070      	beq.n	8014636 <_dtoa_r+0x92e>
 8014554:	4621      	mov	r1, r4
 8014556:	4650      	mov	r0, sl
 8014558:	f000 fc6e 	bl	8014e38 <__mcmp>
 801455c:	2800      	cmp	r0, #0
 801455e:	da6a      	bge.n	8014636 <_dtoa_r+0x92e>
 8014560:	2300      	movs	r3, #0
 8014562:	4651      	mov	r1, sl
 8014564:	220a      	movs	r2, #10
 8014566:	4628      	mov	r0, r5
 8014568:	f000 fa4e 	bl	8014a08 <__multadd>
 801456c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801456e:	4682      	mov	sl, r0
 8014570:	f109 39ff 	add.w	r9, r9, #4294967295
 8014574:	2b00      	cmp	r3, #0
 8014576:	f000 8193 	beq.w	80148a0 <_dtoa_r+0xb98>
 801457a:	4631      	mov	r1, r6
 801457c:	2300      	movs	r3, #0
 801457e:	220a      	movs	r2, #10
 8014580:	4628      	mov	r0, r5
 8014582:	f000 fa41 	bl	8014a08 <__multadd>
 8014586:	f1bb 0f00 	cmp.w	fp, #0
 801458a:	4606      	mov	r6, r0
 801458c:	f300 8093 	bgt.w	80146b6 <_dtoa_r+0x9ae>
 8014590:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014592:	2b02      	cmp	r3, #2
 8014594:	dc57      	bgt.n	8014646 <_dtoa_r+0x93e>
 8014596:	e08e      	b.n	80146b6 <_dtoa_r+0x9ae>
 8014598:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801459a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801459e:	e756      	b.n	801444e <_dtoa_r+0x746>
 80145a0:	9b02      	ldr	r3, [sp, #8]
 80145a2:	1e5c      	subs	r4, r3, #1
 80145a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145a6:	42a3      	cmp	r3, r4
 80145a8:	bfb7      	itett	lt
 80145aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80145ac:	1b1c      	subge	r4, r3, r4
 80145ae:	1ae2      	sublt	r2, r4, r3
 80145b0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80145b2:	bfbe      	ittt	lt
 80145b4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80145b6:	189b      	addlt	r3, r3, r2
 80145b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80145ba:	9b02      	ldr	r3, [sp, #8]
 80145bc:	bfb8      	it	lt
 80145be:	2400      	movlt	r4, #0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	bfbb      	ittet	lt
 80145c4:	9b06      	ldrlt	r3, [sp, #24]
 80145c6:	9a02      	ldrlt	r2, [sp, #8]
 80145c8:	9f06      	ldrge	r7, [sp, #24]
 80145ca:	1a9f      	sublt	r7, r3, r2
 80145cc:	bfac      	ite	ge
 80145ce:	9b02      	ldrge	r3, [sp, #8]
 80145d0:	2300      	movlt	r3, #0
 80145d2:	e73e      	b.n	8014452 <_dtoa_r+0x74a>
 80145d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80145d6:	9f06      	ldr	r7, [sp, #24]
 80145d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80145da:	e745      	b.n	8014468 <_dtoa_r+0x760>
 80145dc:	3fe00000 	.word	0x3fe00000
 80145e0:	40240000 	.word	0x40240000
 80145e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145e6:	e76a      	b.n	80144be <_dtoa_r+0x7b6>
 80145e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	dc19      	bgt.n	8014622 <_dtoa_r+0x91a>
 80145ee:	9b04      	ldr	r3, [sp, #16]
 80145f0:	b9bb      	cbnz	r3, 8014622 <_dtoa_r+0x91a>
 80145f2:	9b05      	ldr	r3, [sp, #20]
 80145f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145f8:	b99b      	cbnz	r3, 8014622 <_dtoa_r+0x91a>
 80145fa:	9b05      	ldr	r3, [sp, #20]
 80145fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014600:	0d1b      	lsrs	r3, r3, #20
 8014602:	051b      	lsls	r3, r3, #20
 8014604:	b183      	cbz	r3, 8014628 <_dtoa_r+0x920>
 8014606:	f04f 0801 	mov.w	r8, #1
 801460a:	9b06      	ldr	r3, [sp, #24]
 801460c:	3301      	adds	r3, #1
 801460e:	9306      	str	r3, [sp, #24]
 8014610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014612:	3301      	adds	r3, #1
 8014614:	9309      	str	r3, [sp, #36]	; 0x24
 8014616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014618:	2b00      	cmp	r3, #0
 801461a:	f47f af6a 	bne.w	80144f2 <_dtoa_r+0x7ea>
 801461e:	2001      	movs	r0, #1
 8014620:	e76f      	b.n	8014502 <_dtoa_r+0x7fa>
 8014622:	f04f 0800 	mov.w	r8, #0
 8014626:	e7f6      	b.n	8014616 <_dtoa_r+0x90e>
 8014628:	4698      	mov	r8, r3
 801462a:	e7f4      	b.n	8014616 <_dtoa_r+0x90e>
 801462c:	f43f af7d 	beq.w	801452a <_dtoa_r+0x822>
 8014630:	4618      	mov	r0, r3
 8014632:	301c      	adds	r0, #28
 8014634:	e772      	b.n	801451c <_dtoa_r+0x814>
 8014636:	9b02      	ldr	r3, [sp, #8]
 8014638:	2b00      	cmp	r3, #0
 801463a:	dc36      	bgt.n	80146aa <_dtoa_r+0x9a2>
 801463c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801463e:	2b02      	cmp	r3, #2
 8014640:	dd33      	ble.n	80146aa <_dtoa_r+0x9a2>
 8014642:	f8dd b008 	ldr.w	fp, [sp, #8]
 8014646:	f1bb 0f00 	cmp.w	fp, #0
 801464a:	d10d      	bne.n	8014668 <_dtoa_r+0x960>
 801464c:	4621      	mov	r1, r4
 801464e:	465b      	mov	r3, fp
 8014650:	2205      	movs	r2, #5
 8014652:	4628      	mov	r0, r5
 8014654:	f000 f9d8 	bl	8014a08 <__multadd>
 8014658:	4601      	mov	r1, r0
 801465a:	4604      	mov	r4, r0
 801465c:	4650      	mov	r0, sl
 801465e:	f000 fbeb 	bl	8014e38 <__mcmp>
 8014662:	2800      	cmp	r0, #0
 8014664:	f73f adb6 	bgt.w	80141d4 <_dtoa_r+0x4cc>
 8014668:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801466a:	9f08      	ldr	r7, [sp, #32]
 801466c:	ea6f 0903 	mvn.w	r9, r3
 8014670:	f04f 0800 	mov.w	r8, #0
 8014674:	4621      	mov	r1, r4
 8014676:	4628      	mov	r0, r5
 8014678:	f000 f9a4 	bl	80149c4 <_Bfree>
 801467c:	2e00      	cmp	r6, #0
 801467e:	f43f aea4 	beq.w	80143ca <_dtoa_r+0x6c2>
 8014682:	f1b8 0f00 	cmp.w	r8, #0
 8014686:	d005      	beq.n	8014694 <_dtoa_r+0x98c>
 8014688:	45b0      	cmp	r8, r6
 801468a:	d003      	beq.n	8014694 <_dtoa_r+0x98c>
 801468c:	4641      	mov	r1, r8
 801468e:	4628      	mov	r0, r5
 8014690:	f000 f998 	bl	80149c4 <_Bfree>
 8014694:	4631      	mov	r1, r6
 8014696:	4628      	mov	r0, r5
 8014698:	f000 f994 	bl	80149c4 <_Bfree>
 801469c:	e695      	b.n	80143ca <_dtoa_r+0x6c2>
 801469e:	2400      	movs	r4, #0
 80146a0:	4626      	mov	r6, r4
 80146a2:	e7e1      	b.n	8014668 <_dtoa_r+0x960>
 80146a4:	46c1      	mov	r9, r8
 80146a6:	4626      	mov	r6, r4
 80146a8:	e594      	b.n	80141d4 <_dtoa_r+0x4cc>
 80146aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146ac:	f8dd b008 	ldr.w	fp, [sp, #8]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	f000 80fc 	beq.w	80148ae <_dtoa_r+0xba6>
 80146b6:	2f00      	cmp	r7, #0
 80146b8:	dd05      	ble.n	80146c6 <_dtoa_r+0x9be>
 80146ba:	4631      	mov	r1, r6
 80146bc:	463a      	mov	r2, r7
 80146be:	4628      	mov	r0, r5
 80146c0:	f000 fb4e 	bl	8014d60 <__lshift>
 80146c4:	4606      	mov	r6, r0
 80146c6:	f1b8 0f00 	cmp.w	r8, #0
 80146ca:	d05c      	beq.n	8014786 <_dtoa_r+0xa7e>
 80146cc:	4628      	mov	r0, r5
 80146ce:	6871      	ldr	r1, [r6, #4]
 80146d0:	f000 f938 	bl	8014944 <_Balloc>
 80146d4:	4607      	mov	r7, r0
 80146d6:	b928      	cbnz	r0, 80146e4 <_dtoa_r+0x9dc>
 80146d8:	4602      	mov	r2, r0
 80146da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80146de:	4b7e      	ldr	r3, [pc, #504]	; (80148d8 <_dtoa_r+0xbd0>)
 80146e0:	f7ff bb26 	b.w	8013d30 <_dtoa_r+0x28>
 80146e4:	6932      	ldr	r2, [r6, #16]
 80146e6:	f106 010c 	add.w	r1, r6, #12
 80146ea:	3202      	adds	r2, #2
 80146ec:	0092      	lsls	r2, r2, #2
 80146ee:	300c      	adds	r0, #12
 80146f0:	f7fe fca2 	bl	8013038 <memcpy>
 80146f4:	2201      	movs	r2, #1
 80146f6:	4639      	mov	r1, r7
 80146f8:	4628      	mov	r0, r5
 80146fa:	f000 fb31 	bl	8014d60 <__lshift>
 80146fe:	46b0      	mov	r8, r6
 8014700:	4606      	mov	r6, r0
 8014702:	9b08      	ldr	r3, [sp, #32]
 8014704:	3301      	adds	r3, #1
 8014706:	9302      	str	r3, [sp, #8]
 8014708:	9b08      	ldr	r3, [sp, #32]
 801470a:	445b      	add	r3, fp
 801470c:	930a      	str	r3, [sp, #40]	; 0x28
 801470e:	9b04      	ldr	r3, [sp, #16]
 8014710:	f003 0301 	and.w	r3, r3, #1
 8014714:	9309      	str	r3, [sp, #36]	; 0x24
 8014716:	9b02      	ldr	r3, [sp, #8]
 8014718:	4621      	mov	r1, r4
 801471a:	4650      	mov	r0, sl
 801471c:	f103 3bff 	add.w	fp, r3, #4294967295
 8014720:	f7ff fa62 	bl	8013be8 <quorem>
 8014724:	4603      	mov	r3, r0
 8014726:	4641      	mov	r1, r8
 8014728:	3330      	adds	r3, #48	; 0x30
 801472a:	9004      	str	r0, [sp, #16]
 801472c:	4650      	mov	r0, sl
 801472e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014730:	f000 fb82 	bl	8014e38 <__mcmp>
 8014734:	4632      	mov	r2, r6
 8014736:	9006      	str	r0, [sp, #24]
 8014738:	4621      	mov	r1, r4
 801473a:	4628      	mov	r0, r5
 801473c:	f000 fb98 	bl	8014e70 <__mdiff>
 8014740:	68c2      	ldr	r2, [r0, #12]
 8014742:	4607      	mov	r7, r0
 8014744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014746:	bb02      	cbnz	r2, 801478a <_dtoa_r+0xa82>
 8014748:	4601      	mov	r1, r0
 801474a:	4650      	mov	r0, sl
 801474c:	f000 fb74 	bl	8014e38 <__mcmp>
 8014750:	4602      	mov	r2, r0
 8014752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014754:	4639      	mov	r1, r7
 8014756:	4628      	mov	r0, r5
 8014758:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 801475c:	f000 f932 	bl	80149c4 <_Bfree>
 8014760:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014762:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014764:	9f02      	ldr	r7, [sp, #8]
 8014766:	ea43 0102 	orr.w	r1, r3, r2
 801476a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801476c:	430b      	orrs	r3, r1
 801476e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014770:	d10d      	bne.n	801478e <_dtoa_r+0xa86>
 8014772:	2b39      	cmp	r3, #57	; 0x39
 8014774:	d027      	beq.n	80147c6 <_dtoa_r+0xabe>
 8014776:	9a06      	ldr	r2, [sp, #24]
 8014778:	2a00      	cmp	r2, #0
 801477a:	dd01      	ble.n	8014780 <_dtoa_r+0xa78>
 801477c:	9b04      	ldr	r3, [sp, #16]
 801477e:	3331      	adds	r3, #49	; 0x31
 8014780:	f88b 3000 	strb.w	r3, [fp]
 8014784:	e776      	b.n	8014674 <_dtoa_r+0x96c>
 8014786:	4630      	mov	r0, r6
 8014788:	e7b9      	b.n	80146fe <_dtoa_r+0x9f6>
 801478a:	2201      	movs	r2, #1
 801478c:	e7e2      	b.n	8014754 <_dtoa_r+0xa4c>
 801478e:	9906      	ldr	r1, [sp, #24]
 8014790:	2900      	cmp	r1, #0
 8014792:	db04      	blt.n	801479e <_dtoa_r+0xa96>
 8014794:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014796:	4301      	orrs	r1, r0
 8014798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801479a:	4301      	orrs	r1, r0
 801479c:	d120      	bne.n	80147e0 <_dtoa_r+0xad8>
 801479e:	2a00      	cmp	r2, #0
 80147a0:	ddee      	ble.n	8014780 <_dtoa_r+0xa78>
 80147a2:	4651      	mov	r1, sl
 80147a4:	2201      	movs	r2, #1
 80147a6:	4628      	mov	r0, r5
 80147a8:	9302      	str	r3, [sp, #8]
 80147aa:	f000 fad9 	bl	8014d60 <__lshift>
 80147ae:	4621      	mov	r1, r4
 80147b0:	4682      	mov	sl, r0
 80147b2:	f000 fb41 	bl	8014e38 <__mcmp>
 80147b6:	2800      	cmp	r0, #0
 80147b8:	9b02      	ldr	r3, [sp, #8]
 80147ba:	dc02      	bgt.n	80147c2 <_dtoa_r+0xaba>
 80147bc:	d1e0      	bne.n	8014780 <_dtoa_r+0xa78>
 80147be:	07da      	lsls	r2, r3, #31
 80147c0:	d5de      	bpl.n	8014780 <_dtoa_r+0xa78>
 80147c2:	2b39      	cmp	r3, #57	; 0x39
 80147c4:	d1da      	bne.n	801477c <_dtoa_r+0xa74>
 80147c6:	2339      	movs	r3, #57	; 0x39
 80147c8:	f88b 3000 	strb.w	r3, [fp]
 80147cc:	463b      	mov	r3, r7
 80147ce:	461f      	mov	r7, r3
 80147d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80147d4:	3b01      	subs	r3, #1
 80147d6:	2a39      	cmp	r2, #57	; 0x39
 80147d8:	d050      	beq.n	801487c <_dtoa_r+0xb74>
 80147da:	3201      	adds	r2, #1
 80147dc:	701a      	strb	r2, [r3, #0]
 80147de:	e749      	b.n	8014674 <_dtoa_r+0x96c>
 80147e0:	2a00      	cmp	r2, #0
 80147e2:	dd03      	ble.n	80147ec <_dtoa_r+0xae4>
 80147e4:	2b39      	cmp	r3, #57	; 0x39
 80147e6:	d0ee      	beq.n	80147c6 <_dtoa_r+0xabe>
 80147e8:	3301      	adds	r3, #1
 80147ea:	e7c9      	b.n	8014780 <_dtoa_r+0xa78>
 80147ec:	9a02      	ldr	r2, [sp, #8]
 80147ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80147f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80147f4:	428a      	cmp	r2, r1
 80147f6:	d02a      	beq.n	801484e <_dtoa_r+0xb46>
 80147f8:	4651      	mov	r1, sl
 80147fa:	2300      	movs	r3, #0
 80147fc:	220a      	movs	r2, #10
 80147fe:	4628      	mov	r0, r5
 8014800:	f000 f902 	bl	8014a08 <__multadd>
 8014804:	45b0      	cmp	r8, r6
 8014806:	4682      	mov	sl, r0
 8014808:	f04f 0300 	mov.w	r3, #0
 801480c:	f04f 020a 	mov.w	r2, #10
 8014810:	4641      	mov	r1, r8
 8014812:	4628      	mov	r0, r5
 8014814:	d107      	bne.n	8014826 <_dtoa_r+0xb1e>
 8014816:	f000 f8f7 	bl	8014a08 <__multadd>
 801481a:	4680      	mov	r8, r0
 801481c:	4606      	mov	r6, r0
 801481e:	9b02      	ldr	r3, [sp, #8]
 8014820:	3301      	adds	r3, #1
 8014822:	9302      	str	r3, [sp, #8]
 8014824:	e777      	b.n	8014716 <_dtoa_r+0xa0e>
 8014826:	f000 f8ef 	bl	8014a08 <__multadd>
 801482a:	4631      	mov	r1, r6
 801482c:	4680      	mov	r8, r0
 801482e:	2300      	movs	r3, #0
 8014830:	220a      	movs	r2, #10
 8014832:	4628      	mov	r0, r5
 8014834:	f000 f8e8 	bl	8014a08 <__multadd>
 8014838:	4606      	mov	r6, r0
 801483a:	e7f0      	b.n	801481e <_dtoa_r+0xb16>
 801483c:	f1bb 0f00 	cmp.w	fp, #0
 8014840:	bfcc      	ite	gt
 8014842:	465f      	movgt	r7, fp
 8014844:	2701      	movle	r7, #1
 8014846:	f04f 0800 	mov.w	r8, #0
 801484a:	9a08      	ldr	r2, [sp, #32]
 801484c:	4417      	add	r7, r2
 801484e:	4651      	mov	r1, sl
 8014850:	2201      	movs	r2, #1
 8014852:	4628      	mov	r0, r5
 8014854:	9302      	str	r3, [sp, #8]
 8014856:	f000 fa83 	bl	8014d60 <__lshift>
 801485a:	4621      	mov	r1, r4
 801485c:	4682      	mov	sl, r0
 801485e:	f000 faeb 	bl	8014e38 <__mcmp>
 8014862:	2800      	cmp	r0, #0
 8014864:	dcb2      	bgt.n	80147cc <_dtoa_r+0xac4>
 8014866:	d102      	bne.n	801486e <_dtoa_r+0xb66>
 8014868:	9b02      	ldr	r3, [sp, #8]
 801486a:	07db      	lsls	r3, r3, #31
 801486c:	d4ae      	bmi.n	80147cc <_dtoa_r+0xac4>
 801486e:	463b      	mov	r3, r7
 8014870:	461f      	mov	r7, r3
 8014872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014876:	2a30      	cmp	r2, #48	; 0x30
 8014878:	d0fa      	beq.n	8014870 <_dtoa_r+0xb68>
 801487a:	e6fb      	b.n	8014674 <_dtoa_r+0x96c>
 801487c:	9a08      	ldr	r2, [sp, #32]
 801487e:	429a      	cmp	r2, r3
 8014880:	d1a5      	bne.n	80147ce <_dtoa_r+0xac6>
 8014882:	2331      	movs	r3, #49	; 0x31
 8014884:	f109 0901 	add.w	r9, r9, #1
 8014888:	7013      	strb	r3, [r2, #0]
 801488a:	e6f3      	b.n	8014674 <_dtoa_r+0x96c>
 801488c:	4b13      	ldr	r3, [pc, #76]	; (80148dc <_dtoa_r+0xbd4>)
 801488e:	f7ff baa7 	b.w	8013de0 <_dtoa_r+0xd8>
 8014892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014894:	2b00      	cmp	r3, #0
 8014896:	f47f aa80 	bne.w	8013d9a <_dtoa_r+0x92>
 801489a:	4b11      	ldr	r3, [pc, #68]	; (80148e0 <_dtoa_r+0xbd8>)
 801489c:	f7ff baa0 	b.w	8013de0 <_dtoa_r+0xd8>
 80148a0:	f1bb 0f00 	cmp.w	fp, #0
 80148a4:	dc03      	bgt.n	80148ae <_dtoa_r+0xba6>
 80148a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80148a8:	2b02      	cmp	r3, #2
 80148aa:	f73f aecc 	bgt.w	8014646 <_dtoa_r+0x93e>
 80148ae:	9f08      	ldr	r7, [sp, #32]
 80148b0:	4621      	mov	r1, r4
 80148b2:	4650      	mov	r0, sl
 80148b4:	f7ff f998 	bl	8013be8 <quorem>
 80148b8:	9a08      	ldr	r2, [sp, #32]
 80148ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80148be:	f807 3b01 	strb.w	r3, [r7], #1
 80148c2:	1aba      	subs	r2, r7, r2
 80148c4:	4593      	cmp	fp, r2
 80148c6:	ddb9      	ble.n	801483c <_dtoa_r+0xb34>
 80148c8:	4651      	mov	r1, sl
 80148ca:	2300      	movs	r3, #0
 80148cc:	220a      	movs	r2, #10
 80148ce:	4628      	mov	r0, r5
 80148d0:	f000 f89a 	bl	8014a08 <__multadd>
 80148d4:	4682      	mov	sl, r0
 80148d6:	e7eb      	b.n	80148b0 <_dtoa_r+0xba8>
 80148d8:	08017ece 	.word	0x08017ece
 80148dc:	08017d8c 	.word	0x08017d8c
 80148e0:	08017e62 	.word	0x08017e62

080148e4 <fiprintf>:
 80148e4:	b40e      	push	{r1, r2, r3}
 80148e6:	b503      	push	{r0, r1, lr}
 80148e8:	4601      	mov	r1, r0
 80148ea:	ab03      	add	r3, sp, #12
 80148ec:	4805      	ldr	r0, [pc, #20]	; (8014904 <fiprintf+0x20>)
 80148ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80148f2:	6800      	ldr	r0, [r0, #0]
 80148f4:	9301      	str	r3, [sp, #4]
 80148f6:	f000 fd39 	bl	801536c <_vfiprintf_r>
 80148fa:	b002      	add	sp, #8
 80148fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014900:	b003      	add	sp, #12
 8014902:	4770      	bx	lr
 8014904:	20000124 	.word	0x20000124

08014908 <_localeconv_r>:
 8014908:	4800      	ldr	r0, [pc, #0]	; (801490c <_localeconv_r+0x4>)
 801490a:	4770      	bx	lr
 801490c:	20000278 	.word	0x20000278

08014910 <memchr>:
 8014910:	4603      	mov	r3, r0
 8014912:	b510      	push	{r4, lr}
 8014914:	b2c9      	uxtb	r1, r1
 8014916:	4402      	add	r2, r0
 8014918:	4293      	cmp	r3, r2
 801491a:	4618      	mov	r0, r3
 801491c:	d101      	bne.n	8014922 <memchr+0x12>
 801491e:	2000      	movs	r0, #0
 8014920:	e003      	b.n	801492a <memchr+0x1a>
 8014922:	7804      	ldrb	r4, [r0, #0]
 8014924:	3301      	adds	r3, #1
 8014926:	428c      	cmp	r4, r1
 8014928:	d1f6      	bne.n	8014918 <memchr+0x8>
 801492a:	bd10      	pop	{r4, pc}

0801492c <__malloc_lock>:
 801492c:	4801      	ldr	r0, [pc, #4]	; (8014934 <__malloc_lock+0x8>)
 801492e:	f001 b8cd 	b.w	8015acc <__retarget_lock_acquire_recursive>
 8014932:	bf00      	nop
 8014934:	2000a724 	.word	0x2000a724

08014938 <__malloc_unlock>:
 8014938:	4801      	ldr	r0, [pc, #4]	; (8014940 <__malloc_unlock+0x8>)
 801493a:	f001 b8c8 	b.w	8015ace <__retarget_lock_release_recursive>
 801493e:	bf00      	nop
 8014940:	2000a724 	.word	0x2000a724

08014944 <_Balloc>:
 8014944:	b570      	push	{r4, r5, r6, lr}
 8014946:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014948:	4604      	mov	r4, r0
 801494a:	460d      	mov	r5, r1
 801494c:	b976      	cbnz	r6, 801496c <_Balloc+0x28>
 801494e:	2010      	movs	r0, #16
 8014950:	f7fe fb54 	bl	8012ffc <malloc>
 8014954:	4602      	mov	r2, r0
 8014956:	6260      	str	r0, [r4, #36]	; 0x24
 8014958:	b920      	cbnz	r0, 8014964 <_Balloc+0x20>
 801495a:	2166      	movs	r1, #102	; 0x66
 801495c:	4b17      	ldr	r3, [pc, #92]	; (80149bc <_Balloc+0x78>)
 801495e:	4818      	ldr	r0, [pc, #96]	; (80149c0 <_Balloc+0x7c>)
 8014960:	f7ff f924 	bl	8013bac <__assert_func>
 8014964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014968:	6006      	str	r6, [r0, #0]
 801496a:	60c6      	str	r6, [r0, #12]
 801496c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801496e:	68f3      	ldr	r3, [r6, #12]
 8014970:	b183      	cbz	r3, 8014994 <_Balloc+0x50>
 8014972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801497a:	b9b8      	cbnz	r0, 80149ac <_Balloc+0x68>
 801497c:	2101      	movs	r1, #1
 801497e:	fa01 f605 	lsl.w	r6, r1, r5
 8014982:	1d72      	adds	r2, r6, #5
 8014984:	4620      	mov	r0, r4
 8014986:	0092      	lsls	r2, r2, #2
 8014988:	f000 fb5e 	bl	8015048 <_calloc_r>
 801498c:	b160      	cbz	r0, 80149a8 <_Balloc+0x64>
 801498e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014992:	e00e      	b.n	80149b2 <_Balloc+0x6e>
 8014994:	2221      	movs	r2, #33	; 0x21
 8014996:	2104      	movs	r1, #4
 8014998:	4620      	mov	r0, r4
 801499a:	f000 fb55 	bl	8015048 <_calloc_r>
 801499e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149a0:	60f0      	str	r0, [r6, #12]
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d1e4      	bne.n	8014972 <_Balloc+0x2e>
 80149a8:	2000      	movs	r0, #0
 80149aa:	bd70      	pop	{r4, r5, r6, pc}
 80149ac:	6802      	ldr	r2, [r0, #0]
 80149ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80149b2:	2300      	movs	r3, #0
 80149b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80149b8:	e7f7      	b.n	80149aa <_Balloc+0x66>
 80149ba:	bf00      	nop
 80149bc:	08017db0 	.word	0x08017db0
 80149c0:	08017edf 	.word	0x08017edf

080149c4 <_Bfree>:
 80149c4:	b570      	push	{r4, r5, r6, lr}
 80149c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80149c8:	4605      	mov	r5, r0
 80149ca:	460c      	mov	r4, r1
 80149cc:	b976      	cbnz	r6, 80149ec <_Bfree+0x28>
 80149ce:	2010      	movs	r0, #16
 80149d0:	f7fe fb14 	bl	8012ffc <malloc>
 80149d4:	4602      	mov	r2, r0
 80149d6:	6268      	str	r0, [r5, #36]	; 0x24
 80149d8:	b920      	cbnz	r0, 80149e4 <_Bfree+0x20>
 80149da:	218a      	movs	r1, #138	; 0x8a
 80149dc:	4b08      	ldr	r3, [pc, #32]	; (8014a00 <_Bfree+0x3c>)
 80149de:	4809      	ldr	r0, [pc, #36]	; (8014a04 <_Bfree+0x40>)
 80149e0:	f7ff f8e4 	bl	8013bac <__assert_func>
 80149e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149e8:	6006      	str	r6, [r0, #0]
 80149ea:	60c6      	str	r6, [r0, #12]
 80149ec:	b13c      	cbz	r4, 80149fe <_Bfree+0x3a>
 80149ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80149f0:	6862      	ldr	r2, [r4, #4]
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149f8:	6021      	str	r1, [r4, #0]
 80149fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80149fe:	bd70      	pop	{r4, r5, r6, pc}
 8014a00:	08017db0 	.word	0x08017db0
 8014a04:	08017edf 	.word	0x08017edf

08014a08 <__multadd>:
 8014a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a0c:	4698      	mov	r8, r3
 8014a0e:	460c      	mov	r4, r1
 8014a10:	2300      	movs	r3, #0
 8014a12:	690e      	ldr	r6, [r1, #16]
 8014a14:	4607      	mov	r7, r0
 8014a16:	f101 0014 	add.w	r0, r1, #20
 8014a1a:	6805      	ldr	r5, [r0, #0]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	b2a9      	uxth	r1, r5
 8014a20:	fb02 8101 	mla	r1, r2, r1, r8
 8014a24:	0c2d      	lsrs	r5, r5, #16
 8014a26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014a2a:	fb02 c505 	mla	r5, r2, r5, ip
 8014a2e:	b289      	uxth	r1, r1
 8014a30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014a34:	429e      	cmp	r6, r3
 8014a36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014a3a:	f840 1b04 	str.w	r1, [r0], #4
 8014a3e:	dcec      	bgt.n	8014a1a <__multadd+0x12>
 8014a40:	f1b8 0f00 	cmp.w	r8, #0
 8014a44:	d022      	beq.n	8014a8c <__multadd+0x84>
 8014a46:	68a3      	ldr	r3, [r4, #8]
 8014a48:	42b3      	cmp	r3, r6
 8014a4a:	dc19      	bgt.n	8014a80 <__multadd+0x78>
 8014a4c:	6861      	ldr	r1, [r4, #4]
 8014a4e:	4638      	mov	r0, r7
 8014a50:	3101      	adds	r1, #1
 8014a52:	f7ff ff77 	bl	8014944 <_Balloc>
 8014a56:	4605      	mov	r5, r0
 8014a58:	b928      	cbnz	r0, 8014a66 <__multadd+0x5e>
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	21b5      	movs	r1, #181	; 0xb5
 8014a5e:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <__multadd+0x8c>)
 8014a60:	480d      	ldr	r0, [pc, #52]	; (8014a98 <__multadd+0x90>)
 8014a62:	f7ff f8a3 	bl	8013bac <__assert_func>
 8014a66:	6922      	ldr	r2, [r4, #16]
 8014a68:	f104 010c 	add.w	r1, r4, #12
 8014a6c:	3202      	adds	r2, #2
 8014a6e:	0092      	lsls	r2, r2, #2
 8014a70:	300c      	adds	r0, #12
 8014a72:	f7fe fae1 	bl	8013038 <memcpy>
 8014a76:	4621      	mov	r1, r4
 8014a78:	4638      	mov	r0, r7
 8014a7a:	f7ff ffa3 	bl	80149c4 <_Bfree>
 8014a7e:	462c      	mov	r4, r5
 8014a80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014a84:	3601      	adds	r6, #1
 8014a86:	f8c3 8014 	str.w	r8, [r3, #20]
 8014a8a:	6126      	str	r6, [r4, #16]
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a92:	bf00      	nop
 8014a94:	08017ece 	.word	0x08017ece
 8014a98:	08017edf 	.word	0x08017edf

08014a9c <__hi0bits>:
 8014a9c:	0c02      	lsrs	r2, r0, #16
 8014a9e:	0412      	lsls	r2, r2, #16
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	b9ca      	cbnz	r2, 8014ad8 <__hi0bits+0x3c>
 8014aa4:	0403      	lsls	r3, r0, #16
 8014aa6:	2010      	movs	r0, #16
 8014aa8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014aac:	bf04      	itt	eq
 8014aae:	021b      	lsleq	r3, r3, #8
 8014ab0:	3008      	addeq	r0, #8
 8014ab2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014ab6:	bf04      	itt	eq
 8014ab8:	011b      	lsleq	r3, r3, #4
 8014aba:	3004      	addeq	r0, #4
 8014abc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014ac0:	bf04      	itt	eq
 8014ac2:	009b      	lsleq	r3, r3, #2
 8014ac4:	3002      	addeq	r0, #2
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	db05      	blt.n	8014ad6 <__hi0bits+0x3a>
 8014aca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014ace:	f100 0001 	add.w	r0, r0, #1
 8014ad2:	bf08      	it	eq
 8014ad4:	2020      	moveq	r0, #32
 8014ad6:	4770      	bx	lr
 8014ad8:	2000      	movs	r0, #0
 8014ada:	e7e5      	b.n	8014aa8 <__hi0bits+0xc>

08014adc <__lo0bits>:
 8014adc:	6803      	ldr	r3, [r0, #0]
 8014ade:	4602      	mov	r2, r0
 8014ae0:	f013 0007 	ands.w	r0, r3, #7
 8014ae4:	d00b      	beq.n	8014afe <__lo0bits+0x22>
 8014ae6:	07d9      	lsls	r1, r3, #31
 8014ae8:	d422      	bmi.n	8014b30 <__lo0bits+0x54>
 8014aea:	0798      	lsls	r0, r3, #30
 8014aec:	bf49      	itett	mi
 8014aee:	085b      	lsrmi	r3, r3, #1
 8014af0:	089b      	lsrpl	r3, r3, #2
 8014af2:	2001      	movmi	r0, #1
 8014af4:	6013      	strmi	r3, [r2, #0]
 8014af6:	bf5c      	itt	pl
 8014af8:	2002      	movpl	r0, #2
 8014afa:	6013      	strpl	r3, [r2, #0]
 8014afc:	4770      	bx	lr
 8014afe:	b299      	uxth	r1, r3
 8014b00:	b909      	cbnz	r1, 8014b06 <__lo0bits+0x2a>
 8014b02:	2010      	movs	r0, #16
 8014b04:	0c1b      	lsrs	r3, r3, #16
 8014b06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014b0a:	bf04      	itt	eq
 8014b0c:	0a1b      	lsreq	r3, r3, #8
 8014b0e:	3008      	addeq	r0, #8
 8014b10:	0719      	lsls	r1, r3, #28
 8014b12:	bf04      	itt	eq
 8014b14:	091b      	lsreq	r3, r3, #4
 8014b16:	3004      	addeq	r0, #4
 8014b18:	0799      	lsls	r1, r3, #30
 8014b1a:	bf04      	itt	eq
 8014b1c:	089b      	lsreq	r3, r3, #2
 8014b1e:	3002      	addeq	r0, #2
 8014b20:	07d9      	lsls	r1, r3, #31
 8014b22:	d403      	bmi.n	8014b2c <__lo0bits+0x50>
 8014b24:	085b      	lsrs	r3, r3, #1
 8014b26:	f100 0001 	add.w	r0, r0, #1
 8014b2a:	d003      	beq.n	8014b34 <__lo0bits+0x58>
 8014b2c:	6013      	str	r3, [r2, #0]
 8014b2e:	4770      	bx	lr
 8014b30:	2000      	movs	r0, #0
 8014b32:	4770      	bx	lr
 8014b34:	2020      	movs	r0, #32
 8014b36:	4770      	bx	lr

08014b38 <__i2b>:
 8014b38:	b510      	push	{r4, lr}
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	2101      	movs	r1, #1
 8014b3e:	f7ff ff01 	bl	8014944 <_Balloc>
 8014b42:	4602      	mov	r2, r0
 8014b44:	b928      	cbnz	r0, 8014b52 <__i2b+0x1a>
 8014b46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014b4a:	4b04      	ldr	r3, [pc, #16]	; (8014b5c <__i2b+0x24>)
 8014b4c:	4804      	ldr	r0, [pc, #16]	; (8014b60 <__i2b+0x28>)
 8014b4e:	f7ff f82d 	bl	8013bac <__assert_func>
 8014b52:	2301      	movs	r3, #1
 8014b54:	6144      	str	r4, [r0, #20]
 8014b56:	6103      	str	r3, [r0, #16]
 8014b58:	bd10      	pop	{r4, pc}
 8014b5a:	bf00      	nop
 8014b5c:	08017ece 	.word	0x08017ece
 8014b60:	08017edf 	.word	0x08017edf

08014b64 <__multiply>:
 8014b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b68:	4614      	mov	r4, r2
 8014b6a:	690a      	ldr	r2, [r1, #16]
 8014b6c:	6923      	ldr	r3, [r4, #16]
 8014b6e:	460d      	mov	r5, r1
 8014b70:	429a      	cmp	r2, r3
 8014b72:	bfbe      	ittt	lt
 8014b74:	460b      	movlt	r3, r1
 8014b76:	4625      	movlt	r5, r4
 8014b78:	461c      	movlt	r4, r3
 8014b7a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014b7e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b82:	68ab      	ldr	r3, [r5, #8]
 8014b84:	6869      	ldr	r1, [r5, #4]
 8014b86:	eb0a 0709 	add.w	r7, sl, r9
 8014b8a:	42bb      	cmp	r3, r7
 8014b8c:	b085      	sub	sp, #20
 8014b8e:	bfb8      	it	lt
 8014b90:	3101      	addlt	r1, #1
 8014b92:	f7ff fed7 	bl	8014944 <_Balloc>
 8014b96:	b930      	cbnz	r0, 8014ba6 <__multiply+0x42>
 8014b98:	4602      	mov	r2, r0
 8014b9a:	f240 115d 	movw	r1, #349	; 0x15d
 8014b9e:	4b41      	ldr	r3, [pc, #260]	; (8014ca4 <__multiply+0x140>)
 8014ba0:	4841      	ldr	r0, [pc, #260]	; (8014ca8 <__multiply+0x144>)
 8014ba2:	f7ff f803 	bl	8013bac <__assert_func>
 8014ba6:	f100 0614 	add.w	r6, r0, #20
 8014baa:	4633      	mov	r3, r6
 8014bac:	2200      	movs	r2, #0
 8014bae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014bb2:	4543      	cmp	r3, r8
 8014bb4:	d31e      	bcc.n	8014bf4 <__multiply+0x90>
 8014bb6:	f105 0c14 	add.w	ip, r5, #20
 8014bba:	f104 0314 	add.w	r3, r4, #20
 8014bbe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014bc2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014bc6:	9202      	str	r2, [sp, #8]
 8014bc8:	ebac 0205 	sub.w	r2, ip, r5
 8014bcc:	3a15      	subs	r2, #21
 8014bce:	f022 0203 	bic.w	r2, r2, #3
 8014bd2:	3204      	adds	r2, #4
 8014bd4:	f105 0115 	add.w	r1, r5, #21
 8014bd8:	458c      	cmp	ip, r1
 8014bda:	bf38      	it	cc
 8014bdc:	2204      	movcc	r2, #4
 8014bde:	9201      	str	r2, [sp, #4]
 8014be0:	9a02      	ldr	r2, [sp, #8]
 8014be2:	9303      	str	r3, [sp, #12]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d808      	bhi.n	8014bfa <__multiply+0x96>
 8014be8:	2f00      	cmp	r7, #0
 8014bea:	dc55      	bgt.n	8014c98 <__multiply+0x134>
 8014bec:	6107      	str	r7, [r0, #16]
 8014bee:	b005      	add	sp, #20
 8014bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf4:	f843 2b04 	str.w	r2, [r3], #4
 8014bf8:	e7db      	b.n	8014bb2 <__multiply+0x4e>
 8014bfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8014bfe:	f1ba 0f00 	cmp.w	sl, #0
 8014c02:	d020      	beq.n	8014c46 <__multiply+0xe2>
 8014c04:	46b1      	mov	r9, r6
 8014c06:	2200      	movs	r2, #0
 8014c08:	f105 0e14 	add.w	lr, r5, #20
 8014c0c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014c10:	f8d9 b000 	ldr.w	fp, [r9]
 8014c14:	b2a1      	uxth	r1, r4
 8014c16:	fa1f fb8b 	uxth.w	fp, fp
 8014c1a:	fb0a b101 	mla	r1, sl, r1, fp
 8014c1e:	4411      	add	r1, r2
 8014c20:	f8d9 2000 	ldr.w	r2, [r9]
 8014c24:	0c24      	lsrs	r4, r4, #16
 8014c26:	0c12      	lsrs	r2, r2, #16
 8014c28:	fb0a 2404 	mla	r4, sl, r4, r2
 8014c2c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014c30:	b289      	uxth	r1, r1
 8014c32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014c36:	45f4      	cmp	ip, lr
 8014c38:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014c3c:	f849 1b04 	str.w	r1, [r9], #4
 8014c40:	d8e4      	bhi.n	8014c0c <__multiply+0xa8>
 8014c42:	9901      	ldr	r1, [sp, #4]
 8014c44:	5072      	str	r2, [r6, r1]
 8014c46:	9a03      	ldr	r2, [sp, #12]
 8014c48:	3304      	adds	r3, #4
 8014c4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014c4e:	f1b9 0f00 	cmp.w	r9, #0
 8014c52:	d01f      	beq.n	8014c94 <__multiply+0x130>
 8014c54:	46b6      	mov	lr, r6
 8014c56:	f04f 0a00 	mov.w	sl, #0
 8014c5a:	6834      	ldr	r4, [r6, #0]
 8014c5c:	f105 0114 	add.w	r1, r5, #20
 8014c60:	880a      	ldrh	r2, [r1, #0]
 8014c62:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014c66:	b2a4      	uxth	r4, r4
 8014c68:	fb09 b202 	mla	r2, r9, r2, fp
 8014c6c:	4492      	add	sl, r2
 8014c6e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014c72:	f84e 4b04 	str.w	r4, [lr], #4
 8014c76:	f851 4b04 	ldr.w	r4, [r1], #4
 8014c7a:	f8be 2000 	ldrh.w	r2, [lr]
 8014c7e:	0c24      	lsrs	r4, r4, #16
 8014c80:	fb09 2404 	mla	r4, r9, r4, r2
 8014c84:	458c      	cmp	ip, r1
 8014c86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014c8a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014c8e:	d8e7      	bhi.n	8014c60 <__multiply+0xfc>
 8014c90:	9a01      	ldr	r2, [sp, #4]
 8014c92:	50b4      	str	r4, [r6, r2]
 8014c94:	3604      	adds	r6, #4
 8014c96:	e7a3      	b.n	8014be0 <__multiply+0x7c>
 8014c98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d1a5      	bne.n	8014bec <__multiply+0x88>
 8014ca0:	3f01      	subs	r7, #1
 8014ca2:	e7a1      	b.n	8014be8 <__multiply+0x84>
 8014ca4:	08017ece 	.word	0x08017ece
 8014ca8:	08017edf 	.word	0x08017edf

08014cac <__pow5mult>:
 8014cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cb0:	4615      	mov	r5, r2
 8014cb2:	f012 0203 	ands.w	r2, r2, #3
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	460f      	mov	r7, r1
 8014cba:	d007      	beq.n	8014ccc <__pow5mult+0x20>
 8014cbc:	4c25      	ldr	r4, [pc, #148]	; (8014d54 <__pow5mult+0xa8>)
 8014cbe:	3a01      	subs	r2, #1
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014cc6:	f7ff fe9f 	bl	8014a08 <__multadd>
 8014cca:	4607      	mov	r7, r0
 8014ccc:	10ad      	asrs	r5, r5, #2
 8014cce:	d03d      	beq.n	8014d4c <__pow5mult+0xa0>
 8014cd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014cd2:	b97c      	cbnz	r4, 8014cf4 <__pow5mult+0x48>
 8014cd4:	2010      	movs	r0, #16
 8014cd6:	f7fe f991 	bl	8012ffc <malloc>
 8014cda:	4602      	mov	r2, r0
 8014cdc:	6270      	str	r0, [r6, #36]	; 0x24
 8014cde:	b928      	cbnz	r0, 8014cec <__pow5mult+0x40>
 8014ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014ce4:	4b1c      	ldr	r3, [pc, #112]	; (8014d58 <__pow5mult+0xac>)
 8014ce6:	481d      	ldr	r0, [pc, #116]	; (8014d5c <__pow5mult+0xb0>)
 8014ce8:	f7fe ff60 	bl	8013bac <__assert_func>
 8014cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014cf0:	6004      	str	r4, [r0, #0]
 8014cf2:	60c4      	str	r4, [r0, #12]
 8014cf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014cfc:	b94c      	cbnz	r4, 8014d12 <__pow5mult+0x66>
 8014cfe:	f240 2171 	movw	r1, #625	; 0x271
 8014d02:	4630      	mov	r0, r6
 8014d04:	f7ff ff18 	bl	8014b38 <__i2b>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d10:	6003      	str	r3, [r0, #0]
 8014d12:	f04f 0900 	mov.w	r9, #0
 8014d16:	07eb      	lsls	r3, r5, #31
 8014d18:	d50a      	bpl.n	8014d30 <__pow5mult+0x84>
 8014d1a:	4639      	mov	r1, r7
 8014d1c:	4622      	mov	r2, r4
 8014d1e:	4630      	mov	r0, r6
 8014d20:	f7ff ff20 	bl	8014b64 <__multiply>
 8014d24:	4680      	mov	r8, r0
 8014d26:	4639      	mov	r1, r7
 8014d28:	4630      	mov	r0, r6
 8014d2a:	f7ff fe4b 	bl	80149c4 <_Bfree>
 8014d2e:	4647      	mov	r7, r8
 8014d30:	106d      	asrs	r5, r5, #1
 8014d32:	d00b      	beq.n	8014d4c <__pow5mult+0xa0>
 8014d34:	6820      	ldr	r0, [r4, #0]
 8014d36:	b938      	cbnz	r0, 8014d48 <__pow5mult+0x9c>
 8014d38:	4622      	mov	r2, r4
 8014d3a:	4621      	mov	r1, r4
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f7ff ff11 	bl	8014b64 <__multiply>
 8014d42:	6020      	str	r0, [r4, #0]
 8014d44:	f8c0 9000 	str.w	r9, [r0]
 8014d48:	4604      	mov	r4, r0
 8014d4a:	e7e4      	b.n	8014d16 <__pow5mult+0x6a>
 8014d4c:	4638      	mov	r0, r7
 8014d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d52:	bf00      	nop
 8014d54:	08018030 	.word	0x08018030
 8014d58:	08017db0 	.word	0x08017db0
 8014d5c:	08017edf 	.word	0x08017edf

08014d60 <__lshift>:
 8014d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d64:	460c      	mov	r4, r1
 8014d66:	4607      	mov	r7, r0
 8014d68:	4691      	mov	r9, r2
 8014d6a:	6923      	ldr	r3, [r4, #16]
 8014d6c:	6849      	ldr	r1, [r1, #4]
 8014d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d72:	68a3      	ldr	r3, [r4, #8]
 8014d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d78:	f108 0601 	add.w	r6, r8, #1
 8014d7c:	42b3      	cmp	r3, r6
 8014d7e:	db0b      	blt.n	8014d98 <__lshift+0x38>
 8014d80:	4638      	mov	r0, r7
 8014d82:	f7ff fddf 	bl	8014944 <_Balloc>
 8014d86:	4605      	mov	r5, r0
 8014d88:	b948      	cbnz	r0, 8014d9e <__lshift+0x3e>
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d90:	4b27      	ldr	r3, [pc, #156]	; (8014e30 <__lshift+0xd0>)
 8014d92:	4828      	ldr	r0, [pc, #160]	; (8014e34 <__lshift+0xd4>)
 8014d94:	f7fe ff0a 	bl	8013bac <__assert_func>
 8014d98:	3101      	adds	r1, #1
 8014d9a:	005b      	lsls	r3, r3, #1
 8014d9c:	e7ee      	b.n	8014d7c <__lshift+0x1c>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	f100 0114 	add.w	r1, r0, #20
 8014da4:	f100 0210 	add.w	r2, r0, #16
 8014da8:	4618      	mov	r0, r3
 8014daa:	4553      	cmp	r3, sl
 8014dac:	db33      	blt.n	8014e16 <__lshift+0xb6>
 8014dae:	6920      	ldr	r0, [r4, #16]
 8014db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014db4:	f104 0314 	add.w	r3, r4, #20
 8014db8:	f019 091f 	ands.w	r9, r9, #31
 8014dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014dc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014dc4:	d02b      	beq.n	8014e1e <__lshift+0xbe>
 8014dc6:	468a      	mov	sl, r1
 8014dc8:	2200      	movs	r2, #0
 8014dca:	f1c9 0e20 	rsb	lr, r9, #32
 8014dce:	6818      	ldr	r0, [r3, #0]
 8014dd0:	fa00 f009 	lsl.w	r0, r0, r9
 8014dd4:	4302      	orrs	r2, r0
 8014dd6:	f84a 2b04 	str.w	r2, [sl], #4
 8014dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dde:	459c      	cmp	ip, r3
 8014de0:	fa22 f20e 	lsr.w	r2, r2, lr
 8014de4:	d8f3      	bhi.n	8014dce <__lshift+0x6e>
 8014de6:	ebac 0304 	sub.w	r3, ip, r4
 8014dea:	3b15      	subs	r3, #21
 8014dec:	f023 0303 	bic.w	r3, r3, #3
 8014df0:	3304      	adds	r3, #4
 8014df2:	f104 0015 	add.w	r0, r4, #21
 8014df6:	4584      	cmp	ip, r0
 8014df8:	bf38      	it	cc
 8014dfa:	2304      	movcc	r3, #4
 8014dfc:	50ca      	str	r2, [r1, r3]
 8014dfe:	b10a      	cbz	r2, 8014e04 <__lshift+0xa4>
 8014e00:	f108 0602 	add.w	r6, r8, #2
 8014e04:	3e01      	subs	r6, #1
 8014e06:	4638      	mov	r0, r7
 8014e08:	4621      	mov	r1, r4
 8014e0a:	612e      	str	r6, [r5, #16]
 8014e0c:	f7ff fdda 	bl	80149c4 <_Bfree>
 8014e10:	4628      	mov	r0, r5
 8014e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e16:	f842 0f04 	str.w	r0, [r2, #4]!
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	e7c5      	b.n	8014daa <__lshift+0x4a>
 8014e1e:	3904      	subs	r1, #4
 8014e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e24:	459c      	cmp	ip, r3
 8014e26:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e2a:	d8f9      	bhi.n	8014e20 <__lshift+0xc0>
 8014e2c:	e7ea      	b.n	8014e04 <__lshift+0xa4>
 8014e2e:	bf00      	nop
 8014e30:	08017ece 	.word	0x08017ece
 8014e34:	08017edf 	.word	0x08017edf

08014e38 <__mcmp>:
 8014e38:	4603      	mov	r3, r0
 8014e3a:	690a      	ldr	r2, [r1, #16]
 8014e3c:	6900      	ldr	r0, [r0, #16]
 8014e3e:	b530      	push	{r4, r5, lr}
 8014e40:	1a80      	subs	r0, r0, r2
 8014e42:	d10d      	bne.n	8014e60 <__mcmp+0x28>
 8014e44:	3314      	adds	r3, #20
 8014e46:	3114      	adds	r1, #20
 8014e48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014e4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014e50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014e58:	4295      	cmp	r5, r2
 8014e5a:	d002      	beq.n	8014e62 <__mcmp+0x2a>
 8014e5c:	d304      	bcc.n	8014e68 <__mcmp+0x30>
 8014e5e:	2001      	movs	r0, #1
 8014e60:	bd30      	pop	{r4, r5, pc}
 8014e62:	42a3      	cmp	r3, r4
 8014e64:	d3f4      	bcc.n	8014e50 <__mcmp+0x18>
 8014e66:	e7fb      	b.n	8014e60 <__mcmp+0x28>
 8014e68:	f04f 30ff 	mov.w	r0, #4294967295
 8014e6c:	e7f8      	b.n	8014e60 <__mcmp+0x28>
	...

08014e70 <__mdiff>:
 8014e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e74:	460c      	mov	r4, r1
 8014e76:	4606      	mov	r6, r0
 8014e78:	4611      	mov	r1, r2
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	4692      	mov	sl, r2
 8014e7e:	f7ff ffdb 	bl	8014e38 <__mcmp>
 8014e82:	1e05      	subs	r5, r0, #0
 8014e84:	d111      	bne.n	8014eaa <__mdiff+0x3a>
 8014e86:	4629      	mov	r1, r5
 8014e88:	4630      	mov	r0, r6
 8014e8a:	f7ff fd5b 	bl	8014944 <_Balloc>
 8014e8e:	4602      	mov	r2, r0
 8014e90:	b928      	cbnz	r0, 8014e9e <__mdiff+0x2e>
 8014e92:	f240 2132 	movw	r1, #562	; 0x232
 8014e96:	4b3c      	ldr	r3, [pc, #240]	; (8014f88 <__mdiff+0x118>)
 8014e98:	483c      	ldr	r0, [pc, #240]	; (8014f8c <__mdiff+0x11c>)
 8014e9a:	f7fe fe87 	bl	8013bac <__assert_func>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ea4:	4610      	mov	r0, r2
 8014ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eaa:	bfa4      	itt	ge
 8014eac:	4653      	movge	r3, sl
 8014eae:	46a2      	movge	sl, r4
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8014eb6:	bfa6      	itte	ge
 8014eb8:	461c      	movge	r4, r3
 8014eba:	2500      	movge	r5, #0
 8014ebc:	2501      	movlt	r5, #1
 8014ebe:	f7ff fd41 	bl	8014944 <_Balloc>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	b918      	cbnz	r0, 8014ece <__mdiff+0x5e>
 8014ec6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014eca:	4b2f      	ldr	r3, [pc, #188]	; (8014f88 <__mdiff+0x118>)
 8014ecc:	e7e4      	b.n	8014e98 <__mdiff+0x28>
 8014ece:	f100 0814 	add.w	r8, r0, #20
 8014ed2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8014ed6:	60c5      	str	r5, [r0, #12]
 8014ed8:	f04f 0c00 	mov.w	ip, #0
 8014edc:	f10a 0514 	add.w	r5, sl, #20
 8014ee0:	f10a 0010 	add.w	r0, sl, #16
 8014ee4:	46c2      	mov	sl, r8
 8014ee6:	6926      	ldr	r6, [r4, #16]
 8014ee8:	f104 0914 	add.w	r9, r4, #20
 8014eec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8014ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014ef4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8014ef8:	f859 3b04 	ldr.w	r3, [r9], #4
 8014efc:	fa1f f18b 	uxth.w	r1, fp
 8014f00:	4461      	add	r1, ip
 8014f02:	fa1f fc83 	uxth.w	ip, r3
 8014f06:	0c1b      	lsrs	r3, r3, #16
 8014f08:	eba1 010c 	sub.w	r1, r1, ip
 8014f0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014f10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014f14:	b289      	uxth	r1, r1
 8014f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014f1a:	454e      	cmp	r6, r9
 8014f1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014f20:	f84a 3b04 	str.w	r3, [sl], #4
 8014f24:	d8e6      	bhi.n	8014ef4 <__mdiff+0x84>
 8014f26:	1b33      	subs	r3, r6, r4
 8014f28:	3b15      	subs	r3, #21
 8014f2a:	f023 0303 	bic.w	r3, r3, #3
 8014f2e:	3415      	adds	r4, #21
 8014f30:	3304      	adds	r3, #4
 8014f32:	42a6      	cmp	r6, r4
 8014f34:	bf38      	it	cc
 8014f36:	2304      	movcc	r3, #4
 8014f38:	441d      	add	r5, r3
 8014f3a:	4443      	add	r3, r8
 8014f3c:	461e      	mov	r6, r3
 8014f3e:	462c      	mov	r4, r5
 8014f40:	4574      	cmp	r4, lr
 8014f42:	d30e      	bcc.n	8014f62 <__mdiff+0xf2>
 8014f44:	f10e 0103 	add.w	r1, lr, #3
 8014f48:	1b49      	subs	r1, r1, r5
 8014f4a:	f021 0103 	bic.w	r1, r1, #3
 8014f4e:	3d03      	subs	r5, #3
 8014f50:	45ae      	cmp	lr, r5
 8014f52:	bf38      	it	cc
 8014f54:	2100      	movcc	r1, #0
 8014f56:	4419      	add	r1, r3
 8014f58:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014f5c:	b18b      	cbz	r3, 8014f82 <__mdiff+0x112>
 8014f5e:	6117      	str	r7, [r2, #16]
 8014f60:	e7a0      	b.n	8014ea4 <__mdiff+0x34>
 8014f62:	f854 8b04 	ldr.w	r8, [r4], #4
 8014f66:	fa1f f188 	uxth.w	r1, r8
 8014f6a:	4461      	add	r1, ip
 8014f6c:	1408      	asrs	r0, r1, #16
 8014f6e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8014f72:	b289      	uxth	r1, r1
 8014f74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014f78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f7c:	f846 1b04 	str.w	r1, [r6], #4
 8014f80:	e7de      	b.n	8014f40 <__mdiff+0xd0>
 8014f82:	3f01      	subs	r7, #1
 8014f84:	e7e8      	b.n	8014f58 <__mdiff+0xe8>
 8014f86:	bf00      	nop
 8014f88:	08017ece 	.word	0x08017ece
 8014f8c:	08017edf 	.word	0x08017edf

08014f90 <__d2b>:
 8014f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014f94:	2101      	movs	r1, #1
 8014f96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8014f9a:	4690      	mov	r8, r2
 8014f9c:	461d      	mov	r5, r3
 8014f9e:	f7ff fcd1 	bl	8014944 <_Balloc>
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	b930      	cbnz	r0, 8014fb4 <__d2b+0x24>
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8014fac:	4b24      	ldr	r3, [pc, #144]	; (8015040 <__d2b+0xb0>)
 8014fae:	4825      	ldr	r0, [pc, #148]	; (8015044 <__d2b+0xb4>)
 8014fb0:	f7fe fdfc 	bl	8013bac <__assert_func>
 8014fb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8014fb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014fbc:	bb2d      	cbnz	r5, 801500a <__d2b+0x7a>
 8014fbe:	9301      	str	r3, [sp, #4]
 8014fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8014fc4:	d026      	beq.n	8015014 <__d2b+0x84>
 8014fc6:	4668      	mov	r0, sp
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	f7ff fd87 	bl	8014adc <__lo0bits>
 8014fce:	9900      	ldr	r1, [sp, #0]
 8014fd0:	b1f0      	cbz	r0, 8015010 <__d2b+0x80>
 8014fd2:	9a01      	ldr	r2, [sp, #4]
 8014fd4:	f1c0 0320 	rsb	r3, r0, #32
 8014fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8014fdc:	430b      	orrs	r3, r1
 8014fde:	40c2      	lsrs	r2, r0
 8014fe0:	6163      	str	r3, [r4, #20]
 8014fe2:	9201      	str	r2, [sp, #4]
 8014fe4:	9b01      	ldr	r3, [sp, #4]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	bf14      	ite	ne
 8014fea:	2102      	movne	r1, #2
 8014fec:	2101      	moveq	r1, #1
 8014fee:	61a3      	str	r3, [r4, #24]
 8014ff0:	6121      	str	r1, [r4, #16]
 8014ff2:	b1c5      	cbz	r5, 8015026 <__d2b+0x96>
 8014ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014ff8:	4405      	add	r5, r0
 8014ffa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014ffe:	603d      	str	r5, [r7, #0]
 8015000:	6030      	str	r0, [r6, #0]
 8015002:	4620      	mov	r0, r4
 8015004:	b002      	add	sp, #8
 8015006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801500a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801500e:	e7d6      	b.n	8014fbe <__d2b+0x2e>
 8015010:	6161      	str	r1, [r4, #20]
 8015012:	e7e7      	b.n	8014fe4 <__d2b+0x54>
 8015014:	a801      	add	r0, sp, #4
 8015016:	f7ff fd61 	bl	8014adc <__lo0bits>
 801501a:	2101      	movs	r1, #1
 801501c:	9b01      	ldr	r3, [sp, #4]
 801501e:	6121      	str	r1, [r4, #16]
 8015020:	6163      	str	r3, [r4, #20]
 8015022:	3020      	adds	r0, #32
 8015024:	e7e5      	b.n	8014ff2 <__d2b+0x62>
 8015026:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801502a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801502e:	6038      	str	r0, [r7, #0]
 8015030:	6918      	ldr	r0, [r3, #16]
 8015032:	f7ff fd33 	bl	8014a9c <__hi0bits>
 8015036:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801503a:	6031      	str	r1, [r6, #0]
 801503c:	e7e1      	b.n	8015002 <__d2b+0x72>
 801503e:	bf00      	nop
 8015040:	08017ece 	.word	0x08017ece
 8015044:	08017edf 	.word	0x08017edf

08015048 <_calloc_r>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	fb02 f501 	mul.w	r5, r2, r1
 801504e:	4629      	mov	r1, r5
 8015050:	f7fe f854 	bl	80130fc <_malloc_r>
 8015054:	4604      	mov	r4, r0
 8015056:	b118      	cbz	r0, 8015060 <_calloc_r+0x18>
 8015058:	462a      	mov	r2, r5
 801505a:	2100      	movs	r1, #0
 801505c:	f7fd fffa 	bl	8013054 <memset>
 8015060:	4620      	mov	r0, r4
 8015062:	bd38      	pop	{r3, r4, r5, pc}

08015064 <__ssputs_r>:
 8015064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015068:	688e      	ldr	r6, [r1, #8]
 801506a:	4682      	mov	sl, r0
 801506c:	429e      	cmp	r6, r3
 801506e:	460c      	mov	r4, r1
 8015070:	4690      	mov	r8, r2
 8015072:	461f      	mov	r7, r3
 8015074:	d838      	bhi.n	80150e8 <__ssputs_r+0x84>
 8015076:	898a      	ldrh	r2, [r1, #12]
 8015078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801507c:	d032      	beq.n	80150e4 <__ssputs_r+0x80>
 801507e:	6825      	ldr	r5, [r4, #0]
 8015080:	6909      	ldr	r1, [r1, #16]
 8015082:	3301      	adds	r3, #1
 8015084:	eba5 0901 	sub.w	r9, r5, r1
 8015088:	6965      	ldr	r5, [r4, #20]
 801508a:	444b      	add	r3, r9
 801508c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015094:	106d      	asrs	r5, r5, #1
 8015096:	429d      	cmp	r5, r3
 8015098:	bf38      	it	cc
 801509a:	461d      	movcc	r5, r3
 801509c:	0553      	lsls	r3, r2, #21
 801509e:	d531      	bpl.n	8015104 <__ssputs_r+0xa0>
 80150a0:	4629      	mov	r1, r5
 80150a2:	f7fe f82b 	bl	80130fc <_malloc_r>
 80150a6:	4606      	mov	r6, r0
 80150a8:	b950      	cbnz	r0, 80150c0 <__ssputs_r+0x5c>
 80150aa:	230c      	movs	r3, #12
 80150ac:	f04f 30ff 	mov.w	r0, #4294967295
 80150b0:	f8ca 3000 	str.w	r3, [sl]
 80150b4:	89a3      	ldrh	r3, [r4, #12]
 80150b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150ba:	81a3      	strh	r3, [r4, #12]
 80150bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150c0:	464a      	mov	r2, r9
 80150c2:	6921      	ldr	r1, [r4, #16]
 80150c4:	f7fd ffb8 	bl	8013038 <memcpy>
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80150ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150d2:	81a3      	strh	r3, [r4, #12]
 80150d4:	6126      	str	r6, [r4, #16]
 80150d6:	444e      	add	r6, r9
 80150d8:	6026      	str	r6, [r4, #0]
 80150da:	463e      	mov	r6, r7
 80150dc:	6165      	str	r5, [r4, #20]
 80150de:	eba5 0509 	sub.w	r5, r5, r9
 80150e2:	60a5      	str	r5, [r4, #8]
 80150e4:	42be      	cmp	r6, r7
 80150e6:	d900      	bls.n	80150ea <__ssputs_r+0x86>
 80150e8:	463e      	mov	r6, r7
 80150ea:	4632      	mov	r2, r6
 80150ec:	4641      	mov	r1, r8
 80150ee:	6820      	ldr	r0, [r4, #0]
 80150f0:	f000 fd64 	bl	8015bbc <memmove>
 80150f4:	68a3      	ldr	r3, [r4, #8]
 80150f6:	6822      	ldr	r2, [r4, #0]
 80150f8:	1b9b      	subs	r3, r3, r6
 80150fa:	4432      	add	r2, r6
 80150fc:	2000      	movs	r0, #0
 80150fe:	60a3      	str	r3, [r4, #8]
 8015100:	6022      	str	r2, [r4, #0]
 8015102:	e7db      	b.n	80150bc <__ssputs_r+0x58>
 8015104:	462a      	mov	r2, r5
 8015106:	f000 fd73 	bl	8015bf0 <_realloc_r>
 801510a:	4606      	mov	r6, r0
 801510c:	2800      	cmp	r0, #0
 801510e:	d1e1      	bne.n	80150d4 <__ssputs_r+0x70>
 8015110:	4650      	mov	r0, sl
 8015112:	6921      	ldr	r1, [r4, #16]
 8015114:	f7fd ffa6 	bl	8013064 <_free_r>
 8015118:	e7c7      	b.n	80150aa <__ssputs_r+0x46>
	...

0801511c <_svfiprintf_r>:
 801511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015120:	4698      	mov	r8, r3
 8015122:	898b      	ldrh	r3, [r1, #12]
 8015124:	4607      	mov	r7, r0
 8015126:	061b      	lsls	r3, r3, #24
 8015128:	460d      	mov	r5, r1
 801512a:	4614      	mov	r4, r2
 801512c:	b09d      	sub	sp, #116	; 0x74
 801512e:	d50e      	bpl.n	801514e <_svfiprintf_r+0x32>
 8015130:	690b      	ldr	r3, [r1, #16]
 8015132:	b963      	cbnz	r3, 801514e <_svfiprintf_r+0x32>
 8015134:	2140      	movs	r1, #64	; 0x40
 8015136:	f7fd ffe1 	bl	80130fc <_malloc_r>
 801513a:	6028      	str	r0, [r5, #0]
 801513c:	6128      	str	r0, [r5, #16]
 801513e:	b920      	cbnz	r0, 801514a <_svfiprintf_r+0x2e>
 8015140:	230c      	movs	r3, #12
 8015142:	603b      	str	r3, [r7, #0]
 8015144:	f04f 30ff 	mov.w	r0, #4294967295
 8015148:	e0d1      	b.n	80152ee <_svfiprintf_r+0x1d2>
 801514a:	2340      	movs	r3, #64	; 0x40
 801514c:	616b      	str	r3, [r5, #20]
 801514e:	2300      	movs	r3, #0
 8015150:	9309      	str	r3, [sp, #36]	; 0x24
 8015152:	2320      	movs	r3, #32
 8015154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015158:	2330      	movs	r3, #48	; 0x30
 801515a:	f04f 0901 	mov.w	r9, #1
 801515e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015308 <_svfiprintf_r+0x1ec>
 8015166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801516a:	4623      	mov	r3, r4
 801516c:	469a      	mov	sl, r3
 801516e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015172:	b10a      	cbz	r2, 8015178 <_svfiprintf_r+0x5c>
 8015174:	2a25      	cmp	r2, #37	; 0x25
 8015176:	d1f9      	bne.n	801516c <_svfiprintf_r+0x50>
 8015178:	ebba 0b04 	subs.w	fp, sl, r4
 801517c:	d00b      	beq.n	8015196 <_svfiprintf_r+0x7a>
 801517e:	465b      	mov	r3, fp
 8015180:	4622      	mov	r2, r4
 8015182:	4629      	mov	r1, r5
 8015184:	4638      	mov	r0, r7
 8015186:	f7ff ff6d 	bl	8015064 <__ssputs_r>
 801518a:	3001      	adds	r0, #1
 801518c:	f000 80aa 	beq.w	80152e4 <_svfiprintf_r+0x1c8>
 8015190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015192:	445a      	add	r2, fp
 8015194:	9209      	str	r2, [sp, #36]	; 0x24
 8015196:	f89a 3000 	ldrb.w	r3, [sl]
 801519a:	2b00      	cmp	r3, #0
 801519c:	f000 80a2 	beq.w	80152e4 <_svfiprintf_r+0x1c8>
 80151a0:	2300      	movs	r3, #0
 80151a2:	f04f 32ff 	mov.w	r2, #4294967295
 80151a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151aa:	f10a 0a01 	add.w	sl, sl, #1
 80151ae:	9304      	str	r3, [sp, #16]
 80151b0:	9307      	str	r3, [sp, #28]
 80151b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151b6:	931a      	str	r3, [sp, #104]	; 0x68
 80151b8:	4654      	mov	r4, sl
 80151ba:	2205      	movs	r2, #5
 80151bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151c0:	4851      	ldr	r0, [pc, #324]	; (8015308 <_svfiprintf_r+0x1ec>)
 80151c2:	f7ff fba5 	bl	8014910 <memchr>
 80151c6:	9a04      	ldr	r2, [sp, #16]
 80151c8:	b9d8      	cbnz	r0, 8015202 <_svfiprintf_r+0xe6>
 80151ca:	06d0      	lsls	r0, r2, #27
 80151cc:	bf44      	itt	mi
 80151ce:	2320      	movmi	r3, #32
 80151d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151d4:	0711      	lsls	r1, r2, #28
 80151d6:	bf44      	itt	mi
 80151d8:	232b      	movmi	r3, #43	; 0x2b
 80151da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151de:	f89a 3000 	ldrb.w	r3, [sl]
 80151e2:	2b2a      	cmp	r3, #42	; 0x2a
 80151e4:	d015      	beq.n	8015212 <_svfiprintf_r+0xf6>
 80151e6:	4654      	mov	r4, sl
 80151e8:	2000      	movs	r0, #0
 80151ea:	f04f 0c0a 	mov.w	ip, #10
 80151ee:	9a07      	ldr	r2, [sp, #28]
 80151f0:	4621      	mov	r1, r4
 80151f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151f6:	3b30      	subs	r3, #48	; 0x30
 80151f8:	2b09      	cmp	r3, #9
 80151fa:	d94e      	bls.n	801529a <_svfiprintf_r+0x17e>
 80151fc:	b1b0      	cbz	r0, 801522c <_svfiprintf_r+0x110>
 80151fe:	9207      	str	r2, [sp, #28]
 8015200:	e014      	b.n	801522c <_svfiprintf_r+0x110>
 8015202:	eba0 0308 	sub.w	r3, r0, r8
 8015206:	fa09 f303 	lsl.w	r3, r9, r3
 801520a:	4313      	orrs	r3, r2
 801520c:	46a2      	mov	sl, r4
 801520e:	9304      	str	r3, [sp, #16]
 8015210:	e7d2      	b.n	80151b8 <_svfiprintf_r+0x9c>
 8015212:	9b03      	ldr	r3, [sp, #12]
 8015214:	1d19      	adds	r1, r3, #4
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	9103      	str	r1, [sp, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	bfbb      	ittet	lt
 801521e:	425b      	neglt	r3, r3
 8015220:	f042 0202 	orrlt.w	r2, r2, #2
 8015224:	9307      	strge	r3, [sp, #28]
 8015226:	9307      	strlt	r3, [sp, #28]
 8015228:	bfb8      	it	lt
 801522a:	9204      	strlt	r2, [sp, #16]
 801522c:	7823      	ldrb	r3, [r4, #0]
 801522e:	2b2e      	cmp	r3, #46	; 0x2e
 8015230:	d10c      	bne.n	801524c <_svfiprintf_r+0x130>
 8015232:	7863      	ldrb	r3, [r4, #1]
 8015234:	2b2a      	cmp	r3, #42	; 0x2a
 8015236:	d135      	bne.n	80152a4 <_svfiprintf_r+0x188>
 8015238:	9b03      	ldr	r3, [sp, #12]
 801523a:	3402      	adds	r4, #2
 801523c:	1d1a      	adds	r2, r3, #4
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	9203      	str	r2, [sp, #12]
 8015242:	2b00      	cmp	r3, #0
 8015244:	bfb8      	it	lt
 8015246:	f04f 33ff 	movlt.w	r3, #4294967295
 801524a:	9305      	str	r3, [sp, #20]
 801524c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015318 <_svfiprintf_r+0x1fc>
 8015250:	2203      	movs	r2, #3
 8015252:	4650      	mov	r0, sl
 8015254:	7821      	ldrb	r1, [r4, #0]
 8015256:	f7ff fb5b 	bl	8014910 <memchr>
 801525a:	b140      	cbz	r0, 801526e <_svfiprintf_r+0x152>
 801525c:	2340      	movs	r3, #64	; 0x40
 801525e:	eba0 000a 	sub.w	r0, r0, sl
 8015262:	fa03 f000 	lsl.w	r0, r3, r0
 8015266:	9b04      	ldr	r3, [sp, #16]
 8015268:	3401      	adds	r4, #1
 801526a:	4303      	orrs	r3, r0
 801526c:	9304      	str	r3, [sp, #16]
 801526e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015272:	2206      	movs	r2, #6
 8015274:	4825      	ldr	r0, [pc, #148]	; (801530c <_svfiprintf_r+0x1f0>)
 8015276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801527a:	f7ff fb49 	bl	8014910 <memchr>
 801527e:	2800      	cmp	r0, #0
 8015280:	d038      	beq.n	80152f4 <_svfiprintf_r+0x1d8>
 8015282:	4b23      	ldr	r3, [pc, #140]	; (8015310 <_svfiprintf_r+0x1f4>)
 8015284:	bb1b      	cbnz	r3, 80152ce <_svfiprintf_r+0x1b2>
 8015286:	9b03      	ldr	r3, [sp, #12]
 8015288:	3307      	adds	r3, #7
 801528a:	f023 0307 	bic.w	r3, r3, #7
 801528e:	3308      	adds	r3, #8
 8015290:	9303      	str	r3, [sp, #12]
 8015292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015294:	4433      	add	r3, r6
 8015296:	9309      	str	r3, [sp, #36]	; 0x24
 8015298:	e767      	b.n	801516a <_svfiprintf_r+0x4e>
 801529a:	460c      	mov	r4, r1
 801529c:	2001      	movs	r0, #1
 801529e:	fb0c 3202 	mla	r2, ip, r2, r3
 80152a2:	e7a5      	b.n	80151f0 <_svfiprintf_r+0xd4>
 80152a4:	2300      	movs	r3, #0
 80152a6:	f04f 0c0a 	mov.w	ip, #10
 80152aa:	4619      	mov	r1, r3
 80152ac:	3401      	adds	r4, #1
 80152ae:	9305      	str	r3, [sp, #20]
 80152b0:	4620      	mov	r0, r4
 80152b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152b6:	3a30      	subs	r2, #48	; 0x30
 80152b8:	2a09      	cmp	r2, #9
 80152ba:	d903      	bls.n	80152c4 <_svfiprintf_r+0x1a8>
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d0c5      	beq.n	801524c <_svfiprintf_r+0x130>
 80152c0:	9105      	str	r1, [sp, #20]
 80152c2:	e7c3      	b.n	801524c <_svfiprintf_r+0x130>
 80152c4:	4604      	mov	r4, r0
 80152c6:	2301      	movs	r3, #1
 80152c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80152cc:	e7f0      	b.n	80152b0 <_svfiprintf_r+0x194>
 80152ce:	ab03      	add	r3, sp, #12
 80152d0:	9300      	str	r3, [sp, #0]
 80152d2:	462a      	mov	r2, r5
 80152d4:	4638      	mov	r0, r7
 80152d6:	4b0f      	ldr	r3, [pc, #60]	; (8015314 <_svfiprintf_r+0x1f8>)
 80152d8:	a904      	add	r1, sp, #16
 80152da:	f7fe f807 	bl	80132ec <_printf_float>
 80152de:	1c42      	adds	r2, r0, #1
 80152e0:	4606      	mov	r6, r0
 80152e2:	d1d6      	bne.n	8015292 <_svfiprintf_r+0x176>
 80152e4:	89ab      	ldrh	r3, [r5, #12]
 80152e6:	065b      	lsls	r3, r3, #25
 80152e8:	f53f af2c 	bmi.w	8015144 <_svfiprintf_r+0x28>
 80152ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152ee:	b01d      	add	sp, #116	; 0x74
 80152f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152f4:	ab03      	add	r3, sp, #12
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	462a      	mov	r2, r5
 80152fa:	4638      	mov	r0, r7
 80152fc:	4b05      	ldr	r3, [pc, #20]	; (8015314 <_svfiprintf_r+0x1f8>)
 80152fe:	a904      	add	r1, sp, #16
 8015300:	f7fe fa90 	bl	8013824 <_printf_i>
 8015304:	e7eb      	b.n	80152de <_svfiprintf_r+0x1c2>
 8015306:	bf00      	nop
 8015308:	0801803c 	.word	0x0801803c
 801530c:	08018046 	.word	0x08018046
 8015310:	080132ed 	.word	0x080132ed
 8015314:	08015065 	.word	0x08015065
 8015318:	08018042 	.word	0x08018042

0801531c <__sfputc_r>:
 801531c:	6893      	ldr	r3, [r2, #8]
 801531e:	b410      	push	{r4}
 8015320:	3b01      	subs	r3, #1
 8015322:	2b00      	cmp	r3, #0
 8015324:	6093      	str	r3, [r2, #8]
 8015326:	da07      	bge.n	8015338 <__sfputc_r+0x1c>
 8015328:	6994      	ldr	r4, [r2, #24]
 801532a:	42a3      	cmp	r3, r4
 801532c:	db01      	blt.n	8015332 <__sfputc_r+0x16>
 801532e:	290a      	cmp	r1, #10
 8015330:	d102      	bne.n	8015338 <__sfputc_r+0x1c>
 8015332:	bc10      	pop	{r4}
 8015334:	f000 b94a 	b.w	80155cc <__swbuf_r>
 8015338:	6813      	ldr	r3, [r2, #0]
 801533a:	1c58      	adds	r0, r3, #1
 801533c:	6010      	str	r0, [r2, #0]
 801533e:	7019      	strb	r1, [r3, #0]
 8015340:	4608      	mov	r0, r1
 8015342:	bc10      	pop	{r4}
 8015344:	4770      	bx	lr

08015346 <__sfputs_r>:
 8015346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015348:	4606      	mov	r6, r0
 801534a:	460f      	mov	r7, r1
 801534c:	4614      	mov	r4, r2
 801534e:	18d5      	adds	r5, r2, r3
 8015350:	42ac      	cmp	r4, r5
 8015352:	d101      	bne.n	8015358 <__sfputs_r+0x12>
 8015354:	2000      	movs	r0, #0
 8015356:	e007      	b.n	8015368 <__sfputs_r+0x22>
 8015358:	463a      	mov	r2, r7
 801535a:	4630      	mov	r0, r6
 801535c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015360:	f7ff ffdc 	bl	801531c <__sfputc_r>
 8015364:	1c43      	adds	r3, r0, #1
 8015366:	d1f3      	bne.n	8015350 <__sfputs_r+0xa>
 8015368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801536c <_vfiprintf_r>:
 801536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015370:	460d      	mov	r5, r1
 8015372:	4614      	mov	r4, r2
 8015374:	4698      	mov	r8, r3
 8015376:	4606      	mov	r6, r0
 8015378:	b09d      	sub	sp, #116	; 0x74
 801537a:	b118      	cbz	r0, 8015384 <_vfiprintf_r+0x18>
 801537c:	6983      	ldr	r3, [r0, #24]
 801537e:	b90b      	cbnz	r3, 8015384 <_vfiprintf_r+0x18>
 8015380:	f000 fb06 	bl	8015990 <__sinit>
 8015384:	4b89      	ldr	r3, [pc, #548]	; (80155ac <_vfiprintf_r+0x240>)
 8015386:	429d      	cmp	r5, r3
 8015388:	d11b      	bne.n	80153c2 <_vfiprintf_r+0x56>
 801538a:	6875      	ldr	r5, [r6, #4]
 801538c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801538e:	07d9      	lsls	r1, r3, #31
 8015390:	d405      	bmi.n	801539e <_vfiprintf_r+0x32>
 8015392:	89ab      	ldrh	r3, [r5, #12]
 8015394:	059a      	lsls	r2, r3, #22
 8015396:	d402      	bmi.n	801539e <_vfiprintf_r+0x32>
 8015398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801539a:	f000 fb97 	bl	8015acc <__retarget_lock_acquire_recursive>
 801539e:	89ab      	ldrh	r3, [r5, #12]
 80153a0:	071b      	lsls	r3, r3, #28
 80153a2:	d501      	bpl.n	80153a8 <_vfiprintf_r+0x3c>
 80153a4:	692b      	ldr	r3, [r5, #16]
 80153a6:	b9eb      	cbnz	r3, 80153e4 <_vfiprintf_r+0x78>
 80153a8:	4629      	mov	r1, r5
 80153aa:	4630      	mov	r0, r6
 80153ac:	f000 f960 	bl	8015670 <__swsetup_r>
 80153b0:	b1c0      	cbz	r0, 80153e4 <_vfiprintf_r+0x78>
 80153b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153b4:	07dc      	lsls	r4, r3, #31
 80153b6:	d50e      	bpl.n	80153d6 <_vfiprintf_r+0x6a>
 80153b8:	f04f 30ff 	mov.w	r0, #4294967295
 80153bc:	b01d      	add	sp, #116	; 0x74
 80153be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153c2:	4b7b      	ldr	r3, [pc, #492]	; (80155b0 <_vfiprintf_r+0x244>)
 80153c4:	429d      	cmp	r5, r3
 80153c6:	d101      	bne.n	80153cc <_vfiprintf_r+0x60>
 80153c8:	68b5      	ldr	r5, [r6, #8]
 80153ca:	e7df      	b.n	801538c <_vfiprintf_r+0x20>
 80153cc:	4b79      	ldr	r3, [pc, #484]	; (80155b4 <_vfiprintf_r+0x248>)
 80153ce:	429d      	cmp	r5, r3
 80153d0:	bf08      	it	eq
 80153d2:	68f5      	ldreq	r5, [r6, #12]
 80153d4:	e7da      	b.n	801538c <_vfiprintf_r+0x20>
 80153d6:	89ab      	ldrh	r3, [r5, #12]
 80153d8:	0598      	lsls	r0, r3, #22
 80153da:	d4ed      	bmi.n	80153b8 <_vfiprintf_r+0x4c>
 80153dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153de:	f000 fb76 	bl	8015ace <__retarget_lock_release_recursive>
 80153e2:	e7e9      	b.n	80153b8 <_vfiprintf_r+0x4c>
 80153e4:	2300      	movs	r3, #0
 80153e6:	9309      	str	r3, [sp, #36]	; 0x24
 80153e8:	2320      	movs	r3, #32
 80153ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153ee:	2330      	movs	r3, #48	; 0x30
 80153f0:	f04f 0901 	mov.w	r9, #1
 80153f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80153f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80155b8 <_vfiprintf_r+0x24c>
 80153fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015400:	4623      	mov	r3, r4
 8015402:	469a      	mov	sl, r3
 8015404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015408:	b10a      	cbz	r2, 801540e <_vfiprintf_r+0xa2>
 801540a:	2a25      	cmp	r2, #37	; 0x25
 801540c:	d1f9      	bne.n	8015402 <_vfiprintf_r+0x96>
 801540e:	ebba 0b04 	subs.w	fp, sl, r4
 8015412:	d00b      	beq.n	801542c <_vfiprintf_r+0xc0>
 8015414:	465b      	mov	r3, fp
 8015416:	4622      	mov	r2, r4
 8015418:	4629      	mov	r1, r5
 801541a:	4630      	mov	r0, r6
 801541c:	f7ff ff93 	bl	8015346 <__sfputs_r>
 8015420:	3001      	adds	r0, #1
 8015422:	f000 80aa 	beq.w	801557a <_vfiprintf_r+0x20e>
 8015426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015428:	445a      	add	r2, fp
 801542a:	9209      	str	r2, [sp, #36]	; 0x24
 801542c:	f89a 3000 	ldrb.w	r3, [sl]
 8015430:	2b00      	cmp	r3, #0
 8015432:	f000 80a2 	beq.w	801557a <_vfiprintf_r+0x20e>
 8015436:	2300      	movs	r3, #0
 8015438:	f04f 32ff 	mov.w	r2, #4294967295
 801543c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015440:	f10a 0a01 	add.w	sl, sl, #1
 8015444:	9304      	str	r3, [sp, #16]
 8015446:	9307      	str	r3, [sp, #28]
 8015448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801544c:	931a      	str	r3, [sp, #104]	; 0x68
 801544e:	4654      	mov	r4, sl
 8015450:	2205      	movs	r2, #5
 8015452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015456:	4858      	ldr	r0, [pc, #352]	; (80155b8 <_vfiprintf_r+0x24c>)
 8015458:	f7ff fa5a 	bl	8014910 <memchr>
 801545c:	9a04      	ldr	r2, [sp, #16]
 801545e:	b9d8      	cbnz	r0, 8015498 <_vfiprintf_r+0x12c>
 8015460:	06d1      	lsls	r1, r2, #27
 8015462:	bf44      	itt	mi
 8015464:	2320      	movmi	r3, #32
 8015466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801546a:	0713      	lsls	r3, r2, #28
 801546c:	bf44      	itt	mi
 801546e:	232b      	movmi	r3, #43	; 0x2b
 8015470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015474:	f89a 3000 	ldrb.w	r3, [sl]
 8015478:	2b2a      	cmp	r3, #42	; 0x2a
 801547a:	d015      	beq.n	80154a8 <_vfiprintf_r+0x13c>
 801547c:	4654      	mov	r4, sl
 801547e:	2000      	movs	r0, #0
 8015480:	f04f 0c0a 	mov.w	ip, #10
 8015484:	9a07      	ldr	r2, [sp, #28]
 8015486:	4621      	mov	r1, r4
 8015488:	f811 3b01 	ldrb.w	r3, [r1], #1
 801548c:	3b30      	subs	r3, #48	; 0x30
 801548e:	2b09      	cmp	r3, #9
 8015490:	d94e      	bls.n	8015530 <_vfiprintf_r+0x1c4>
 8015492:	b1b0      	cbz	r0, 80154c2 <_vfiprintf_r+0x156>
 8015494:	9207      	str	r2, [sp, #28]
 8015496:	e014      	b.n	80154c2 <_vfiprintf_r+0x156>
 8015498:	eba0 0308 	sub.w	r3, r0, r8
 801549c:	fa09 f303 	lsl.w	r3, r9, r3
 80154a0:	4313      	orrs	r3, r2
 80154a2:	46a2      	mov	sl, r4
 80154a4:	9304      	str	r3, [sp, #16]
 80154a6:	e7d2      	b.n	801544e <_vfiprintf_r+0xe2>
 80154a8:	9b03      	ldr	r3, [sp, #12]
 80154aa:	1d19      	adds	r1, r3, #4
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	9103      	str	r1, [sp, #12]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	bfbb      	ittet	lt
 80154b4:	425b      	neglt	r3, r3
 80154b6:	f042 0202 	orrlt.w	r2, r2, #2
 80154ba:	9307      	strge	r3, [sp, #28]
 80154bc:	9307      	strlt	r3, [sp, #28]
 80154be:	bfb8      	it	lt
 80154c0:	9204      	strlt	r2, [sp, #16]
 80154c2:	7823      	ldrb	r3, [r4, #0]
 80154c4:	2b2e      	cmp	r3, #46	; 0x2e
 80154c6:	d10c      	bne.n	80154e2 <_vfiprintf_r+0x176>
 80154c8:	7863      	ldrb	r3, [r4, #1]
 80154ca:	2b2a      	cmp	r3, #42	; 0x2a
 80154cc:	d135      	bne.n	801553a <_vfiprintf_r+0x1ce>
 80154ce:	9b03      	ldr	r3, [sp, #12]
 80154d0:	3402      	adds	r4, #2
 80154d2:	1d1a      	adds	r2, r3, #4
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	9203      	str	r2, [sp, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	bfb8      	it	lt
 80154dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80154e0:	9305      	str	r3, [sp, #20]
 80154e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80155c8 <_vfiprintf_r+0x25c>
 80154e6:	2203      	movs	r2, #3
 80154e8:	4650      	mov	r0, sl
 80154ea:	7821      	ldrb	r1, [r4, #0]
 80154ec:	f7ff fa10 	bl	8014910 <memchr>
 80154f0:	b140      	cbz	r0, 8015504 <_vfiprintf_r+0x198>
 80154f2:	2340      	movs	r3, #64	; 0x40
 80154f4:	eba0 000a 	sub.w	r0, r0, sl
 80154f8:	fa03 f000 	lsl.w	r0, r3, r0
 80154fc:	9b04      	ldr	r3, [sp, #16]
 80154fe:	3401      	adds	r4, #1
 8015500:	4303      	orrs	r3, r0
 8015502:	9304      	str	r3, [sp, #16]
 8015504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015508:	2206      	movs	r2, #6
 801550a:	482c      	ldr	r0, [pc, #176]	; (80155bc <_vfiprintf_r+0x250>)
 801550c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015510:	f7ff f9fe 	bl	8014910 <memchr>
 8015514:	2800      	cmp	r0, #0
 8015516:	d03f      	beq.n	8015598 <_vfiprintf_r+0x22c>
 8015518:	4b29      	ldr	r3, [pc, #164]	; (80155c0 <_vfiprintf_r+0x254>)
 801551a:	bb1b      	cbnz	r3, 8015564 <_vfiprintf_r+0x1f8>
 801551c:	9b03      	ldr	r3, [sp, #12]
 801551e:	3307      	adds	r3, #7
 8015520:	f023 0307 	bic.w	r3, r3, #7
 8015524:	3308      	adds	r3, #8
 8015526:	9303      	str	r3, [sp, #12]
 8015528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801552a:	443b      	add	r3, r7
 801552c:	9309      	str	r3, [sp, #36]	; 0x24
 801552e:	e767      	b.n	8015400 <_vfiprintf_r+0x94>
 8015530:	460c      	mov	r4, r1
 8015532:	2001      	movs	r0, #1
 8015534:	fb0c 3202 	mla	r2, ip, r2, r3
 8015538:	e7a5      	b.n	8015486 <_vfiprintf_r+0x11a>
 801553a:	2300      	movs	r3, #0
 801553c:	f04f 0c0a 	mov.w	ip, #10
 8015540:	4619      	mov	r1, r3
 8015542:	3401      	adds	r4, #1
 8015544:	9305      	str	r3, [sp, #20]
 8015546:	4620      	mov	r0, r4
 8015548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801554c:	3a30      	subs	r2, #48	; 0x30
 801554e:	2a09      	cmp	r2, #9
 8015550:	d903      	bls.n	801555a <_vfiprintf_r+0x1ee>
 8015552:	2b00      	cmp	r3, #0
 8015554:	d0c5      	beq.n	80154e2 <_vfiprintf_r+0x176>
 8015556:	9105      	str	r1, [sp, #20]
 8015558:	e7c3      	b.n	80154e2 <_vfiprintf_r+0x176>
 801555a:	4604      	mov	r4, r0
 801555c:	2301      	movs	r3, #1
 801555e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015562:	e7f0      	b.n	8015546 <_vfiprintf_r+0x1da>
 8015564:	ab03      	add	r3, sp, #12
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	462a      	mov	r2, r5
 801556a:	4630      	mov	r0, r6
 801556c:	4b15      	ldr	r3, [pc, #84]	; (80155c4 <_vfiprintf_r+0x258>)
 801556e:	a904      	add	r1, sp, #16
 8015570:	f7fd febc 	bl	80132ec <_printf_float>
 8015574:	4607      	mov	r7, r0
 8015576:	1c78      	adds	r0, r7, #1
 8015578:	d1d6      	bne.n	8015528 <_vfiprintf_r+0x1bc>
 801557a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801557c:	07d9      	lsls	r1, r3, #31
 801557e:	d405      	bmi.n	801558c <_vfiprintf_r+0x220>
 8015580:	89ab      	ldrh	r3, [r5, #12]
 8015582:	059a      	lsls	r2, r3, #22
 8015584:	d402      	bmi.n	801558c <_vfiprintf_r+0x220>
 8015586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015588:	f000 faa1 	bl	8015ace <__retarget_lock_release_recursive>
 801558c:	89ab      	ldrh	r3, [r5, #12]
 801558e:	065b      	lsls	r3, r3, #25
 8015590:	f53f af12 	bmi.w	80153b8 <_vfiprintf_r+0x4c>
 8015594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015596:	e711      	b.n	80153bc <_vfiprintf_r+0x50>
 8015598:	ab03      	add	r3, sp, #12
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	462a      	mov	r2, r5
 801559e:	4630      	mov	r0, r6
 80155a0:	4b08      	ldr	r3, [pc, #32]	; (80155c4 <_vfiprintf_r+0x258>)
 80155a2:	a904      	add	r1, sp, #16
 80155a4:	f7fe f93e 	bl	8013824 <_printf_i>
 80155a8:	e7e4      	b.n	8015574 <_vfiprintf_r+0x208>
 80155aa:	bf00      	nop
 80155ac:	08018070 	.word	0x08018070
 80155b0:	08018090 	.word	0x08018090
 80155b4:	08018050 	.word	0x08018050
 80155b8:	0801803c 	.word	0x0801803c
 80155bc:	08018046 	.word	0x08018046
 80155c0:	080132ed 	.word	0x080132ed
 80155c4:	08015347 	.word	0x08015347
 80155c8:	08018042 	.word	0x08018042

080155cc <__swbuf_r>:
 80155cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ce:	460e      	mov	r6, r1
 80155d0:	4614      	mov	r4, r2
 80155d2:	4605      	mov	r5, r0
 80155d4:	b118      	cbz	r0, 80155de <__swbuf_r+0x12>
 80155d6:	6983      	ldr	r3, [r0, #24]
 80155d8:	b90b      	cbnz	r3, 80155de <__swbuf_r+0x12>
 80155da:	f000 f9d9 	bl	8015990 <__sinit>
 80155de:	4b21      	ldr	r3, [pc, #132]	; (8015664 <__swbuf_r+0x98>)
 80155e0:	429c      	cmp	r4, r3
 80155e2:	d12b      	bne.n	801563c <__swbuf_r+0x70>
 80155e4:	686c      	ldr	r4, [r5, #4]
 80155e6:	69a3      	ldr	r3, [r4, #24]
 80155e8:	60a3      	str	r3, [r4, #8]
 80155ea:	89a3      	ldrh	r3, [r4, #12]
 80155ec:	071a      	lsls	r2, r3, #28
 80155ee:	d52f      	bpl.n	8015650 <__swbuf_r+0x84>
 80155f0:	6923      	ldr	r3, [r4, #16]
 80155f2:	b36b      	cbz	r3, 8015650 <__swbuf_r+0x84>
 80155f4:	6923      	ldr	r3, [r4, #16]
 80155f6:	6820      	ldr	r0, [r4, #0]
 80155f8:	b2f6      	uxtb	r6, r6
 80155fa:	1ac0      	subs	r0, r0, r3
 80155fc:	6963      	ldr	r3, [r4, #20]
 80155fe:	4637      	mov	r7, r6
 8015600:	4283      	cmp	r3, r0
 8015602:	dc04      	bgt.n	801560e <__swbuf_r+0x42>
 8015604:	4621      	mov	r1, r4
 8015606:	4628      	mov	r0, r5
 8015608:	f000 f92e 	bl	8015868 <_fflush_r>
 801560c:	bb30      	cbnz	r0, 801565c <__swbuf_r+0x90>
 801560e:	68a3      	ldr	r3, [r4, #8]
 8015610:	3001      	adds	r0, #1
 8015612:	3b01      	subs	r3, #1
 8015614:	60a3      	str	r3, [r4, #8]
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	1c5a      	adds	r2, r3, #1
 801561a:	6022      	str	r2, [r4, #0]
 801561c:	701e      	strb	r6, [r3, #0]
 801561e:	6963      	ldr	r3, [r4, #20]
 8015620:	4283      	cmp	r3, r0
 8015622:	d004      	beq.n	801562e <__swbuf_r+0x62>
 8015624:	89a3      	ldrh	r3, [r4, #12]
 8015626:	07db      	lsls	r3, r3, #31
 8015628:	d506      	bpl.n	8015638 <__swbuf_r+0x6c>
 801562a:	2e0a      	cmp	r6, #10
 801562c:	d104      	bne.n	8015638 <__swbuf_r+0x6c>
 801562e:	4621      	mov	r1, r4
 8015630:	4628      	mov	r0, r5
 8015632:	f000 f919 	bl	8015868 <_fflush_r>
 8015636:	b988      	cbnz	r0, 801565c <__swbuf_r+0x90>
 8015638:	4638      	mov	r0, r7
 801563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801563c:	4b0a      	ldr	r3, [pc, #40]	; (8015668 <__swbuf_r+0x9c>)
 801563e:	429c      	cmp	r4, r3
 8015640:	d101      	bne.n	8015646 <__swbuf_r+0x7a>
 8015642:	68ac      	ldr	r4, [r5, #8]
 8015644:	e7cf      	b.n	80155e6 <__swbuf_r+0x1a>
 8015646:	4b09      	ldr	r3, [pc, #36]	; (801566c <__swbuf_r+0xa0>)
 8015648:	429c      	cmp	r4, r3
 801564a:	bf08      	it	eq
 801564c:	68ec      	ldreq	r4, [r5, #12]
 801564e:	e7ca      	b.n	80155e6 <__swbuf_r+0x1a>
 8015650:	4621      	mov	r1, r4
 8015652:	4628      	mov	r0, r5
 8015654:	f000 f80c 	bl	8015670 <__swsetup_r>
 8015658:	2800      	cmp	r0, #0
 801565a:	d0cb      	beq.n	80155f4 <__swbuf_r+0x28>
 801565c:	f04f 37ff 	mov.w	r7, #4294967295
 8015660:	e7ea      	b.n	8015638 <__swbuf_r+0x6c>
 8015662:	bf00      	nop
 8015664:	08018070 	.word	0x08018070
 8015668:	08018090 	.word	0x08018090
 801566c:	08018050 	.word	0x08018050

08015670 <__swsetup_r>:
 8015670:	4b32      	ldr	r3, [pc, #200]	; (801573c <__swsetup_r+0xcc>)
 8015672:	b570      	push	{r4, r5, r6, lr}
 8015674:	681d      	ldr	r5, [r3, #0]
 8015676:	4606      	mov	r6, r0
 8015678:	460c      	mov	r4, r1
 801567a:	b125      	cbz	r5, 8015686 <__swsetup_r+0x16>
 801567c:	69ab      	ldr	r3, [r5, #24]
 801567e:	b913      	cbnz	r3, 8015686 <__swsetup_r+0x16>
 8015680:	4628      	mov	r0, r5
 8015682:	f000 f985 	bl	8015990 <__sinit>
 8015686:	4b2e      	ldr	r3, [pc, #184]	; (8015740 <__swsetup_r+0xd0>)
 8015688:	429c      	cmp	r4, r3
 801568a:	d10f      	bne.n	80156ac <__swsetup_r+0x3c>
 801568c:	686c      	ldr	r4, [r5, #4]
 801568e:	89a3      	ldrh	r3, [r4, #12]
 8015690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015694:	0719      	lsls	r1, r3, #28
 8015696:	d42c      	bmi.n	80156f2 <__swsetup_r+0x82>
 8015698:	06dd      	lsls	r5, r3, #27
 801569a:	d411      	bmi.n	80156c0 <__swsetup_r+0x50>
 801569c:	2309      	movs	r3, #9
 801569e:	6033      	str	r3, [r6, #0]
 80156a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80156a4:	f04f 30ff 	mov.w	r0, #4294967295
 80156a8:	81a3      	strh	r3, [r4, #12]
 80156aa:	e03e      	b.n	801572a <__swsetup_r+0xba>
 80156ac:	4b25      	ldr	r3, [pc, #148]	; (8015744 <__swsetup_r+0xd4>)
 80156ae:	429c      	cmp	r4, r3
 80156b0:	d101      	bne.n	80156b6 <__swsetup_r+0x46>
 80156b2:	68ac      	ldr	r4, [r5, #8]
 80156b4:	e7eb      	b.n	801568e <__swsetup_r+0x1e>
 80156b6:	4b24      	ldr	r3, [pc, #144]	; (8015748 <__swsetup_r+0xd8>)
 80156b8:	429c      	cmp	r4, r3
 80156ba:	bf08      	it	eq
 80156bc:	68ec      	ldreq	r4, [r5, #12]
 80156be:	e7e6      	b.n	801568e <__swsetup_r+0x1e>
 80156c0:	0758      	lsls	r0, r3, #29
 80156c2:	d512      	bpl.n	80156ea <__swsetup_r+0x7a>
 80156c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156c6:	b141      	cbz	r1, 80156da <__swsetup_r+0x6a>
 80156c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156cc:	4299      	cmp	r1, r3
 80156ce:	d002      	beq.n	80156d6 <__swsetup_r+0x66>
 80156d0:	4630      	mov	r0, r6
 80156d2:	f7fd fcc7 	bl	8013064 <_free_r>
 80156d6:	2300      	movs	r3, #0
 80156d8:	6363      	str	r3, [r4, #52]	; 0x34
 80156da:	89a3      	ldrh	r3, [r4, #12]
 80156dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80156e0:	81a3      	strh	r3, [r4, #12]
 80156e2:	2300      	movs	r3, #0
 80156e4:	6063      	str	r3, [r4, #4]
 80156e6:	6923      	ldr	r3, [r4, #16]
 80156e8:	6023      	str	r3, [r4, #0]
 80156ea:	89a3      	ldrh	r3, [r4, #12]
 80156ec:	f043 0308 	orr.w	r3, r3, #8
 80156f0:	81a3      	strh	r3, [r4, #12]
 80156f2:	6923      	ldr	r3, [r4, #16]
 80156f4:	b94b      	cbnz	r3, 801570a <__swsetup_r+0x9a>
 80156f6:	89a3      	ldrh	r3, [r4, #12]
 80156f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80156fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015700:	d003      	beq.n	801570a <__swsetup_r+0x9a>
 8015702:	4621      	mov	r1, r4
 8015704:	4630      	mov	r0, r6
 8015706:	f000 fa07 	bl	8015b18 <__smakebuf_r>
 801570a:	89a0      	ldrh	r0, [r4, #12]
 801570c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015710:	f010 0301 	ands.w	r3, r0, #1
 8015714:	d00a      	beq.n	801572c <__swsetup_r+0xbc>
 8015716:	2300      	movs	r3, #0
 8015718:	60a3      	str	r3, [r4, #8]
 801571a:	6963      	ldr	r3, [r4, #20]
 801571c:	425b      	negs	r3, r3
 801571e:	61a3      	str	r3, [r4, #24]
 8015720:	6923      	ldr	r3, [r4, #16]
 8015722:	b943      	cbnz	r3, 8015736 <__swsetup_r+0xc6>
 8015724:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015728:	d1ba      	bne.n	80156a0 <__swsetup_r+0x30>
 801572a:	bd70      	pop	{r4, r5, r6, pc}
 801572c:	0781      	lsls	r1, r0, #30
 801572e:	bf58      	it	pl
 8015730:	6963      	ldrpl	r3, [r4, #20]
 8015732:	60a3      	str	r3, [r4, #8]
 8015734:	e7f4      	b.n	8015720 <__swsetup_r+0xb0>
 8015736:	2000      	movs	r0, #0
 8015738:	e7f7      	b.n	801572a <__swsetup_r+0xba>
 801573a:	bf00      	nop
 801573c:	20000124 	.word	0x20000124
 8015740:	08018070 	.word	0x08018070
 8015744:	08018090 	.word	0x08018090
 8015748:	08018050 	.word	0x08018050

0801574c <abort>:
 801574c:	2006      	movs	r0, #6
 801574e:	b508      	push	{r3, lr}
 8015750:	f000 fa9c 	bl	8015c8c <raise>
 8015754:	2001      	movs	r0, #1
 8015756:	f001 ff79 	bl	801764c <_exit>
	...

0801575c <__sflush_r>:
 801575c:	898a      	ldrh	r2, [r1, #12]
 801575e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015762:	4605      	mov	r5, r0
 8015764:	0710      	lsls	r0, r2, #28
 8015766:	460c      	mov	r4, r1
 8015768:	d458      	bmi.n	801581c <__sflush_r+0xc0>
 801576a:	684b      	ldr	r3, [r1, #4]
 801576c:	2b00      	cmp	r3, #0
 801576e:	dc05      	bgt.n	801577c <__sflush_r+0x20>
 8015770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015772:	2b00      	cmp	r3, #0
 8015774:	dc02      	bgt.n	801577c <__sflush_r+0x20>
 8015776:	2000      	movs	r0, #0
 8015778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801577c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801577e:	2e00      	cmp	r6, #0
 8015780:	d0f9      	beq.n	8015776 <__sflush_r+0x1a>
 8015782:	2300      	movs	r3, #0
 8015784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015788:	682f      	ldr	r7, [r5, #0]
 801578a:	602b      	str	r3, [r5, #0]
 801578c:	d032      	beq.n	80157f4 <__sflush_r+0x98>
 801578e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015790:	89a3      	ldrh	r3, [r4, #12]
 8015792:	075a      	lsls	r2, r3, #29
 8015794:	d505      	bpl.n	80157a2 <__sflush_r+0x46>
 8015796:	6863      	ldr	r3, [r4, #4]
 8015798:	1ac0      	subs	r0, r0, r3
 801579a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801579c:	b10b      	cbz	r3, 80157a2 <__sflush_r+0x46>
 801579e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157a0:	1ac0      	subs	r0, r0, r3
 80157a2:	2300      	movs	r3, #0
 80157a4:	4602      	mov	r2, r0
 80157a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157a8:	4628      	mov	r0, r5
 80157aa:	6a21      	ldr	r1, [r4, #32]
 80157ac:	47b0      	blx	r6
 80157ae:	1c43      	adds	r3, r0, #1
 80157b0:	89a3      	ldrh	r3, [r4, #12]
 80157b2:	d106      	bne.n	80157c2 <__sflush_r+0x66>
 80157b4:	6829      	ldr	r1, [r5, #0]
 80157b6:	291d      	cmp	r1, #29
 80157b8:	d82c      	bhi.n	8015814 <__sflush_r+0xb8>
 80157ba:	4a2a      	ldr	r2, [pc, #168]	; (8015864 <__sflush_r+0x108>)
 80157bc:	40ca      	lsrs	r2, r1
 80157be:	07d6      	lsls	r6, r2, #31
 80157c0:	d528      	bpl.n	8015814 <__sflush_r+0xb8>
 80157c2:	2200      	movs	r2, #0
 80157c4:	6062      	str	r2, [r4, #4]
 80157c6:	6922      	ldr	r2, [r4, #16]
 80157c8:	04d9      	lsls	r1, r3, #19
 80157ca:	6022      	str	r2, [r4, #0]
 80157cc:	d504      	bpl.n	80157d8 <__sflush_r+0x7c>
 80157ce:	1c42      	adds	r2, r0, #1
 80157d0:	d101      	bne.n	80157d6 <__sflush_r+0x7a>
 80157d2:	682b      	ldr	r3, [r5, #0]
 80157d4:	b903      	cbnz	r3, 80157d8 <__sflush_r+0x7c>
 80157d6:	6560      	str	r0, [r4, #84]	; 0x54
 80157d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157da:	602f      	str	r7, [r5, #0]
 80157dc:	2900      	cmp	r1, #0
 80157de:	d0ca      	beq.n	8015776 <__sflush_r+0x1a>
 80157e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157e4:	4299      	cmp	r1, r3
 80157e6:	d002      	beq.n	80157ee <__sflush_r+0x92>
 80157e8:	4628      	mov	r0, r5
 80157ea:	f7fd fc3b 	bl	8013064 <_free_r>
 80157ee:	2000      	movs	r0, #0
 80157f0:	6360      	str	r0, [r4, #52]	; 0x34
 80157f2:	e7c1      	b.n	8015778 <__sflush_r+0x1c>
 80157f4:	6a21      	ldr	r1, [r4, #32]
 80157f6:	2301      	movs	r3, #1
 80157f8:	4628      	mov	r0, r5
 80157fa:	47b0      	blx	r6
 80157fc:	1c41      	adds	r1, r0, #1
 80157fe:	d1c7      	bne.n	8015790 <__sflush_r+0x34>
 8015800:	682b      	ldr	r3, [r5, #0]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d0c4      	beq.n	8015790 <__sflush_r+0x34>
 8015806:	2b1d      	cmp	r3, #29
 8015808:	d001      	beq.n	801580e <__sflush_r+0xb2>
 801580a:	2b16      	cmp	r3, #22
 801580c:	d101      	bne.n	8015812 <__sflush_r+0xb6>
 801580e:	602f      	str	r7, [r5, #0]
 8015810:	e7b1      	b.n	8015776 <__sflush_r+0x1a>
 8015812:	89a3      	ldrh	r3, [r4, #12]
 8015814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015818:	81a3      	strh	r3, [r4, #12]
 801581a:	e7ad      	b.n	8015778 <__sflush_r+0x1c>
 801581c:	690f      	ldr	r7, [r1, #16]
 801581e:	2f00      	cmp	r7, #0
 8015820:	d0a9      	beq.n	8015776 <__sflush_r+0x1a>
 8015822:	0793      	lsls	r3, r2, #30
 8015824:	bf18      	it	ne
 8015826:	2300      	movne	r3, #0
 8015828:	680e      	ldr	r6, [r1, #0]
 801582a:	bf08      	it	eq
 801582c:	694b      	ldreq	r3, [r1, #20]
 801582e:	eba6 0807 	sub.w	r8, r6, r7
 8015832:	600f      	str	r7, [r1, #0]
 8015834:	608b      	str	r3, [r1, #8]
 8015836:	f1b8 0f00 	cmp.w	r8, #0
 801583a:	dd9c      	ble.n	8015776 <__sflush_r+0x1a>
 801583c:	4643      	mov	r3, r8
 801583e:	463a      	mov	r2, r7
 8015840:	4628      	mov	r0, r5
 8015842:	6a21      	ldr	r1, [r4, #32]
 8015844:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015846:	47b0      	blx	r6
 8015848:	2800      	cmp	r0, #0
 801584a:	dc06      	bgt.n	801585a <__sflush_r+0xfe>
 801584c:	89a3      	ldrh	r3, [r4, #12]
 801584e:	f04f 30ff 	mov.w	r0, #4294967295
 8015852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015856:	81a3      	strh	r3, [r4, #12]
 8015858:	e78e      	b.n	8015778 <__sflush_r+0x1c>
 801585a:	4407      	add	r7, r0
 801585c:	eba8 0800 	sub.w	r8, r8, r0
 8015860:	e7e9      	b.n	8015836 <__sflush_r+0xda>
 8015862:	bf00      	nop
 8015864:	20400001 	.word	0x20400001

08015868 <_fflush_r>:
 8015868:	b538      	push	{r3, r4, r5, lr}
 801586a:	690b      	ldr	r3, [r1, #16]
 801586c:	4605      	mov	r5, r0
 801586e:	460c      	mov	r4, r1
 8015870:	b913      	cbnz	r3, 8015878 <_fflush_r+0x10>
 8015872:	2500      	movs	r5, #0
 8015874:	4628      	mov	r0, r5
 8015876:	bd38      	pop	{r3, r4, r5, pc}
 8015878:	b118      	cbz	r0, 8015882 <_fflush_r+0x1a>
 801587a:	6983      	ldr	r3, [r0, #24]
 801587c:	b90b      	cbnz	r3, 8015882 <_fflush_r+0x1a>
 801587e:	f000 f887 	bl	8015990 <__sinit>
 8015882:	4b14      	ldr	r3, [pc, #80]	; (80158d4 <_fflush_r+0x6c>)
 8015884:	429c      	cmp	r4, r3
 8015886:	d11b      	bne.n	80158c0 <_fflush_r+0x58>
 8015888:	686c      	ldr	r4, [r5, #4]
 801588a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d0ef      	beq.n	8015872 <_fflush_r+0xa>
 8015892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015894:	07d0      	lsls	r0, r2, #31
 8015896:	d404      	bmi.n	80158a2 <_fflush_r+0x3a>
 8015898:	0599      	lsls	r1, r3, #22
 801589a:	d402      	bmi.n	80158a2 <_fflush_r+0x3a>
 801589c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801589e:	f000 f915 	bl	8015acc <__retarget_lock_acquire_recursive>
 80158a2:	4628      	mov	r0, r5
 80158a4:	4621      	mov	r1, r4
 80158a6:	f7ff ff59 	bl	801575c <__sflush_r>
 80158aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80158ac:	4605      	mov	r5, r0
 80158ae:	07da      	lsls	r2, r3, #31
 80158b0:	d4e0      	bmi.n	8015874 <_fflush_r+0xc>
 80158b2:	89a3      	ldrh	r3, [r4, #12]
 80158b4:	059b      	lsls	r3, r3, #22
 80158b6:	d4dd      	bmi.n	8015874 <_fflush_r+0xc>
 80158b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80158ba:	f000 f908 	bl	8015ace <__retarget_lock_release_recursive>
 80158be:	e7d9      	b.n	8015874 <_fflush_r+0xc>
 80158c0:	4b05      	ldr	r3, [pc, #20]	; (80158d8 <_fflush_r+0x70>)
 80158c2:	429c      	cmp	r4, r3
 80158c4:	d101      	bne.n	80158ca <_fflush_r+0x62>
 80158c6:	68ac      	ldr	r4, [r5, #8]
 80158c8:	e7df      	b.n	801588a <_fflush_r+0x22>
 80158ca:	4b04      	ldr	r3, [pc, #16]	; (80158dc <_fflush_r+0x74>)
 80158cc:	429c      	cmp	r4, r3
 80158ce:	bf08      	it	eq
 80158d0:	68ec      	ldreq	r4, [r5, #12]
 80158d2:	e7da      	b.n	801588a <_fflush_r+0x22>
 80158d4:	08018070 	.word	0x08018070
 80158d8:	08018090 	.word	0x08018090
 80158dc:	08018050 	.word	0x08018050

080158e0 <std>:
 80158e0:	2300      	movs	r3, #0
 80158e2:	b510      	push	{r4, lr}
 80158e4:	4604      	mov	r4, r0
 80158e6:	e9c0 3300 	strd	r3, r3, [r0]
 80158ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158ee:	6083      	str	r3, [r0, #8]
 80158f0:	8181      	strh	r1, [r0, #12]
 80158f2:	6643      	str	r3, [r0, #100]	; 0x64
 80158f4:	81c2      	strh	r2, [r0, #14]
 80158f6:	6183      	str	r3, [r0, #24]
 80158f8:	4619      	mov	r1, r3
 80158fa:	2208      	movs	r2, #8
 80158fc:	305c      	adds	r0, #92	; 0x5c
 80158fe:	f7fd fba9 	bl	8013054 <memset>
 8015902:	4b05      	ldr	r3, [pc, #20]	; (8015918 <std+0x38>)
 8015904:	6224      	str	r4, [r4, #32]
 8015906:	6263      	str	r3, [r4, #36]	; 0x24
 8015908:	4b04      	ldr	r3, [pc, #16]	; (801591c <std+0x3c>)
 801590a:	62a3      	str	r3, [r4, #40]	; 0x28
 801590c:	4b04      	ldr	r3, [pc, #16]	; (8015920 <std+0x40>)
 801590e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015910:	4b04      	ldr	r3, [pc, #16]	; (8015924 <std+0x44>)
 8015912:	6323      	str	r3, [r4, #48]	; 0x30
 8015914:	bd10      	pop	{r4, pc}
 8015916:	bf00      	nop
 8015918:	08015cc5 	.word	0x08015cc5
 801591c:	08015ce7 	.word	0x08015ce7
 8015920:	08015d1f 	.word	0x08015d1f
 8015924:	08015d43 	.word	0x08015d43

08015928 <_cleanup_r>:
 8015928:	4901      	ldr	r1, [pc, #4]	; (8015930 <_cleanup_r+0x8>)
 801592a:	f000 b8af 	b.w	8015a8c <_fwalk_reent>
 801592e:	bf00      	nop
 8015930:	08015869 	.word	0x08015869

08015934 <__sfmoreglue>:
 8015934:	b570      	push	{r4, r5, r6, lr}
 8015936:	2568      	movs	r5, #104	; 0x68
 8015938:	1e4a      	subs	r2, r1, #1
 801593a:	4355      	muls	r5, r2
 801593c:	460e      	mov	r6, r1
 801593e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015942:	f7fd fbdb 	bl	80130fc <_malloc_r>
 8015946:	4604      	mov	r4, r0
 8015948:	b140      	cbz	r0, 801595c <__sfmoreglue+0x28>
 801594a:	2100      	movs	r1, #0
 801594c:	e9c0 1600 	strd	r1, r6, [r0]
 8015950:	300c      	adds	r0, #12
 8015952:	60a0      	str	r0, [r4, #8]
 8015954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015958:	f7fd fb7c 	bl	8013054 <memset>
 801595c:	4620      	mov	r0, r4
 801595e:	bd70      	pop	{r4, r5, r6, pc}

08015960 <__sfp_lock_acquire>:
 8015960:	4801      	ldr	r0, [pc, #4]	; (8015968 <__sfp_lock_acquire+0x8>)
 8015962:	f000 b8b3 	b.w	8015acc <__retarget_lock_acquire_recursive>
 8015966:	bf00      	nop
 8015968:	2000a728 	.word	0x2000a728

0801596c <__sfp_lock_release>:
 801596c:	4801      	ldr	r0, [pc, #4]	; (8015974 <__sfp_lock_release+0x8>)
 801596e:	f000 b8ae 	b.w	8015ace <__retarget_lock_release_recursive>
 8015972:	bf00      	nop
 8015974:	2000a728 	.word	0x2000a728

08015978 <__sinit_lock_acquire>:
 8015978:	4801      	ldr	r0, [pc, #4]	; (8015980 <__sinit_lock_acquire+0x8>)
 801597a:	f000 b8a7 	b.w	8015acc <__retarget_lock_acquire_recursive>
 801597e:	bf00      	nop
 8015980:	2000a723 	.word	0x2000a723

08015984 <__sinit_lock_release>:
 8015984:	4801      	ldr	r0, [pc, #4]	; (801598c <__sinit_lock_release+0x8>)
 8015986:	f000 b8a2 	b.w	8015ace <__retarget_lock_release_recursive>
 801598a:	bf00      	nop
 801598c:	2000a723 	.word	0x2000a723

08015990 <__sinit>:
 8015990:	b510      	push	{r4, lr}
 8015992:	4604      	mov	r4, r0
 8015994:	f7ff fff0 	bl	8015978 <__sinit_lock_acquire>
 8015998:	69a3      	ldr	r3, [r4, #24]
 801599a:	b11b      	cbz	r3, 80159a4 <__sinit+0x14>
 801599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159a0:	f7ff bff0 	b.w	8015984 <__sinit_lock_release>
 80159a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80159a8:	6523      	str	r3, [r4, #80]	; 0x50
 80159aa:	4b13      	ldr	r3, [pc, #76]	; (80159f8 <__sinit+0x68>)
 80159ac:	4a13      	ldr	r2, [pc, #76]	; (80159fc <__sinit+0x6c>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80159b2:	42a3      	cmp	r3, r4
 80159b4:	bf08      	it	eq
 80159b6:	2301      	moveq	r3, #1
 80159b8:	4620      	mov	r0, r4
 80159ba:	bf08      	it	eq
 80159bc:	61a3      	streq	r3, [r4, #24]
 80159be:	f000 f81f 	bl	8015a00 <__sfp>
 80159c2:	6060      	str	r0, [r4, #4]
 80159c4:	4620      	mov	r0, r4
 80159c6:	f000 f81b 	bl	8015a00 <__sfp>
 80159ca:	60a0      	str	r0, [r4, #8]
 80159cc:	4620      	mov	r0, r4
 80159ce:	f000 f817 	bl	8015a00 <__sfp>
 80159d2:	2200      	movs	r2, #0
 80159d4:	2104      	movs	r1, #4
 80159d6:	60e0      	str	r0, [r4, #12]
 80159d8:	6860      	ldr	r0, [r4, #4]
 80159da:	f7ff ff81 	bl	80158e0 <std>
 80159de:	2201      	movs	r2, #1
 80159e0:	2109      	movs	r1, #9
 80159e2:	68a0      	ldr	r0, [r4, #8]
 80159e4:	f7ff ff7c 	bl	80158e0 <std>
 80159e8:	2202      	movs	r2, #2
 80159ea:	2112      	movs	r1, #18
 80159ec:	68e0      	ldr	r0, [r4, #12]
 80159ee:	f7ff ff77 	bl	80158e0 <std>
 80159f2:	2301      	movs	r3, #1
 80159f4:	61a3      	str	r3, [r4, #24]
 80159f6:	e7d1      	b.n	801599c <__sinit+0xc>
 80159f8:	08017d78 	.word	0x08017d78
 80159fc:	08015929 	.word	0x08015929

08015a00 <__sfp>:
 8015a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a02:	4607      	mov	r7, r0
 8015a04:	f7ff ffac 	bl	8015960 <__sfp_lock_acquire>
 8015a08:	4b1e      	ldr	r3, [pc, #120]	; (8015a84 <__sfp+0x84>)
 8015a0a:	681e      	ldr	r6, [r3, #0]
 8015a0c:	69b3      	ldr	r3, [r6, #24]
 8015a0e:	b913      	cbnz	r3, 8015a16 <__sfp+0x16>
 8015a10:	4630      	mov	r0, r6
 8015a12:	f7ff ffbd 	bl	8015990 <__sinit>
 8015a16:	3648      	adds	r6, #72	; 0x48
 8015a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015a1c:	3b01      	subs	r3, #1
 8015a1e:	d503      	bpl.n	8015a28 <__sfp+0x28>
 8015a20:	6833      	ldr	r3, [r6, #0]
 8015a22:	b30b      	cbz	r3, 8015a68 <__sfp+0x68>
 8015a24:	6836      	ldr	r6, [r6, #0]
 8015a26:	e7f7      	b.n	8015a18 <__sfp+0x18>
 8015a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015a2c:	b9d5      	cbnz	r5, 8015a64 <__sfp+0x64>
 8015a2e:	4b16      	ldr	r3, [pc, #88]	; (8015a88 <__sfp+0x88>)
 8015a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015a34:	60e3      	str	r3, [r4, #12]
 8015a36:	6665      	str	r5, [r4, #100]	; 0x64
 8015a38:	f000 f847 	bl	8015aca <__retarget_lock_init_recursive>
 8015a3c:	f7ff ff96 	bl	801596c <__sfp_lock_release>
 8015a40:	2208      	movs	r2, #8
 8015a42:	4629      	mov	r1, r5
 8015a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015a4c:	6025      	str	r5, [r4, #0]
 8015a4e:	61a5      	str	r5, [r4, #24]
 8015a50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a54:	f7fd fafe 	bl	8013054 <memset>
 8015a58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015a5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015a60:	4620      	mov	r0, r4
 8015a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a64:	3468      	adds	r4, #104	; 0x68
 8015a66:	e7d9      	b.n	8015a1c <__sfp+0x1c>
 8015a68:	2104      	movs	r1, #4
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f7ff ff62 	bl	8015934 <__sfmoreglue>
 8015a70:	4604      	mov	r4, r0
 8015a72:	6030      	str	r0, [r6, #0]
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d1d5      	bne.n	8015a24 <__sfp+0x24>
 8015a78:	f7ff ff78 	bl	801596c <__sfp_lock_release>
 8015a7c:	230c      	movs	r3, #12
 8015a7e:	603b      	str	r3, [r7, #0]
 8015a80:	e7ee      	b.n	8015a60 <__sfp+0x60>
 8015a82:	bf00      	nop
 8015a84:	08017d78 	.word	0x08017d78
 8015a88:	ffff0001 	.word	0xffff0001

08015a8c <_fwalk_reent>:
 8015a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a90:	4606      	mov	r6, r0
 8015a92:	4688      	mov	r8, r1
 8015a94:	2700      	movs	r7, #0
 8015a96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8015aa2:	d505      	bpl.n	8015ab0 <_fwalk_reent+0x24>
 8015aa4:	6824      	ldr	r4, [r4, #0]
 8015aa6:	2c00      	cmp	r4, #0
 8015aa8:	d1f7      	bne.n	8015a9a <_fwalk_reent+0xe>
 8015aaa:	4638      	mov	r0, r7
 8015aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ab0:	89ab      	ldrh	r3, [r5, #12]
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d907      	bls.n	8015ac6 <_fwalk_reent+0x3a>
 8015ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015aba:	3301      	adds	r3, #1
 8015abc:	d003      	beq.n	8015ac6 <_fwalk_reent+0x3a>
 8015abe:	4629      	mov	r1, r5
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	47c0      	blx	r8
 8015ac4:	4307      	orrs	r7, r0
 8015ac6:	3568      	adds	r5, #104	; 0x68
 8015ac8:	e7e9      	b.n	8015a9e <_fwalk_reent+0x12>

08015aca <__retarget_lock_init_recursive>:
 8015aca:	4770      	bx	lr

08015acc <__retarget_lock_acquire_recursive>:
 8015acc:	4770      	bx	lr

08015ace <__retarget_lock_release_recursive>:
 8015ace:	4770      	bx	lr

08015ad0 <__swhatbuf_r>:
 8015ad0:	b570      	push	{r4, r5, r6, lr}
 8015ad2:	460e      	mov	r6, r1
 8015ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ad8:	4614      	mov	r4, r2
 8015ada:	2900      	cmp	r1, #0
 8015adc:	461d      	mov	r5, r3
 8015ade:	b096      	sub	sp, #88	; 0x58
 8015ae0:	da07      	bge.n	8015af2 <__swhatbuf_r+0x22>
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	602b      	str	r3, [r5, #0]
 8015ae6:	89b3      	ldrh	r3, [r6, #12]
 8015ae8:	061a      	lsls	r2, r3, #24
 8015aea:	d410      	bmi.n	8015b0e <__swhatbuf_r+0x3e>
 8015aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015af0:	e00e      	b.n	8015b10 <__swhatbuf_r+0x40>
 8015af2:	466a      	mov	r2, sp
 8015af4:	f000 f958 	bl	8015da8 <_fstat_r>
 8015af8:	2800      	cmp	r0, #0
 8015afa:	dbf2      	blt.n	8015ae2 <__swhatbuf_r+0x12>
 8015afc:	9a01      	ldr	r2, [sp, #4]
 8015afe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b06:	425a      	negs	r2, r3
 8015b08:	415a      	adcs	r2, r3
 8015b0a:	602a      	str	r2, [r5, #0]
 8015b0c:	e7ee      	b.n	8015aec <__swhatbuf_r+0x1c>
 8015b0e:	2340      	movs	r3, #64	; 0x40
 8015b10:	2000      	movs	r0, #0
 8015b12:	6023      	str	r3, [r4, #0]
 8015b14:	b016      	add	sp, #88	; 0x58
 8015b16:	bd70      	pop	{r4, r5, r6, pc}

08015b18 <__smakebuf_r>:
 8015b18:	898b      	ldrh	r3, [r1, #12]
 8015b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b1c:	079d      	lsls	r5, r3, #30
 8015b1e:	4606      	mov	r6, r0
 8015b20:	460c      	mov	r4, r1
 8015b22:	d507      	bpl.n	8015b34 <__smakebuf_r+0x1c>
 8015b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b28:	6023      	str	r3, [r4, #0]
 8015b2a:	6123      	str	r3, [r4, #16]
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	6163      	str	r3, [r4, #20]
 8015b30:	b002      	add	sp, #8
 8015b32:	bd70      	pop	{r4, r5, r6, pc}
 8015b34:	466a      	mov	r2, sp
 8015b36:	ab01      	add	r3, sp, #4
 8015b38:	f7ff ffca 	bl	8015ad0 <__swhatbuf_r>
 8015b3c:	9900      	ldr	r1, [sp, #0]
 8015b3e:	4605      	mov	r5, r0
 8015b40:	4630      	mov	r0, r6
 8015b42:	f7fd fadb 	bl	80130fc <_malloc_r>
 8015b46:	b948      	cbnz	r0, 8015b5c <__smakebuf_r+0x44>
 8015b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b4c:	059a      	lsls	r2, r3, #22
 8015b4e:	d4ef      	bmi.n	8015b30 <__smakebuf_r+0x18>
 8015b50:	f023 0303 	bic.w	r3, r3, #3
 8015b54:	f043 0302 	orr.w	r3, r3, #2
 8015b58:	81a3      	strh	r3, [r4, #12]
 8015b5a:	e7e3      	b.n	8015b24 <__smakebuf_r+0xc>
 8015b5c:	4b0d      	ldr	r3, [pc, #52]	; (8015b94 <__smakebuf_r+0x7c>)
 8015b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b60:	89a3      	ldrh	r3, [r4, #12]
 8015b62:	6020      	str	r0, [r4, #0]
 8015b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b68:	81a3      	strh	r3, [r4, #12]
 8015b6a:	9b00      	ldr	r3, [sp, #0]
 8015b6c:	6120      	str	r0, [r4, #16]
 8015b6e:	6163      	str	r3, [r4, #20]
 8015b70:	9b01      	ldr	r3, [sp, #4]
 8015b72:	b15b      	cbz	r3, 8015b8c <__smakebuf_r+0x74>
 8015b74:	4630      	mov	r0, r6
 8015b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b7a:	f000 f927 	bl	8015dcc <_isatty_r>
 8015b7e:	b128      	cbz	r0, 8015b8c <__smakebuf_r+0x74>
 8015b80:	89a3      	ldrh	r3, [r4, #12]
 8015b82:	f023 0303 	bic.w	r3, r3, #3
 8015b86:	f043 0301 	orr.w	r3, r3, #1
 8015b8a:	81a3      	strh	r3, [r4, #12]
 8015b8c:	89a0      	ldrh	r0, [r4, #12]
 8015b8e:	4305      	orrs	r5, r0
 8015b90:	81a5      	strh	r5, [r4, #12]
 8015b92:	e7cd      	b.n	8015b30 <__smakebuf_r+0x18>
 8015b94:	08015929 	.word	0x08015929

08015b98 <__ascii_mbtowc>:
 8015b98:	b082      	sub	sp, #8
 8015b9a:	b901      	cbnz	r1, 8015b9e <__ascii_mbtowc+0x6>
 8015b9c:	a901      	add	r1, sp, #4
 8015b9e:	b142      	cbz	r2, 8015bb2 <__ascii_mbtowc+0x1a>
 8015ba0:	b14b      	cbz	r3, 8015bb6 <__ascii_mbtowc+0x1e>
 8015ba2:	7813      	ldrb	r3, [r2, #0]
 8015ba4:	600b      	str	r3, [r1, #0]
 8015ba6:	7812      	ldrb	r2, [r2, #0]
 8015ba8:	1e10      	subs	r0, r2, #0
 8015baa:	bf18      	it	ne
 8015bac:	2001      	movne	r0, #1
 8015bae:	b002      	add	sp, #8
 8015bb0:	4770      	bx	lr
 8015bb2:	4610      	mov	r0, r2
 8015bb4:	e7fb      	b.n	8015bae <__ascii_mbtowc+0x16>
 8015bb6:	f06f 0001 	mvn.w	r0, #1
 8015bba:	e7f8      	b.n	8015bae <__ascii_mbtowc+0x16>

08015bbc <memmove>:
 8015bbc:	4288      	cmp	r0, r1
 8015bbe:	b510      	push	{r4, lr}
 8015bc0:	eb01 0402 	add.w	r4, r1, r2
 8015bc4:	d902      	bls.n	8015bcc <memmove+0x10>
 8015bc6:	4284      	cmp	r4, r0
 8015bc8:	4623      	mov	r3, r4
 8015bca:	d807      	bhi.n	8015bdc <memmove+0x20>
 8015bcc:	1e43      	subs	r3, r0, #1
 8015bce:	42a1      	cmp	r1, r4
 8015bd0:	d008      	beq.n	8015be4 <memmove+0x28>
 8015bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015bda:	e7f8      	b.n	8015bce <memmove+0x12>
 8015bdc:	4601      	mov	r1, r0
 8015bde:	4402      	add	r2, r0
 8015be0:	428a      	cmp	r2, r1
 8015be2:	d100      	bne.n	8015be6 <memmove+0x2a>
 8015be4:	bd10      	pop	{r4, pc}
 8015be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015bee:	e7f7      	b.n	8015be0 <memmove+0x24>

08015bf0 <_realloc_r>:
 8015bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bf2:	4607      	mov	r7, r0
 8015bf4:	4614      	mov	r4, r2
 8015bf6:	460e      	mov	r6, r1
 8015bf8:	b921      	cbnz	r1, 8015c04 <_realloc_r+0x14>
 8015bfa:	4611      	mov	r1, r2
 8015bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c00:	f7fd ba7c 	b.w	80130fc <_malloc_r>
 8015c04:	b922      	cbnz	r2, 8015c10 <_realloc_r+0x20>
 8015c06:	f7fd fa2d 	bl	8013064 <_free_r>
 8015c0a:	4625      	mov	r5, r4
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c10:	f000 f8fe 	bl	8015e10 <_malloc_usable_size_r>
 8015c14:	42a0      	cmp	r0, r4
 8015c16:	d20f      	bcs.n	8015c38 <_realloc_r+0x48>
 8015c18:	4621      	mov	r1, r4
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	f7fd fa6e 	bl	80130fc <_malloc_r>
 8015c20:	4605      	mov	r5, r0
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d0f2      	beq.n	8015c0c <_realloc_r+0x1c>
 8015c26:	4631      	mov	r1, r6
 8015c28:	4622      	mov	r2, r4
 8015c2a:	f7fd fa05 	bl	8013038 <memcpy>
 8015c2e:	4631      	mov	r1, r6
 8015c30:	4638      	mov	r0, r7
 8015c32:	f7fd fa17 	bl	8013064 <_free_r>
 8015c36:	e7e9      	b.n	8015c0c <_realloc_r+0x1c>
 8015c38:	4635      	mov	r5, r6
 8015c3a:	e7e7      	b.n	8015c0c <_realloc_r+0x1c>

08015c3c <_raise_r>:
 8015c3c:	291f      	cmp	r1, #31
 8015c3e:	b538      	push	{r3, r4, r5, lr}
 8015c40:	4604      	mov	r4, r0
 8015c42:	460d      	mov	r5, r1
 8015c44:	d904      	bls.n	8015c50 <_raise_r+0x14>
 8015c46:	2316      	movs	r3, #22
 8015c48:	6003      	str	r3, [r0, #0]
 8015c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c4e:	bd38      	pop	{r3, r4, r5, pc}
 8015c50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015c52:	b112      	cbz	r2, 8015c5a <_raise_r+0x1e>
 8015c54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c58:	b94b      	cbnz	r3, 8015c6e <_raise_r+0x32>
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	f000 f830 	bl	8015cc0 <_getpid_r>
 8015c60:	462a      	mov	r2, r5
 8015c62:	4601      	mov	r1, r0
 8015c64:	4620      	mov	r0, r4
 8015c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c6a:	f000 b817 	b.w	8015c9c <_kill_r>
 8015c6e:	2b01      	cmp	r3, #1
 8015c70:	d00a      	beq.n	8015c88 <_raise_r+0x4c>
 8015c72:	1c59      	adds	r1, r3, #1
 8015c74:	d103      	bne.n	8015c7e <_raise_r+0x42>
 8015c76:	2316      	movs	r3, #22
 8015c78:	6003      	str	r3, [r0, #0]
 8015c7a:	2001      	movs	r0, #1
 8015c7c:	e7e7      	b.n	8015c4e <_raise_r+0x12>
 8015c7e:	2400      	movs	r4, #0
 8015c80:	4628      	mov	r0, r5
 8015c82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015c86:	4798      	blx	r3
 8015c88:	2000      	movs	r0, #0
 8015c8a:	e7e0      	b.n	8015c4e <_raise_r+0x12>

08015c8c <raise>:
 8015c8c:	4b02      	ldr	r3, [pc, #8]	; (8015c98 <raise+0xc>)
 8015c8e:	4601      	mov	r1, r0
 8015c90:	6818      	ldr	r0, [r3, #0]
 8015c92:	f7ff bfd3 	b.w	8015c3c <_raise_r>
 8015c96:	bf00      	nop
 8015c98:	20000124 	.word	0x20000124

08015c9c <_kill_r>:
 8015c9c:	b538      	push	{r3, r4, r5, lr}
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	4d06      	ldr	r5, [pc, #24]	; (8015cbc <_kill_r+0x20>)
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	4608      	mov	r0, r1
 8015ca6:	4611      	mov	r1, r2
 8015ca8:	602b      	str	r3, [r5, #0]
 8015caa:	f001 fca1 	bl	80175f0 <_kill>
 8015cae:	1c43      	adds	r3, r0, #1
 8015cb0:	d102      	bne.n	8015cb8 <_kill_r+0x1c>
 8015cb2:	682b      	ldr	r3, [r5, #0]
 8015cb4:	b103      	cbz	r3, 8015cb8 <_kill_r+0x1c>
 8015cb6:	6023      	str	r3, [r4, #0]
 8015cb8:	bd38      	pop	{r3, r4, r5, pc}
 8015cba:	bf00      	nop
 8015cbc:	2000a71c 	.word	0x2000a71c

08015cc0 <_getpid_r>:
 8015cc0:	f001 bc86 	b.w	80175d0 <_getpid>

08015cc4 <__sread>:
 8015cc4:	b510      	push	{r4, lr}
 8015cc6:	460c      	mov	r4, r1
 8015cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ccc:	f000 f8a8 	bl	8015e20 <_read_r>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	bfab      	itete	ge
 8015cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8015cd8:	181b      	addge	r3, r3, r0
 8015cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015cde:	bfac      	ite	ge
 8015ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ce2:	81a3      	strhlt	r3, [r4, #12]
 8015ce4:	bd10      	pop	{r4, pc}

08015ce6 <__swrite>:
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	461f      	mov	r7, r3
 8015cec:	898b      	ldrh	r3, [r1, #12]
 8015cee:	4605      	mov	r5, r0
 8015cf0:	05db      	lsls	r3, r3, #23
 8015cf2:	460c      	mov	r4, r1
 8015cf4:	4616      	mov	r6, r2
 8015cf6:	d505      	bpl.n	8015d04 <__swrite+0x1e>
 8015cf8:	2302      	movs	r3, #2
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d00:	f000 f874 	bl	8015dec <_lseek_r>
 8015d04:	89a3      	ldrh	r3, [r4, #12]
 8015d06:	4632      	mov	r2, r6
 8015d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d0c:	81a3      	strh	r3, [r4, #12]
 8015d0e:	4628      	mov	r0, r5
 8015d10:	463b      	mov	r3, r7
 8015d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d1a:	f000 b823 	b.w	8015d64 <_write_r>

08015d1e <__sseek>:
 8015d1e:	b510      	push	{r4, lr}
 8015d20:	460c      	mov	r4, r1
 8015d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d26:	f000 f861 	bl	8015dec <_lseek_r>
 8015d2a:	1c43      	adds	r3, r0, #1
 8015d2c:	89a3      	ldrh	r3, [r4, #12]
 8015d2e:	bf15      	itete	ne
 8015d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d3a:	81a3      	strheq	r3, [r4, #12]
 8015d3c:	bf18      	it	ne
 8015d3e:	81a3      	strhne	r3, [r4, #12]
 8015d40:	bd10      	pop	{r4, pc}

08015d42 <__sclose>:
 8015d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d46:	f000 b81f 	b.w	8015d88 <_close_r>

08015d4a <__ascii_wctomb>:
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	4608      	mov	r0, r1
 8015d4e:	b141      	cbz	r1, 8015d62 <__ascii_wctomb+0x18>
 8015d50:	2aff      	cmp	r2, #255	; 0xff
 8015d52:	d904      	bls.n	8015d5e <__ascii_wctomb+0x14>
 8015d54:	228a      	movs	r2, #138	; 0x8a
 8015d56:	f04f 30ff 	mov.w	r0, #4294967295
 8015d5a:	601a      	str	r2, [r3, #0]
 8015d5c:	4770      	bx	lr
 8015d5e:	2001      	movs	r0, #1
 8015d60:	700a      	strb	r2, [r1, #0]
 8015d62:	4770      	bx	lr

08015d64 <_write_r>:
 8015d64:	b538      	push	{r3, r4, r5, lr}
 8015d66:	4604      	mov	r4, r0
 8015d68:	4608      	mov	r0, r1
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	4d05      	ldr	r5, [pc, #20]	; (8015d84 <_write_r+0x20>)
 8015d70:	602a      	str	r2, [r5, #0]
 8015d72:	461a      	mov	r2, r3
 8015d74:	f001 fc62 	bl	801763c <_write>
 8015d78:	1c43      	adds	r3, r0, #1
 8015d7a:	d102      	bne.n	8015d82 <_write_r+0x1e>
 8015d7c:	682b      	ldr	r3, [r5, #0]
 8015d7e:	b103      	cbz	r3, 8015d82 <_write_r+0x1e>
 8015d80:	6023      	str	r3, [r4, #0]
 8015d82:	bd38      	pop	{r3, r4, r5, pc}
 8015d84:	2000a71c 	.word	0x2000a71c

08015d88 <_close_r>:
 8015d88:	b538      	push	{r3, r4, r5, lr}
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	4d05      	ldr	r5, [pc, #20]	; (8015da4 <_close_r+0x1c>)
 8015d8e:	4604      	mov	r4, r0
 8015d90:	4608      	mov	r0, r1
 8015d92:	602b      	str	r3, [r5, #0]
 8015d94:	f001 fc0c 	bl	80175b0 <_close>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d102      	bne.n	8015da2 <_close_r+0x1a>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	b103      	cbz	r3, 8015da2 <_close_r+0x1a>
 8015da0:	6023      	str	r3, [r4, #0]
 8015da2:	bd38      	pop	{r3, r4, r5, pc}
 8015da4:	2000a71c 	.word	0x2000a71c

08015da8 <_fstat_r>:
 8015da8:	b538      	push	{r3, r4, r5, lr}
 8015daa:	2300      	movs	r3, #0
 8015dac:	4d06      	ldr	r5, [pc, #24]	; (8015dc8 <_fstat_r+0x20>)
 8015dae:	4604      	mov	r4, r0
 8015db0:	4608      	mov	r0, r1
 8015db2:	4611      	mov	r1, r2
 8015db4:	602b      	str	r3, [r5, #0]
 8015db6:	f001 fc03 	bl	80175c0 <_fstat>
 8015dba:	1c43      	adds	r3, r0, #1
 8015dbc:	d102      	bne.n	8015dc4 <_fstat_r+0x1c>
 8015dbe:	682b      	ldr	r3, [r5, #0]
 8015dc0:	b103      	cbz	r3, 8015dc4 <_fstat_r+0x1c>
 8015dc2:	6023      	str	r3, [r4, #0]
 8015dc4:	bd38      	pop	{r3, r4, r5, pc}
 8015dc6:	bf00      	nop
 8015dc8:	2000a71c 	.word	0x2000a71c

08015dcc <_isatty_r>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	2300      	movs	r3, #0
 8015dd0:	4d05      	ldr	r5, [pc, #20]	; (8015de8 <_isatty_r+0x1c>)
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	4608      	mov	r0, r1
 8015dd6:	602b      	str	r3, [r5, #0]
 8015dd8:	f001 fc02 	bl	80175e0 <_isatty>
 8015ddc:	1c43      	adds	r3, r0, #1
 8015dde:	d102      	bne.n	8015de6 <_isatty_r+0x1a>
 8015de0:	682b      	ldr	r3, [r5, #0]
 8015de2:	b103      	cbz	r3, 8015de6 <_isatty_r+0x1a>
 8015de4:	6023      	str	r3, [r4, #0]
 8015de6:	bd38      	pop	{r3, r4, r5, pc}
 8015de8:	2000a71c 	.word	0x2000a71c

08015dec <_lseek_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	4604      	mov	r4, r0
 8015df0:	4608      	mov	r0, r1
 8015df2:	4611      	mov	r1, r2
 8015df4:	2200      	movs	r2, #0
 8015df6:	4d05      	ldr	r5, [pc, #20]	; (8015e0c <_lseek_r+0x20>)
 8015df8:	602a      	str	r2, [r5, #0]
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	f001 fc00 	bl	8017600 <_lseek>
 8015e00:	1c43      	adds	r3, r0, #1
 8015e02:	d102      	bne.n	8015e0a <_lseek_r+0x1e>
 8015e04:	682b      	ldr	r3, [r5, #0]
 8015e06:	b103      	cbz	r3, 8015e0a <_lseek_r+0x1e>
 8015e08:	6023      	str	r3, [r4, #0]
 8015e0a:	bd38      	pop	{r3, r4, r5, pc}
 8015e0c:	2000a71c 	.word	0x2000a71c

08015e10 <_malloc_usable_size_r>:
 8015e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e14:	1f18      	subs	r0, r3, #4
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	bfbc      	itt	lt
 8015e1a:	580b      	ldrlt	r3, [r1, r0]
 8015e1c:	18c0      	addlt	r0, r0, r3
 8015e1e:	4770      	bx	lr

08015e20 <_read_r>:
 8015e20:	b538      	push	{r3, r4, r5, lr}
 8015e22:	4604      	mov	r4, r0
 8015e24:	4608      	mov	r0, r1
 8015e26:	4611      	mov	r1, r2
 8015e28:	2200      	movs	r2, #0
 8015e2a:	4d05      	ldr	r5, [pc, #20]	; (8015e40 <_read_r+0x20>)
 8015e2c:	602a      	str	r2, [r5, #0]
 8015e2e:	461a      	mov	r2, r3
 8015e30:	f001 fbee 	bl	8017610 <_read>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	d102      	bne.n	8015e3e <_read_r+0x1e>
 8015e38:	682b      	ldr	r3, [r5, #0]
 8015e3a:	b103      	cbz	r3, 8015e3e <_read_r+0x1e>
 8015e3c:	6023      	str	r3, [r4, #0]
 8015e3e:	bd38      	pop	{r3, r4, r5, pc}
 8015e40:	2000a71c 	.word	0x2000a71c
 8015e44:	00000000 	.word	0x00000000

08015e48 <exp>:
 8015e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	460f      	mov	r7, r1
 8015e4e:	f000 f923 	bl	8016098 <__ieee754_exp>
 8015e52:	4b1b      	ldr	r3, [pc, #108]	; (8015ec0 <exp+0x78>)
 8015e54:	4604      	mov	r4, r0
 8015e56:	f993 3000 	ldrsb.w	r3, [r3]
 8015e5a:	460d      	mov	r5, r1
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	d012      	beq.n	8015e86 <exp+0x3e>
 8015e60:	4630      	mov	r0, r6
 8015e62:	4639      	mov	r1, r7
 8015e64:	f001 f8cd 	bl	8017002 <finite>
 8015e68:	b168      	cbz	r0, 8015e86 <exp+0x3e>
 8015e6a:	a311      	add	r3, pc, #68	; (adr r3, 8015eb0 <exp+0x68>)
 8015e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e70:	4630      	mov	r0, r6
 8015e72:	4639      	mov	r1, r7
 8015e74:	f7ea fe2c 	bl	8000ad0 <__aeabi_dcmpgt>
 8015e78:	b140      	cbz	r0, 8015e8c <exp+0x44>
 8015e7a:	f001 fb93 	bl	80175a4 <__errno>
 8015e7e:	2322      	movs	r3, #34	; 0x22
 8015e80:	2400      	movs	r4, #0
 8015e82:	4d10      	ldr	r5, [pc, #64]	; (8015ec4 <exp+0x7c>)
 8015e84:	6003      	str	r3, [r0, #0]
 8015e86:	4620      	mov	r0, r4
 8015e88:	4629      	mov	r1, r5
 8015e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e8c:	4630      	mov	r0, r6
 8015e8e:	a30a      	add	r3, pc, #40	; (adr r3, 8015eb8 <exp+0x70>)
 8015e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e94:	4639      	mov	r1, r7
 8015e96:	f7ea fdfd 	bl	8000a94 <__aeabi_dcmplt>
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	d0f3      	beq.n	8015e86 <exp+0x3e>
 8015e9e:	f001 fb81 	bl	80175a4 <__errno>
 8015ea2:	2322      	movs	r3, #34	; 0x22
 8015ea4:	2400      	movs	r4, #0
 8015ea6:	2500      	movs	r5, #0
 8015ea8:	6003      	str	r3, [r0, #0]
 8015eaa:	e7ec      	b.n	8015e86 <exp+0x3e>
 8015eac:	f3af 8000 	nop.w
 8015eb0:	fefa39ef 	.word	0xfefa39ef
 8015eb4:	40862e42 	.word	0x40862e42
 8015eb8:	d52d3051 	.word	0xd52d3051
 8015ebc:	c0874910 	.word	0xc0874910
 8015ec0:	200002f4 	.word	0x200002f4
 8015ec4:	7ff00000 	.word	0x7ff00000

08015ec8 <log10>:
 8015ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eca:	4604      	mov	r4, r0
 8015ecc:	460d      	mov	r5, r1
 8015ece:	f000 fa4f 	bl	8016370 <__ieee754_log10>
 8015ed2:	4b17      	ldr	r3, [pc, #92]	; (8015f30 <log10+0x68>)
 8015ed4:	4606      	mov	r6, r0
 8015ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8015eda:	460f      	mov	r7, r1
 8015edc:	3301      	adds	r3, #1
 8015ede:	d01a      	beq.n	8015f16 <log10+0x4e>
 8015ee0:	4622      	mov	r2, r4
 8015ee2:	462b      	mov	r3, r5
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	f7ea fdfc 	bl	8000ae4 <__aeabi_dcmpun>
 8015eec:	b998      	cbnz	r0, 8015f16 <log10+0x4e>
 8015eee:	2200      	movs	r2, #0
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	f7ea fdd7 	bl	8000aa8 <__aeabi_dcmple>
 8015efa:	b160      	cbz	r0, 8015f16 <log10+0x4e>
 8015efc:	2200      	movs	r2, #0
 8015efe:	2300      	movs	r3, #0
 8015f00:	4620      	mov	r0, r4
 8015f02:	4629      	mov	r1, r5
 8015f04:	f7ea fdbc 	bl	8000a80 <__aeabi_dcmpeq>
 8015f08:	b140      	cbz	r0, 8015f1c <log10+0x54>
 8015f0a:	f001 fb4b 	bl	80175a4 <__errno>
 8015f0e:	2322      	movs	r3, #34	; 0x22
 8015f10:	2600      	movs	r6, #0
 8015f12:	4f08      	ldr	r7, [pc, #32]	; (8015f34 <log10+0x6c>)
 8015f14:	6003      	str	r3, [r0, #0]
 8015f16:	4630      	mov	r0, r6
 8015f18:	4639      	mov	r1, r7
 8015f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f1c:	f001 fb42 	bl	80175a4 <__errno>
 8015f20:	2321      	movs	r3, #33	; 0x21
 8015f22:	6003      	str	r3, [r0, #0]
 8015f24:	4804      	ldr	r0, [pc, #16]	; (8015f38 <log10+0x70>)
 8015f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015f2a:	f001 b871 	b.w	8017010 <nan>
 8015f2e:	bf00      	nop
 8015f30:	200002f4 	.word	0x200002f4
 8015f34:	fff00000 	.word	0xfff00000
 8015f38:	08017e61 	.word	0x08017e61

08015f3c <pow>:
 8015f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f40:	461f      	mov	r7, r3
 8015f42:	4680      	mov	r8, r0
 8015f44:	4689      	mov	r9, r1
 8015f46:	4616      	mov	r6, r2
 8015f48:	f000 fa96 	bl	8016478 <__ieee754_pow>
 8015f4c:	4b4d      	ldr	r3, [pc, #308]	; (8016084 <pow+0x148>)
 8015f4e:	4604      	mov	r4, r0
 8015f50:	f993 3000 	ldrsb.w	r3, [r3]
 8015f54:	460d      	mov	r5, r1
 8015f56:	3301      	adds	r3, #1
 8015f58:	d015      	beq.n	8015f86 <pow+0x4a>
 8015f5a:	4632      	mov	r2, r6
 8015f5c:	463b      	mov	r3, r7
 8015f5e:	4630      	mov	r0, r6
 8015f60:	4639      	mov	r1, r7
 8015f62:	f7ea fdbf 	bl	8000ae4 <__aeabi_dcmpun>
 8015f66:	b970      	cbnz	r0, 8015f86 <pow+0x4a>
 8015f68:	4642      	mov	r2, r8
 8015f6a:	464b      	mov	r3, r9
 8015f6c:	4640      	mov	r0, r8
 8015f6e:	4649      	mov	r1, r9
 8015f70:	f7ea fdb8 	bl	8000ae4 <__aeabi_dcmpun>
 8015f74:	2200      	movs	r2, #0
 8015f76:	2300      	movs	r3, #0
 8015f78:	b148      	cbz	r0, 8015f8e <pow+0x52>
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	f7ea fd7f 	bl	8000a80 <__aeabi_dcmpeq>
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d17b      	bne.n	801607e <pow+0x142>
 8015f86:	4620      	mov	r0, r4
 8015f88:	4629      	mov	r1, r5
 8015f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f8e:	4640      	mov	r0, r8
 8015f90:	4649      	mov	r1, r9
 8015f92:	f7ea fd75 	bl	8000a80 <__aeabi_dcmpeq>
 8015f96:	b1e0      	cbz	r0, 8015fd2 <pow+0x96>
 8015f98:	2200      	movs	r2, #0
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	4630      	mov	r0, r6
 8015f9e:	4639      	mov	r1, r7
 8015fa0:	f7ea fd6e 	bl	8000a80 <__aeabi_dcmpeq>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d16a      	bne.n	801607e <pow+0x142>
 8015fa8:	4630      	mov	r0, r6
 8015faa:	4639      	mov	r1, r7
 8015fac:	f001 f829 	bl	8017002 <finite>
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	d0e8      	beq.n	8015f86 <pow+0x4a>
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	4630      	mov	r0, r6
 8015fba:	4639      	mov	r1, r7
 8015fbc:	f7ea fd6a 	bl	8000a94 <__aeabi_dcmplt>
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	d0e0      	beq.n	8015f86 <pow+0x4a>
 8015fc4:	f001 faee 	bl	80175a4 <__errno>
 8015fc8:	2321      	movs	r3, #33	; 0x21
 8015fca:	2400      	movs	r4, #0
 8015fcc:	6003      	str	r3, [r0, #0]
 8015fce:	4d2e      	ldr	r5, [pc, #184]	; (8016088 <pow+0x14c>)
 8015fd0:	e7d9      	b.n	8015f86 <pow+0x4a>
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	f001 f814 	bl	8017002 <finite>
 8015fda:	bba8      	cbnz	r0, 8016048 <pow+0x10c>
 8015fdc:	4640      	mov	r0, r8
 8015fde:	4649      	mov	r1, r9
 8015fe0:	f001 f80f 	bl	8017002 <finite>
 8015fe4:	b380      	cbz	r0, 8016048 <pow+0x10c>
 8015fe6:	4630      	mov	r0, r6
 8015fe8:	4639      	mov	r1, r7
 8015fea:	f001 f80a 	bl	8017002 <finite>
 8015fee:	b358      	cbz	r0, 8016048 <pow+0x10c>
 8015ff0:	4622      	mov	r2, r4
 8015ff2:	462b      	mov	r3, r5
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	4629      	mov	r1, r5
 8015ff8:	f7ea fd74 	bl	8000ae4 <__aeabi_dcmpun>
 8015ffc:	b160      	cbz	r0, 8016018 <pow+0xdc>
 8015ffe:	f001 fad1 	bl	80175a4 <__errno>
 8016002:	2321      	movs	r3, #33	; 0x21
 8016004:	2200      	movs	r2, #0
 8016006:	6003      	str	r3, [r0, #0]
 8016008:	2300      	movs	r3, #0
 801600a:	4610      	mov	r0, r2
 801600c:	4619      	mov	r1, r3
 801600e:	f7ea fbf9 	bl	8000804 <__aeabi_ddiv>
 8016012:	4604      	mov	r4, r0
 8016014:	460d      	mov	r5, r1
 8016016:	e7b6      	b.n	8015f86 <pow+0x4a>
 8016018:	f001 fac4 	bl	80175a4 <__errno>
 801601c:	2322      	movs	r3, #34	; 0x22
 801601e:	2200      	movs	r2, #0
 8016020:	6003      	str	r3, [r0, #0]
 8016022:	4649      	mov	r1, r9
 8016024:	2300      	movs	r3, #0
 8016026:	4640      	mov	r0, r8
 8016028:	f7ea fd34 	bl	8000a94 <__aeabi_dcmplt>
 801602c:	2400      	movs	r4, #0
 801602e:	b148      	cbz	r0, 8016044 <pow+0x108>
 8016030:	4630      	mov	r0, r6
 8016032:	4639      	mov	r1, r7
 8016034:	f000 fff2 	bl	801701c <rint>
 8016038:	4632      	mov	r2, r6
 801603a:	463b      	mov	r3, r7
 801603c:	f7ea fd20 	bl	8000a80 <__aeabi_dcmpeq>
 8016040:	2800      	cmp	r0, #0
 8016042:	d0c4      	beq.n	8015fce <pow+0x92>
 8016044:	4d11      	ldr	r5, [pc, #68]	; (801608c <pow+0x150>)
 8016046:	e79e      	b.n	8015f86 <pow+0x4a>
 8016048:	2200      	movs	r2, #0
 801604a:	2300      	movs	r3, #0
 801604c:	4620      	mov	r0, r4
 801604e:	4629      	mov	r1, r5
 8016050:	f7ea fd16 	bl	8000a80 <__aeabi_dcmpeq>
 8016054:	2800      	cmp	r0, #0
 8016056:	d096      	beq.n	8015f86 <pow+0x4a>
 8016058:	4640      	mov	r0, r8
 801605a:	4649      	mov	r1, r9
 801605c:	f000 ffd1 	bl	8017002 <finite>
 8016060:	2800      	cmp	r0, #0
 8016062:	d090      	beq.n	8015f86 <pow+0x4a>
 8016064:	4630      	mov	r0, r6
 8016066:	4639      	mov	r1, r7
 8016068:	f000 ffcb 	bl	8017002 <finite>
 801606c:	2800      	cmp	r0, #0
 801606e:	d08a      	beq.n	8015f86 <pow+0x4a>
 8016070:	f001 fa98 	bl	80175a4 <__errno>
 8016074:	2322      	movs	r3, #34	; 0x22
 8016076:	2400      	movs	r4, #0
 8016078:	2500      	movs	r5, #0
 801607a:	6003      	str	r3, [r0, #0]
 801607c:	e783      	b.n	8015f86 <pow+0x4a>
 801607e:	2400      	movs	r4, #0
 8016080:	4d03      	ldr	r5, [pc, #12]	; (8016090 <pow+0x154>)
 8016082:	e780      	b.n	8015f86 <pow+0x4a>
 8016084:	200002f4 	.word	0x200002f4
 8016088:	fff00000 	.word	0xfff00000
 801608c:	7ff00000 	.word	0x7ff00000
 8016090:	3ff00000 	.word	0x3ff00000
 8016094:	00000000 	.word	0x00000000

08016098 <__ieee754_exp>:
 8016098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801609c:	4faa      	ldr	r7, [pc, #680]	; (8016348 <__ieee754_exp+0x2b0>)
 801609e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80160a2:	42bb      	cmp	r3, r7
 80160a4:	4605      	mov	r5, r0
 80160a6:	460c      	mov	r4, r1
 80160a8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80160ac:	d92f      	bls.n	801610e <__ieee754_exp+0x76>
 80160ae:	4fa7      	ldr	r7, [pc, #668]	; (801634c <__ieee754_exp+0x2b4>)
 80160b0:	42bb      	cmp	r3, r7
 80160b2:	d911      	bls.n	80160d8 <__ieee754_exp+0x40>
 80160b4:	4603      	mov	r3, r0
 80160b6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80160ba:	4313      	orrs	r3, r2
 80160bc:	d006      	beq.n	80160cc <__ieee754_exp+0x34>
 80160be:	4602      	mov	r2, r0
 80160c0:	460b      	mov	r3, r1
 80160c2:	f7ea f8bf 	bl	8000244 <__adddf3>
 80160c6:	4605      	mov	r5, r0
 80160c8:	460c      	mov	r4, r1
 80160ca:	e000      	b.n	80160ce <__ieee754_exp+0x36>
 80160cc:	b9e6      	cbnz	r6, 8016108 <__ieee754_exp+0x70>
 80160ce:	4628      	mov	r0, r5
 80160d0:	4621      	mov	r1, r4
 80160d2:	b004      	add	sp, #16
 80160d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160d8:	a385      	add	r3, pc, #532	; (adr r3, 80162f0 <__ieee754_exp+0x258>)
 80160da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160de:	f7ea fcf7 	bl	8000ad0 <__aeabi_dcmpgt>
 80160e2:	b138      	cbz	r0, 80160f4 <__ieee754_exp+0x5c>
 80160e4:	a384      	add	r3, pc, #528	; (adr r3, 80162f8 <__ieee754_exp+0x260>)
 80160e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ea:	4610      	mov	r0, r2
 80160ec:	4619      	mov	r1, r3
 80160ee:	f7ea fa5f 	bl	80005b0 <__aeabi_dmul>
 80160f2:	e7e8      	b.n	80160c6 <__ieee754_exp+0x2e>
 80160f4:	4628      	mov	r0, r5
 80160f6:	a382      	add	r3, pc, #520	; (adr r3, 8016300 <__ieee754_exp+0x268>)
 80160f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fc:	4621      	mov	r1, r4
 80160fe:	f7ea fcc9 	bl	8000a94 <__aeabi_dcmplt>
 8016102:	2800      	cmp	r0, #0
 8016104:	f000 8082 	beq.w	801620c <__ieee754_exp+0x174>
 8016108:	2500      	movs	r5, #0
 801610a:	462c      	mov	r4, r5
 801610c:	e7df      	b.n	80160ce <__ieee754_exp+0x36>
 801610e:	4a90      	ldr	r2, [pc, #576]	; (8016350 <__ieee754_exp+0x2b8>)
 8016110:	4293      	cmp	r3, r2
 8016112:	f240 80a7 	bls.w	8016264 <__ieee754_exp+0x1cc>
 8016116:	4a8f      	ldr	r2, [pc, #572]	; (8016354 <__ieee754_exp+0x2bc>)
 8016118:	4293      	cmp	r3, r2
 801611a:	d877      	bhi.n	801620c <__ieee754_exp+0x174>
 801611c:	4b8e      	ldr	r3, [pc, #568]	; (8016358 <__ieee754_exp+0x2c0>)
 801611e:	00f4      	lsls	r4, r6, #3
 8016120:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016128:	f7ea f88a 	bl	8000240 <__aeabi_dsub>
 801612c:	4680      	mov	r8, r0
 801612e:	4689      	mov	r9, r1
 8016130:	4b8a      	ldr	r3, [pc, #552]	; (801635c <__ieee754_exp+0x2c4>)
 8016132:	f1c6 0a01 	rsb	sl, r6, #1
 8016136:	4423      	add	r3, r4
 8016138:	e9d3 3400 	ldrd	r3, r4, [r3]
 801613c:	e9cd 3400 	strd	r3, r4, [sp]
 8016140:	ebaa 0a06 	sub.w	sl, sl, r6
 8016144:	4640      	mov	r0, r8
 8016146:	e9dd 2300 	ldrd	r2, r3, [sp]
 801614a:	4649      	mov	r1, r9
 801614c:	f7ea f878 	bl	8000240 <__aeabi_dsub>
 8016150:	4605      	mov	r5, r0
 8016152:	460c      	mov	r4, r1
 8016154:	462a      	mov	r2, r5
 8016156:	4623      	mov	r3, r4
 8016158:	4628      	mov	r0, r5
 801615a:	4621      	mov	r1, r4
 801615c:	f7ea fa28 	bl	80005b0 <__aeabi_dmul>
 8016160:	a369      	add	r3, pc, #420	; (adr r3, 8016308 <__ieee754_exp+0x270>)
 8016162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016166:	4606      	mov	r6, r0
 8016168:	460f      	mov	r7, r1
 801616a:	f7ea fa21 	bl	80005b0 <__aeabi_dmul>
 801616e:	a368      	add	r3, pc, #416	; (adr r3, 8016310 <__ieee754_exp+0x278>)
 8016170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016174:	f7ea f864 	bl	8000240 <__aeabi_dsub>
 8016178:	4632      	mov	r2, r6
 801617a:	463b      	mov	r3, r7
 801617c:	f7ea fa18 	bl	80005b0 <__aeabi_dmul>
 8016180:	a365      	add	r3, pc, #404	; (adr r3, 8016318 <__ieee754_exp+0x280>)
 8016182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016186:	f7ea f85d 	bl	8000244 <__adddf3>
 801618a:	4632      	mov	r2, r6
 801618c:	463b      	mov	r3, r7
 801618e:	f7ea fa0f 	bl	80005b0 <__aeabi_dmul>
 8016192:	a363      	add	r3, pc, #396	; (adr r3, 8016320 <__ieee754_exp+0x288>)
 8016194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016198:	f7ea f852 	bl	8000240 <__aeabi_dsub>
 801619c:	4632      	mov	r2, r6
 801619e:	463b      	mov	r3, r7
 80161a0:	f7ea fa06 	bl	80005b0 <__aeabi_dmul>
 80161a4:	a360      	add	r3, pc, #384	; (adr r3, 8016328 <__ieee754_exp+0x290>)
 80161a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161aa:	f7ea f84b 	bl	8000244 <__adddf3>
 80161ae:	4632      	mov	r2, r6
 80161b0:	463b      	mov	r3, r7
 80161b2:	f7ea f9fd 	bl	80005b0 <__aeabi_dmul>
 80161b6:	4602      	mov	r2, r0
 80161b8:	460b      	mov	r3, r1
 80161ba:	4628      	mov	r0, r5
 80161bc:	4621      	mov	r1, r4
 80161be:	f7ea f83f 	bl	8000240 <__aeabi_dsub>
 80161c2:	4602      	mov	r2, r0
 80161c4:	460b      	mov	r3, r1
 80161c6:	4606      	mov	r6, r0
 80161c8:	460f      	mov	r7, r1
 80161ca:	4628      	mov	r0, r5
 80161cc:	4621      	mov	r1, r4
 80161ce:	f7ea f9ef 	bl	80005b0 <__aeabi_dmul>
 80161d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80161d6:	f1ba 0f00 	cmp.w	sl, #0
 80161da:	d15a      	bne.n	8016292 <__ieee754_exp+0x1fa>
 80161dc:	2200      	movs	r2, #0
 80161de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80161e2:	4630      	mov	r0, r6
 80161e4:	4639      	mov	r1, r7
 80161e6:	f7ea f82b 	bl	8000240 <__aeabi_dsub>
 80161ea:	4602      	mov	r2, r0
 80161ec:	460b      	mov	r3, r1
 80161ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161f2:	f7ea fb07 	bl	8000804 <__aeabi_ddiv>
 80161f6:	462a      	mov	r2, r5
 80161f8:	4623      	mov	r3, r4
 80161fa:	f7ea f821 	bl	8000240 <__aeabi_dsub>
 80161fe:	4602      	mov	r2, r0
 8016200:	460b      	mov	r3, r1
 8016202:	2000      	movs	r0, #0
 8016204:	4956      	ldr	r1, [pc, #344]	; (8016360 <__ieee754_exp+0x2c8>)
 8016206:	f7ea f81b 	bl	8000240 <__aeabi_dsub>
 801620a:	e75c      	b.n	80160c6 <__ieee754_exp+0x2e>
 801620c:	4855      	ldr	r0, [pc, #340]	; (8016364 <__ieee754_exp+0x2cc>)
 801620e:	a348      	add	r3, pc, #288	; (adr r3, 8016330 <__ieee754_exp+0x298>)
 8016210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016214:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8016218:	4621      	mov	r1, r4
 801621a:	4628      	mov	r0, r5
 801621c:	f7ea f9c8 	bl	80005b0 <__aeabi_dmul>
 8016220:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016224:	f7ea f80e 	bl	8000244 <__adddf3>
 8016228:	f7ea fc72 	bl	8000b10 <__aeabi_d2iz>
 801622c:	4682      	mov	sl, r0
 801622e:	f7ea f955 	bl	80004dc <__aeabi_i2d>
 8016232:	a341      	add	r3, pc, #260	; (adr r3, 8016338 <__ieee754_exp+0x2a0>)
 8016234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016238:	4606      	mov	r6, r0
 801623a:	460f      	mov	r7, r1
 801623c:	f7ea f9b8 	bl	80005b0 <__aeabi_dmul>
 8016240:	4602      	mov	r2, r0
 8016242:	460b      	mov	r3, r1
 8016244:	4628      	mov	r0, r5
 8016246:	4621      	mov	r1, r4
 8016248:	f7e9 fffa 	bl	8000240 <__aeabi_dsub>
 801624c:	a33c      	add	r3, pc, #240	; (adr r3, 8016340 <__ieee754_exp+0x2a8>)
 801624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016252:	4680      	mov	r8, r0
 8016254:	4689      	mov	r9, r1
 8016256:	4630      	mov	r0, r6
 8016258:	4639      	mov	r1, r7
 801625a:	f7ea f9a9 	bl	80005b0 <__aeabi_dmul>
 801625e:	e9cd 0100 	strd	r0, r1, [sp]
 8016262:	e76f      	b.n	8016144 <__ieee754_exp+0xac>
 8016264:	4a40      	ldr	r2, [pc, #256]	; (8016368 <__ieee754_exp+0x2d0>)
 8016266:	4293      	cmp	r3, r2
 8016268:	d80e      	bhi.n	8016288 <__ieee754_exp+0x1f0>
 801626a:	a323      	add	r3, pc, #140	; (adr r3, 80162f8 <__ieee754_exp+0x260>)
 801626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016270:	f7e9 ffe8 	bl	8000244 <__adddf3>
 8016274:	2200      	movs	r2, #0
 8016276:	4b3a      	ldr	r3, [pc, #232]	; (8016360 <__ieee754_exp+0x2c8>)
 8016278:	f7ea fc2a 	bl	8000ad0 <__aeabi_dcmpgt>
 801627c:	b138      	cbz	r0, 801628e <__ieee754_exp+0x1f6>
 801627e:	2200      	movs	r2, #0
 8016280:	4628      	mov	r0, r5
 8016282:	4621      	mov	r1, r4
 8016284:	4b36      	ldr	r3, [pc, #216]	; (8016360 <__ieee754_exp+0x2c8>)
 8016286:	e71c      	b.n	80160c2 <__ieee754_exp+0x2a>
 8016288:	f04f 0a00 	mov.w	sl, #0
 801628c:	e762      	b.n	8016154 <__ieee754_exp+0xbc>
 801628e:	4682      	mov	sl, r0
 8016290:	e760      	b.n	8016154 <__ieee754_exp+0xbc>
 8016292:	4632      	mov	r2, r6
 8016294:	463b      	mov	r3, r7
 8016296:	2000      	movs	r0, #0
 8016298:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801629c:	f7e9 ffd0 	bl	8000240 <__aeabi_dsub>
 80162a0:	4602      	mov	r2, r0
 80162a2:	460b      	mov	r3, r1
 80162a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162a8:	f7ea faac 	bl	8000804 <__aeabi_ddiv>
 80162ac:	4602      	mov	r2, r0
 80162ae:	460b      	mov	r3, r1
 80162b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162b4:	f7e9 ffc4 	bl	8000240 <__aeabi_dsub>
 80162b8:	4642      	mov	r2, r8
 80162ba:	464b      	mov	r3, r9
 80162bc:	f7e9 ffc0 	bl	8000240 <__aeabi_dsub>
 80162c0:	4602      	mov	r2, r0
 80162c2:	460b      	mov	r3, r1
 80162c4:	2000      	movs	r0, #0
 80162c6:	4926      	ldr	r1, [pc, #152]	; (8016360 <__ieee754_exp+0x2c8>)
 80162c8:	f7e9 ffba 	bl	8000240 <__aeabi_dsub>
 80162cc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80162d0:	4592      	cmp	sl, r2
 80162d2:	db02      	blt.n	80162da <__ieee754_exp+0x242>
 80162d4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80162d8:	e6f5      	b.n	80160c6 <__ieee754_exp+0x2e>
 80162da:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80162de:	2200      	movs	r2, #0
 80162e0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80162e4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80162e8:	e701      	b.n	80160ee <__ieee754_exp+0x56>
 80162ea:	bf00      	nop
 80162ec:	f3af 8000 	nop.w
 80162f0:	fefa39ef 	.word	0xfefa39ef
 80162f4:	40862e42 	.word	0x40862e42
 80162f8:	8800759c 	.word	0x8800759c
 80162fc:	7e37e43c 	.word	0x7e37e43c
 8016300:	d52d3051 	.word	0xd52d3051
 8016304:	c0874910 	.word	0xc0874910
 8016308:	72bea4d0 	.word	0x72bea4d0
 801630c:	3e663769 	.word	0x3e663769
 8016310:	c5d26bf1 	.word	0xc5d26bf1
 8016314:	3ebbbd41 	.word	0x3ebbbd41
 8016318:	af25de2c 	.word	0xaf25de2c
 801631c:	3f11566a 	.word	0x3f11566a
 8016320:	16bebd93 	.word	0x16bebd93
 8016324:	3f66c16c 	.word	0x3f66c16c
 8016328:	5555553e 	.word	0x5555553e
 801632c:	3fc55555 	.word	0x3fc55555
 8016330:	652b82fe 	.word	0x652b82fe
 8016334:	3ff71547 	.word	0x3ff71547
 8016338:	fee00000 	.word	0xfee00000
 801633c:	3fe62e42 	.word	0x3fe62e42
 8016340:	35793c76 	.word	0x35793c76
 8016344:	3dea39ef 	.word	0x3dea39ef
 8016348:	40862e41 	.word	0x40862e41
 801634c:	7fefffff 	.word	0x7fefffff
 8016350:	3fd62e42 	.word	0x3fd62e42
 8016354:	3ff0a2b1 	.word	0x3ff0a2b1
 8016358:	080181d0 	.word	0x080181d0
 801635c:	080181e0 	.word	0x080181e0
 8016360:	3ff00000 	.word	0x3ff00000
 8016364:	080181c0 	.word	0x080181c0
 8016368:	3e2fffff 	.word	0x3e2fffff
 801636c:	00000000 	.word	0x00000000

08016370 <__ieee754_log10>:
 8016370:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8016374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016378:	4604      	mov	r4, r0
 801637a:	460d      	mov	r5, r1
 801637c:	460b      	mov	r3, r1
 801637e:	da26      	bge.n	80163ce <__ieee754_log10+0x5e>
 8016380:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016384:	4302      	orrs	r2, r0
 8016386:	d107      	bne.n	8016398 <__ieee754_log10+0x28>
 8016388:	2200      	movs	r2, #0
 801638a:	2300      	movs	r3, #0
 801638c:	2000      	movs	r0, #0
 801638e:	4936      	ldr	r1, [pc, #216]	; (8016468 <__ieee754_log10+0xf8>)
 8016390:	f7ea fa38 	bl	8000804 <__aeabi_ddiv>
 8016394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016398:	2900      	cmp	r1, #0
 801639a:	da05      	bge.n	80163a8 <__ieee754_log10+0x38>
 801639c:	4602      	mov	r2, r0
 801639e:	f7e9 ff4f 	bl	8000240 <__aeabi_dsub>
 80163a2:	2200      	movs	r2, #0
 80163a4:	2300      	movs	r3, #0
 80163a6:	e7f3      	b.n	8016390 <__ieee754_log10+0x20>
 80163a8:	2200      	movs	r2, #0
 80163aa:	4b30      	ldr	r3, [pc, #192]	; (801646c <__ieee754_log10+0xfc>)
 80163ac:	f7ea f900 	bl	80005b0 <__aeabi_dmul>
 80163b0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80163b4:	4604      	mov	r4, r0
 80163b6:	460d      	mov	r5, r1
 80163b8:	460b      	mov	r3, r1
 80163ba:	492d      	ldr	r1, [pc, #180]	; (8016470 <__ieee754_log10+0x100>)
 80163bc:	428b      	cmp	r3, r1
 80163be:	dd08      	ble.n	80163d2 <__ieee754_log10+0x62>
 80163c0:	4622      	mov	r2, r4
 80163c2:	462b      	mov	r3, r5
 80163c4:	4620      	mov	r0, r4
 80163c6:	4629      	mov	r1, r5
 80163c8:	f7e9 ff3c 	bl	8000244 <__adddf3>
 80163cc:	e7e2      	b.n	8016394 <__ieee754_log10+0x24>
 80163ce:	2200      	movs	r2, #0
 80163d0:	e7f3      	b.n	80163ba <__ieee754_log10+0x4a>
 80163d2:	1518      	asrs	r0, r3, #20
 80163d4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80163d8:	4410      	add	r0, r2
 80163da:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80163de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80163e2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80163e6:	f7ea f879 	bl	80004dc <__aeabi_i2d>
 80163ea:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80163ee:	3303      	adds	r3, #3
 80163f0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80163f4:	4606      	mov	r6, r0
 80163f6:	460f      	mov	r7, r1
 80163f8:	4620      	mov	r0, r4
 80163fa:	4629      	mov	r1, r5
 80163fc:	f000 ff20 	bl	8017240 <__ieee754_log>
 8016400:	a313      	add	r3, pc, #76	; (adr r3, 8016450 <__ieee754_log10+0xe0>)
 8016402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016406:	4680      	mov	r8, r0
 8016408:	4689      	mov	r9, r1
 801640a:	4630      	mov	r0, r6
 801640c:	4639      	mov	r1, r7
 801640e:	f7ea f8cf 	bl	80005b0 <__aeabi_dmul>
 8016412:	a311      	add	r3, pc, #68	; (adr r3, 8016458 <__ieee754_log10+0xe8>)
 8016414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016418:	4604      	mov	r4, r0
 801641a:	460d      	mov	r5, r1
 801641c:	4640      	mov	r0, r8
 801641e:	4649      	mov	r1, r9
 8016420:	f7ea f8c6 	bl	80005b0 <__aeabi_dmul>
 8016424:	4602      	mov	r2, r0
 8016426:	460b      	mov	r3, r1
 8016428:	4620      	mov	r0, r4
 801642a:	4629      	mov	r1, r5
 801642c:	f7e9 ff0a 	bl	8000244 <__adddf3>
 8016430:	a30b      	add	r3, pc, #44	; (adr r3, 8016460 <__ieee754_log10+0xf0>)
 8016432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016436:	4604      	mov	r4, r0
 8016438:	460d      	mov	r5, r1
 801643a:	4630      	mov	r0, r6
 801643c:	4639      	mov	r1, r7
 801643e:	f7ea f8b7 	bl	80005b0 <__aeabi_dmul>
 8016442:	4602      	mov	r2, r0
 8016444:	460b      	mov	r3, r1
 8016446:	4620      	mov	r0, r4
 8016448:	4629      	mov	r1, r5
 801644a:	e7bd      	b.n	80163c8 <__ieee754_log10+0x58>
 801644c:	f3af 8000 	nop.w
 8016450:	11f12b36 	.word	0x11f12b36
 8016454:	3d59fef3 	.word	0x3d59fef3
 8016458:	1526e50e 	.word	0x1526e50e
 801645c:	3fdbcb7b 	.word	0x3fdbcb7b
 8016460:	509f6000 	.word	0x509f6000
 8016464:	3fd34413 	.word	0x3fd34413
 8016468:	c3500000 	.word	0xc3500000
 801646c:	43500000 	.word	0x43500000
 8016470:	7fefffff 	.word	0x7fefffff
 8016474:	00000000 	.word	0x00000000

08016478 <__ieee754_pow>:
 8016478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801647c:	b093      	sub	sp, #76	; 0x4c
 801647e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016482:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8016486:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801648a:	ea55 0302 	orrs.w	r3, r5, r2
 801648e:	4607      	mov	r7, r0
 8016490:	4688      	mov	r8, r1
 8016492:	f000 84bf 	beq.w	8016e14 <__ieee754_pow+0x99c>
 8016496:	4b7e      	ldr	r3, [pc, #504]	; (8016690 <__ieee754_pow+0x218>)
 8016498:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801649c:	429c      	cmp	r4, r3
 801649e:	4689      	mov	r9, r1
 80164a0:	4682      	mov	sl, r0
 80164a2:	dc09      	bgt.n	80164b8 <__ieee754_pow+0x40>
 80164a4:	d103      	bne.n	80164ae <__ieee754_pow+0x36>
 80164a6:	b978      	cbnz	r0, 80164c8 <__ieee754_pow+0x50>
 80164a8:	42a5      	cmp	r5, r4
 80164aa:	dd02      	ble.n	80164b2 <__ieee754_pow+0x3a>
 80164ac:	e00c      	b.n	80164c8 <__ieee754_pow+0x50>
 80164ae:	429d      	cmp	r5, r3
 80164b0:	dc02      	bgt.n	80164b8 <__ieee754_pow+0x40>
 80164b2:	429d      	cmp	r5, r3
 80164b4:	d10e      	bne.n	80164d4 <__ieee754_pow+0x5c>
 80164b6:	b16a      	cbz	r2, 80164d4 <__ieee754_pow+0x5c>
 80164b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80164bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80164c0:	ea54 030a 	orrs.w	r3, r4, sl
 80164c4:	f000 84a6 	beq.w	8016e14 <__ieee754_pow+0x99c>
 80164c8:	4872      	ldr	r0, [pc, #456]	; (8016694 <__ieee754_pow+0x21c>)
 80164ca:	b013      	add	sp, #76	; 0x4c
 80164cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164d0:	f000 bd9e 	b.w	8017010 <nan>
 80164d4:	f1b9 0f00 	cmp.w	r9, #0
 80164d8:	da39      	bge.n	801654e <__ieee754_pow+0xd6>
 80164da:	4b6f      	ldr	r3, [pc, #444]	; (8016698 <__ieee754_pow+0x220>)
 80164dc:	429d      	cmp	r5, r3
 80164de:	dc54      	bgt.n	801658a <__ieee754_pow+0x112>
 80164e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80164e4:	429d      	cmp	r5, r3
 80164e6:	f340 84a6 	ble.w	8016e36 <__ieee754_pow+0x9be>
 80164ea:	152b      	asrs	r3, r5, #20
 80164ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80164f0:	2b14      	cmp	r3, #20
 80164f2:	dd0f      	ble.n	8016514 <__ieee754_pow+0x9c>
 80164f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80164f8:	fa22 f103 	lsr.w	r1, r2, r3
 80164fc:	fa01 f303 	lsl.w	r3, r1, r3
 8016500:	4293      	cmp	r3, r2
 8016502:	f040 8498 	bne.w	8016e36 <__ieee754_pow+0x9be>
 8016506:	f001 0101 	and.w	r1, r1, #1
 801650a:	f1c1 0302 	rsb	r3, r1, #2
 801650e:	9300      	str	r3, [sp, #0]
 8016510:	b182      	cbz	r2, 8016534 <__ieee754_pow+0xbc>
 8016512:	e05e      	b.n	80165d2 <__ieee754_pow+0x15a>
 8016514:	2a00      	cmp	r2, #0
 8016516:	d15a      	bne.n	80165ce <__ieee754_pow+0x156>
 8016518:	f1c3 0314 	rsb	r3, r3, #20
 801651c:	fa45 f103 	asr.w	r1, r5, r3
 8016520:	fa01 f303 	lsl.w	r3, r1, r3
 8016524:	42ab      	cmp	r3, r5
 8016526:	f040 8483 	bne.w	8016e30 <__ieee754_pow+0x9b8>
 801652a:	f001 0101 	and.w	r1, r1, #1
 801652e:	f1c1 0302 	rsb	r3, r1, #2
 8016532:	9300      	str	r3, [sp, #0]
 8016534:	4b59      	ldr	r3, [pc, #356]	; (801669c <__ieee754_pow+0x224>)
 8016536:	429d      	cmp	r5, r3
 8016538:	d130      	bne.n	801659c <__ieee754_pow+0x124>
 801653a:	2e00      	cmp	r6, #0
 801653c:	f280 8474 	bge.w	8016e28 <__ieee754_pow+0x9b0>
 8016540:	463a      	mov	r2, r7
 8016542:	4643      	mov	r3, r8
 8016544:	2000      	movs	r0, #0
 8016546:	4955      	ldr	r1, [pc, #340]	; (801669c <__ieee754_pow+0x224>)
 8016548:	f7ea f95c 	bl	8000804 <__aeabi_ddiv>
 801654c:	e02f      	b.n	80165ae <__ieee754_pow+0x136>
 801654e:	2300      	movs	r3, #0
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	2a00      	cmp	r2, #0
 8016554:	d13d      	bne.n	80165d2 <__ieee754_pow+0x15a>
 8016556:	4b4e      	ldr	r3, [pc, #312]	; (8016690 <__ieee754_pow+0x218>)
 8016558:	429d      	cmp	r5, r3
 801655a:	d1eb      	bne.n	8016534 <__ieee754_pow+0xbc>
 801655c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016560:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016564:	ea53 030a 	orrs.w	r3, r3, sl
 8016568:	f000 8454 	beq.w	8016e14 <__ieee754_pow+0x99c>
 801656c:	4b4c      	ldr	r3, [pc, #304]	; (80166a0 <__ieee754_pow+0x228>)
 801656e:	429c      	cmp	r4, r3
 8016570:	dd0d      	ble.n	801658e <__ieee754_pow+0x116>
 8016572:	2e00      	cmp	r6, #0
 8016574:	f280 8454 	bge.w	8016e20 <__ieee754_pow+0x9a8>
 8016578:	f04f 0b00 	mov.w	fp, #0
 801657c:	f04f 0c00 	mov.w	ip, #0
 8016580:	4658      	mov	r0, fp
 8016582:	4661      	mov	r1, ip
 8016584:	b013      	add	sp, #76	; 0x4c
 8016586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801658a:	2302      	movs	r3, #2
 801658c:	e7e0      	b.n	8016550 <__ieee754_pow+0xd8>
 801658e:	2e00      	cmp	r6, #0
 8016590:	daf2      	bge.n	8016578 <__ieee754_pow+0x100>
 8016592:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8016596:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801659a:	e7f1      	b.n	8016580 <__ieee754_pow+0x108>
 801659c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80165a0:	d108      	bne.n	80165b4 <__ieee754_pow+0x13c>
 80165a2:	463a      	mov	r2, r7
 80165a4:	4643      	mov	r3, r8
 80165a6:	4638      	mov	r0, r7
 80165a8:	4641      	mov	r1, r8
 80165aa:	f7ea f801 	bl	80005b0 <__aeabi_dmul>
 80165ae:	4683      	mov	fp, r0
 80165b0:	468c      	mov	ip, r1
 80165b2:	e7e5      	b.n	8016580 <__ieee754_pow+0x108>
 80165b4:	4b3b      	ldr	r3, [pc, #236]	; (80166a4 <__ieee754_pow+0x22c>)
 80165b6:	429e      	cmp	r6, r3
 80165b8:	d10b      	bne.n	80165d2 <__ieee754_pow+0x15a>
 80165ba:	f1b9 0f00 	cmp.w	r9, #0
 80165be:	db08      	blt.n	80165d2 <__ieee754_pow+0x15a>
 80165c0:	4638      	mov	r0, r7
 80165c2:	4641      	mov	r1, r8
 80165c4:	b013      	add	sp, #76	; 0x4c
 80165c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ca:	f000 bc6b 	b.w	8016ea4 <__ieee754_sqrt>
 80165ce:	2300      	movs	r3, #0
 80165d0:	9300      	str	r3, [sp, #0]
 80165d2:	4638      	mov	r0, r7
 80165d4:	4641      	mov	r1, r8
 80165d6:	f000 fd11 	bl	8016ffc <fabs>
 80165da:	4683      	mov	fp, r0
 80165dc:	468c      	mov	ip, r1
 80165de:	f1ba 0f00 	cmp.w	sl, #0
 80165e2:	d129      	bne.n	8016638 <__ieee754_pow+0x1c0>
 80165e4:	b124      	cbz	r4, 80165f0 <__ieee754_pow+0x178>
 80165e6:	4b2d      	ldr	r3, [pc, #180]	; (801669c <__ieee754_pow+0x224>)
 80165e8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d123      	bne.n	8016638 <__ieee754_pow+0x1c0>
 80165f0:	2e00      	cmp	r6, #0
 80165f2:	da07      	bge.n	8016604 <__ieee754_pow+0x18c>
 80165f4:	465a      	mov	r2, fp
 80165f6:	4663      	mov	r3, ip
 80165f8:	2000      	movs	r0, #0
 80165fa:	4928      	ldr	r1, [pc, #160]	; (801669c <__ieee754_pow+0x224>)
 80165fc:	f7ea f902 	bl	8000804 <__aeabi_ddiv>
 8016600:	4683      	mov	fp, r0
 8016602:	468c      	mov	ip, r1
 8016604:	f1b9 0f00 	cmp.w	r9, #0
 8016608:	daba      	bge.n	8016580 <__ieee754_pow+0x108>
 801660a:	9b00      	ldr	r3, [sp, #0]
 801660c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016610:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016614:	4323      	orrs	r3, r4
 8016616:	d108      	bne.n	801662a <__ieee754_pow+0x1b2>
 8016618:	465a      	mov	r2, fp
 801661a:	4663      	mov	r3, ip
 801661c:	4658      	mov	r0, fp
 801661e:	4661      	mov	r1, ip
 8016620:	f7e9 fe0e 	bl	8000240 <__aeabi_dsub>
 8016624:	4602      	mov	r2, r0
 8016626:	460b      	mov	r3, r1
 8016628:	e78e      	b.n	8016548 <__ieee754_pow+0xd0>
 801662a:	9b00      	ldr	r3, [sp, #0]
 801662c:	2b01      	cmp	r3, #1
 801662e:	d1a7      	bne.n	8016580 <__ieee754_pow+0x108>
 8016630:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8016634:	469c      	mov	ip, r3
 8016636:	e7a3      	b.n	8016580 <__ieee754_pow+0x108>
 8016638:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801663c:	3b01      	subs	r3, #1
 801663e:	930c      	str	r3, [sp, #48]	; 0x30
 8016640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016642:	9b00      	ldr	r3, [sp, #0]
 8016644:	4313      	orrs	r3, r2
 8016646:	d104      	bne.n	8016652 <__ieee754_pow+0x1da>
 8016648:	463a      	mov	r2, r7
 801664a:	4643      	mov	r3, r8
 801664c:	4638      	mov	r0, r7
 801664e:	4641      	mov	r1, r8
 8016650:	e7e6      	b.n	8016620 <__ieee754_pow+0x1a8>
 8016652:	4b15      	ldr	r3, [pc, #84]	; (80166a8 <__ieee754_pow+0x230>)
 8016654:	429d      	cmp	r5, r3
 8016656:	f340 80f9 	ble.w	801684c <__ieee754_pow+0x3d4>
 801665a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801665e:	429d      	cmp	r5, r3
 8016660:	4b0f      	ldr	r3, [pc, #60]	; (80166a0 <__ieee754_pow+0x228>)
 8016662:	dd09      	ble.n	8016678 <__ieee754_pow+0x200>
 8016664:	429c      	cmp	r4, r3
 8016666:	dc0c      	bgt.n	8016682 <__ieee754_pow+0x20a>
 8016668:	2e00      	cmp	r6, #0
 801666a:	da85      	bge.n	8016578 <__ieee754_pow+0x100>
 801666c:	a306      	add	r3, pc, #24	; (adr r3, 8016688 <__ieee754_pow+0x210>)
 801666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016672:	4610      	mov	r0, r2
 8016674:	4619      	mov	r1, r3
 8016676:	e798      	b.n	80165aa <__ieee754_pow+0x132>
 8016678:	429c      	cmp	r4, r3
 801667a:	dbf5      	blt.n	8016668 <__ieee754_pow+0x1f0>
 801667c:	4b07      	ldr	r3, [pc, #28]	; (801669c <__ieee754_pow+0x224>)
 801667e:	429c      	cmp	r4, r3
 8016680:	dd14      	ble.n	80166ac <__ieee754_pow+0x234>
 8016682:	2e00      	cmp	r6, #0
 8016684:	dcf2      	bgt.n	801666c <__ieee754_pow+0x1f4>
 8016686:	e777      	b.n	8016578 <__ieee754_pow+0x100>
 8016688:	8800759c 	.word	0x8800759c
 801668c:	7e37e43c 	.word	0x7e37e43c
 8016690:	7ff00000 	.word	0x7ff00000
 8016694:	08017e61 	.word	0x08017e61
 8016698:	433fffff 	.word	0x433fffff
 801669c:	3ff00000 	.word	0x3ff00000
 80166a0:	3fefffff 	.word	0x3fefffff
 80166a4:	3fe00000 	.word	0x3fe00000
 80166a8:	41e00000 	.word	0x41e00000
 80166ac:	4661      	mov	r1, ip
 80166ae:	2200      	movs	r2, #0
 80166b0:	4658      	mov	r0, fp
 80166b2:	4b61      	ldr	r3, [pc, #388]	; (8016838 <__ieee754_pow+0x3c0>)
 80166b4:	f7e9 fdc4 	bl	8000240 <__aeabi_dsub>
 80166b8:	a355      	add	r3, pc, #340	; (adr r3, 8016810 <__ieee754_pow+0x398>)
 80166ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166be:	4604      	mov	r4, r0
 80166c0:	460d      	mov	r5, r1
 80166c2:	f7e9 ff75 	bl	80005b0 <__aeabi_dmul>
 80166c6:	a354      	add	r3, pc, #336	; (adr r3, 8016818 <__ieee754_pow+0x3a0>)
 80166c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166cc:	4606      	mov	r6, r0
 80166ce:	460f      	mov	r7, r1
 80166d0:	4620      	mov	r0, r4
 80166d2:	4629      	mov	r1, r5
 80166d4:	f7e9 ff6c 	bl	80005b0 <__aeabi_dmul>
 80166d8:	2200      	movs	r2, #0
 80166da:	4682      	mov	sl, r0
 80166dc:	468b      	mov	fp, r1
 80166de:	4620      	mov	r0, r4
 80166e0:	4629      	mov	r1, r5
 80166e2:	4b56      	ldr	r3, [pc, #344]	; (801683c <__ieee754_pow+0x3c4>)
 80166e4:	f7e9 ff64 	bl	80005b0 <__aeabi_dmul>
 80166e8:	4602      	mov	r2, r0
 80166ea:	460b      	mov	r3, r1
 80166ec:	a14c      	add	r1, pc, #304	; (adr r1, 8016820 <__ieee754_pow+0x3a8>)
 80166ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166f2:	f7e9 fda5 	bl	8000240 <__aeabi_dsub>
 80166f6:	4622      	mov	r2, r4
 80166f8:	462b      	mov	r3, r5
 80166fa:	f7e9 ff59 	bl	80005b0 <__aeabi_dmul>
 80166fe:	4602      	mov	r2, r0
 8016700:	460b      	mov	r3, r1
 8016702:	2000      	movs	r0, #0
 8016704:	494e      	ldr	r1, [pc, #312]	; (8016840 <__ieee754_pow+0x3c8>)
 8016706:	f7e9 fd9b 	bl	8000240 <__aeabi_dsub>
 801670a:	4622      	mov	r2, r4
 801670c:	462b      	mov	r3, r5
 801670e:	4680      	mov	r8, r0
 8016710:	4689      	mov	r9, r1
 8016712:	4620      	mov	r0, r4
 8016714:	4629      	mov	r1, r5
 8016716:	f7e9 ff4b 	bl	80005b0 <__aeabi_dmul>
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	4640      	mov	r0, r8
 8016720:	4649      	mov	r1, r9
 8016722:	f7e9 ff45 	bl	80005b0 <__aeabi_dmul>
 8016726:	a340      	add	r3, pc, #256	; (adr r3, 8016828 <__ieee754_pow+0x3b0>)
 8016728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801672c:	f7e9 ff40 	bl	80005b0 <__aeabi_dmul>
 8016730:	4602      	mov	r2, r0
 8016732:	460b      	mov	r3, r1
 8016734:	4650      	mov	r0, sl
 8016736:	4659      	mov	r1, fp
 8016738:	f7e9 fd82 	bl	8000240 <__aeabi_dsub>
 801673c:	f04f 0a00 	mov.w	sl, #0
 8016740:	4602      	mov	r2, r0
 8016742:	460b      	mov	r3, r1
 8016744:	4604      	mov	r4, r0
 8016746:	460d      	mov	r5, r1
 8016748:	4630      	mov	r0, r6
 801674a:	4639      	mov	r1, r7
 801674c:	f7e9 fd7a 	bl	8000244 <__adddf3>
 8016750:	4632      	mov	r2, r6
 8016752:	463b      	mov	r3, r7
 8016754:	4650      	mov	r0, sl
 8016756:	468b      	mov	fp, r1
 8016758:	f7e9 fd72 	bl	8000240 <__aeabi_dsub>
 801675c:	4602      	mov	r2, r0
 801675e:	460b      	mov	r3, r1
 8016760:	4620      	mov	r0, r4
 8016762:	4629      	mov	r1, r5
 8016764:	f7e9 fd6c 	bl	8000240 <__aeabi_dsub>
 8016768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801676c:	9b00      	ldr	r3, [sp, #0]
 801676e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016770:	3b01      	subs	r3, #1
 8016772:	4313      	orrs	r3, r2
 8016774:	f04f 0600 	mov.w	r6, #0
 8016778:	f04f 0200 	mov.w	r2, #0
 801677c:	bf0c      	ite	eq
 801677e:	4b31      	ldreq	r3, [pc, #196]	; (8016844 <__ieee754_pow+0x3cc>)
 8016780:	4b2d      	ldrne	r3, [pc, #180]	; (8016838 <__ieee754_pow+0x3c0>)
 8016782:	4604      	mov	r4, r0
 8016784:	460d      	mov	r5, r1
 8016786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801678a:	e9cd 2300 	strd	r2, r3, [sp]
 801678e:	4632      	mov	r2, r6
 8016790:	463b      	mov	r3, r7
 8016792:	f7e9 fd55 	bl	8000240 <__aeabi_dsub>
 8016796:	4652      	mov	r2, sl
 8016798:	465b      	mov	r3, fp
 801679a:	f7e9 ff09 	bl	80005b0 <__aeabi_dmul>
 801679e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80167a2:	4680      	mov	r8, r0
 80167a4:	4689      	mov	r9, r1
 80167a6:	4620      	mov	r0, r4
 80167a8:	4629      	mov	r1, r5
 80167aa:	f7e9 ff01 	bl	80005b0 <__aeabi_dmul>
 80167ae:	4602      	mov	r2, r0
 80167b0:	460b      	mov	r3, r1
 80167b2:	4640      	mov	r0, r8
 80167b4:	4649      	mov	r1, r9
 80167b6:	f7e9 fd45 	bl	8000244 <__adddf3>
 80167ba:	4632      	mov	r2, r6
 80167bc:	463b      	mov	r3, r7
 80167be:	4680      	mov	r8, r0
 80167c0:	4689      	mov	r9, r1
 80167c2:	4650      	mov	r0, sl
 80167c4:	4659      	mov	r1, fp
 80167c6:	f7e9 fef3 	bl	80005b0 <__aeabi_dmul>
 80167ca:	4604      	mov	r4, r0
 80167cc:	460d      	mov	r5, r1
 80167ce:	460b      	mov	r3, r1
 80167d0:	4602      	mov	r2, r0
 80167d2:	4649      	mov	r1, r9
 80167d4:	4640      	mov	r0, r8
 80167d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80167da:	f7e9 fd33 	bl	8000244 <__adddf3>
 80167de:	4b1a      	ldr	r3, [pc, #104]	; (8016848 <__ieee754_pow+0x3d0>)
 80167e0:	4682      	mov	sl, r0
 80167e2:	4299      	cmp	r1, r3
 80167e4:	460f      	mov	r7, r1
 80167e6:	460e      	mov	r6, r1
 80167e8:	f340 82ed 	ble.w	8016dc6 <__ieee754_pow+0x94e>
 80167ec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80167f0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80167f4:	4303      	orrs	r3, r0
 80167f6:	f000 81e7 	beq.w	8016bc8 <__ieee754_pow+0x750>
 80167fa:	a30d      	add	r3, pc, #52	; (adr r3, 8016830 <__ieee754_pow+0x3b8>)
 80167fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016804:	f7e9 fed4 	bl	80005b0 <__aeabi_dmul>
 8016808:	a309      	add	r3, pc, #36	; (adr r3, 8016830 <__ieee754_pow+0x3b8>)
 801680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801680e:	e6cc      	b.n	80165aa <__ieee754_pow+0x132>
 8016810:	60000000 	.word	0x60000000
 8016814:	3ff71547 	.word	0x3ff71547
 8016818:	f85ddf44 	.word	0xf85ddf44
 801681c:	3e54ae0b 	.word	0x3e54ae0b
 8016820:	55555555 	.word	0x55555555
 8016824:	3fd55555 	.word	0x3fd55555
 8016828:	652b82fe 	.word	0x652b82fe
 801682c:	3ff71547 	.word	0x3ff71547
 8016830:	8800759c 	.word	0x8800759c
 8016834:	7e37e43c 	.word	0x7e37e43c
 8016838:	3ff00000 	.word	0x3ff00000
 801683c:	3fd00000 	.word	0x3fd00000
 8016840:	3fe00000 	.word	0x3fe00000
 8016844:	bff00000 	.word	0xbff00000
 8016848:	408fffff 	.word	0x408fffff
 801684c:	4bd4      	ldr	r3, [pc, #848]	; (8016ba0 <__ieee754_pow+0x728>)
 801684e:	2200      	movs	r2, #0
 8016850:	ea09 0303 	and.w	r3, r9, r3
 8016854:	b943      	cbnz	r3, 8016868 <__ieee754_pow+0x3f0>
 8016856:	4658      	mov	r0, fp
 8016858:	4661      	mov	r1, ip
 801685a:	4bd2      	ldr	r3, [pc, #840]	; (8016ba4 <__ieee754_pow+0x72c>)
 801685c:	f7e9 fea8 	bl	80005b0 <__aeabi_dmul>
 8016860:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016864:	4683      	mov	fp, r0
 8016866:	460c      	mov	r4, r1
 8016868:	1523      	asrs	r3, r4, #20
 801686a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801686e:	4413      	add	r3, r2
 8016870:	930b      	str	r3, [sp, #44]	; 0x2c
 8016872:	4bcd      	ldr	r3, [pc, #820]	; (8016ba8 <__ieee754_pow+0x730>)
 8016874:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016878:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801687c:	429c      	cmp	r4, r3
 801687e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016882:	dd08      	ble.n	8016896 <__ieee754_pow+0x41e>
 8016884:	4bc9      	ldr	r3, [pc, #804]	; (8016bac <__ieee754_pow+0x734>)
 8016886:	429c      	cmp	r4, r3
 8016888:	f340 819c 	ble.w	8016bc4 <__ieee754_pow+0x74c>
 801688c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801688e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016892:	3301      	adds	r3, #1
 8016894:	930b      	str	r3, [sp, #44]	; 0x2c
 8016896:	2600      	movs	r6, #0
 8016898:	00f3      	lsls	r3, r6, #3
 801689a:	930d      	str	r3, [sp, #52]	; 0x34
 801689c:	4bc4      	ldr	r3, [pc, #784]	; (8016bb0 <__ieee754_pow+0x738>)
 801689e:	4658      	mov	r0, fp
 80168a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80168a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80168a8:	4629      	mov	r1, r5
 80168aa:	461a      	mov	r2, r3
 80168ac:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80168b0:	4623      	mov	r3, r4
 80168b2:	f7e9 fcc5 	bl	8000240 <__aeabi_dsub>
 80168b6:	46da      	mov	sl, fp
 80168b8:	462b      	mov	r3, r5
 80168ba:	4652      	mov	r2, sl
 80168bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80168c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168c4:	f7e9 fcbe 	bl	8000244 <__adddf3>
 80168c8:	4602      	mov	r2, r0
 80168ca:	460b      	mov	r3, r1
 80168cc:	2000      	movs	r0, #0
 80168ce:	49b9      	ldr	r1, [pc, #740]	; (8016bb4 <__ieee754_pow+0x73c>)
 80168d0:	f7e9 ff98 	bl	8000804 <__aeabi_ddiv>
 80168d4:	4602      	mov	r2, r0
 80168d6:	460b      	mov	r3, r1
 80168d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80168dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80168e0:	f7e9 fe66 	bl	80005b0 <__aeabi_dmul>
 80168e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80168e8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80168ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80168f0:	2300      	movs	r3, #0
 80168f2:	2200      	movs	r2, #0
 80168f4:	46ab      	mov	fp, r5
 80168f6:	106d      	asrs	r5, r5, #1
 80168f8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80168fc:	9304      	str	r3, [sp, #16]
 80168fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016902:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016906:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801690a:	4640      	mov	r0, r8
 801690c:	4649      	mov	r1, r9
 801690e:	4614      	mov	r4, r2
 8016910:	461d      	mov	r5, r3
 8016912:	f7e9 fe4d 	bl	80005b0 <__aeabi_dmul>
 8016916:	4602      	mov	r2, r0
 8016918:	460b      	mov	r3, r1
 801691a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801691e:	f7e9 fc8f 	bl	8000240 <__aeabi_dsub>
 8016922:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016926:	4606      	mov	r6, r0
 8016928:	460f      	mov	r7, r1
 801692a:	4620      	mov	r0, r4
 801692c:	4629      	mov	r1, r5
 801692e:	f7e9 fc87 	bl	8000240 <__aeabi_dsub>
 8016932:	4602      	mov	r2, r0
 8016934:	460b      	mov	r3, r1
 8016936:	4650      	mov	r0, sl
 8016938:	4659      	mov	r1, fp
 801693a:	f7e9 fc81 	bl	8000240 <__aeabi_dsub>
 801693e:	4642      	mov	r2, r8
 8016940:	464b      	mov	r3, r9
 8016942:	f7e9 fe35 	bl	80005b0 <__aeabi_dmul>
 8016946:	4602      	mov	r2, r0
 8016948:	460b      	mov	r3, r1
 801694a:	4630      	mov	r0, r6
 801694c:	4639      	mov	r1, r7
 801694e:	f7e9 fc77 	bl	8000240 <__aeabi_dsub>
 8016952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016956:	f7e9 fe2b 	bl	80005b0 <__aeabi_dmul>
 801695a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801695e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016962:	4610      	mov	r0, r2
 8016964:	4619      	mov	r1, r3
 8016966:	f7e9 fe23 	bl	80005b0 <__aeabi_dmul>
 801696a:	a37b      	add	r3, pc, #492	; (adr r3, 8016b58 <__ieee754_pow+0x6e0>)
 801696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016970:	4604      	mov	r4, r0
 8016972:	460d      	mov	r5, r1
 8016974:	f7e9 fe1c 	bl	80005b0 <__aeabi_dmul>
 8016978:	a379      	add	r3, pc, #484	; (adr r3, 8016b60 <__ieee754_pow+0x6e8>)
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	f7e9 fc61 	bl	8000244 <__adddf3>
 8016982:	4622      	mov	r2, r4
 8016984:	462b      	mov	r3, r5
 8016986:	f7e9 fe13 	bl	80005b0 <__aeabi_dmul>
 801698a:	a377      	add	r3, pc, #476	; (adr r3, 8016b68 <__ieee754_pow+0x6f0>)
 801698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016990:	f7e9 fc58 	bl	8000244 <__adddf3>
 8016994:	4622      	mov	r2, r4
 8016996:	462b      	mov	r3, r5
 8016998:	f7e9 fe0a 	bl	80005b0 <__aeabi_dmul>
 801699c:	a374      	add	r3, pc, #464	; (adr r3, 8016b70 <__ieee754_pow+0x6f8>)
 801699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a2:	f7e9 fc4f 	bl	8000244 <__adddf3>
 80169a6:	4622      	mov	r2, r4
 80169a8:	462b      	mov	r3, r5
 80169aa:	f7e9 fe01 	bl	80005b0 <__aeabi_dmul>
 80169ae:	a372      	add	r3, pc, #456	; (adr r3, 8016b78 <__ieee754_pow+0x700>)
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	f7e9 fc46 	bl	8000244 <__adddf3>
 80169b8:	4622      	mov	r2, r4
 80169ba:	462b      	mov	r3, r5
 80169bc:	f7e9 fdf8 	bl	80005b0 <__aeabi_dmul>
 80169c0:	a36f      	add	r3, pc, #444	; (adr r3, 8016b80 <__ieee754_pow+0x708>)
 80169c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c6:	f7e9 fc3d 	bl	8000244 <__adddf3>
 80169ca:	4622      	mov	r2, r4
 80169cc:	4606      	mov	r6, r0
 80169ce:	460f      	mov	r7, r1
 80169d0:	462b      	mov	r3, r5
 80169d2:	4620      	mov	r0, r4
 80169d4:	4629      	mov	r1, r5
 80169d6:	f7e9 fdeb 	bl	80005b0 <__aeabi_dmul>
 80169da:	4602      	mov	r2, r0
 80169dc:	460b      	mov	r3, r1
 80169de:	4630      	mov	r0, r6
 80169e0:	4639      	mov	r1, r7
 80169e2:	f7e9 fde5 	bl	80005b0 <__aeabi_dmul>
 80169e6:	4604      	mov	r4, r0
 80169e8:	460d      	mov	r5, r1
 80169ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80169ee:	4642      	mov	r2, r8
 80169f0:	464b      	mov	r3, r9
 80169f2:	f7e9 fc27 	bl	8000244 <__adddf3>
 80169f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169fa:	f7e9 fdd9 	bl	80005b0 <__aeabi_dmul>
 80169fe:	4622      	mov	r2, r4
 8016a00:	462b      	mov	r3, r5
 8016a02:	f7e9 fc1f 	bl	8000244 <__adddf3>
 8016a06:	4642      	mov	r2, r8
 8016a08:	4606      	mov	r6, r0
 8016a0a:	460f      	mov	r7, r1
 8016a0c:	464b      	mov	r3, r9
 8016a0e:	4640      	mov	r0, r8
 8016a10:	4649      	mov	r1, r9
 8016a12:	f7e9 fdcd 	bl	80005b0 <__aeabi_dmul>
 8016a16:	2200      	movs	r2, #0
 8016a18:	4b67      	ldr	r3, [pc, #412]	; (8016bb8 <__ieee754_pow+0x740>)
 8016a1a:	4682      	mov	sl, r0
 8016a1c:	468b      	mov	fp, r1
 8016a1e:	f7e9 fc11 	bl	8000244 <__adddf3>
 8016a22:	4632      	mov	r2, r6
 8016a24:	463b      	mov	r3, r7
 8016a26:	f7e9 fc0d 	bl	8000244 <__adddf3>
 8016a2a:	9c04      	ldr	r4, [sp, #16]
 8016a2c:	460d      	mov	r5, r1
 8016a2e:	4622      	mov	r2, r4
 8016a30:	460b      	mov	r3, r1
 8016a32:	4640      	mov	r0, r8
 8016a34:	4649      	mov	r1, r9
 8016a36:	f7e9 fdbb 	bl	80005b0 <__aeabi_dmul>
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	4680      	mov	r8, r0
 8016a3e:	4689      	mov	r9, r1
 8016a40:	4620      	mov	r0, r4
 8016a42:	4629      	mov	r1, r5
 8016a44:	4b5c      	ldr	r3, [pc, #368]	; (8016bb8 <__ieee754_pow+0x740>)
 8016a46:	f7e9 fbfb 	bl	8000240 <__aeabi_dsub>
 8016a4a:	4652      	mov	r2, sl
 8016a4c:	465b      	mov	r3, fp
 8016a4e:	f7e9 fbf7 	bl	8000240 <__aeabi_dsub>
 8016a52:	4602      	mov	r2, r0
 8016a54:	460b      	mov	r3, r1
 8016a56:	4630      	mov	r0, r6
 8016a58:	4639      	mov	r1, r7
 8016a5a:	f7e9 fbf1 	bl	8000240 <__aeabi_dsub>
 8016a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a62:	f7e9 fda5 	bl	80005b0 <__aeabi_dmul>
 8016a66:	4622      	mov	r2, r4
 8016a68:	4606      	mov	r6, r0
 8016a6a:	460f      	mov	r7, r1
 8016a6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a70:	462b      	mov	r3, r5
 8016a72:	f7e9 fd9d 	bl	80005b0 <__aeabi_dmul>
 8016a76:	4602      	mov	r2, r0
 8016a78:	460b      	mov	r3, r1
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	4639      	mov	r1, r7
 8016a7e:	f7e9 fbe1 	bl	8000244 <__adddf3>
 8016a82:	4606      	mov	r6, r0
 8016a84:	460f      	mov	r7, r1
 8016a86:	4602      	mov	r2, r0
 8016a88:	460b      	mov	r3, r1
 8016a8a:	4640      	mov	r0, r8
 8016a8c:	4649      	mov	r1, r9
 8016a8e:	f7e9 fbd9 	bl	8000244 <__adddf3>
 8016a92:	a33d      	add	r3, pc, #244	; (adr r3, 8016b88 <__ieee754_pow+0x710>)
 8016a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a98:	9c04      	ldr	r4, [sp, #16]
 8016a9a:	460d      	mov	r5, r1
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	f7e9 fd87 	bl	80005b0 <__aeabi_dmul>
 8016aa2:	4642      	mov	r2, r8
 8016aa4:	464b      	mov	r3, r9
 8016aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016aaa:	4620      	mov	r0, r4
 8016aac:	4629      	mov	r1, r5
 8016aae:	f7e9 fbc7 	bl	8000240 <__aeabi_dsub>
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	460b      	mov	r3, r1
 8016ab6:	4630      	mov	r0, r6
 8016ab8:	4639      	mov	r1, r7
 8016aba:	f7e9 fbc1 	bl	8000240 <__aeabi_dsub>
 8016abe:	a334      	add	r3, pc, #208	; (adr r3, 8016b90 <__ieee754_pow+0x718>)
 8016ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac4:	f7e9 fd74 	bl	80005b0 <__aeabi_dmul>
 8016ac8:	a333      	add	r3, pc, #204	; (adr r3, 8016b98 <__ieee754_pow+0x720>)
 8016aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ace:	4606      	mov	r6, r0
 8016ad0:	460f      	mov	r7, r1
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	4629      	mov	r1, r5
 8016ad6:	f7e9 fd6b 	bl	80005b0 <__aeabi_dmul>
 8016ada:	4602      	mov	r2, r0
 8016adc:	460b      	mov	r3, r1
 8016ade:	4630      	mov	r0, r6
 8016ae0:	4639      	mov	r1, r7
 8016ae2:	f7e9 fbaf 	bl	8000244 <__adddf3>
 8016ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ae8:	4b34      	ldr	r3, [pc, #208]	; (8016bbc <__ieee754_pow+0x744>)
 8016aea:	4413      	add	r3, r2
 8016aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af0:	f7e9 fba8 	bl	8000244 <__adddf3>
 8016af4:	4680      	mov	r8, r0
 8016af6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016af8:	4689      	mov	r9, r1
 8016afa:	f7e9 fcef 	bl	80004dc <__aeabi_i2d>
 8016afe:	4604      	mov	r4, r0
 8016b00:	460d      	mov	r5, r1
 8016b02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b04:	4b2e      	ldr	r3, [pc, #184]	; (8016bc0 <__ieee754_pow+0x748>)
 8016b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b0a:	4413      	add	r3, r2
 8016b0c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016b10:	4642      	mov	r2, r8
 8016b12:	464b      	mov	r3, r9
 8016b14:	f7e9 fb96 	bl	8000244 <__adddf3>
 8016b18:	4632      	mov	r2, r6
 8016b1a:	463b      	mov	r3, r7
 8016b1c:	f7e9 fb92 	bl	8000244 <__adddf3>
 8016b20:	4622      	mov	r2, r4
 8016b22:	462b      	mov	r3, r5
 8016b24:	f7e9 fb8e 	bl	8000244 <__adddf3>
 8016b28:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016b2c:	4622      	mov	r2, r4
 8016b2e:	462b      	mov	r3, r5
 8016b30:	4650      	mov	r0, sl
 8016b32:	468b      	mov	fp, r1
 8016b34:	f7e9 fb84 	bl	8000240 <__aeabi_dsub>
 8016b38:	4632      	mov	r2, r6
 8016b3a:	463b      	mov	r3, r7
 8016b3c:	f7e9 fb80 	bl	8000240 <__aeabi_dsub>
 8016b40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016b44:	f7e9 fb7c 	bl	8000240 <__aeabi_dsub>
 8016b48:	4602      	mov	r2, r0
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	4640      	mov	r0, r8
 8016b4e:	4649      	mov	r1, r9
 8016b50:	e608      	b.n	8016764 <__ieee754_pow+0x2ec>
 8016b52:	bf00      	nop
 8016b54:	f3af 8000 	nop.w
 8016b58:	4a454eef 	.word	0x4a454eef
 8016b5c:	3fca7e28 	.word	0x3fca7e28
 8016b60:	93c9db65 	.word	0x93c9db65
 8016b64:	3fcd864a 	.word	0x3fcd864a
 8016b68:	a91d4101 	.word	0xa91d4101
 8016b6c:	3fd17460 	.word	0x3fd17460
 8016b70:	518f264d 	.word	0x518f264d
 8016b74:	3fd55555 	.word	0x3fd55555
 8016b78:	db6fabff 	.word	0xdb6fabff
 8016b7c:	3fdb6db6 	.word	0x3fdb6db6
 8016b80:	33333303 	.word	0x33333303
 8016b84:	3fe33333 	.word	0x3fe33333
 8016b88:	e0000000 	.word	0xe0000000
 8016b8c:	3feec709 	.word	0x3feec709
 8016b90:	dc3a03fd 	.word	0xdc3a03fd
 8016b94:	3feec709 	.word	0x3feec709
 8016b98:	145b01f5 	.word	0x145b01f5
 8016b9c:	be3e2fe0 	.word	0xbe3e2fe0
 8016ba0:	7ff00000 	.word	0x7ff00000
 8016ba4:	43400000 	.word	0x43400000
 8016ba8:	0003988e 	.word	0x0003988e
 8016bac:	000bb679 	.word	0x000bb679
 8016bb0:	080181f0 	.word	0x080181f0
 8016bb4:	3ff00000 	.word	0x3ff00000
 8016bb8:	40080000 	.word	0x40080000
 8016bbc:	08018210 	.word	0x08018210
 8016bc0:	08018200 	.word	0x08018200
 8016bc4:	2601      	movs	r6, #1
 8016bc6:	e667      	b.n	8016898 <__ieee754_pow+0x420>
 8016bc8:	a39d      	add	r3, pc, #628	; (adr r3, 8016e40 <__ieee754_pow+0x9c8>)
 8016bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bce:	4640      	mov	r0, r8
 8016bd0:	4649      	mov	r1, r9
 8016bd2:	f7e9 fb37 	bl	8000244 <__adddf3>
 8016bd6:	4622      	mov	r2, r4
 8016bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016bdc:	462b      	mov	r3, r5
 8016bde:	4650      	mov	r0, sl
 8016be0:	4639      	mov	r1, r7
 8016be2:	f7e9 fb2d 	bl	8000240 <__aeabi_dsub>
 8016be6:	4602      	mov	r2, r0
 8016be8:	460b      	mov	r3, r1
 8016bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016bee:	f7e9 ff6f 	bl	8000ad0 <__aeabi_dcmpgt>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	f47f ae01 	bne.w	80167fa <__ieee754_pow+0x382>
 8016bf8:	4aa5      	ldr	r2, [pc, #660]	; (8016e90 <__ieee754_pow+0xa18>)
 8016bfa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	f340 8103 	ble.w	8016e0a <__ieee754_pow+0x992>
 8016c04:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016c08:	2000      	movs	r0, #0
 8016c0a:	151b      	asrs	r3, r3, #20
 8016c0c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016c10:	fa4a f303 	asr.w	r3, sl, r3
 8016c14:	4433      	add	r3, r6
 8016c16:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016c1a:	4f9e      	ldr	r7, [pc, #632]	; (8016e94 <__ieee754_pow+0xa1c>)
 8016c1c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016c20:	4117      	asrs	r7, r2
 8016c22:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016c26:	ea23 0107 	bic.w	r1, r3, r7
 8016c2a:	f1c2 0214 	rsb	r2, r2, #20
 8016c2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016c32:	460b      	mov	r3, r1
 8016c34:	fa4a fa02 	asr.w	sl, sl, r2
 8016c38:	2e00      	cmp	r6, #0
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	4629      	mov	r1, r5
 8016c3e:	4620      	mov	r0, r4
 8016c40:	bfb8      	it	lt
 8016c42:	f1ca 0a00 	rsblt	sl, sl, #0
 8016c46:	f7e9 fafb 	bl	8000240 <__aeabi_dsub>
 8016c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c52:	2400      	movs	r4, #0
 8016c54:	4642      	mov	r2, r8
 8016c56:	464b      	mov	r3, r9
 8016c58:	f7e9 faf4 	bl	8000244 <__adddf3>
 8016c5c:	a37a      	add	r3, pc, #488	; (adr r3, 8016e48 <__ieee754_pow+0x9d0>)
 8016c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c62:	4620      	mov	r0, r4
 8016c64:	460d      	mov	r5, r1
 8016c66:	f7e9 fca3 	bl	80005b0 <__aeabi_dmul>
 8016c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c6e:	4606      	mov	r6, r0
 8016c70:	460f      	mov	r7, r1
 8016c72:	4620      	mov	r0, r4
 8016c74:	4629      	mov	r1, r5
 8016c76:	f7e9 fae3 	bl	8000240 <__aeabi_dsub>
 8016c7a:	4602      	mov	r2, r0
 8016c7c:	460b      	mov	r3, r1
 8016c7e:	4640      	mov	r0, r8
 8016c80:	4649      	mov	r1, r9
 8016c82:	f7e9 fadd 	bl	8000240 <__aeabi_dsub>
 8016c86:	a372      	add	r3, pc, #456	; (adr r3, 8016e50 <__ieee754_pow+0x9d8>)
 8016c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c8c:	f7e9 fc90 	bl	80005b0 <__aeabi_dmul>
 8016c90:	a371      	add	r3, pc, #452	; (adr r3, 8016e58 <__ieee754_pow+0x9e0>)
 8016c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c96:	4680      	mov	r8, r0
 8016c98:	4689      	mov	r9, r1
 8016c9a:	4620      	mov	r0, r4
 8016c9c:	4629      	mov	r1, r5
 8016c9e:	f7e9 fc87 	bl	80005b0 <__aeabi_dmul>
 8016ca2:	4602      	mov	r2, r0
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	4640      	mov	r0, r8
 8016ca8:	4649      	mov	r1, r9
 8016caa:	f7e9 facb 	bl	8000244 <__adddf3>
 8016cae:	4604      	mov	r4, r0
 8016cb0:	460d      	mov	r5, r1
 8016cb2:	4602      	mov	r2, r0
 8016cb4:	460b      	mov	r3, r1
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	4639      	mov	r1, r7
 8016cba:	f7e9 fac3 	bl	8000244 <__adddf3>
 8016cbe:	4632      	mov	r2, r6
 8016cc0:	463b      	mov	r3, r7
 8016cc2:	4680      	mov	r8, r0
 8016cc4:	4689      	mov	r9, r1
 8016cc6:	f7e9 fabb 	bl	8000240 <__aeabi_dsub>
 8016cca:	4602      	mov	r2, r0
 8016ccc:	460b      	mov	r3, r1
 8016cce:	4620      	mov	r0, r4
 8016cd0:	4629      	mov	r1, r5
 8016cd2:	f7e9 fab5 	bl	8000240 <__aeabi_dsub>
 8016cd6:	4642      	mov	r2, r8
 8016cd8:	4606      	mov	r6, r0
 8016cda:	460f      	mov	r7, r1
 8016cdc:	464b      	mov	r3, r9
 8016cde:	4640      	mov	r0, r8
 8016ce0:	4649      	mov	r1, r9
 8016ce2:	f7e9 fc65 	bl	80005b0 <__aeabi_dmul>
 8016ce6:	a35e      	add	r3, pc, #376	; (adr r3, 8016e60 <__ieee754_pow+0x9e8>)
 8016ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cec:	4604      	mov	r4, r0
 8016cee:	460d      	mov	r5, r1
 8016cf0:	f7e9 fc5e 	bl	80005b0 <__aeabi_dmul>
 8016cf4:	a35c      	add	r3, pc, #368	; (adr r3, 8016e68 <__ieee754_pow+0x9f0>)
 8016cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfa:	f7e9 faa1 	bl	8000240 <__aeabi_dsub>
 8016cfe:	4622      	mov	r2, r4
 8016d00:	462b      	mov	r3, r5
 8016d02:	f7e9 fc55 	bl	80005b0 <__aeabi_dmul>
 8016d06:	a35a      	add	r3, pc, #360	; (adr r3, 8016e70 <__ieee754_pow+0x9f8>)
 8016d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d0c:	f7e9 fa9a 	bl	8000244 <__adddf3>
 8016d10:	4622      	mov	r2, r4
 8016d12:	462b      	mov	r3, r5
 8016d14:	f7e9 fc4c 	bl	80005b0 <__aeabi_dmul>
 8016d18:	a357      	add	r3, pc, #348	; (adr r3, 8016e78 <__ieee754_pow+0xa00>)
 8016d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d1e:	f7e9 fa8f 	bl	8000240 <__aeabi_dsub>
 8016d22:	4622      	mov	r2, r4
 8016d24:	462b      	mov	r3, r5
 8016d26:	f7e9 fc43 	bl	80005b0 <__aeabi_dmul>
 8016d2a:	a355      	add	r3, pc, #340	; (adr r3, 8016e80 <__ieee754_pow+0xa08>)
 8016d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d30:	f7e9 fa88 	bl	8000244 <__adddf3>
 8016d34:	4622      	mov	r2, r4
 8016d36:	462b      	mov	r3, r5
 8016d38:	f7e9 fc3a 	bl	80005b0 <__aeabi_dmul>
 8016d3c:	4602      	mov	r2, r0
 8016d3e:	460b      	mov	r3, r1
 8016d40:	4640      	mov	r0, r8
 8016d42:	4649      	mov	r1, r9
 8016d44:	f7e9 fa7c 	bl	8000240 <__aeabi_dsub>
 8016d48:	4604      	mov	r4, r0
 8016d4a:	460d      	mov	r5, r1
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	460b      	mov	r3, r1
 8016d50:	4640      	mov	r0, r8
 8016d52:	4649      	mov	r1, r9
 8016d54:	f7e9 fc2c 	bl	80005b0 <__aeabi_dmul>
 8016d58:	2200      	movs	r2, #0
 8016d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d62:	4620      	mov	r0, r4
 8016d64:	4629      	mov	r1, r5
 8016d66:	f7e9 fa6b 	bl	8000240 <__aeabi_dsub>
 8016d6a:	4602      	mov	r2, r0
 8016d6c:	460b      	mov	r3, r1
 8016d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d72:	f7e9 fd47 	bl	8000804 <__aeabi_ddiv>
 8016d76:	4632      	mov	r2, r6
 8016d78:	4604      	mov	r4, r0
 8016d7a:	460d      	mov	r5, r1
 8016d7c:	463b      	mov	r3, r7
 8016d7e:	4640      	mov	r0, r8
 8016d80:	4649      	mov	r1, r9
 8016d82:	f7e9 fc15 	bl	80005b0 <__aeabi_dmul>
 8016d86:	4632      	mov	r2, r6
 8016d88:	463b      	mov	r3, r7
 8016d8a:	f7e9 fa5b 	bl	8000244 <__adddf3>
 8016d8e:	4602      	mov	r2, r0
 8016d90:	460b      	mov	r3, r1
 8016d92:	4620      	mov	r0, r4
 8016d94:	4629      	mov	r1, r5
 8016d96:	f7e9 fa53 	bl	8000240 <__aeabi_dsub>
 8016d9a:	4642      	mov	r2, r8
 8016d9c:	464b      	mov	r3, r9
 8016d9e:	f7e9 fa4f 	bl	8000240 <__aeabi_dsub>
 8016da2:	4602      	mov	r2, r0
 8016da4:	460b      	mov	r3, r1
 8016da6:	2000      	movs	r0, #0
 8016da8:	493b      	ldr	r1, [pc, #236]	; (8016e98 <__ieee754_pow+0xa20>)
 8016daa:	f7e9 fa49 	bl	8000240 <__aeabi_dsub>
 8016dae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016db2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016db6:	da2b      	bge.n	8016e10 <__ieee754_pow+0x998>
 8016db8:	4652      	mov	r2, sl
 8016dba:	f000 f9b9 	bl	8017130 <scalbn>
 8016dbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dc2:	f7ff bbf2 	b.w	80165aa <__ieee754_pow+0x132>
 8016dc6:	4b35      	ldr	r3, [pc, #212]	; (8016e9c <__ieee754_pow+0xa24>)
 8016dc8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8016dcc:	429f      	cmp	r7, r3
 8016dce:	f77f af13 	ble.w	8016bf8 <__ieee754_pow+0x780>
 8016dd2:	4b33      	ldr	r3, [pc, #204]	; (8016ea0 <__ieee754_pow+0xa28>)
 8016dd4:	440b      	add	r3, r1
 8016dd6:	4303      	orrs	r3, r0
 8016dd8:	d00b      	beq.n	8016df2 <__ieee754_pow+0x97a>
 8016dda:	a32b      	add	r3, pc, #172	; (adr r3, 8016e88 <__ieee754_pow+0xa10>)
 8016ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016de4:	f7e9 fbe4 	bl	80005b0 <__aeabi_dmul>
 8016de8:	a327      	add	r3, pc, #156	; (adr r3, 8016e88 <__ieee754_pow+0xa10>)
 8016dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dee:	f7ff bbdc 	b.w	80165aa <__ieee754_pow+0x132>
 8016df2:	4622      	mov	r2, r4
 8016df4:	462b      	mov	r3, r5
 8016df6:	f7e9 fa23 	bl	8000240 <__aeabi_dsub>
 8016dfa:	4642      	mov	r2, r8
 8016dfc:	464b      	mov	r3, r9
 8016dfe:	f7e9 fe5d 	bl	8000abc <__aeabi_dcmpge>
 8016e02:	2800      	cmp	r0, #0
 8016e04:	f43f aef8 	beq.w	8016bf8 <__ieee754_pow+0x780>
 8016e08:	e7e7      	b.n	8016dda <__ieee754_pow+0x962>
 8016e0a:	f04f 0a00 	mov.w	sl, #0
 8016e0e:	e71e      	b.n	8016c4e <__ieee754_pow+0x7d6>
 8016e10:	4621      	mov	r1, r4
 8016e12:	e7d4      	b.n	8016dbe <__ieee754_pow+0x946>
 8016e14:	f04f 0b00 	mov.w	fp, #0
 8016e18:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016e98 <__ieee754_pow+0xa20>
 8016e1c:	f7ff bbb0 	b.w	8016580 <__ieee754_pow+0x108>
 8016e20:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8016e24:	f7ff bbac 	b.w	8016580 <__ieee754_pow+0x108>
 8016e28:	4638      	mov	r0, r7
 8016e2a:	4641      	mov	r1, r8
 8016e2c:	f7ff bbbf 	b.w	80165ae <__ieee754_pow+0x136>
 8016e30:	9200      	str	r2, [sp, #0]
 8016e32:	f7ff bb7f 	b.w	8016534 <__ieee754_pow+0xbc>
 8016e36:	2300      	movs	r3, #0
 8016e38:	f7ff bb69 	b.w	801650e <__ieee754_pow+0x96>
 8016e3c:	f3af 8000 	nop.w
 8016e40:	652b82fe 	.word	0x652b82fe
 8016e44:	3c971547 	.word	0x3c971547
 8016e48:	00000000 	.word	0x00000000
 8016e4c:	3fe62e43 	.word	0x3fe62e43
 8016e50:	fefa39ef 	.word	0xfefa39ef
 8016e54:	3fe62e42 	.word	0x3fe62e42
 8016e58:	0ca86c39 	.word	0x0ca86c39
 8016e5c:	be205c61 	.word	0xbe205c61
 8016e60:	72bea4d0 	.word	0x72bea4d0
 8016e64:	3e663769 	.word	0x3e663769
 8016e68:	c5d26bf1 	.word	0xc5d26bf1
 8016e6c:	3ebbbd41 	.word	0x3ebbbd41
 8016e70:	af25de2c 	.word	0xaf25de2c
 8016e74:	3f11566a 	.word	0x3f11566a
 8016e78:	16bebd93 	.word	0x16bebd93
 8016e7c:	3f66c16c 	.word	0x3f66c16c
 8016e80:	5555553e 	.word	0x5555553e
 8016e84:	3fc55555 	.word	0x3fc55555
 8016e88:	c2f8f359 	.word	0xc2f8f359
 8016e8c:	01a56e1f 	.word	0x01a56e1f
 8016e90:	3fe00000 	.word	0x3fe00000
 8016e94:	000fffff 	.word	0x000fffff
 8016e98:	3ff00000 	.word	0x3ff00000
 8016e9c:	4090cbff 	.word	0x4090cbff
 8016ea0:	3f6f3400 	.word	0x3f6f3400

08016ea4 <__ieee754_sqrt>:
 8016ea4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8016ff8 <__ieee754_sqrt+0x154>
 8016ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eac:	ea3c 0c01 	bics.w	ip, ip, r1
 8016eb0:	460b      	mov	r3, r1
 8016eb2:	4606      	mov	r6, r0
 8016eb4:	460d      	mov	r5, r1
 8016eb6:	460a      	mov	r2, r1
 8016eb8:	4607      	mov	r7, r0
 8016eba:	4604      	mov	r4, r0
 8016ebc:	d10e      	bne.n	8016edc <__ieee754_sqrt+0x38>
 8016ebe:	4602      	mov	r2, r0
 8016ec0:	f7e9 fb76 	bl	80005b0 <__aeabi_dmul>
 8016ec4:	4602      	mov	r2, r0
 8016ec6:	460b      	mov	r3, r1
 8016ec8:	4630      	mov	r0, r6
 8016eca:	4629      	mov	r1, r5
 8016ecc:	f7e9 f9ba 	bl	8000244 <__adddf3>
 8016ed0:	4606      	mov	r6, r0
 8016ed2:	460d      	mov	r5, r1
 8016ed4:	4630      	mov	r0, r6
 8016ed6:	4629      	mov	r1, r5
 8016ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016edc:	2900      	cmp	r1, #0
 8016ede:	dc0d      	bgt.n	8016efc <__ieee754_sqrt+0x58>
 8016ee0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8016ee4:	ea5c 0707 	orrs.w	r7, ip, r7
 8016ee8:	d0f4      	beq.n	8016ed4 <__ieee754_sqrt+0x30>
 8016eea:	b139      	cbz	r1, 8016efc <__ieee754_sqrt+0x58>
 8016eec:	4602      	mov	r2, r0
 8016eee:	f7e9 f9a7 	bl	8000240 <__aeabi_dsub>
 8016ef2:	4602      	mov	r2, r0
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	f7e9 fc85 	bl	8000804 <__aeabi_ddiv>
 8016efa:	e7e9      	b.n	8016ed0 <__ieee754_sqrt+0x2c>
 8016efc:	1512      	asrs	r2, r2, #20
 8016efe:	d074      	beq.n	8016fea <__ieee754_sqrt+0x146>
 8016f00:	2000      	movs	r0, #0
 8016f02:	07d5      	lsls	r5, r2, #31
 8016f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f08:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8016f0c:	bf5e      	ittt	pl
 8016f0e:	0fe3      	lsrpl	r3, r4, #31
 8016f10:	0064      	lslpl	r4, r4, #1
 8016f12:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8016f16:	0fe3      	lsrs	r3, r4, #31
 8016f18:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016f1c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8016f20:	2516      	movs	r5, #22
 8016f22:	4601      	mov	r1, r0
 8016f24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016f28:	1076      	asrs	r6, r6, #1
 8016f2a:	0064      	lsls	r4, r4, #1
 8016f2c:	188f      	adds	r7, r1, r2
 8016f2e:	429f      	cmp	r7, r3
 8016f30:	bfde      	ittt	le
 8016f32:	1bdb      	suble	r3, r3, r7
 8016f34:	18b9      	addle	r1, r7, r2
 8016f36:	1880      	addle	r0, r0, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	3d01      	subs	r5, #1
 8016f3c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8016f40:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016f44:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8016f48:	d1f0      	bne.n	8016f2c <__ieee754_sqrt+0x88>
 8016f4a:	462a      	mov	r2, r5
 8016f4c:	f04f 0e20 	mov.w	lr, #32
 8016f50:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8016f54:	428b      	cmp	r3, r1
 8016f56:	eb07 0c05 	add.w	ip, r7, r5
 8016f5a:	dc02      	bgt.n	8016f62 <__ieee754_sqrt+0xbe>
 8016f5c:	d113      	bne.n	8016f86 <__ieee754_sqrt+0xe2>
 8016f5e:	45a4      	cmp	ip, r4
 8016f60:	d811      	bhi.n	8016f86 <__ieee754_sqrt+0xe2>
 8016f62:	f1bc 0f00 	cmp.w	ip, #0
 8016f66:	eb0c 0507 	add.w	r5, ip, r7
 8016f6a:	da43      	bge.n	8016ff4 <__ieee754_sqrt+0x150>
 8016f6c:	2d00      	cmp	r5, #0
 8016f6e:	db41      	blt.n	8016ff4 <__ieee754_sqrt+0x150>
 8016f70:	f101 0801 	add.w	r8, r1, #1
 8016f74:	1a5b      	subs	r3, r3, r1
 8016f76:	4641      	mov	r1, r8
 8016f78:	45a4      	cmp	ip, r4
 8016f7a:	bf88      	it	hi
 8016f7c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016f80:	eba4 040c 	sub.w	r4, r4, ip
 8016f84:	443a      	add	r2, r7
 8016f86:	005b      	lsls	r3, r3, #1
 8016f88:	f1be 0e01 	subs.w	lr, lr, #1
 8016f8c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8016f90:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8016f94:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8016f98:	d1dc      	bne.n	8016f54 <__ieee754_sqrt+0xb0>
 8016f9a:	4323      	orrs	r3, r4
 8016f9c:	d006      	beq.n	8016fac <__ieee754_sqrt+0x108>
 8016f9e:	1c54      	adds	r4, r2, #1
 8016fa0:	bf0b      	itete	eq
 8016fa2:	4672      	moveq	r2, lr
 8016fa4:	3201      	addne	r2, #1
 8016fa6:	3001      	addeq	r0, #1
 8016fa8:	f022 0201 	bicne.w	r2, r2, #1
 8016fac:	1043      	asrs	r3, r0, #1
 8016fae:	07c1      	lsls	r1, r0, #31
 8016fb0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016fb4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016fb8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016fbc:	bf48      	it	mi
 8016fbe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016fc2:	4610      	mov	r0, r2
 8016fc4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8016fc8:	e782      	b.n	8016ed0 <__ieee754_sqrt+0x2c>
 8016fca:	0ae3      	lsrs	r3, r4, #11
 8016fcc:	3915      	subs	r1, #21
 8016fce:	0564      	lsls	r4, r4, #21
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d0fa      	beq.n	8016fca <__ieee754_sqrt+0x126>
 8016fd4:	02de      	lsls	r6, r3, #11
 8016fd6:	d50a      	bpl.n	8016fee <__ieee754_sqrt+0x14a>
 8016fd8:	f1c2 0020 	rsb	r0, r2, #32
 8016fdc:	fa24 f000 	lsr.w	r0, r4, r0
 8016fe0:	1e55      	subs	r5, r2, #1
 8016fe2:	4094      	lsls	r4, r2
 8016fe4:	4303      	orrs	r3, r0
 8016fe6:	1b4a      	subs	r2, r1, r5
 8016fe8:	e78a      	b.n	8016f00 <__ieee754_sqrt+0x5c>
 8016fea:	4611      	mov	r1, r2
 8016fec:	e7f0      	b.n	8016fd0 <__ieee754_sqrt+0x12c>
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	3201      	adds	r2, #1
 8016ff2:	e7ef      	b.n	8016fd4 <__ieee754_sqrt+0x130>
 8016ff4:	4688      	mov	r8, r1
 8016ff6:	e7bd      	b.n	8016f74 <__ieee754_sqrt+0xd0>
 8016ff8:	7ff00000 	.word	0x7ff00000

08016ffc <fabs>:
 8016ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017000:	4770      	bx	lr

08017002 <finite>:
 8017002:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8017006:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801700a:	0fc0      	lsrs	r0, r0, #31
 801700c:	4770      	bx	lr
	...

08017010 <nan>:
 8017010:	2000      	movs	r0, #0
 8017012:	4901      	ldr	r1, [pc, #4]	; (8017018 <nan+0x8>)
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop
 8017018:	7ff80000 	.word	0x7ff80000

0801701c <rint>:
 801701c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8017020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017022:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8017026:	2f13      	cmp	r7, #19
 8017028:	4602      	mov	r2, r0
 801702a:	460b      	mov	r3, r1
 801702c:	460c      	mov	r4, r1
 801702e:	4605      	mov	r5, r0
 8017030:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8017034:	dc59      	bgt.n	80170ea <rint+0xce>
 8017036:	2f00      	cmp	r7, #0
 8017038:	da2a      	bge.n	8017090 <rint+0x74>
 801703a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801703e:	4301      	orrs	r1, r0
 8017040:	d022      	beq.n	8017088 <rint+0x6c>
 8017042:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8017046:	4301      	orrs	r1, r0
 8017048:	424d      	negs	r5, r1
 801704a:	430d      	orrs	r5, r1
 801704c:	4936      	ldr	r1, [pc, #216]	; (8017128 <rint+0x10c>)
 801704e:	0c5c      	lsrs	r4, r3, #17
 8017050:	0b2d      	lsrs	r5, r5, #12
 8017052:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8017056:	0464      	lsls	r4, r4, #17
 8017058:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801705c:	ea45 0304 	orr.w	r3, r5, r4
 8017060:	e9d1 4500 	ldrd	r4, r5, [r1]
 8017064:	4620      	mov	r0, r4
 8017066:	4629      	mov	r1, r5
 8017068:	f7e9 f8ec 	bl	8000244 <__adddf3>
 801706c:	e9cd 0100 	strd	r0, r1, [sp]
 8017070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017074:	462b      	mov	r3, r5
 8017076:	4622      	mov	r2, r4
 8017078:	f7e9 f8e2 	bl	8000240 <__aeabi_dsub>
 801707c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017080:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8017084:	4602      	mov	r2, r0
 8017086:	460b      	mov	r3, r1
 8017088:	4610      	mov	r0, r2
 801708a:	4619      	mov	r1, r3
 801708c:	b003      	add	sp, #12
 801708e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017090:	4926      	ldr	r1, [pc, #152]	; (801712c <rint+0x110>)
 8017092:	4139      	asrs	r1, r7
 8017094:	ea03 0001 	and.w	r0, r3, r1
 8017098:	4310      	orrs	r0, r2
 801709a:	d0f5      	beq.n	8017088 <rint+0x6c>
 801709c:	084b      	lsrs	r3, r1, #1
 801709e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80170a2:	ea52 0501 	orrs.w	r5, r2, r1
 80170a6:	d00c      	beq.n	80170c2 <rint+0xa6>
 80170a8:	ea24 0303 	bic.w	r3, r4, r3
 80170ac:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80170b0:	2f13      	cmp	r7, #19
 80170b2:	bf0c      	ite	eq
 80170b4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80170b8:	2500      	movne	r5, #0
 80170ba:	fa44 f707 	asr.w	r7, r4, r7
 80170be:	ea43 0407 	orr.w	r4, r3, r7
 80170c2:	4919      	ldr	r1, [pc, #100]	; (8017128 <rint+0x10c>)
 80170c4:	4623      	mov	r3, r4
 80170c6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80170ca:	462a      	mov	r2, r5
 80170cc:	e9d6 4500 	ldrd	r4, r5, [r6]
 80170d0:	4620      	mov	r0, r4
 80170d2:	4629      	mov	r1, r5
 80170d4:	f7e9 f8b6 	bl	8000244 <__adddf3>
 80170d8:	e9cd 0100 	strd	r0, r1, [sp]
 80170dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170e0:	4622      	mov	r2, r4
 80170e2:	462b      	mov	r3, r5
 80170e4:	f7e9 f8ac 	bl	8000240 <__aeabi_dsub>
 80170e8:	e7cc      	b.n	8017084 <rint+0x68>
 80170ea:	2f33      	cmp	r7, #51	; 0x33
 80170ec:	dd05      	ble.n	80170fa <rint+0xde>
 80170ee:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80170f2:	d1c9      	bne.n	8017088 <rint+0x6c>
 80170f4:	f7e9 f8a6 	bl	8000244 <__adddf3>
 80170f8:	e7c4      	b.n	8017084 <rint+0x68>
 80170fa:	f04f 31ff 	mov.w	r1, #4294967295
 80170fe:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8017102:	fa21 f10c 	lsr.w	r1, r1, ip
 8017106:	4208      	tst	r0, r1
 8017108:	d0be      	beq.n	8017088 <rint+0x6c>
 801710a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 801710e:	bf18      	it	ne
 8017110:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8017114:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8017118:	bf1e      	ittt	ne
 801711a:	ea20 0303 	bicne.w	r3, r0, r3
 801711e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8017122:	ea43 050c 	orrne.w	r5, r3, ip
 8017126:	e7cc      	b.n	80170c2 <rint+0xa6>
 8017128:	08018220 	.word	0x08018220
 801712c:	000fffff 	.word	0x000fffff

08017130 <scalbn>:
 8017130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017132:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8017136:	4604      	mov	r4, r0
 8017138:	460d      	mov	r5, r1
 801713a:	4617      	mov	r7, r2
 801713c:	460b      	mov	r3, r1
 801713e:	b996      	cbnz	r6, 8017166 <scalbn+0x36>
 8017140:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017144:	4303      	orrs	r3, r0
 8017146:	d039      	beq.n	80171bc <scalbn+0x8c>
 8017148:	4b35      	ldr	r3, [pc, #212]	; (8017220 <scalbn+0xf0>)
 801714a:	2200      	movs	r2, #0
 801714c:	f7e9 fa30 	bl	80005b0 <__aeabi_dmul>
 8017150:	4b34      	ldr	r3, [pc, #208]	; (8017224 <scalbn+0xf4>)
 8017152:	4604      	mov	r4, r0
 8017154:	429f      	cmp	r7, r3
 8017156:	460d      	mov	r5, r1
 8017158:	da0f      	bge.n	801717a <scalbn+0x4a>
 801715a:	a32d      	add	r3, pc, #180	; (adr r3, 8017210 <scalbn+0xe0>)
 801715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017160:	f7e9 fa26 	bl	80005b0 <__aeabi_dmul>
 8017164:	e006      	b.n	8017174 <scalbn+0x44>
 8017166:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801716a:	4296      	cmp	r6, r2
 801716c:	d10a      	bne.n	8017184 <scalbn+0x54>
 801716e:	4602      	mov	r2, r0
 8017170:	f7e9 f868 	bl	8000244 <__adddf3>
 8017174:	4604      	mov	r4, r0
 8017176:	460d      	mov	r5, r1
 8017178:	e020      	b.n	80171bc <scalbn+0x8c>
 801717a:	460b      	mov	r3, r1
 801717c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017180:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8017184:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8017188:	19b9      	adds	r1, r7, r6
 801718a:	4291      	cmp	r1, r2
 801718c:	dd0e      	ble.n	80171ac <scalbn+0x7c>
 801718e:	a322      	add	r3, pc, #136	; (adr r3, 8017218 <scalbn+0xe8>)
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8017198:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801719c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80171a0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80171a4:	4820      	ldr	r0, [pc, #128]	; (8017228 <scalbn+0xf8>)
 80171a6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80171aa:	e7d9      	b.n	8017160 <scalbn+0x30>
 80171ac:	2900      	cmp	r1, #0
 80171ae:	dd08      	ble.n	80171c2 <scalbn+0x92>
 80171b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80171b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80171bc:	4620      	mov	r0, r4
 80171be:	4629      	mov	r1, r5
 80171c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171c2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80171c6:	da16      	bge.n	80171f6 <scalbn+0xc6>
 80171c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80171cc:	429f      	cmp	r7, r3
 80171ce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80171d2:	dd08      	ble.n	80171e6 <scalbn+0xb6>
 80171d4:	4c15      	ldr	r4, [pc, #84]	; (801722c <scalbn+0xfc>)
 80171d6:	4814      	ldr	r0, [pc, #80]	; (8017228 <scalbn+0xf8>)
 80171d8:	f363 74df 	bfi	r4, r3, #31, #1
 80171dc:	a30e      	add	r3, pc, #56	; (adr r3, 8017218 <scalbn+0xe8>)
 80171de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e2:	4621      	mov	r1, r4
 80171e4:	e7bc      	b.n	8017160 <scalbn+0x30>
 80171e6:	4c12      	ldr	r4, [pc, #72]	; (8017230 <scalbn+0x100>)
 80171e8:	4812      	ldr	r0, [pc, #72]	; (8017234 <scalbn+0x104>)
 80171ea:	f363 74df 	bfi	r4, r3, #31, #1
 80171ee:	a308      	add	r3, pc, #32	; (adr r3, 8017210 <scalbn+0xe0>)
 80171f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f4:	e7f5      	b.n	80171e2 <scalbn+0xb2>
 80171f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171fa:	3136      	adds	r1, #54	; 0x36
 80171fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017200:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8017204:	4620      	mov	r0, r4
 8017206:	4629      	mov	r1, r5
 8017208:	2200      	movs	r2, #0
 801720a:	4b0b      	ldr	r3, [pc, #44]	; (8017238 <scalbn+0x108>)
 801720c:	e7a8      	b.n	8017160 <scalbn+0x30>
 801720e:	bf00      	nop
 8017210:	c2f8f359 	.word	0xc2f8f359
 8017214:	01a56e1f 	.word	0x01a56e1f
 8017218:	8800759c 	.word	0x8800759c
 801721c:	7e37e43c 	.word	0x7e37e43c
 8017220:	43500000 	.word	0x43500000
 8017224:	ffff3cb0 	.word	0xffff3cb0
 8017228:	8800759c 	.word	0x8800759c
 801722c:	7e37e43c 	.word	0x7e37e43c
 8017230:	01a56e1f 	.word	0x01a56e1f
 8017234:	c2f8f359 	.word	0xc2f8f359
 8017238:	3c900000 	.word	0x3c900000
 801723c:	00000000 	.word	0x00000000

08017240 <__ieee754_log>:
 8017240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017244:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8017248:	4602      	mov	r2, r0
 801724a:	460b      	mov	r3, r1
 801724c:	460d      	mov	r5, r1
 801724e:	b087      	sub	sp, #28
 8017250:	da24      	bge.n	801729c <__ieee754_log+0x5c>
 8017252:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8017256:	4304      	orrs	r4, r0
 8017258:	d108      	bne.n	801726c <__ieee754_log+0x2c>
 801725a:	2200      	movs	r2, #0
 801725c:	2300      	movs	r3, #0
 801725e:	2000      	movs	r0, #0
 8017260:	49cb      	ldr	r1, [pc, #812]	; (8017590 <__ieee754_log+0x350>)
 8017262:	f7e9 facf 	bl	8000804 <__aeabi_ddiv>
 8017266:	b007      	add	sp, #28
 8017268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801726c:	2900      	cmp	r1, #0
 801726e:	da04      	bge.n	801727a <__ieee754_log+0x3a>
 8017270:	f7e8 ffe6 	bl	8000240 <__aeabi_dsub>
 8017274:	2200      	movs	r2, #0
 8017276:	2300      	movs	r3, #0
 8017278:	e7f3      	b.n	8017262 <__ieee754_log+0x22>
 801727a:	2200      	movs	r2, #0
 801727c:	4bc5      	ldr	r3, [pc, #788]	; (8017594 <__ieee754_log+0x354>)
 801727e:	f7e9 f997 	bl	80005b0 <__aeabi_dmul>
 8017282:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8017286:	4602      	mov	r2, r0
 8017288:	460b      	mov	r3, r1
 801728a:	460d      	mov	r5, r1
 801728c:	49c2      	ldr	r1, [pc, #776]	; (8017598 <__ieee754_log+0x358>)
 801728e:	428d      	cmp	r5, r1
 8017290:	dd06      	ble.n	80172a0 <__ieee754_log+0x60>
 8017292:	4610      	mov	r0, r2
 8017294:	4619      	mov	r1, r3
 8017296:	f7e8 ffd5 	bl	8000244 <__adddf3>
 801729a:	e7e4      	b.n	8017266 <__ieee754_log+0x26>
 801729c:	2600      	movs	r6, #0
 801729e:	e7f5      	b.n	801728c <__ieee754_log+0x4c>
 80172a0:	152c      	asrs	r4, r5, #20
 80172a2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80172a6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80172aa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80172ae:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80172b2:	4426      	add	r6, r4
 80172b4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80172b8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80172bc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80172c0:	ea41 0305 	orr.w	r3, r1, r5
 80172c4:	4610      	mov	r0, r2
 80172c6:	4619      	mov	r1, r3
 80172c8:	2200      	movs	r2, #0
 80172ca:	4bb4      	ldr	r3, [pc, #720]	; (801759c <__ieee754_log+0x35c>)
 80172cc:	f7e8 ffb8 	bl	8000240 <__aeabi_dsub>
 80172d0:	1cab      	adds	r3, r5, #2
 80172d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	4682      	mov	sl, r0
 80172da:	468b      	mov	fp, r1
 80172dc:	f04f 0200 	mov.w	r2, #0
 80172e0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80172e4:	dc53      	bgt.n	801738e <__ieee754_log+0x14e>
 80172e6:	2300      	movs	r3, #0
 80172e8:	f7e9 fbca 	bl	8000a80 <__aeabi_dcmpeq>
 80172ec:	b1d0      	cbz	r0, 8017324 <__ieee754_log+0xe4>
 80172ee:	2c00      	cmp	r4, #0
 80172f0:	f000 8122 	beq.w	8017538 <__ieee754_log+0x2f8>
 80172f4:	4620      	mov	r0, r4
 80172f6:	f7e9 f8f1 	bl	80004dc <__aeabi_i2d>
 80172fa:	a391      	add	r3, pc, #580	; (adr r3, 8017540 <__ieee754_log+0x300>)
 80172fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017300:	4606      	mov	r6, r0
 8017302:	460f      	mov	r7, r1
 8017304:	f7e9 f954 	bl	80005b0 <__aeabi_dmul>
 8017308:	a38f      	add	r3, pc, #572	; (adr r3, 8017548 <__ieee754_log+0x308>)
 801730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730e:	4604      	mov	r4, r0
 8017310:	460d      	mov	r5, r1
 8017312:	4630      	mov	r0, r6
 8017314:	4639      	mov	r1, r7
 8017316:	f7e9 f94b 	bl	80005b0 <__aeabi_dmul>
 801731a:	4602      	mov	r2, r0
 801731c:	460b      	mov	r3, r1
 801731e:	4620      	mov	r0, r4
 8017320:	4629      	mov	r1, r5
 8017322:	e7b8      	b.n	8017296 <__ieee754_log+0x56>
 8017324:	a38a      	add	r3, pc, #552	; (adr r3, 8017550 <__ieee754_log+0x310>)
 8017326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732a:	4650      	mov	r0, sl
 801732c:	4659      	mov	r1, fp
 801732e:	f7e9 f93f 	bl	80005b0 <__aeabi_dmul>
 8017332:	4602      	mov	r2, r0
 8017334:	460b      	mov	r3, r1
 8017336:	2000      	movs	r0, #0
 8017338:	4999      	ldr	r1, [pc, #612]	; (80175a0 <__ieee754_log+0x360>)
 801733a:	f7e8 ff81 	bl	8000240 <__aeabi_dsub>
 801733e:	4652      	mov	r2, sl
 8017340:	4606      	mov	r6, r0
 8017342:	460f      	mov	r7, r1
 8017344:	465b      	mov	r3, fp
 8017346:	4650      	mov	r0, sl
 8017348:	4659      	mov	r1, fp
 801734a:	f7e9 f931 	bl	80005b0 <__aeabi_dmul>
 801734e:	4602      	mov	r2, r0
 8017350:	460b      	mov	r3, r1
 8017352:	4630      	mov	r0, r6
 8017354:	4639      	mov	r1, r7
 8017356:	f7e9 f92b 	bl	80005b0 <__aeabi_dmul>
 801735a:	4606      	mov	r6, r0
 801735c:	460f      	mov	r7, r1
 801735e:	b914      	cbnz	r4, 8017366 <__ieee754_log+0x126>
 8017360:	4632      	mov	r2, r6
 8017362:	463b      	mov	r3, r7
 8017364:	e0a2      	b.n	80174ac <__ieee754_log+0x26c>
 8017366:	4620      	mov	r0, r4
 8017368:	f7e9 f8b8 	bl	80004dc <__aeabi_i2d>
 801736c:	a374      	add	r3, pc, #464	; (adr r3, 8017540 <__ieee754_log+0x300>)
 801736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017372:	4680      	mov	r8, r0
 8017374:	4689      	mov	r9, r1
 8017376:	f7e9 f91b 	bl	80005b0 <__aeabi_dmul>
 801737a:	a373      	add	r3, pc, #460	; (adr r3, 8017548 <__ieee754_log+0x308>)
 801737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017380:	4604      	mov	r4, r0
 8017382:	460d      	mov	r5, r1
 8017384:	4640      	mov	r0, r8
 8017386:	4649      	mov	r1, r9
 8017388:	f7e9 f912 	bl	80005b0 <__aeabi_dmul>
 801738c:	e0a7      	b.n	80174de <__ieee754_log+0x29e>
 801738e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017392:	f7e8 ff57 	bl	8000244 <__adddf3>
 8017396:	4602      	mov	r2, r0
 8017398:	460b      	mov	r3, r1
 801739a:	4650      	mov	r0, sl
 801739c:	4659      	mov	r1, fp
 801739e:	f7e9 fa31 	bl	8000804 <__aeabi_ddiv>
 80173a2:	e9cd 0100 	strd	r0, r1, [sp]
 80173a6:	4620      	mov	r0, r4
 80173a8:	f7e9 f898 	bl	80004dc <__aeabi_i2d>
 80173ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173b4:	4610      	mov	r0, r2
 80173b6:	4619      	mov	r1, r3
 80173b8:	f7e9 f8fa 	bl	80005b0 <__aeabi_dmul>
 80173bc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80173c0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80173c4:	4602      	mov	r2, r0
 80173c6:	9305      	str	r3, [sp, #20]
 80173c8:	460b      	mov	r3, r1
 80173ca:	4606      	mov	r6, r0
 80173cc:	460f      	mov	r7, r1
 80173ce:	f7e9 f8ef 	bl	80005b0 <__aeabi_dmul>
 80173d2:	a361      	add	r3, pc, #388	; (adr r3, 8017558 <__ieee754_log+0x318>)
 80173d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d8:	4680      	mov	r8, r0
 80173da:	4689      	mov	r9, r1
 80173dc:	f7e9 f8e8 	bl	80005b0 <__aeabi_dmul>
 80173e0:	a35f      	add	r3, pc, #380	; (adr r3, 8017560 <__ieee754_log+0x320>)
 80173e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e6:	f7e8 ff2d 	bl	8000244 <__adddf3>
 80173ea:	4642      	mov	r2, r8
 80173ec:	464b      	mov	r3, r9
 80173ee:	f7e9 f8df 	bl	80005b0 <__aeabi_dmul>
 80173f2:	a35d      	add	r3, pc, #372	; (adr r3, 8017568 <__ieee754_log+0x328>)
 80173f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f8:	f7e8 ff24 	bl	8000244 <__adddf3>
 80173fc:	4642      	mov	r2, r8
 80173fe:	464b      	mov	r3, r9
 8017400:	f7e9 f8d6 	bl	80005b0 <__aeabi_dmul>
 8017404:	a35a      	add	r3, pc, #360	; (adr r3, 8017570 <__ieee754_log+0x330>)
 8017406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801740a:	f7e8 ff1b 	bl	8000244 <__adddf3>
 801740e:	4632      	mov	r2, r6
 8017410:	463b      	mov	r3, r7
 8017412:	f7e9 f8cd 	bl	80005b0 <__aeabi_dmul>
 8017416:	a358      	add	r3, pc, #352	; (adr r3, 8017578 <__ieee754_log+0x338>)
 8017418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801741c:	4606      	mov	r6, r0
 801741e:	460f      	mov	r7, r1
 8017420:	4640      	mov	r0, r8
 8017422:	4649      	mov	r1, r9
 8017424:	f7e9 f8c4 	bl	80005b0 <__aeabi_dmul>
 8017428:	a355      	add	r3, pc, #340	; (adr r3, 8017580 <__ieee754_log+0x340>)
 801742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742e:	f7e8 ff09 	bl	8000244 <__adddf3>
 8017432:	4642      	mov	r2, r8
 8017434:	464b      	mov	r3, r9
 8017436:	f7e9 f8bb 	bl	80005b0 <__aeabi_dmul>
 801743a:	a353      	add	r3, pc, #332	; (adr r3, 8017588 <__ieee754_log+0x348>)
 801743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017440:	f7e8 ff00 	bl	8000244 <__adddf3>
 8017444:	4642      	mov	r2, r8
 8017446:	464b      	mov	r3, r9
 8017448:	f7e9 f8b2 	bl	80005b0 <__aeabi_dmul>
 801744c:	460b      	mov	r3, r1
 801744e:	4602      	mov	r2, r0
 8017450:	4639      	mov	r1, r7
 8017452:	4630      	mov	r0, r6
 8017454:	f7e8 fef6 	bl	8000244 <__adddf3>
 8017458:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801745c:	9b05      	ldr	r3, [sp, #20]
 801745e:	3551      	adds	r5, #81	; 0x51
 8017460:	431d      	orrs	r5, r3
 8017462:	2d00      	cmp	r5, #0
 8017464:	4680      	mov	r8, r0
 8017466:	4689      	mov	r9, r1
 8017468:	dd48      	ble.n	80174fc <__ieee754_log+0x2bc>
 801746a:	2200      	movs	r2, #0
 801746c:	4b4c      	ldr	r3, [pc, #304]	; (80175a0 <__ieee754_log+0x360>)
 801746e:	4650      	mov	r0, sl
 8017470:	4659      	mov	r1, fp
 8017472:	f7e9 f89d 	bl	80005b0 <__aeabi_dmul>
 8017476:	4652      	mov	r2, sl
 8017478:	465b      	mov	r3, fp
 801747a:	f7e9 f899 	bl	80005b0 <__aeabi_dmul>
 801747e:	4602      	mov	r2, r0
 8017480:	460b      	mov	r3, r1
 8017482:	4606      	mov	r6, r0
 8017484:	460f      	mov	r7, r1
 8017486:	4640      	mov	r0, r8
 8017488:	4649      	mov	r1, r9
 801748a:	f7e8 fedb 	bl	8000244 <__adddf3>
 801748e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017492:	f7e9 f88d 	bl	80005b0 <__aeabi_dmul>
 8017496:	4680      	mov	r8, r0
 8017498:	4689      	mov	r9, r1
 801749a:	b964      	cbnz	r4, 80174b6 <__ieee754_log+0x276>
 801749c:	4602      	mov	r2, r0
 801749e:	460b      	mov	r3, r1
 80174a0:	4630      	mov	r0, r6
 80174a2:	4639      	mov	r1, r7
 80174a4:	f7e8 fecc 	bl	8000240 <__aeabi_dsub>
 80174a8:	4602      	mov	r2, r0
 80174aa:	460b      	mov	r3, r1
 80174ac:	4650      	mov	r0, sl
 80174ae:	4659      	mov	r1, fp
 80174b0:	f7e8 fec6 	bl	8000240 <__aeabi_dsub>
 80174b4:	e6d7      	b.n	8017266 <__ieee754_log+0x26>
 80174b6:	a322      	add	r3, pc, #136	; (adr r3, 8017540 <__ieee754_log+0x300>)
 80174b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80174c0:	f7e9 f876 	bl	80005b0 <__aeabi_dmul>
 80174c4:	a320      	add	r3, pc, #128	; (adr r3, 8017548 <__ieee754_log+0x308>)
 80174c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ca:	4604      	mov	r4, r0
 80174cc:	460d      	mov	r5, r1
 80174ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80174d2:	f7e9 f86d 	bl	80005b0 <__aeabi_dmul>
 80174d6:	4642      	mov	r2, r8
 80174d8:	464b      	mov	r3, r9
 80174da:	f7e8 feb3 	bl	8000244 <__adddf3>
 80174de:	4602      	mov	r2, r0
 80174e0:	460b      	mov	r3, r1
 80174e2:	4630      	mov	r0, r6
 80174e4:	4639      	mov	r1, r7
 80174e6:	f7e8 feab 	bl	8000240 <__aeabi_dsub>
 80174ea:	4652      	mov	r2, sl
 80174ec:	465b      	mov	r3, fp
 80174ee:	f7e8 fea7 	bl	8000240 <__aeabi_dsub>
 80174f2:	4602      	mov	r2, r0
 80174f4:	460b      	mov	r3, r1
 80174f6:	4620      	mov	r0, r4
 80174f8:	4629      	mov	r1, r5
 80174fa:	e7d9      	b.n	80174b0 <__ieee754_log+0x270>
 80174fc:	4602      	mov	r2, r0
 80174fe:	460b      	mov	r3, r1
 8017500:	4650      	mov	r0, sl
 8017502:	4659      	mov	r1, fp
 8017504:	f7e8 fe9c 	bl	8000240 <__aeabi_dsub>
 8017508:	e9dd 2300 	ldrd	r2, r3, [sp]
 801750c:	f7e9 f850 	bl	80005b0 <__aeabi_dmul>
 8017510:	4606      	mov	r6, r0
 8017512:	460f      	mov	r7, r1
 8017514:	2c00      	cmp	r4, #0
 8017516:	f43f af23 	beq.w	8017360 <__ieee754_log+0x120>
 801751a:	a309      	add	r3, pc, #36	; (adr r3, 8017540 <__ieee754_log+0x300>)
 801751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017524:	f7e9 f844 	bl	80005b0 <__aeabi_dmul>
 8017528:	a307      	add	r3, pc, #28	; (adr r3, 8017548 <__ieee754_log+0x308>)
 801752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801752e:	4604      	mov	r4, r0
 8017530:	460d      	mov	r5, r1
 8017532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017536:	e727      	b.n	8017388 <__ieee754_log+0x148>
 8017538:	2000      	movs	r0, #0
 801753a:	2100      	movs	r1, #0
 801753c:	e693      	b.n	8017266 <__ieee754_log+0x26>
 801753e:	bf00      	nop
 8017540:	fee00000 	.word	0xfee00000
 8017544:	3fe62e42 	.word	0x3fe62e42
 8017548:	35793c76 	.word	0x35793c76
 801754c:	3dea39ef 	.word	0x3dea39ef
 8017550:	55555555 	.word	0x55555555
 8017554:	3fd55555 	.word	0x3fd55555
 8017558:	df3e5244 	.word	0xdf3e5244
 801755c:	3fc2f112 	.word	0x3fc2f112
 8017560:	96cb03de 	.word	0x96cb03de
 8017564:	3fc74664 	.word	0x3fc74664
 8017568:	94229359 	.word	0x94229359
 801756c:	3fd24924 	.word	0x3fd24924
 8017570:	55555593 	.word	0x55555593
 8017574:	3fe55555 	.word	0x3fe55555
 8017578:	d078c69f 	.word	0xd078c69f
 801757c:	3fc39a09 	.word	0x3fc39a09
 8017580:	1d8e78af 	.word	0x1d8e78af
 8017584:	3fcc71c5 	.word	0x3fcc71c5
 8017588:	9997fa04 	.word	0x9997fa04
 801758c:	3fd99999 	.word	0x3fd99999
 8017590:	c3500000 	.word	0xc3500000
 8017594:	43500000 	.word	0x43500000
 8017598:	7fefffff 	.word	0x7fefffff
 801759c:	3ff00000 	.word	0x3ff00000
 80175a0:	3fe00000 	.word	0x3fe00000

080175a4 <__errno>:
 80175a4:	4b01      	ldr	r3, [pc, #4]	; (80175ac <__errno+0x8>)
 80175a6:	6818      	ldr	r0, [r3, #0]
 80175a8:	4770      	bx	lr
 80175aa:	bf00      	nop
 80175ac:	20000124 	.word	0x20000124

080175b0 <_close>:
 80175b0:	2258      	movs	r2, #88	; 0x58
 80175b2:	4b02      	ldr	r3, [pc, #8]	; (80175bc <_close+0xc>)
 80175b4:	f04f 30ff 	mov.w	r0, #4294967295
 80175b8:	601a      	str	r2, [r3, #0]
 80175ba:	4770      	bx	lr
 80175bc:	2000a71c 	.word	0x2000a71c

080175c0 <_fstat>:
 80175c0:	2258      	movs	r2, #88	; 0x58
 80175c2:	4b02      	ldr	r3, [pc, #8]	; (80175cc <_fstat+0xc>)
 80175c4:	f04f 30ff 	mov.w	r0, #4294967295
 80175c8:	601a      	str	r2, [r3, #0]
 80175ca:	4770      	bx	lr
 80175cc:	2000a71c 	.word	0x2000a71c

080175d0 <_getpid>:
 80175d0:	2258      	movs	r2, #88	; 0x58
 80175d2:	4b02      	ldr	r3, [pc, #8]	; (80175dc <_getpid+0xc>)
 80175d4:	f04f 30ff 	mov.w	r0, #4294967295
 80175d8:	601a      	str	r2, [r3, #0]
 80175da:	4770      	bx	lr
 80175dc:	2000a71c 	.word	0x2000a71c

080175e0 <_isatty>:
 80175e0:	2258      	movs	r2, #88	; 0x58
 80175e2:	4b02      	ldr	r3, [pc, #8]	; (80175ec <_isatty+0xc>)
 80175e4:	2000      	movs	r0, #0
 80175e6:	601a      	str	r2, [r3, #0]
 80175e8:	4770      	bx	lr
 80175ea:	bf00      	nop
 80175ec:	2000a71c 	.word	0x2000a71c

080175f0 <_kill>:
 80175f0:	2258      	movs	r2, #88	; 0x58
 80175f2:	4b02      	ldr	r3, [pc, #8]	; (80175fc <_kill+0xc>)
 80175f4:	f04f 30ff 	mov.w	r0, #4294967295
 80175f8:	601a      	str	r2, [r3, #0]
 80175fa:	4770      	bx	lr
 80175fc:	2000a71c 	.word	0x2000a71c

08017600 <_lseek>:
 8017600:	2258      	movs	r2, #88	; 0x58
 8017602:	4b02      	ldr	r3, [pc, #8]	; (801760c <_lseek+0xc>)
 8017604:	f04f 30ff 	mov.w	r0, #4294967295
 8017608:	601a      	str	r2, [r3, #0]
 801760a:	4770      	bx	lr
 801760c:	2000a71c 	.word	0x2000a71c

08017610 <_read>:
 8017610:	2258      	movs	r2, #88	; 0x58
 8017612:	4b02      	ldr	r3, [pc, #8]	; (801761c <_read+0xc>)
 8017614:	f04f 30ff 	mov.w	r0, #4294967295
 8017618:	601a      	str	r2, [r3, #0]
 801761a:	4770      	bx	lr
 801761c:	2000a71c 	.word	0x2000a71c

08017620 <_sbrk>:
 8017620:	4b04      	ldr	r3, [pc, #16]	; (8017634 <_sbrk+0x14>)
 8017622:	4602      	mov	r2, r0
 8017624:	6819      	ldr	r1, [r3, #0]
 8017626:	b909      	cbnz	r1, 801762c <_sbrk+0xc>
 8017628:	4903      	ldr	r1, [pc, #12]	; (8017638 <_sbrk+0x18>)
 801762a:	6019      	str	r1, [r3, #0]
 801762c:	6818      	ldr	r0, [r3, #0]
 801762e:	4402      	add	r2, r0
 8017630:	601a      	str	r2, [r3, #0]
 8017632:	4770      	bx	lr
 8017634:	20003c70 	.word	0x20003c70
 8017638:	2000a730 	.word	0x2000a730

0801763c <_write>:
 801763c:	2258      	movs	r2, #88	; 0x58
 801763e:	4b02      	ldr	r3, [pc, #8]	; (8017648 <_write+0xc>)
 8017640:	f04f 30ff 	mov.w	r0, #4294967295
 8017644:	601a      	str	r2, [r3, #0]
 8017646:	4770      	bx	lr
 8017648:	2000a71c 	.word	0x2000a71c

0801764c <_exit>:
 801764c:	e7fe      	b.n	801764c <_exit>
	...

08017650 <_init>:
 8017650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017652:	bf00      	nop
 8017654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017656:	bc08      	pop	{r3}
 8017658:	469e      	mov	lr, r3
 801765a:	4770      	bx	lr

0801765c <_fini>:
 801765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801765e:	bf00      	nop
 8017660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017662:	bc08      	pop	{r3}
 8017664:	469e      	mov	lr, r3
 8017666:	4770      	bx	lr
